//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18449
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Microsoft.Protocols.TestSuites.MS_OXCTABL {
    using System;
    using System.Collections.Generic;
    using System.Text;
    using System.Reflection;
    using Microsoft.SpecExplorer.Runtime.Testing;
    using Microsoft.Protocols.TestTools;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Spec Explorer", "3.5.3130.0")]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite : PtfTestClassBase {
        
        public S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite() {
            this.SetSwitch("ProceedControlTimeout", "100");
            this.SetSwitch("QuiescenceTimeout", "2000000");
        }
        
        #region Expect Delegates
        public delegate void CheckMAPIHTTPTransportSupportedDelegate1(bool isSupported);
        
        public delegate void CheckRequirementEnabledDelegate1(bool enabled);
        
        public delegate void RopSeekRowFractionalResponseDelegate1(bool zeroNumerator, bool smallDenominator, Microsoft.Protocols.TestSuites.MS_OXCTABL.CursorPosition cursorPosition);
        
        public delegate void RopQueryRowsResponseDelegate1(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger);
        #endregion
        
        #region Event Metadata
        static System.Reflection.MethodBase CheckMAPIHTTPTransportSupportedInfo = TestManagerHelpers.GetMethodInfo(typeof(Microsoft.Protocols.TestSuites.MS_OXCTABL.IMS_OXCTABLAdapter), "CheckMAPIHTTPTransportSupported", typeof(bool).MakeByRefType());
        
        static System.Reflection.MethodBase CheckRequirementEnabledInfo = TestManagerHelpers.GetMethodInfo(typeof(Microsoft.Protocols.TestSuites.MS_OXCTABL.IMS_OXCTABLAdapter), "CheckRequirementEnabled", typeof(int), typeof(bool).MakeByRefType());
        
        static System.Reflection.EventInfo RopQueryRowsResponseInfo = TestManagerHelpers.GetEventInfo(typeof(Microsoft.Protocols.TestSuites.MS_OXCTABL.IMS_OXCTABLAdapter), "RopQueryRowsResponse");
        
        static System.Reflection.EventInfo RopSeekRowFractionalResponseInfo = TestManagerHelpers.GetEventInfo(typeof(Microsoft.Protocols.TestSuites.MS_OXCTABL.IMS_OXCTABLAdapter), "RopSeekRowFractionalResponse");
        #endregion
        
        #region Adapter Instances
        private Microsoft.Protocols.TestSuites.MS_OXCTABL.IMS_OXCTABLAdapter IMS_OXCTABLAdapterInstance;
        #endregion
        
        #region Class Initialization and Cleanup
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void ClassInitialize(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext context) {
            PtfTestClassBase.Initialize(context);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void ClassCleanup() {
            PtfTestClassBase.Cleanup();
        }
        #endregion
        
        #region Test Initialization and Cleanup
        protected override void TestInitialize() {
            this.InitializeTestManager();
            this.IMS_OXCTABLAdapterInstance = ((Microsoft.Protocols.TestSuites.MS_OXCTABL.IMS_OXCTABLAdapter)(this.Manager.GetAdapter(typeof(Microsoft.Protocols.TestSuites.MS_OXCTABL.IMS_OXCTABLAdapter))));
            this.Manager.Subscribe(RopQueryRowsResponseInfo, this.IMS_OXCTABLAdapterInstance);
            this.Manager.Subscribe(RopSeekRowFractionalResponseInfo, this.IMS_OXCTABLAdapterInstance);
        }
        
        protected override void TestCleanup() {
            base.TestCleanup();
            this.CleanupTestManager();
        }
        #endregion
        
        #region Test Starting in S0
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite() {
            this.Manager.BeginTest("MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite");
            this.Manager.Comment("reaching state \'S0\'");
            bool temp0;
            this.Manager.Comment("executing step \'call CheckMAPIHTTPTransportSupported(out _)\'");
            this.IMS_OXCTABLAdapterInstance.CheckMAPIHTTPTransportSupported(out temp0);
            this.Manager.AddReturn(CheckMAPIHTTPTransportSupportedInfo, null, temp0);
            this.Manager.Comment("reaching state \'S1\'");
            int temp58 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteCheckMAPIHTTPTransportSupportedChecker)), new ExpectedReturn(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteCheckMAPIHTTPTransportSupportedChecker1)));
            if ((temp58 == 0)) {
                this.Manager.Comment("reaching state \'S10\'");
                goto label16;
            }
            if ((temp58 == 1)) {
                this.Manager.Comment("reaching state \'S11\'");
                bool temp1;
                this.Manager.Comment("executing step \'call CheckRequirementEnabled(910,out _)\'");
                this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(910, out temp1);
                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp1);
                this.Manager.Comment("reaching state \'S20\'");
                int temp57 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteCheckRequirementEnabledChecker)), new ExpectedReturn(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteCheckRequirementEnabledChecker31)));
                if ((temp57 == 0)) {
                    this.Manager.Comment("reaching state \'S25\'");
                    this.Manager.Comment("executing step \'call InitializeTable(CONTENT_TABLE)\'");
                    this.IMS_OXCTABLAdapterInstance.InitializeTable(((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableType)(0)));
                    this.Manager.Comment("reaching state \'S34\'");
                    this.Manager.Comment("checking step \'return InitializeTable\'");
                    this.Manager.Comment("reaching state \'S39\'");
                    Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp2;
                    this.Manager.Comment("executing step \'call RopSetColumns(1,False,False,False)\'");
                    temp2 = this.IMS_OXCTABLAdapterInstance.RopSetColumns(1u, false, false, false);
                    this.Manager.Checkpoint("MS-OXCTABL_R831");
                    this.Manager.Checkpoint("MS-OXCTABL_R45");
                    this.Manager.Comment("reaching state \'S44\'");
                    this.Manager.Comment("checking step \'return RopSetColumns/success\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp2, "return of RopSetColumns, state S44");
                    this.Manager.Comment("reaching state \'S49\'");
                    bool temp3;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(768,out _)\'");
                    this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(768, out temp3);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp3);
                    this.Manager.Comment("reaching state \'S54\'");
                    int temp56 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteCheckRequirementEnabledChecker1)), new ExpectedReturn(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteCheckRequirementEnabledChecker16)));
                    if ((temp56 == 0)) {
                        this.Manager.Comment("reaching state \'S59\'");
                        bool temp4;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(866,out _)\'");
                        this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(866, out temp4);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp4);
                        this.Manager.Comment("reaching state \'S67\'");
                        int temp29 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteCheckRequirementEnabledChecker2)), new ExpectedReturn(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteCheckRequirementEnabledChecker9)));
                        if ((temp29 == 0)) {
                            this.Manager.Comment("reaching state \'S75\'");
                            bool temp5;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(867,out _)\'");
                            this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(867, out temp5);
                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp5);
                            this.Manager.Comment("reaching state \'S91\'");
                            int temp16 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteCheckRequirementEnabledChecker3)), new ExpectedReturn(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteCheckRequirementEnabledChecker6)));
                            if ((temp16 == 0)) {
                                this.Manager.Comment("reaching state \'S107\'");
                                Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp6;
                                this.Manager.Comment("executing step \'call RopQueryRows(Advance,True)\'");
                                temp6 = this.IMS_OXCTABLAdapterInstance.RopQueryRows(((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), true);
                                this.Manager.Checkpoint("MS-OXCTABL_R837");
                                this.Manager.Comment("reaching state \'S135\'");
                                this.Manager.Comment("checking step \'return RopQueryRows/success\'");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp6, "return of RopQueryRows, state S135");
                                this.Manager.Comment("reaching state \'S163\'");
                                bool temp7;
                                this.Manager.Comment("executing step \'call CheckRequirementEnabled(610,out _)\'");
                                this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(610, out temp7);
                                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp7);
                                this.Manager.Comment("reaching state \'S191\'");
                                int temp10 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteCheckRequirementEnabledChecker4)), new ExpectedReturn(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteCheckRequirementEnabledChecker5)));
                                if ((temp10 == 0)) {
                                    this.Manager.Comment("reaching state \'S215\'");
                                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteRopQueryRowsResponseChecker))) != -1)) {
                                        this.Manager.Comment("reaching state \'S263\'");
                                        Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp8;
                                        this.Manager.Comment("executing step \'call RopSeekRowFractional(False,True)\'");
                                        temp8 = this.IMS_OXCTABLAdapterInstance.RopSeekRowFractional(false, true);
                                        this.Manager.Checkpoint("MS-OXCTABL_R855");
                                        this.Manager.Checkpoint("MS-OXCTABL_R910");
                                        this.Manager.Comment("reaching state \'S311\'");
                                        this.Manager.Comment("checking step \'return RopSeekRowFractional/success\'");
                                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp8, "return of RopSeekRowFractional, state S311");
                                        this.Manager.Comment("reaching state \'S359\'");
                                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.RopSeekRowFractionalResponseInfo, null, new RopSeekRowFractionalResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteRopSeekRowFractionalResponseChecker))) != -1)) {
                                            S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteS407();
                                        }
                                        else {
                                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.RopSeekRowFractionalResponseInfo, null, new RopSeekRowFractionalResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteRopSeekRowFractionalResponseChecker)));
                                        }
                                    }
                                    else {
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteRopQueryRowsResponseChecker)));
                                    }
                                    goto label0;
                                }
                                if ((temp10 == 1)) {
                                    this.Manager.Comment("reaching state \'S216\'");
                                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteRopQueryRowsResponseChecker1))) != -1)) {
                                        this.Manager.Comment("reaching state \'S264\'");
                                        Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp9;
                                        this.Manager.Comment("executing step \'call RopSeekRowFractional(False,True)\'");
                                        temp9 = this.IMS_OXCTABLAdapterInstance.RopSeekRowFractional(false, true);
                                        this.Manager.Checkpoint("MS-OXCTABL_R855");
                                        this.Manager.Checkpoint("MS-OXCTABL_R910");
                                        this.Manager.Comment("reaching state \'S312\'");
                                        this.Manager.Comment("checking step \'return RopSeekRowFractional/success\'");
                                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp9, "return of RopSeekRowFractional, state S312");
                                        this.Manager.Comment("reaching state \'S360\'");
                                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.RopSeekRowFractionalResponseInfo, null, new RopSeekRowFractionalResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteRopSeekRowFractionalResponseChecker1))) != -1)) {
                                            S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteS408();
                                        }
                                        else {
                                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.RopSeekRowFractionalResponseInfo, null, new RopSeekRowFractionalResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteRopSeekRowFractionalResponseChecker1)));
                                        }
                                    }
                                    else {
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteRopQueryRowsResponseChecker1)));
                                    }
                                    goto label0;
                                }
                                throw new InvalidOperationException("never reached");
                            label0:
;
                                goto label2;
                            }
                            if ((temp16 == 1)) {
                                this.Manager.Comment("reaching state \'S108\'");
                                Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp11;
                                this.Manager.Comment("executing step \'call RopQueryRows(Advance,True)\'");
                                temp11 = this.IMS_OXCTABLAdapterInstance.RopQueryRows(((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), true);
                                this.Manager.Checkpoint("MS-OXCTABL_R837");
                                this.Manager.Comment("reaching state \'S136\'");
                                this.Manager.Comment("checking step \'return RopQueryRows/success\'");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp11, "return of RopQueryRows, state S136");
                                this.Manager.Comment("reaching state \'S164\'");
                                bool temp12;
                                this.Manager.Comment("executing step \'call CheckRequirementEnabled(610,out _)\'");
                                this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(610, out temp12);
                                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp12);
                                this.Manager.Comment("reaching state \'S192\'");
                                int temp15 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteCheckRequirementEnabledChecker7)), new ExpectedReturn(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteCheckRequirementEnabledChecker8)));
                                if ((temp15 == 0)) {
                                    this.Manager.Comment("reaching state \'S217\'");
                                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteRopQueryRowsResponseChecker2))) != -1)) {
                                        this.Manager.Comment("reaching state \'S265\'");
                                        Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp13;
                                        this.Manager.Comment("executing step \'call RopSeekRowFractional(False,True)\'");
                                        temp13 = this.IMS_OXCTABLAdapterInstance.RopSeekRowFractional(false, true);
                                        this.Manager.Checkpoint("MS-OXCTABL_R855");
                                        this.Manager.Checkpoint("MS-OXCTABL_R910");
                                        this.Manager.Comment("reaching state \'S313\'");
                                        this.Manager.Comment("checking step \'return RopSeekRowFractional/success\'");
                                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp13, "return of RopSeekRowFractional, state S313");
                                        this.Manager.Comment("reaching state \'S361\'");
                                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.RopSeekRowFractionalResponseInfo, null, new RopSeekRowFractionalResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteRopSeekRowFractionalResponseChecker2))) != -1)) {
                                            S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteS409();
                                        }
                                        else {
                                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.RopSeekRowFractionalResponseInfo, null, new RopSeekRowFractionalResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteRopSeekRowFractionalResponseChecker2)));
                                        }
                                    }
                                    else {
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteRopQueryRowsResponseChecker2)));
                                    }
                                    goto label1;
                                }
                                if ((temp15 == 1)) {
                                    this.Manager.Comment("reaching state \'S218\'");
                                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteRopQueryRowsResponseChecker3))) != -1)) {
                                        this.Manager.Comment("reaching state \'S266\'");
                                        Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp14;
                                        this.Manager.Comment("executing step \'call RopSeekRowFractional(False,True)\'");
                                        temp14 = this.IMS_OXCTABLAdapterInstance.RopSeekRowFractional(false, true);
                                        this.Manager.Checkpoint("MS-OXCTABL_R855");
                                        this.Manager.Checkpoint("MS-OXCTABL_R910");
                                        this.Manager.Comment("reaching state \'S314\'");
                                        this.Manager.Comment("checking step \'return RopSeekRowFractional/success\'");
                                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp14, "return of RopSeekRowFractional, state S314");
                                        this.Manager.Comment("reaching state \'S362\'");
                                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.RopSeekRowFractionalResponseInfo, null, new RopSeekRowFractionalResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteRopSeekRowFractionalResponseChecker3))) != -1)) {
                                            S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteS410();
                                        }
                                        else {
                                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.RopSeekRowFractionalResponseInfo, null, new RopSeekRowFractionalResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteRopSeekRowFractionalResponseChecker3)));
                                        }
                                    }
                                    else {
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteRopQueryRowsResponseChecker3)));
                                    }
                                    goto label1;
                                }
                                throw new InvalidOperationException("never reached");
                            label1:
;
                                goto label2;
                            }
                            throw new InvalidOperationException("never reached");
                        label2:
;
                            goto label6;
                        }
                        if ((temp29 == 1)) {
                            this.Manager.Comment("reaching state \'S76\'");
                            bool temp17;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(867,out _)\'");
                            this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(867, out temp17);
                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp17);
                            this.Manager.Comment("reaching state \'S92\'");
                            int temp28 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteCheckRequirementEnabledChecker10)), new ExpectedReturn(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteCheckRequirementEnabledChecker13)));
                            if ((temp28 == 0)) {
                                this.Manager.Comment("reaching state \'S109\'");
                                Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp18;
                                this.Manager.Comment("executing step \'call RopQueryRows(Advance,True)\'");
                                temp18 = this.IMS_OXCTABLAdapterInstance.RopQueryRows(((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), true);
                                this.Manager.Checkpoint("MS-OXCTABL_R837");
                                this.Manager.Comment("reaching state \'S137\'");
                                this.Manager.Comment("checking step \'return RopQueryRows/success\'");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp18, "return of RopQueryRows, state S137");
                                this.Manager.Comment("reaching state \'S165\'");
                                bool temp19;
                                this.Manager.Comment("executing step \'call CheckRequirementEnabled(610,out _)\'");
                                this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(610, out temp19);
                                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp19);
                                this.Manager.Comment("reaching state \'S193\'");
                                int temp22 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteCheckRequirementEnabledChecker11)), new ExpectedReturn(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteCheckRequirementEnabledChecker12)));
                                if ((temp22 == 0)) {
                                    this.Manager.Comment("reaching state \'S219\'");
                                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteRopQueryRowsResponseChecker4))) != -1)) {
                                        this.Manager.Comment("reaching state \'S267\'");
                                        Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp20;
                                        this.Manager.Comment("executing step \'call RopSeekRowFractional(False,True)\'");
                                        temp20 = this.IMS_OXCTABLAdapterInstance.RopSeekRowFractional(false, true);
                                        this.Manager.Checkpoint("MS-OXCTABL_R855");
                                        this.Manager.Checkpoint("MS-OXCTABL_R910");
                                        this.Manager.Comment("reaching state \'S315\'");
                                        this.Manager.Comment("checking step \'return RopSeekRowFractional/success\'");
                                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp20, "return of RopSeekRowFractional, state S315");
                                        this.Manager.Comment("reaching state \'S363\'");
                                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.RopSeekRowFractionalResponseInfo, null, new RopSeekRowFractionalResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteRopSeekRowFractionalResponseChecker4))) != -1)) {
                                            S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteS411();
                                        }
                                        else {
                                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.RopSeekRowFractionalResponseInfo, null, new RopSeekRowFractionalResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteRopSeekRowFractionalResponseChecker4)));
                                        }
                                    }
                                    else {
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteRopQueryRowsResponseChecker4)));
                                    }
                                    goto label3;
                                }
                                if ((temp22 == 1)) {
                                    this.Manager.Comment("reaching state \'S220\'");
                                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteRopQueryRowsResponseChecker5))) != -1)) {
                                        this.Manager.Comment("reaching state \'S268\'");
                                        Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp21;
                                        this.Manager.Comment("executing step \'call RopSeekRowFractional(False,True)\'");
                                        temp21 = this.IMS_OXCTABLAdapterInstance.RopSeekRowFractional(false, true);
                                        this.Manager.Checkpoint("MS-OXCTABL_R855");
                                        this.Manager.Checkpoint("MS-OXCTABL_R910");
                                        this.Manager.Comment("reaching state \'S316\'");
                                        this.Manager.Comment("checking step \'return RopSeekRowFractional/success\'");
                                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp21, "return of RopSeekRowFractional, state S316");
                                        this.Manager.Comment("reaching state \'S364\'");
                                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.RopSeekRowFractionalResponseInfo, null, new RopSeekRowFractionalResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteRopSeekRowFractionalResponseChecker5))) != -1)) {
                                            S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteS412();
                                        }
                                        else {
                                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.RopSeekRowFractionalResponseInfo, null, new RopSeekRowFractionalResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteRopSeekRowFractionalResponseChecker5)));
                                        }
                                    }
                                    else {
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteRopQueryRowsResponseChecker5)));
                                    }
                                    goto label3;
                                }
                                throw new InvalidOperationException("never reached");
                            label3:
;
                                goto label5;
                            }
                            if ((temp28 == 1)) {
                                this.Manager.Comment("reaching state \'S110\'");
                                Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp23;
                                this.Manager.Comment("executing step \'call RopQueryRows(Advance,True)\'");
                                temp23 = this.IMS_OXCTABLAdapterInstance.RopQueryRows(((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), true);
                                this.Manager.Checkpoint("MS-OXCTABL_R837");
                                this.Manager.Comment("reaching state \'S138\'");
                                this.Manager.Comment("checking step \'return RopQueryRows/success\'");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp23, "return of RopQueryRows, state S138");
                                this.Manager.Comment("reaching state \'S166\'");
                                bool temp24;
                                this.Manager.Comment("executing step \'call CheckRequirementEnabled(610,out _)\'");
                                this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(610, out temp24);
                                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp24);
                                this.Manager.Comment("reaching state \'S194\'");
                                int temp27 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteCheckRequirementEnabledChecker14)), new ExpectedReturn(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteCheckRequirementEnabledChecker15)));
                                if ((temp27 == 0)) {
                                    this.Manager.Comment("reaching state \'S221\'");
                                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteRopQueryRowsResponseChecker6))) != -1)) {
                                        this.Manager.Comment("reaching state \'S269\'");
                                        Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp25;
                                        this.Manager.Comment("executing step \'call RopSeekRowFractional(False,True)\'");
                                        temp25 = this.IMS_OXCTABLAdapterInstance.RopSeekRowFractional(false, true);
                                        this.Manager.Checkpoint("MS-OXCTABL_R855");
                                        this.Manager.Checkpoint("MS-OXCTABL_R910");
                                        this.Manager.Comment("reaching state \'S317\'");
                                        this.Manager.Comment("checking step \'return RopSeekRowFractional/success\'");
                                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp25, "return of RopSeekRowFractional, state S317");
                                        this.Manager.Comment("reaching state \'S365\'");
                                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.RopSeekRowFractionalResponseInfo, null, new RopSeekRowFractionalResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteRopSeekRowFractionalResponseChecker6))) != -1)) {
                                            S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteS413();
                                        }
                                        else {
                                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.RopSeekRowFractionalResponseInfo, null, new RopSeekRowFractionalResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteRopSeekRowFractionalResponseChecker6)));
                                        }
                                    }
                                    else {
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteRopQueryRowsResponseChecker6)));
                                    }
                                    goto label4;
                                }
                                if ((temp27 == 1)) {
                                    this.Manager.Comment("reaching state \'S222\'");
                                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteRopQueryRowsResponseChecker7))) != -1)) {
                                        this.Manager.Comment("reaching state \'S270\'");
                                        Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp26;
                                        this.Manager.Comment("executing step \'call RopSeekRowFractional(False,True)\'");
                                        temp26 = this.IMS_OXCTABLAdapterInstance.RopSeekRowFractional(false, true);
                                        this.Manager.Checkpoint("MS-OXCTABL_R855");
                                        this.Manager.Checkpoint("MS-OXCTABL_R910");
                                        this.Manager.Comment("reaching state \'S318\'");
                                        this.Manager.Comment("checking step \'return RopSeekRowFractional/success\'");
                                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp26, "return of RopSeekRowFractional, state S318");
                                        this.Manager.Comment("reaching state \'S366\'");
                                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.RopSeekRowFractionalResponseInfo, null, new RopSeekRowFractionalResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteRopSeekRowFractionalResponseChecker7))) != -1)) {
                                            S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteS414();
                                        }
                                        else {
                                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.RopSeekRowFractionalResponseInfo, null, new RopSeekRowFractionalResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteRopSeekRowFractionalResponseChecker7)));
                                        }
                                    }
                                    else {
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteRopQueryRowsResponseChecker7)));
                                    }
                                    goto label4;
                                }
                                throw new InvalidOperationException("never reached");
                            label4:
;
                                goto label5;
                            }
                            throw new InvalidOperationException("never reached");
                        label5:
;
                            goto label6;
                        }
                        throw new InvalidOperationException("never reached");
                    label6:
;
                        goto label14;
                    }
                    if ((temp56 == 1)) {
                        this.Manager.Comment("reaching state \'S60\'");
                        bool temp30;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(866,out _)\'");
                        this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(866, out temp30);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp30);
                        this.Manager.Comment("reaching state \'S68\'");
                        int temp55 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteCheckRequirementEnabledChecker17)), new ExpectedReturn(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteCheckRequirementEnabledChecker24)));
                        if ((temp55 == 0)) {
                            this.Manager.Comment("reaching state \'S77\'");
                            bool temp31;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(867,out _)\'");
                            this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(867, out temp31);
                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp31);
                            this.Manager.Comment("reaching state \'S93\'");
                            int temp42 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteCheckRequirementEnabledChecker18)), new ExpectedReturn(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteCheckRequirementEnabledChecker21)));
                            if ((temp42 == 0)) {
                                this.Manager.Comment("reaching state \'S111\'");
                                Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp32;
                                this.Manager.Comment("executing step \'call RopQueryRows(Advance,True)\'");
                                temp32 = this.IMS_OXCTABLAdapterInstance.RopQueryRows(((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), true);
                                this.Manager.Checkpoint("MS-OXCTABL_R837");
                                this.Manager.Comment("reaching state \'S139\'");
                                this.Manager.Comment("checking step \'return RopQueryRows/success\'");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp32, "return of RopQueryRows, state S139");
                                this.Manager.Comment("reaching state \'S167\'");
                                bool temp33;
                                this.Manager.Comment("executing step \'call CheckRequirementEnabled(610,out _)\'");
                                this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(610, out temp33);
                                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp33);
                                this.Manager.Comment("reaching state \'S195\'");
                                int temp36 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteCheckRequirementEnabledChecker19)), new ExpectedReturn(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteCheckRequirementEnabledChecker20)));
                                if ((temp36 == 0)) {
                                    this.Manager.Comment("reaching state \'S223\'");
                                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteRopQueryRowsResponseChecker8))) != -1)) {
                                        this.Manager.Comment("reaching state \'S271\'");
                                        Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp34;
                                        this.Manager.Comment("executing step \'call RopSeekRowFractional(False,True)\'");
                                        temp34 = this.IMS_OXCTABLAdapterInstance.RopSeekRowFractional(false, true);
                                        this.Manager.Checkpoint("MS-OXCTABL_R855");
                                        this.Manager.Checkpoint("MS-OXCTABL_R910");
                                        this.Manager.Comment("reaching state \'S319\'");
                                        this.Manager.Comment("checking step \'return RopSeekRowFractional/success\'");
                                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp34, "return of RopSeekRowFractional, state S319");
                                        this.Manager.Comment("reaching state \'S367\'");
                                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.RopSeekRowFractionalResponseInfo, null, new RopSeekRowFractionalResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteRopSeekRowFractionalResponseChecker8))) != -1)) {
                                            S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteS415();
                                        }
                                        else {
                                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.RopSeekRowFractionalResponseInfo, null, new RopSeekRowFractionalResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteRopSeekRowFractionalResponseChecker8)));
                                        }
                                    }
                                    else {
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteRopQueryRowsResponseChecker8)));
                                    }
                                    goto label7;
                                }
                                if ((temp36 == 1)) {
                                    this.Manager.Comment("reaching state \'S224\'");
                                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteRopQueryRowsResponseChecker9))) != -1)) {
                                        this.Manager.Comment("reaching state \'S272\'");
                                        Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp35;
                                        this.Manager.Comment("executing step \'call RopSeekRowFractional(False,True)\'");
                                        temp35 = this.IMS_OXCTABLAdapterInstance.RopSeekRowFractional(false, true);
                                        this.Manager.Checkpoint("MS-OXCTABL_R855");
                                        this.Manager.Checkpoint("MS-OXCTABL_R910");
                                        this.Manager.Comment("reaching state \'S320\'");
                                        this.Manager.Comment("checking step \'return RopSeekRowFractional/success\'");
                                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp35, "return of RopSeekRowFractional, state S320");
                                        this.Manager.Comment("reaching state \'S368\'");
                                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.RopSeekRowFractionalResponseInfo, null, new RopSeekRowFractionalResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteRopSeekRowFractionalResponseChecker9))) != -1)) {
                                            S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteS416();
                                        }
                                        else {
                                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.RopSeekRowFractionalResponseInfo, null, new RopSeekRowFractionalResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteRopSeekRowFractionalResponseChecker9)));
                                        }
                                    }
                                    else {
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteRopQueryRowsResponseChecker9)));
                                    }
                                    goto label7;
                                }
                                throw new InvalidOperationException("never reached");
                            label7:
;
                                goto label9;
                            }
                            if ((temp42 == 1)) {
                                this.Manager.Comment("reaching state \'S112\'");
                                Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp37;
                                this.Manager.Comment("executing step \'call RopQueryRows(Advance,True)\'");
                                temp37 = this.IMS_OXCTABLAdapterInstance.RopQueryRows(((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), true);
                                this.Manager.Checkpoint("MS-OXCTABL_R837");
                                this.Manager.Comment("reaching state \'S140\'");
                                this.Manager.Comment("checking step \'return RopQueryRows/success\'");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp37, "return of RopQueryRows, state S140");
                                this.Manager.Comment("reaching state \'S168\'");
                                bool temp38;
                                this.Manager.Comment("executing step \'call CheckRequirementEnabled(610,out _)\'");
                                this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(610, out temp38);
                                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp38);
                                this.Manager.Comment("reaching state \'S196\'");
                                int temp41 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteCheckRequirementEnabledChecker22)), new ExpectedReturn(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteCheckRequirementEnabledChecker23)));
                                if ((temp41 == 0)) {
                                    this.Manager.Comment("reaching state \'S225\'");
                                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteRopQueryRowsResponseChecker10))) != -1)) {
                                        this.Manager.Comment("reaching state \'S273\'");
                                        Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp39;
                                        this.Manager.Comment("executing step \'call RopSeekRowFractional(False,True)\'");
                                        temp39 = this.IMS_OXCTABLAdapterInstance.RopSeekRowFractional(false, true);
                                        this.Manager.Checkpoint("MS-OXCTABL_R855");
                                        this.Manager.Checkpoint("MS-OXCTABL_R910");
                                        this.Manager.Comment("reaching state \'S321\'");
                                        this.Manager.Comment("checking step \'return RopSeekRowFractional/success\'");
                                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp39, "return of RopSeekRowFractional, state S321");
                                        this.Manager.Comment("reaching state \'S369\'");
                                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.RopSeekRowFractionalResponseInfo, null, new RopSeekRowFractionalResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteRopSeekRowFractionalResponseChecker10))) != -1)) {
                                            S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteS417();
                                        }
                                        else {
                                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.RopSeekRowFractionalResponseInfo, null, new RopSeekRowFractionalResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteRopSeekRowFractionalResponseChecker10)));
                                        }
                                    }
                                    else {
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteRopQueryRowsResponseChecker10)));
                                    }
                                    goto label8;
                                }
                                if ((temp41 == 1)) {
                                    this.Manager.Comment("reaching state \'S226\'");
                                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteRopQueryRowsResponseChecker11))) != -1)) {
                                        this.Manager.Comment("reaching state \'S274\'");
                                        Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp40;
                                        this.Manager.Comment("executing step \'call RopSeekRowFractional(False,True)\'");
                                        temp40 = this.IMS_OXCTABLAdapterInstance.RopSeekRowFractional(false, true);
                                        this.Manager.Checkpoint("MS-OXCTABL_R855");
                                        this.Manager.Checkpoint("MS-OXCTABL_R910");
                                        this.Manager.Comment("reaching state \'S322\'");
                                        this.Manager.Comment("checking step \'return RopSeekRowFractional/success\'");
                                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp40, "return of RopSeekRowFractional, state S322");
                                        this.Manager.Comment("reaching state \'S370\'");
                                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.RopSeekRowFractionalResponseInfo, null, new RopSeekRowFractionalResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteRopSeekRowFractionalResponseChecker11))) != -1)) {
                                            S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteS418();
                                        }
                                        else {
                                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.RopSeekRowFractionalResponseInfo, null, new RopSeekRowFractionalResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteRopSeekRowFractionalResponseChecker11)));
                                        }
                                    }
                                    else {
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteRopQueryRowsResponseChecker11)));
                                    }
                                    goto label8;
                                }
                                throw new InvalidOperationException("never reached");
                            label8:
;
                                goto label9;
                            }
                            throw new InvalidOperationException("never reached");
                        label9:
;
                            goto label13;
                        }
                        if ((temp55 == 1)) {
                            this.Manager.Comment("reaching state \'S78\'");
                            bool temp43;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(867,out _)\'");
                            this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(867, out temp43);
                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp43);
                            this.Manager.Comment("reaching state \'S94\'");
                            int temp54 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteCheckRequirementEnabledChecker25)), new ExpectedReturn(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteCheckRequirementEnabledChecker28)));
                            if ((temp54 == 0)) {
                                this.Manager.Comment("reaching state \'S113\'");
                                Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp44;
                                this.Manager.Comment("executing step \'call RopQueryRows(Advance,True)\'");
                                temp44 = this.IMS_OXCTABLAdapterInstance.RopQueryRows(((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), true);
                                this.Manager.Checkpoint("MS-OXCTABL_R837");
                                this.Manager.Comment("reaching state \'S141\'");
                                this.Manager.Comment("checking step \'return RopQueryRows/success\'");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp44, "return of RopQueryRows, state S141");
                                this.Manager.Comment("reaching state \'S169\'");
                                bool temp45;
                                this.Manager.Comment("executing step \'call CheckRequirementEnabled(610,out _)\'");
                                this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(610, out temp45);
                                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp45);
                                this.Manager.Comment("reaching state \'S197\'");
                                int temp48 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteCheckRequirementEnabledChecker26)), new ExpectedReturn(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteCheckRequirementEnabledChecker27)));
                                if ((temp48 == 0)) {
                                    this.Manager.Comment("reaching state \'S227\'");
                                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteRopQueryRowsResponseChecker12))) != -1)) {
                                        this.Manager.Comment("reaching state \'S275\'");
                                        Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp46;
                                        this.Manager.Comment("executing step \'call RopSeekRowFractional(False,True)\'");
                                        temp46 = this.IMS_OXCTABLAdapterInstance.RopSeekRowFractional(false, true);
                                        this.Manager.Checkpoint("MS-OXCTABL_R855");
                                        this.Manager.Checkpoint("MS-OXCTABL_R910");
                                        this.Manager.Comment("reaching state \'S323\'");
                                        this.Manager.Comment("checking step \'return RopSeekRowFractional/success\'");
                                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp46, "return of RopSeekRowFractional, state S323");
                                        this.Manager.Comment("reaching state \'S371\'");
                                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.RopSeekRowFractionalResponseInfo, null, new RopSeekRowFractionalResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteRopSeekRowFractionalResponseChecker12))) != -1)) {
                                            S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteS419();
                                        }
                                        else {
                                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.RopSeekRowFractionalResponseInfo, null, new RopSeekRowFractionalResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteRopSeekRowFractionalResponseChecker12)));
                                        }
                                    }
                                    else {
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteRopQueryRowsResponseChecker12)));
                                    }
                                    goto label10;
                                }
                                if ((temp48 == 1)) {
                                    this.Manager.Comment("reaching state \'S228\'");
                                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteRopQueryRowsResponseChecker13))) != -1)) {
                                        this.Manager.Comment("reaching state \'S276\'");
                                        Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp47;
                                        this.Manager.Comment("executing step \'call RopSeekRowFractional(False,True)\'");
                                        temp47 = this.IMS_OXCTABLAdapterInstance.RopSeekRowFractional(false, true);
                                        this.Manager.Checkpoint("MS-OXCTABL_R855");
                                        this.Manager.Checkpoint("MS-OXCTABL_R910");
                                        this.Manager.Comment("reaching state \'S324\'");
                                        this.Manager.Comment("checking step \'return RopSeekRowFractional/success\'");
                                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp47, "return of RopSeekRowFractional, state S324");
                                        this.Manager.Comment("reaching state \'S372\'");
                                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.RopSeekRowFractionalResponseInfo, null, new RopSeekRowFractionalResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteRopSeekRowFractionalResponseChecker13))) != -1)) {
                                            S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteS420();
                                        }
                                        else {
                                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.RopSeekRowFractionalResponseInfo, null, new RopSeekRowFractionalResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteRopSeekRowFractionalResponseChecker13)));
                                        }
                                    }
                                    else {
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteRopQueryRowsResponseChecker13)));
                                    }
                                    goto label10;
                                }
                                throw new InvalidOperationException("never reached");
                            label10:
;
                                goto label12;
                            }
                            if ((temp54 == 1)) {
                                this.Manager.Comment("reaching state \'S114\'");
                                Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp49;
                                this.Manager.Comment("executing step \'call RopQueryRows(Advance,True)\'");
                                temp49 = this.IMS_OXCTABLAdapterInstance.RopQueryRows(((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), true);
                                this.Manager.Checkpoint("MS-OXCTABL_R837");
                                this.Manager.Comment("reaching state \'S142\'");
                                this.Manager.Comment("checking step \'return RopQueryRows/success\'");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp49, "return of RopQueryRows, state S142");
                                this.Manager.Comment("reaching state \'S170\'");
                                bool temp50;
                                this.Manager.Comment("executing step \'call CheckRequirementEnabled(610,out _)\'");
                                this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(610, out temp50);
                                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp50);
                                this.Manager.Comment("reaching state \'S198\'");
                                int temp53 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteCheckRequirementEnabledChecker29)), new ExpectedReturn(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteCheckRequirementEnabledChecker30)));
                                if ((temp53 == 0)) {
                                    this.Manager.Comment("reaching state \'S229\'");
                                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteRopQueryRowsResponseChecker14))) != -1)) {
                                        this.Manager.Comment("reaching state \'S277\'");
                                        Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp51;
                                        this.Manager.Comment("executing step \'call RopSeekRowFractional(False,True)\'");
                                        temp51 = this.IMS_OXCTABLAdapterInstance.RopSeekRowFractional(false, true);
                                        this.Manager.Checkpoint("MS-OXCTABL_R855");
                                        this.Manager.Checkpoint("MS-OXCTABL_R910");
                                        this.Manager.Comment("reaching state \'S325\'");
                                        this.Manager.Comment("checking step \'return RopSeekRowFractional/success\'");
                                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp51, "return of RopSeekRowFractional, state S325");
                                        this.Manager.Comment("reaching state \'S373\'");
                                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.RopSeekRowFractionalResponseInfo, null, new RopSeekRowFractionalResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteRopSeekRowFractionalResponseChecker14))) != -1)) {
                                            S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteS421();
                                        }
                                        else {
                                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.RopSeekRowFractionalResponseInfo, null, new RopSeekRowFractionalResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteRopSeekRowFractionalResponseChecker14)));
                                        }
                                    }
                                    else {
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteRopQueryRowsResponseChecker14)));
                                    }
                                    goto label11;
                                }
                                if ((temp53 == 1)) {
                                    this.Manager.Comment("reaching state \'S230\'");
                                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteRopQueryRowsResponseChecker15))) != -1)) {
                                        this.Manager.Comment("reaching state \'S278\'");
                                        Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp52;
                                        this.Manager.Comment("executing step \'call RopSeekRowFractional(False,True)\'");
                                        temp52 = this.IMS_OXCTABLAdapterInstance.RopSeekRowFractional(false, true);
                                        this.Manager.Checkpoint("MS-OXCTABL_R855");
                                        this.Manager.Checkpoint("MS-OXCTABL_R910");
                                        this.Manager.Comment("reaching state \'S326\'");
                                        this.Manager.Comment("checking step \'return RopSeekRowFractional/success\'");
                                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp52, "return of RopSeekRowFractional, state S326");
                                        this.Manager.Comment("reaching state \'S374\'");
                                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.RopSeekRowFractionalResponseInfo, null, new RopSeekRowFractionalResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteRopSeekRowFractionalResponseChecker15))) != -1)) {
                                            S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteS422();
                                        }
                                        else {
                                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.RopSeekRowFractionalResponseInfo, null, new RopSeekRowFractionalResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteRopSeekRowFractionalResponseChecker15)));
                                        }
                                    }
                                    else {
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteRopQueryRowsResponseChecker15)));
                                    }
                                    goto label11;
                                }
                                throw new InvalidOperationException("never reached");
                            label11:
;
                                goto label12;
                            }
                            throw new InvalidOperationException("never reached");
                        label12:
;
                            goto label13;
                        }
                        throw new InvalidOperationException("never reached");
                    label13:
;
                        goto label14;
                    }
                    throw new InvalidOperationException("never reached");
                label14:
;
                    goto label15;
                }
                if ((temp57 == 1)) {
                    S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteS26();
                    goto label15;
                }
                throw new InvalidOperationException("never reached");
            label15:
;
                goto label16;
            }
            throw new InvalidOperationException("never reached");
        label16:
;
            this.Manager.EndTest();
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteCheckMAPIHTTPTransportSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S1");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteCheckMAPIHTTPTransportSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S1");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteCheckRequirementEnabledChecker(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S20");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteCheckRequirementEnabledChecker1(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S54");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteCheckRequirementEnabledChecker2(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S67");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteCheckRequirementEnabledChecker3(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S91");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteCheckRequirementEnabledChecker4(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S191");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteRopQueryRowsResponseChecker(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SETCOLUMNS,True,True" +
                    ",True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S215");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S215");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S215");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S215");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S215");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S215");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S215");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S215");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S215");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S215");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R472, MS-OXCTABL_R427, MS-OXCTABL_R42" +
                        "6, MS-OXCTABL_R116, MS-OXCTABL_R610");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R472");
            this.Manager.Checkpoint("MS-OXCTABL_R427");
            this.Manager.Checkpoint("MS-OXCTABL_R426");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R610");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteRopSeekRowFractionalResponseChecker(bool zeroNumerator, bool smallDenominator, Microsoft.Protocols.TestSuites.MS_OXCTABL.CursorPosition cursorPosition) {
            this.Manager.Comment("checking step \'event RopSeekRowFractionalResponse(False,True,END)\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, zeroNumerator, "zeroNumerator of RopSeekRowFractionalResponse, state S359");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, smallDenominator, "smallDenominator of RopSeekRowFractionalResponse, state S359");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.CursorPosition>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.CursorPosition)(1)), cursorPosition, "cursorPosition of RopSeekRowFractionalResponse, state S359");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R515");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R515");
        }
        
        private void S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteS407() {
            this.Manager.Comment("reaching state \'S407\'");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteCheckRequirementEnabledChecker5(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S191");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteRopQueryRowsResponseChecker1(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SETCOLUMNS,True,True" +
                    ",True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S216");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S216");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S216");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S216");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S216");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S216");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S216");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S216");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S216");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S216");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R472, MS-OXCTABL_R427, MS-OXCTABL_R42" +
                        "6, MS-OXCTABL_R116");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R472");
            this.Manager.Checkpoint("MS-OXCTABL_R427");
            this.Manager.Checkpoint("MS-OXCTABL_R426");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteRopSeekRowFractionalResponseChecker1(bool zeroNumerator, bool smallDenominator, Microsoft.Protocols.TestSuites.MS_OXCTABL.CursorPosition cursorPosition) {
            this.Manager.Comment("checking step \'event RopSeekRowFractionalResponse(False,True,END)\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, zeroNumerator, "zeroNumerator of RopSeekRowFractionalResponse, state S360");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, smallDenominator, "smallDenominator of RopSeekRowFractionalResponse, state S360");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.CursorPosition>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.CursorPosition)(1)), cursorPosition, "cursorPosition of RopSeekRowFractionalResponse, state S360");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R515");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R515");
        }
        
        private void S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteS408() {
            this.Manager.Comment("reaching state \'S408\'");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteCheckRequirementEnabledChecker6(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S91");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteCheckRequirementEnabledChecker7(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S192");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteRopQueryRowsResponseChecker2(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SETCOLUMNS,True,True" +
                    ",True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S217");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S217");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S217");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S217");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S217");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S217");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S217");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S217");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S217");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S217");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R472, MS-OXCTABL_R427, MS-OXCTABL_R42" +
                        "6, MS-OXCTABL_R116, MS-OXCTABL_R610");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R472");
            this.Manager.Checkpoint("MS-OXCTABL_R427");
            this.Manager.Checkpoint("MS-OXCTABL_R426");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R610");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteRopSeekRowFractionalResponseChecker2(bool zeroNumerator, bool smallDenominator, Microsoft.Protocols.TestSuites.MS_OXCTABL.CursorPosition cursorPosition) {
            this.Manager.Comment("checking step \'event RopSeekRowFractionalResponse(False,True,END)\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, zeroNumerator, "zeroNumerator of RopSeekRowFractionalResponse, state S361");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, smallDenominator, "smallDenominator of RopSeekRowFractionalResponse, state S361");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.CursorPosition>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.CursorPosition)(1)), cursorPosition, "cursorPosition of RopSeekRowFractionalResponse, state S361");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R515");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R515");
        }
        
        private void S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteS409() {
            this.Manager.Comment("reaching state \'S409\'");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteCheckRequirementEnabledChecker8(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S192");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteRopQueryRowsResponseChecker3(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SETCOLUMNS,True,True" +
                    ",True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S218");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S218");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S218");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S218");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S218");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S218");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S218");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S218");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S218");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S218");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R472, MS-OXCTABL_R427, MS-OXCTABL_R42" +
                        "6, MS-OXCTABL_R116");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R472");
            this.Manager.Checkpoint("MS-OXCTABL_R427");
            this.Manager.Checkpoint("MS-OXCTABL_R426");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteRopSeekRowFractionalResponseChecker3(bool zeroNumerator, bool smallDenominator, Microsoft.Protocols.TestSuites.MS_OXCTABL.CursorPosition cursorPosition) {
            this.Manager.Comment("checking step \'event RopSeekRowFractionalResponse(False,True,END)\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, zeroNumerator, "zeroNumerator of RopSeekRowFractionalResponse, state S362");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, smallDenominator, "smallDenominator of RopSeekRowFractionalResponse, state S362");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.CursorPosition>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.CursorPosition)(1)), cursorPosition, "cursorPosition of RopSeekRowFractionalResponse, state S362");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R515");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R515");
        }
        
        private void S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteS410() {
            this.Manager.Comment("reaching state \'S410\'");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteCheckRequirementEnabledChecker9(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S67");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteCheckRequirementEnabledChecker10(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S92");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteCheckRequirementEnabledChecker11(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S193");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteRopQueryRowsResponseChecker4(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SETCOLUMNS,True,True" +
                    ",True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S219");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S219");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S219");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S219");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S219");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S219");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S219");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S219");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S219");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S219");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R472, MS-OXCTABL_R427, MS-OXCTABL_R42" +
                        "6, MS-OXCTABL_R116");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R472");
            this.Manager.Checkpoint("MS-OXCTABL_R427");
            this.Manager.Checkpoint("MS-OXCTABL_R426");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteRopSeekRowFractionalResponseChecker4(bool zeroNumerator, bool smallDenominator, Microsoft.Protocols.TestSuites.MS_OXCTABL.CursorPosition cursorPosition) {
            this.Manager.Comment("checking step \'event RopSeekRowFractionalResponse(False,True,END)\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, zeroNumerator, "zeroNumerator of RopSeekRowFractionalResponse, state S363");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, smallDenominator, "smallDenominator of RopSeekRowFractionalResponse, state S363");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.CursorPosition>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.CursorPosition)(1)), cursorPosition, "cursorPosition of RopSeekRowFractionalResponse, state S363");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R515");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R515");
        }
        
        private void S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteS411() {
            this.Manager.Comment("reaching state \'S411\'");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteCheckRequirementEnabledChecker12(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S193");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteRopQueryRowsResponseChecker5(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SETCOLUMNS,True,True" +
                    ",True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S220");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S220");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S220");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S220");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S220");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S220");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S220");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S220");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S220");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S220");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R472, MS-OXCTABL_R427, MS-OXCTABL_R42" +
                        "6, MS-OXCTABL_R116, MS-OXCTABL_R610");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R472");
            this.Manager.Checkpoint("MS-OXCTABL_R427");
            this.Manager.Checkpoint("MS-OXCTABL_R426");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R610");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteRopSeekRowFractionalResponseChecker5(bool zeroNumerator, bool smallDenominator, Microsoft.Protocols.TestSuites.MS_OXCTABL.CursorPosition cursorPosition) {
            this.Manager.Comment("checking step \'event RopSeekRowFractionalResponse(False,True,END)\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, zeroNumerator, "zeroNumerator of RopSeekRowFractionalResponse, state S364");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, smallDenominator, "smallDenominator of RopSeekRowFractionalResponse, state S364");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.CursorPosition>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.CursorPosition)(1)), cursorPosition, "cursorPosition of RopSeekRowFractionalResponse, state S364");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R515");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R515");
        }
        
        private void S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteS412() {
            this.Manager.Comment("reaching state \'S412\'");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteCheckRequirementEnabledChecker13(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S92");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteCheckRequirementEnabledChecker14(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S194");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteRopQueryRowsResponseChecker6(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SETCOLUMNS,True,True" +
                    ",True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S221");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S221");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S221");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S221");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S221");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S221");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S221");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S221");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S221");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S221");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R472, MS-OXCTABL_R427, MS-OXCTABL_R42" +
                        "6, MS-OXCTABL_R116, MS-OXCTABL_R610");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R472");
            this.Manager.Checkpoint("MS-OXCTABL_R427");
            this.Manager.Checkpoint("MS-OXCTABL_R426");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R610");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteRopSeekRowFractionalResponseChecker6(bool zeroNumerator, bool smallDenominator, Microsoft.Protocols.TestSuites.MS_OXCTABL.CursorPosition cursorPosition) {
            this.Manager.Comment("checking step \'event RopSeekRowFractionalResponse(False,True,END)\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, zeroNumerator, "zeroNumerator of RopSeekRowFractionalResponse, state S365");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, smallDenominator, "smallDenominator of RopSeekRowFractionalResponse, state S365");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.CursorPosition>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.CursorPosition)(1)), cursorPosition, "cursorPosition of RopSeekRowFractionalResponse, state S365");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R515");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R515");
        }
        
        private void S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteS413() {
            this.Manager.Comment("reaching state \'S413\'");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteCheckRequirementEnabledChecker15(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S194");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteRopQueryRowsResponseChecker7(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SETCOLUMNS,True,True" +
                    ",True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S222");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S222");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S222");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S222");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S222");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S222");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S222");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S222");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S222");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S222");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R472, MS-OXCTABL_R427, MS-OXCTABL_R42" +
                        "6, MS-OXCTABL_R116");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R472");
            this.Manager.Checkpoint("MS-OXCTABL_R427");
            this.Manager.Checkpoint("MS-OXCTABL_R426");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteRopSeekRowFractionalResponseChecker7(bool zeroNumerator, bool smallDenominator, Microsoft.Protocols.TestSuites.MS_OXCTABL.CursorPosition cursorPosition) {
            this.Manager.Comment("checking step \'event RopSeekRowFractionalResponse(False,True,END)\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, zeroNumerator, "zeroNumerator of RopSeekRowFractionalResponse, state S366");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, smallDenominator, "smallDenominator of RopSeekRowFractionalResponse, state S366");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.CursorPosition>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.CursorPosition)(1)), cursorPosition, "cursorPosition of RopSeekRowFractionalResponse, state S366");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R515");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R515");
        }
        
        private void S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteS414() {
            this.Manager.Comment("reaching state \'S414\'");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteCheckRequirementEnabledChecker16(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S54");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteCheckRequirementEnabledChecker17(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S68");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteCheckRequirementEnabledChecker18(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S93");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteCheckRequirementEnabledChecker19(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S195");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteRopQueryRowsResponseChecker8(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SETCOLUMNS,True,True" +
                    ",True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S223");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S223");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S223");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S223");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S223");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S223");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S223");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S223");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S223");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S223");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R472, MS-OXCTABL_R427, MS-OXCTABL_R42" +
                        "6, MS-OXCTABL_R116, MS-OXCTABL_R610");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R472");
            this.Manager.Checkpoint("MS-OXCTABL_R427");
            this.Manager.Checkpoint("MS-OXCTABL_R426");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R610");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteRopSeekRowFractionalResponseChecker8(bool zeroNumerator, bool smallDenominator, Microsoft.Protocols.TestSuites.MS_OXCTABL.CursorPosition cursorPosition) {
            this.Manager.Comment("checking step \'event RopSeekRowFractionalResponse(False,True,END)\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, zeroNumerator, "zeroNumerator of RopSeekRowFractionalResponse, state S367");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, smallDenominator, "smallDenominator of RopSeekRowFractionalResponse, state S367");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.CursorPosition>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.CursorPosition)(1)), cursorPosition, "cursorPosition of RopSeekRowFractionalResponse, state S367");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R515");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R515");
        }
        
        private void S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteS415() {
            this.Manager.Comment("reaching state \'S415\'");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteCheckRequirementEnabledChecker20(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S195");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteRopQueryRowsResponseChecker9(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SETCOLUMNS,True,True" +
                    ",True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S224");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S224");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S224");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S224");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S224");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S224");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S224");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S224");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S224");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S224");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R472, MS-OXCTABL_R427, MS-OXCTABL_R42" +
                        "6, MS-OXCTABL_R116");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R472");
            this.Manager.Checkpoint("MS-OXCTABL_R427");
            this.Manager.Checkpoint("MS-OXCTABL_R426");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteRopSeekRowFractionalResponseChecker9(bool zeroNumerator, bool smallDenominator, Microsoft.Protocols.TestSuites.MS_OXCTABL.CursorPosition cursorPosition) {
            this.Manager.Comment("checking step \'event RopSeekRowFractionalResponse(False,True,END)\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, zeroNumerator, "zeroNumerator of RopSeekRowFractionalResponse, state S368");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, smallDenominator, "smallDenominator of RopSeekRowFractionalResponse, state S368");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.CursorPosition>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.CursorPosition)(1)), cursorPosition, "cursorPosition of RopSeekRowFractionalResponse, state S368");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R515");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R515");
        }
        
        private void S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteS416() {
            this.Manager.Comment("reaching state \'S416\'");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteCheckRequirementEnabledChecker21(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S93");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteCheckRequirementEnabledChecker22(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S196");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteRopQueryRowsResponseChecker10(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SETCOLUMNS,True,True" +
                    ",True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S225");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S225");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S225");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S225");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S225");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S225");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S225");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S225");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S225");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S225");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R472, MS-OXCTABL_R427, MS-OXCTABL_R42" +
                        "6, MS-OXCTABL_R116");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R472");
            this.Manager.Checkpoint("MS-OXCTABL_R427");
            this.Manager.Checkpoint("MS-OXCTABL_R426");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteRopSeekRowFractionalResponseChecker10(bool zeroNumerator, bool smallDenominator, Microsoft.Protocols.TestSuites.MS_OXCTABL.CursorPosition cursorPosition) {
            this.Manager.Comment("checking step \'event RopSeekRowFractionalResponse(False,True,END)\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, zeroNumerator, "zeroNumerator of RopSeekRowFractionalResponse, state S369");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, smallDenominator, "smallDenominator of RopSeekRowFractionalResponse, state S369");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.CursorPosition>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.CursorPosition)(1)), cursorPosition, "cursorPosition of RopSeekRowFractionalResponse, state S369");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R515");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R515");
        }
        
        private void S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteS417() {
            this.Manager.Comment("reaching state \'S417\'");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteCheckRequirementEnabledChecker23(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S196");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteRopQueryRowsResponseChecker11(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SETCOLUMNS,True,True" +
                    ",True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S226");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S226");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S226");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S226");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S226");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S226");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S226");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S226");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S226");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S226");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R472, MS-OXCTABL_R427, MS-OXCTABL_R42" +
                        "6, MS-OXCTABL_R116, MS-OXCTABL_R610");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R472");
            this.Manager.Checkpoint("MS-OXCTABL_R427");
            this.Manager.Checkpoint("MS-OXCTABL_R426");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R610");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteRopSeekRowFractionalResponseChecker11(bool zeroNumerator, bool smallDenominator, Microsoft.Protocols.TestSuites.MS_OXCTABL.CursorPosition cursorPosition) {
            this.Manager.Comment("checking step \'event RopSeekRowFractionalResponse(False,True,END)\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, zeroNumerator, "zeroNumerator of RopSeekRowFractionalResponse, state S370");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, smallDenominator, "smallDenominator of RopSeekRowFractionalResponse, state S370");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.CursorPosition>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.CursorPosition)(1)), cursorPosition, "cursorPosition of RopSeekRowFractionalResponse, state S370");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R515");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R515");
        }
        
        private void S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteS418() {
            this.Manager.Comment("reaching state \'S418\'");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteCheckRequirementEnabledChecker24(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S68");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteCheckRequirementEnabledChecker25(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S94");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteCheckRequirementEnabledChecker26(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S197");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteRopQueryRowsResponseChecker12(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SETCOLUMNS,True,True" +
                    ",True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S227");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S227");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S227");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S227");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S227");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S227");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S227");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S227");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S227");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S227");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R472, MS-OXCTABL_R427, MS-OXCTABL_R42" +
                        "6, MS-OXCTABL_R116");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R472");
            this.Manager.Checkpoint("MS-OXCTABL_R427");
            this.Manager.Checkpoint("MS-OXCTABL_R426");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteRopSeekRowFractionalResponseChecker12(bool zeroNumerator, bool smallDenominator, Microsoft.Protocols.TestSuites.MS_OXCTABL.CursorPosition cursorPosition) {
            this.Manager.Comment("checking step \'event RopSeekRowFractionalResponse(False,True,END)\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, zeroNumerator, "zeroNumerator of RopSeekRowFractionalResponse, state S371");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, smallDenominator, "smallDenominator of RopSeekRowFractionalResponse, state S371");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.CursorPosition>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.CursorPosition)(1)), cursorPosition, "cursorPosition of RopSeekRowFractionalResponse, state S371");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R515");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R515");
        }
        
        private void S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteS419() {
            this.Manager.Comment("reaching state \'S419\'");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteCheckRequirementEnabledChecker27(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S197");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteRopQueryRowsResponseChecker13(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SETCOLUMNS,True,True" +
                    ",True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S228");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S228");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S228");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S228");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S228");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S228");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S228");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S228");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S228");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S228");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R472, MS-OXCTABL_R427, MS-OXCTABL_R42" +
                        "6, MS-OXCTABL_R116, MS-OXCTABL_R610");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R472");
            this.Manager.Checkpoint("MS-OXCTABL_R427");
            this.Manager.Checkpoint("MS-OXCTABL_R426");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R610");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteRopSeekRowFractionalResponseChecker13(bool zeroNumerator, bool smallDenominator, Microsoft.Protocols.TestSuites.MS_OXCTABL.CursorPosition cursorPosition) {
            this.Manager.Comment("checking step \'event RopSeekRowFractionalResponse(False,True,END)\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, zeroNumerator, "zeroNumerator of RopSeekRowFractionalResponse, state S372");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, smallDenominator, "smallDenominator of RopSeekRowFractionalResponse, state S372");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.CursorPosition>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.CursorPosition)(1)), cursorPosition, "cursorPosition of RopSeekRowFractionalResponse, state S372");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R515");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R515");
        }
        
        private void S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteS420() {
            this.Manager.Comment("reaching state \'S420\'");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteCheckRequirementEnabledChecker28(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S94");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteCheckRequirementEnabledChecker29(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S198");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteRopQueryRowsResponseChecker14(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SETCOLUMNS,True,True" +
                    ",True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S229");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S229");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S229");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S229");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S229");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S229");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S229");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S229");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S229");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S229");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R472, MS-OXCTABL_R427, MS-OXCTABL_R42" +
                        "6, MS-OXCTABL_R116, MS-OXCTABL_R610");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R472");
            this.Manager.Checkpoint("MS-OXCTABL_R427");
            this.Manager.Checkpoint("MS-OXCTABL_R426");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R610");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteRopSeekRowFractionalResponseChecker14(bool zeroNumerator, bool smallDenominator, Microsoft.Protocols.TestSuites.MS_OXCTABL.CursorPosition cursorPosition) {
            this.Manager.Comment("checking step \'event RopSeekRowFractionalResponse(False,True,END)\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, zeroNumerator, "zeroNumerator of RopSeekRowFractionalResponse, state S373");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, smallDenominator, "smallDenominator of RopSeekRowFractionalResponse, state S373");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.CursorPosition>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.CursorPosition)(1)), cursorPosition, "cursorPosition of RopSeekRowFractionalResponse, state S373");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R515");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R515");
        }
        
        private void S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteS421() {
            this.Manager.Comment("reaching state \'S421\'");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteCheckRequirementEnabledChecker30(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S198");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteRopQueryRowsResponseChecker15(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SETCOLUMNS,True,True" +
                    ",True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S230");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S230");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S230");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S230");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S230");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S230");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S230");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S230");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S230");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S230");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R472, MS-OXCTABL_R427, MS-OXCTABL_R42" +
                        "6, MS-OXCTABL_R116");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R472");
            this.Manager.Checkpoint("MS-OXCTABL_R427");
            this.Manager.Checkpoint("MS-OXCTABL_R426");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteRopSeekRowFractionalResponseChecker15(bool zeroNumerator, bool smallDenominator, Microsoft.Protocols.TestSuites.MS_OXCTABL.CursorPosition cursorPosition) {
            this.Manager.Comment("checking step \'event RopSeekRowFractionalResponse(False,True,END)\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, zeroNumerator, "zeroNumerator of RopSeekRowFractionalResponse, state S374");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, smallDenominator, "smallDenominator of RopSeekRowFractionalResponse, state S374");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.CursorPosition>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.CursorPosition)(1)), cursorPosition, "cursorPosition of RopSeekRowFractionalResponse, state S374");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R515");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R515");
        }
        
        private void S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteS422() {
            this.Manager.Comment("reaching state \'S422\'");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteCheckRequirementEnabledChecker31(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S20");
        }
        
        private void S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteS26() {
            this.Manager.Comment("reaching state \'S26\'");
        }
        #endregion
        
        #region Test Starting in S2
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite1() {
            this.Manager.BeginTest("MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite1");
            this.Manager.Comment("reaching state \'S2\'");
            bool temp59;
            this.Manager.Comment("executing step \'call CheckMAPIHTTPTransportSupported(out _)\'");
            this.IMS_OXCTABLAdapterInstance.CheckMAPIHTTPTransportSupported(out temp59);
            this.Manager.AddReturn(CheckMAPIHTTPTransportSupportedInfo, null, temp59);
            this.Manager.Comment("reaching state \'S3\'");
            int temp117 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite1CheckMAPIHTTPTransportSupportedChecker)), new ExpectedReturn(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite1CheckMAPIHTTPTransportSupportedChecker1)));
            if ((temp117 == 0)) {
                this.Manager.Comment("reaching state \'S12\'");
                bool temp60;
                this.Manager.Comment("executing step \'call CheckRequirementEnabled(910,out _)\'");
                this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(910, out temp60);
                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp60);
                this.Manager.Comment("reaching state \'S21\'");
                int temp116 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite1CheckRequirementEnabledChecker)), new ExpectedReturn(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite1CheckRequirementEnabledChecker31)));
                if ((temp116 == 0)) {
                    this.Manager.Comment("reaching state \'S27\'");
                    this.Manager.Comment("executing step \'call InitializeTable(CONTENT_TABLE)\'");
                    this.IMS_OXCTABLAdapterInstance.InitializeTable(((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableType)(0)));
                    this.Manager.Comment("reaching state \'S35\'");
                    this.Manager.Comment("checking step \'return InitializeTable\'");
                    this.Manager.Comment("reaching state \'S40\'");
                    Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp61;
                    this.Manager.Comment("executing step \'call RopSetColumns(1,False,False,False)\'");
                    temp61 = this.IMS_OXCTABLAdapterInstance.RopSetColumns(1u, false, false, false);
                    this.Manager.Checkpoint("MS-OXCTABL_R831");
                    this.Manager.Checkpoint("MS-OXCTABL_R45");
                    this.Manager.Comment("reaching state \'S45\'");
                    this.Manager.Comment("checking step \'return RopSetColumns/success\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp61, "return of RopSetColumns, state S45");
                    this.Manager.Comment("reaching state \'S50\'");
                    bool temp62;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(768,out _)\'");
                    this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(768, out temp62);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp62);
                    this.Manager.Comment("reaching state \'S55\'");
                    int temp115 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite1CheckRequirementEnabledChecker1)), new ExpectedReturn(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite1CheckRequirementEnabledChecker16)));
                    if ((temp115 == 0)) {
                        this.Manager.Comment("reaching state \'S61\'");
                        bool temp63;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(866,out _)\'");
                        this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(866, out temp63);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp63);
                        this.Manager.Comment("reaching state \'S69\'");
                        int temp88 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite1CheckRequirementEnabledChecker2)), new ExpectedReturn(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite1CheckRequirementEnabledChecker9)));
                        if ((temp88 == 0)) {
                            this.Manager.Comment("reaching state \'S79\'");
                            bool temp64;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(867,out _)\'");
                            this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(867, out temp64);
                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp64);
                            this.Manager.Comment("reaching state \'S95\'");
                            int temp75 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite1CheckRequirementEnabledChecker3)), new ExpectedReturn(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite1CheckRequirementEnabledChecker6)));
                            if ((temp75 == 0)) {
                                this.Manager.Comment("reaching state \'S115\'");
                                Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp65;
                                this.Manager.Comment("executing step \'call RopQueryRows(Advance,True)\'");
                                temp65 = this.IMS_OXCTABLAdapterInstance.RopQueryRows(((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), true);
                                this.Manager.Checkpoint("MS-OXCTABL_R837");
                                this.Manager.Comment("reaching state \'S143\'");
                                this.Manager.Comment("checking step \'return RopQueryRows/success\'");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp65, "return of RopQueryRows, state S143");
                                this.Manager.Comment("reaching state \'S171\'");
                                bool temp66;
                                this.Manager.Comment("executing step \'call CheckRequirementEnabled(610,out _)\'");
                                this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(610, out temp66);
                                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp66);
                                this.Manager.Comment("reaching state \'S199\'");
                                int temp69 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite1CheckRequirementEnabledChecker4)), new ExpectedReturn(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite1CheckRequirementEnabledChecker5)));
                                if ((temp69 == 0)) {
                                    this.Manager.Comment("reaching state \'S231\'");
                                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite1RopQueryRowsResponseChecker))) != -1)) {
                                        this.Manager.Comment("reaching state \'S279\'");
                                        Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp67;
                                        this.Manager.Comment("executing step \'call RopSeekRowFractional(False,False)\'");
                                        temp67 = this.IMS_OXCTABLAdapterInstance.RopSeekRowFractional(false, false);
                                        this.Manager.Checkpoint("MS-OXCTABL_R855");
                                        this.Manager.Checkpoint("MS-OXCTABL_R910");
                                        this.Manager.Comment("reaching state \'S327\'");
                                        this.Manager.Comment("checking step \'return RopSeekRowFractional/success\'");
                                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp67, "return of RopSeekRowFractional, state S327");
                                        this.Manager.Comment("reaching state \'S375\'");
                                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.RopSeekRowFractionalResponseInfo, null, new RopSeekRowFractionalResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite1RopSeekRowFractionalResponseChecker))) != -1)) {
                                            S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteS422();
                                        }
                                        else {
                                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.RopSeekRowFractionalResponseInfo, null, new RopSeekRowFractionalResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite1RopSeekRowFractionalResponseChecker)));
                                        }
                                    }
                                    else {
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite1RopQueryRowsResponseChecker)));
                                    }
                                    goto label17;
                                }
                                if ((temp69 == 1)) {
                                    this.Manager.Comment("reaching state \'S232\'");
                                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite1RopQueryRowsResponseChecker1))) != -1)) {
                                        this.Manager.Comment("reaching state \'S280\'");
                                        Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp68;
                                        this.Manager.Comment("executing step \'call RopSeekRowFractional(False,False)\'");
                                        temp68 = this.IMS_OXCTABLAdapterInstance.RopSeekRowFractional(false, false);
                                        this.Manager.Checkpoint("MS-OXCTABL_R855");
                                        this.Manager.Checkpoint("MS-OXCTABL_R910");
                                        this.Manager.Comment("reaching state \'S328\'");
                                        this.Manager.Comment("checking step \'return RopSeekRowFractional/success\'");
                                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp68, "return of RopSeekRowFractional, state S328");
                                        this.Manager.Comment("reaching state \'S376\'");
                                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.RopSeekRowFractionalResponseInfo, null, new RopSeekRowFractionalResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite1RopSeekRowFractionalResponseChecker1))) != -1)) {
                                            S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteS421();
                                        }
                                        else {
                                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.RopSeekRowFractionalResponseInfo, null, new RopSeekRowFractionalResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite1RopSeekRowFractionalResponseChecker1)));
                                        }
                                    }
                                    else {
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite1RopQueryRowsResponseChecker1)));
                                    }
                                    goto label17;
                                }
                                throw new InvalidOperationException("never reached");
                            label17:
;
                                goto label19;
                            }
                            if ((temp75 == 1)) {
                                this.Manager.Comment("reaching state \'S116\'");
                                Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp70;
                                this.Manager.Comment("executing step \'call RopQueryRows(Advance,True)\'");
                                temp70 = this.IMS_OXCTABLAdapterInstance.RopQueryRows(((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), true);
                                this.Manager.Checkpoint("MS-OXCTABL_R837");
                                this.Manager.Comment("reaching state \'S144\'");
                                this.Manager.Comment("checking step \'return RopQueryRows/success\'");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp70, "return of RopQueryRows, state S144");
                                this.Manager.Comment("reaching state \'S172\'");
                                bool temp71;
                                this.Manager.Comment("executing step \'call CheckRequirementEnabled(610,out _)\'");
                                this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(610, out temp71);
                                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp71);
                                this.Manager.Comment("reaching state \'S200\'");
                                int temp74 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite1CheckRequirementEnabledChecker7)), new ExpectedReturn(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite1CheckRequirementEnabledChecker8)));
                                if ((temp74 == 0)) {
                                    this.Manager.Comment("reaching state \'S233\'");
                                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite1RopQueryRowsResponseChecker2))) != -1)) {
                                        this.Manager.Comment("reaching state \'S281\'");
                                        Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp72;
                                        this.Manager.Comment("executing step \'call RopSeekRowFractional(False,False)\'");
                                        temp72 = this.IMS_OXCTABLAdapterInstance.RopSeekRowFractional(false, false);
                                        this.Manager.Checkpoint("MS-OXCTABL_R855");
                                        this.Manager.Checkpoint("MS-OXCTABL_R910");
                                        this.Manager.Comment("reaching state \'S329\'");
                                        this.Manager.Comment("checking step \'return RopSeekRowFractional/success\'");
                                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp72, "return of RopSeekRowFractional, state S329");
                                        this.Manager.Comment("reaching state \'S377\'");
                                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.RopSeekRowFractionalResponseInfo, null, new RopSeekRowFractionalResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite1RopSeekRowFractionalResponseChecker2))) != -1)) {
                                            S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteS420();
                                        }
                                        else {
                                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.RopSeekRowFractionalResponseInfo, null, new RopSeekRowFractionalResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite1RopSeekRowFractionalResponseChecker2)));
                                        }
                                    }
                                    else {
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite1RopQueryRowsResponseChecker2)));
                                    }
                                    goto label18;
                                }
                                if ((temp74 == 1)) {
                                    this.Manager.Comment("reaching state \'S234\'");
                                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite1RopQueryRowsResponseChecker3))) != -1)) {
                                        this.Manager.Comment("reaching state \'S282\'");
                                        Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp73;
                                        this.Manager.Comment("executing step \'call RopSeekRowFractional(False,False)\'");
                                        temp73 = this.IMS_OXCTABLAdapterInstance.RopSeekRowFractional(false, false);
                                        this.Manager.Checkpoint("MS-OXCTABL_R855");
                                        this.Manager.Checkpoint("MS-OXCTABL_R910");
                                        this.Manager.Comment("reaching state \'S330\'");
                                        this.Manager.Comment("checking step \'return RopSeekRowFractional/success\'");
                                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp73, "return of RopSeekRowFractional, state S330");
                                        this.Manager.Comment("reaching state \'S378\'");
                                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.RopSeekRowFractionalResponseInfo, null, new RopSeekRowFractionalResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite1RopSeekRowFractionalResponseChecker3))) != -1)) {
                                            S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteS419();
                                        }
                                        else {
                                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.RopSeekRowFractionalResponseInfo, null, new RopSeekRowFractionalResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite1RopSeekRowFractionalResponseChecker3)));
                                        }
                                    }
                                    else {
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite1RopQueryRowsResponseChecker3)));
                                    }
                                    goto label18;
                                }
                                throw new InvalidOperationException("never reached");
                            label18:
;
                                goto label19;
                            }
                            throw new InvalidOperationException("never reached");
                        label19:
;
                            goto label23;
                        }
                        if ((temp88 == 1)) {
                            this.Manager.Comment("reaching state \'S80\'");
                            bool temp76;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(867,out _)\'");
                            this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(867, out temp76);
                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp76);
                            this.Manager.Comment("reaching state \'S96\'");
                            int temp87 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite1CheckRequirementEnabledChecker10)), new ExpectedReturn(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite1CheckRequirementEnabledChecker13)));
                            if ((temp87 == 0)) {
                                this.Manager.Comment("reaching state \'S117\'");
                                Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp77;
                                this.Manager.Comment("executing step \'call RopQueryRows(Advance,True)\'");
                                temp77 = this.IMS_OXCTABLAdapterInstance.RopQueryRows(((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), true);
                                this.Manager.Checkpoint("MS-OXCTABL_R837");
                                this.Manager.Comment("reaching state \'S145\'");
                                this.Manager.Comment("checking step \'return RopQueryRows/success\'");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp77, "return of RopQueryRows, state S145");
                                this.Manager.Comment("reaching state \'S173\'");
                                bool temp78;
                                this.Manager.Comment("executing step \'call CheckRequirementEnabled(610,out _)\'");
                                this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(610, out temp78);
                                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp78);
                                this.Manager.Comment("reaching state \'S201\'");
                                int temp81 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite1CheckRequirementEnabledChecker11)), new ExpectedReturn(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite1CheckRequirementEnabledChecker12)));
                                if ((temp81 == 0)) {
                                    this.Manager.Comment("reaching state \'S235\'");
                                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite1RopQueryRowsResponseChecker4))) != -1)) {
                                        this.Manager.Comment("reaching state \'S283\'");
                                        Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp79;
                                        this.Manager.Comment("executing step \'call RopSeekRowFractional(False,False)\'");
                                        temp79 = this.IMS_OXCTABLAdapterInstance.RopSeekRowFractional(false, false);
                                        this.Manager.Checkpoint("MS-OXCTABL_R855");
                                        this.Manager.Checkpoint("MS-OXCTABL_R910");
                                        this.Manager.Comment("reaching state \'S331\'");
                                        this.Manager.Comment("checking step \'return RopSeekRowFractional/success\'");
                                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp79, "return of RopSeekRowFractional, state S331");
                                        this.Manager.Comment("reaching state \'S379\'");
                                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.RopSeekRowFractionalResponseInfo, null, new RopSeekRowFractionalResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite1RopSeekRowFractionalResponseChecker4))) != -1)) {
                                            S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteS418();
                                        }
                                        else {
                                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.RopSeekRowFractionalResponseInfo, null, new RopSeekRowFractionalResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite1RopSeekRowFractionalResponseChecker4)));
                                        }
                                    }
                                    else {
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite1RopQueryRowsResponseChecker4)));
                                    }
                                    goto label20;
                                }
                                if ((temp81 == 1)) {
                                    this.Manager.Comment("reaching state \'S236\'");
                                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite1RopQueryRowsResponseChecker5))) != -1)) {
                                        this.Manager.Comment("reaching state \'S284\'");
                                        Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp80;
                                        this.Manager.Comment("executing step \'call RopSeekRowFractional(False,False)\'");
                                        temp80 = this.IMS_OXCTABLAdapterInstance.RopSeekRowFractional(false, false);
                                        this.Manager.Checkpoint("MS-OXCTABL_R855");
                                        this.Manager.Checkpoint("MS-OXCTABL_R910");
                                        this.Manager.Comment("reaching state \'S332\'");
                                        this.Manager.Comment("checking step \'return RopSeekRowFractional/success\'");
                                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp80, "return of RopSeekRowFractional, state S332");
                                        this.Manager.Comment("reaching state \'S380\'");
                                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.RopSeekRowFractionalResponseInfo, null, new RopSeekRowFractionalResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite1RopSeekRowFractionalResponseChecker5))) != -1)) {
                                            S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteS417();
                                        }
                                        else {
                                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.RopSeekRowFractionalResponseInfo, null, new RopSeekRowFractionalResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite1RopSeekRowFractionalResponseChecker5)));
                                        }
                                    }
                                    else {
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite1RopQueryRowsResponseChecker5)));
                                    }
                                    goto label20;
                                }
                                throw new InvalidOperationException("never reached");
                            label20:
;
                                goto label22;
                            }
                            if ((temp87 == 1)) {
                                this.Manager.Comment("reaching state \'S118\'");
                                Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp82;
                                this.Manager.Comment("executing step \'call RopQueryRows(Advance,True)\'");
                                temp82 = this.IMS_OXCTABLAdapterInstance.RopQueryRows(((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), true);
                                this.Manager.Checkpoint("MS-OXCTABL_R837");
                                this.Manager.Comment("reaching state \'S146\'");
                                this.Manager.Comment("checking step \'return RopQueryRows/success\'");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp82, "return of RopQueryRows, state S146");
                                this.Manager.Comment("reaching state \'S174\'");
                                bool temp83;
                                this.Manager.Comment("executing step \'call CheckRequirementEnabled(610,out _)\'");
                                this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(610, out temp83);
                                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp83);
                                this.Manager.Comment("reaching state \'S202\'");
                                int temp86 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite1CheckRequirementEnabledChecker14)), new ExpectedReturn(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite1CheckRequirementEnabledChecker15)));
                                if ((temp86 == 0)) {
                                    this.Manager.Comment("reaching state \'S237\'");
                                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite1RopQueryRowsResponseChecker6))) != -1)) {
                                        this.Manager.Comment("reaching state \'S285\'");
                                        Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp84;
                                        this.Manager.Comment("executing step \'call RopSeekRowFractional(False,False)\'");
                                        temp84 = this.IMS_OXCTABLAdapterInstance.RopSeekRowFractional(false, false);
                                        this.Manager.Checkpoint("MS-OXCTABL_R855");
                                        this.Manager.Checkpoint("MS-OXCTABL_R910");
                                        this.Manager.Comment("reaching state \'S333\'");
                                        this.Manager.Comment("checking step \'return RopSeekRowFractional/success\'");
                                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp84, "return of RopSeekRowFractional, state S333");
                                        this.Manager.Comment("reaching state \'S381\'");
                                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.RopSeekRowFractionalResponseInfo, null, new RopSeekRowFractionalResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite1RopSeekRowFractionalResponseChecker6))) != -1)) {
                                            S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteS416();
                                        }
                                        else {
                                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.RopSeekRowFractionalResponseInfo, null, new RopSeekRowFractionalResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite1RopSeekRowFractionalResponseChecker6)));
                                        }
                                    }
                                    else {
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite1RopQueryRowsResponseChecker6)));
                                    }
                                    goto label21;
                                }
                                if ((temp86 == 1)) {
                                    this.Manager.Comment("reaching state \'S238\'");
                                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite1RopQueryRowsResponseChecker7))) != -1)) {
                                        this.Manager.Comment("reaching state \'S286\'");
                                        Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp85;
                                        this.Manager.Comment("executing step \'call RopSeekRowFractional(False,False)\'");
                                        temp85 = this.IMS_OXCTABLAdapterInstance.RopSeekRowFractional(false, false);
                                        this.Manager.Checkpoint("MS-OXCTABL_R855");
                                        this.Manager.Checkpoint("MS-OXCTABL_R910");
                                        this.Manager.Comment("reaching state \'S334\'");
                                        this.Manager.Comment("checking step \'return RopSeekRowFractional/success\'");
                                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp85, "return of RopSeekRowFractional, state S334");
                                        this.Manager.Comment("reaching state \'S382\'");
                                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.RopSeekRowFractionalResponseInfo, null, new RopSeekRowFractionalResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite1RopSeekRowFractionalResponseChecker7))) != -1)) {
                                            S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteS415();
                                        }
                                        else {
                                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.RopSeekRowFractionalResponseInfo, null, new RopSeekRowFractionalResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite1RopSeekRowFractionalResponseChecker7)));
                                        }
                                    }
                                    else {
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite1RopQueryRowsResponseChecker7)));
                                    }
                                    goto label21;
                                }
                                throw new InvalidOperationException("never reached");
                            label21:
;
                                goto label22;
                            }
                            throw new InvalidOperationException("never reached");
                        label22:
;
                            goto label23;
                        }
                        throw new InvalidOperationException("never reached");
                    label23:
;
                        goto label31;
                    }
                    if ((temp115 == 1)) {
                        this.Manager.Comment("reaching state \'S62\'");
                        bool temp89;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(866,out _)\'");
                        this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(866, out temp89);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp89);
                        this.Manager.Comment("reaching state \'S70\'");
                        int temp114 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite1CheckRequirementEnabledChecker17)), new ExpectedReturn(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite1CheckRequirementEnabledChecker24)));
                        if ((temp114 == 0)) {
                            this.Manager.Comment("reaching state \'S81\'");
                            bool temp90;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(867,out _)\'");
                            this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(867, out temp90);
                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp90);
                            this.Manager.Comment("reaching state \'S97\'");
                            int temp101 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite1CheckRequirementEnabledChecker18)), new ExpectedReturn(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite1CheckRequirementEnabledChecker21)));
                            if ((temp101 == 0)) {
                                this.Manager.Comment("reaching state \'S119\'");
                                Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp91;
                                this.Manager.Comment("executing step \'call RopQueryRows(Advance,True)\'");
                                temp91 = this.IMS_OXCTABLAdapterInstance.RopQueryRows(((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), true);
                                this.Manager.Checkpoint("MS-OXCTABL_R837");
                                this.Manager.Comment("reaching state \'S147\'");
                                this.Manager.Comment("checking step \'return RopQueryRows/success\'");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp91, "return of RopQueryRows, state S147");
                                this.Manager.Comment("reaching state \'S175\'");
                                bool temp92;
                                this.Manager.Comment("executing step \'call CheckRequirementEnabled(610,out _)\'");
                                this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(610, out temp92);
                                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp92);
                                this.Manager.Comment("reaching state \'S203\'");
                                int temp95 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite1CheckRequirementEnabledChecker19)), new ExpectedReturn(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite1CheckRequirementEnabledChecker20)));
                                if ((temp95 == 0)) {
                                    this.Manager.Comment("reaching state \'S239\'");
                                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite1RopQueryRowsResponseChecker8))) != -1)) {
                                        this.Manager.Comment("reaching state \'S287\'");
                                        Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp93;
                                        this.Manager.Comment("executing step \'call RopSeekRowFractional(False,False)\'");
                                        temp93 = this.IMS_OXCTABLAdapterInstance.RopSeekRowFractional(false, false);
                                        this.Manager.Checkpoint("MS-OXCTABL_R855");
                                        this.Manager.Checkpoint("MS-OXCTABL_R910");
                                        this.Manager.Comment("reaching state \'S335\'");
                                        this.Manager.Comment("checking step \'return RopSeekRowFractional/success\'");
                                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp93, "return of RopSeekRowFractional, state S335");
                                        this.Manager.Comment("reaching state \'S383\'");
                                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.RopSeekRowFractionalResponseInfo, null, new RopSeekRowFractionalResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite1RopSeekRowFractionalResponseChecker8))) != -1)) {
                                            S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteS414();
                                        }
                                        else {
                                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.RopSeekRowFractionalResponseInfo, null, new RopSeekRowFractionalResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite1RopSeekRowFractionalResponseChecker8)));
                                        }
                                    }
                                    else {
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite1RopQueryRowsResponseChecker8)));
                                    }
                                    goto label24;
                                }
                                if ((temp95 == 1)) {
                                    this.Manager.Comment("reaching state \'S240\'");
                                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite1RopQueryRowsResponseChecker9))) != -1)) {
                                        this.Manager.Comment("reaching state \'S288\'");
                                        Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp94;
                                        this.Manager.Comment("executing step \'call RopSeekRowFractional(False,False)\'");
                                        temp94 = this.IMS_OXCTABLAdapterInstance.RopSeekRowFractional(false, false);
                                        this.Manager.Checkpoint("MS-OXCTABL_R855");
                                        this.Manager.Checkpoint("MS-OXCTABL_R910");
                                        this.Manager.Comment("reaching state \'S336\'");
                                        this.Manager.Comment("checking step \'return RopSeekRowFractional/success\'");
                                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp94, "return of RopSeekRowFractional, state S336");
                                        this.Manager.Comment("reaching state \'S384\'");
                                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.RopSeekRowFractionalResponseInfo, null, new RopSeekRowFractionalResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite1RopSeekRowFractionalResponseChecker9))) != -1)) {
                                            S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteS413();
                                        }
                                        else {
                                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.RopSeekRowFractionalResponseInfo, null, new RopSeekRowFractionalResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite1RopSeekRowFractionalResponseChecker9)));
                                        }
                                    }
                                    else {
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite1RopQueryRowsResponseChecker9)));
                                    }
                                    goto label24;
                                }
                                throw new InvalidOperationException("never reached");
                            label24:
;
                                goto label26;
                            }
                            if ((temp101 == 1)) {
                                this.Manager.Comment("reaching state \'S120\'");
                                Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp96;
                                this.Manager.Comment("executing step \'call RopQueryRows(Advance,True)\'");
                                temp96 = this.IMS_OXCTABLAdapterInstance.RopQueryRows(((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), true);
                                this.Manager.Checkpoint("MS-OXCTABL_R837");
                                this.Manager.Comment("reaching state \'S148\'");
                                this.Manager.Comment("checking step \'return RopQueryRows/success\'");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp96, "return of RopQueryRows, state S148");
                                this.Manager.Comment("reaching state \'S176\'");
                                bool temp97;
                                this.Manager.Comment("executing step \'call CheckRequirementEnabled(610,out _)\'");
                                this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(610, out temp97);
                                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp97);
                                this.Manager.Comment("reaching state \'S204\'");
                                int temp100 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite1CheckRequirementEnabledChecker22)), new ExpectedReturn(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite1CheckRequirementEnabledChecker23)));
                                if ((temp100 == 0)) {
                                    this.Manager.Comment("reaching state \'S241\'");
                                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite1RopQueryRowsResponseChecker10))) != -1)) {
                                        this.Manager.Comment("reaching state \'S289\'");
                                        Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp98;
                                        this.Manager.Comment("executing step \'call RopSeekRowFractional(False,False)\'");
                                        temp98 = this.IMS_OXCTABLAdapterInstance.RopSeekRowFractional(false, false);
                                        this.Manager.Checkpoint("MS-OXCTABL_R855");
                                        this.Manager.Checkpoint("MS-OXCTABL_R910");
                                        this.Manager.Comment("reaching state \'S337\'");
                                        this.Manager.Comment("checking step \'return RopSeekRowFractional/success\'");
                                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp98, "return of RopSeekRowFractional, state S337");
                                        this.Manager.Comment("reaching state \'S385\'");
                                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.RopSeekRowFractionalResponseInfo, null, new RopSeekRowFractionalResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite1RopSeekRowFractionalResponseChecker10))) != -1)) {
                                            S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteS412();
                                        }
                                        else {
                                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.RopSeekRowFractionalResponseInfo, null, new RopSeekRowFractionalResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite1RopSeekRowFractionalResponseChecker10)));
                                        }
                                    }
                                    else {
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite1RopQueryRowsResponseChecker10)));
                                    }
                                    goto label25;
                                }
                                if ((temp100 == 1)) {
                                    this.Manager.Comment("reaching state \'S242\'");
                                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite1RopQueryRowsResponseChecker11))) != -1)) {
                                        this.Manager.Comment("reaching state \'S290\'");
                                        Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp99;
                                        this.Manager.Comment("executing step \'call RopSeekRowFractional(False,False)\'");
                                        temp99 = this.IMS_OXCTABLAdapterInstance.RopSeekRowFractional(false, false);
                                        this.Manager.Checkpoint("MS-OXCTABL_R855");
                                        this.Manager.Checkpoint("MS-OXCTABL_R910");
                                        this.Manager.Comment("reaching state \'S338\'");
                                        this.Manager.Comment("checking step \'return RopSeekRowFractional/success\'");
                                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp99, "return of RopSeekRowFractional, state S338");
                                        this.Manager.Comment("reaching state \'S386\'");
                                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.RopSeekRowFractionalResponseInfo, null, new RopSeekRowFractionalResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite1RopSeekRowFractionalResponseChecker11))) != -1)) {
                                            S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteS411();
                                        }
                                        else {
                                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.RopSeekRowFractionalResponseInfo, null, new RopSeekRowFractionalResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite1RopSeekRowFractionalResponseChecker11)));
                                        }
                                    }
                                    else {
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite1RopQueryRowsResponseChecker11)));
                                    }
                                    goto label25;
                                }
                                throw new InvalidOperationException("never reached");
                            label25:
;
                                goto label26;
                            }
                            throw new InvalidOperationException("never reached");
                        label26:
;
                            goto label30;
                        }
                        if ((temp114 == 1)) {
                            this.Manager.Comment("reaching state \'S82\'");
                            bool temp102;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(867,out _)\'");
                            this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(867, out temp102);
                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp102);
                            this.Manager.Comment("reaching state \'S98\'");
                            int temp113 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite1CheckRequirementEnabledChecker25)), new ExpectedReturn(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite1CheckRequirementEnabledChecker28)));
                            if ((temp113 == 0)) {
                                this.Manager.Comment("reaching state \'S121\'");
                                Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp103;
                                this.Manager.Comment("executing step \'call RopQueryRows(Advance,True)\'");
                                temp103 = this.IMS_OXCTABLAdapterInstance.RopQueryRows(((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), true);
                                this.Manager.Checkpoint("MS-OXCTABL_R837");
                                this.Manager.Comment("reaching state \'S149\'");
                                this.Manager.Comment("checking step \'return RopQueryRows/success\'");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp103, "return of RopQueryRows, state S149");
                                this.Manager.Comment("reaching state \'S177\'");
                                bool temp104;
                                this.Manager.Comment("executing step \'call CheckRequirementEnabled(610,out _)\'");
                                this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(610, out temp104);
                                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp104);
                                this.Manager.Comment("reaching state \'S205\'");
                                int temp107 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite1CheckRequirementEnabledChecker26)), new ExpectedReturn(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite1CheckRequirementEnabledChecker27)));
                                if ((temp107 == 0)) {
                                    this.Manager.Comment("reaching state \'S243\'");
                                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite1RopQueryRowsResponseChecker12))) != -1)) {
                                        this.Manager.Comment("reaching state \'S291\'");
                                        Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp105;
                                        this.Manager.Comment("executing step \'call RopSeekRowFractional(False,False)\'");
                                        temp105 = this.IMS_OXCTABLAdapterInstance.RopSeekRowFractional(false, false);
                                        this.Manager.Checkpoint("MS-OXCTABL_R855");
                                        this.Manager.Checkpoint("MS-OXCTABL_R910");
                                        this.Manager.Comment("reaching state \'S339\'");
                                        this.Manager.Comment("checking step \'return RopSeekRowFractional/success\'");
                                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp105, "return of RopSeekRowFractional, state S339");
                                        this.Manager.Comment("reaching state \'S387\'");
                                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.RopSeekRowFractionalResponseInfo, null, new RopSeekRowFractionalResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite1RopSeekRowFractionalResponseChecker12))) != -1)) {
                                            S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteS410();
                                        }
                                        else {
                                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.RopSeekRowFractionalResponseInfo, null, new RopSeekRowFractionalResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite1RopSeekRowFractionalResponseChecker12)));
                                        }
                                    }
                                    else {
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite1RopQueryRowsResponseChecker12)));
                                    }
                                    goto label27;
                                }
                                if ((temp107 == 1)) {
                                    this.Manager.Comment("reaching state \'S244\'");
                                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite1RopQueryRowsResponseChecker13))) != -1)) {
                                        this.Manager.Comment("reaching state \'S292\'");
                                        Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp106;
                                        this.Manager.Comment("executing step \'call RopSeekRowFractional(False,False)\'");
                                        temp106 = this.IMS_OXCTABLAdapterInstance.RopSeekRowFractional(false, false);
                                        this.Manager.Checkpoint("MS-OXCTABL_R855");
                                        this.Manager.Checkpoint("MS-OXCTABL_R910");
                                        this.Manager.Comment("reaching state \'S340\'");
                                        this.Manager.Comment("checking step \'return RopSeekRowFractional/success\'");
                                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp106, "return of RopSeekRowFractional, state S340");
                                        this.Manager.Comment("reaching state \'S388\'");
                                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.RopSeekRowFractionalResponseInfo, null, new RopSeekRowFractionalResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite1RopSeekRowFractionalResponseChecker13))) != -1)) {
                                            S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteS409();
                                        }
                                        else {
                                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.RopSeekRowFractionalResponseInfo, null, new RopSeekRowFractionalResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite1RopSeekRowFractionalResponseChecker13)));
                                        }
                                    }
                                    else {
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite1RopQueryRowsResponseChecker13)));
                                    }
                                    goto label27;
                                }
                                throw new InvalidOperationException("never reached");
                            label27:
;
                                goto label29;
                            }
                            if ((temp113 == 1)) {
                                this.Manager.Comment("reaching state \'S122\'");
                                Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp108;
                                this.Manager.Comment("executing step \'call RopQueryRows(Advance,True)\'");
                                temp108 = this.IMS_OXCTABLAdapterInstance.RopQueryRows(((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), true);
                                this.Manager.Checkpoint("MS-OXCTABL_R837");
                                this.Manager.Comment("reaching state \'S150\'");
                                this.Manager.Comment("checking step \'return RopQueryRows/success\'");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp108, "return of RopQueryRows, state S150");
                                this.Manager.Comment("reaching state \'S178\'");
                                bool temp109;
                                this.Manager.Comment("executing step \'call CheckRequirementEnabled(610,out _)\'");
                                this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(610, out temp109);
                                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp109);
                                this.Manager.Comment("reaching state \'S206\'");
                                int temp112 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite1CheckRequirementEnabledChecker29)), new ExpectedReturn(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite1CheckRequirementEnabledChecker30)));
                                if ((temp112 == 0)) {
                                    this.Manager.Comment("reaching state \'S245\'");
                                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite1RopQueryRowsResponseChecker14))) != -1)) {
                                        this.Manager.Comment("reaching state \'S293\'");
                                        Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp110;
                                        this.Manager.Comment("executing step \'call RopSeekRowFractional(False,False)\'");
                                        temp110 = this.IMS_OXCTABLAdapterInstance.RopSeekRowFractional(false, false);
                                        this.Manager.Checkpoint("MS-OXCTABL_R855");
                                        this.Manager.Checkpoint("MS-OXCTABL_R910");
                                        this.Manager.Comment("reaching state \'S341\'");
                                        this.Manager.Comment("checking step \'return RopSeekRowFractional/success\'");
                                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp110, "return of RopSeekRowFractional, state S341");
                                        this.Manager.Comment("reaching state \'S389\'");
                                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.RopSeekRowFractionalResponseInfo, null, new RopSeekRowFractionalResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite1RopSeekRowFractionalResponseChecker14))) != -1)) {
                                            S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteS408();
                                        }
                                        else {
                                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.RopSeekRowFractionalResponseInfo, null, new RopSeekRowFractionalResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite1RopSeekRowFractionalResponseChecker14)));
                                        }
                                    }
                                    else {
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite1RopQueryRowsResponseChecker14)));
                                    }
                                    goto label28;
                                }
                                if ((temp112 == 1)) {
                                    this.Manager.Comment("reaching state \'S246\'");
                                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite1RopQueryRowsResponseChecker15))) != -1)) {
                                        this.Manager.Comment("reaching state \'S294\'");
                                        Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp111;
                                        this.Manager.Comment("executing step \'call RopSeekRowFractional(False,False)\'");
                                        temp111 = this.IMS_OXCTABLAdapterInstance.RopSeekRowFractional(false, false);
                                        this.Manager.Checkpoint("MS-OXCTABL_R855");
                                        this.Manager.Checkpoint("MS-OXCTABL_R910");
                                        this.Manager.Comment("reaching state \'S342\'");
                                        this.Manager.Comment("checking step \'return RopSeekRowFractional/success\'");
                                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp111, "return of RopSeekRowFractional, state S342");
                                        this.Manager.Comment("reaching state \'S390\'");
                                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.RopSeekRowFractionalResponseInfo, null, new RopSeekRowFractionalResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite1RopSeekRowFractionalResponseChecker15))) != -1)) {
                                            S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteS407();
                                        }
                                        else {
                                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.RopSeekRowFractionalResponseInfo, null, new RopSeekRowFractionalResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite1RopSeekRowFractionalResponseChecker15)));
                                        }
                                    }
                                    else {
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite1RopQueryRowsResponseChecker15)));
                                    }
                                    goto label28;
                                }
                                throw new InvalidOperationException("never reached");
                            label28:
;
                                goto label29;
                            }
                            throw new InvalidOperationException("never reached");
                        label29:
;
                            goto label30;
                        }
                        throw new InvalidOperationException("never reached");
                    label30:
;
                        goto label31;
                    }
                    throw new InvalidOperationException("never reached");
                label31:
;
                    goto label32;
                }
                if ((temp116 == 1)) {
                    this.Manager.Comment("reaching state \'S28\'");
                    goto label32;
                }
                throw new InvalidOperationException("never reached");
            label32:
;
                goto label33;
            }
            if ((temp117 == 1)) {
                this.Manager.Comment("reaching state \'S13\'");
                goto label33;
            }
            throw new InvalidOperationException("never reached");
        label33:
;
            this.Manager.EndTest();
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite1CheckMAPIHTTPTransportSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S3");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite1CheckRequirementEnabledChecker(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S21");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite1CheckRequirementEnabledChecker1(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S55");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite1CheckRequirementEnabledChecker2(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S69");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite1CheckRequirementEnabledChecker3(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S95");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite1CheckRequirementEnabledChecker4(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S199");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite1RopQueryRowsResponseChecker(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SETCOLUMNS,True,True" +
                    ",True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S231");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S231");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S231");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S231");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S231");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S231");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S231");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S231");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S231");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S231");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R472, MS-OXCTABL_R427, MS-OXCTABL_R42" +
                        "6, MS-OXCTABL_R116");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R472");
            this.Manager.Checkpoint("MS-OXCTABL_R427");
            this.Manager.Checkpoint("MS-OXCTABL_R426");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite1RopSeekRowFractionalResponseChecker(bool zeroNumerator, bool smallDenominator, Microsoft.Protocols.TestSuites.MS_OXCTABL.CursorPosition cursorPosition) {
            this.Manager.Comment("checking step \'event RopSeekRowFractionalResponse(False,False,CURRENT)\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, zeroNumerator, "zeroNumerator of RopSeekRowFractionalResponse, state S375");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, smallDenominator, "smallDenominator of RopSeekRowFractionalResponse, state S375");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.CursorPosition>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.CursorPosition.CURRENT, cursorPosition, "cursorPosition of RopSeekRowFractionalResponse, state S375");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite1CheckRequirementEnabledChecker5(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S199");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite1RopQueryRowsResponseChecker1(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SETCOLUMNS,True,True" +
                    ",True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S232");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S232");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S232");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S232");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S232");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S232");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S232");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S232");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S232");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S232");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R472, MS-OXCTABL_R427, MS-OXCTABL_R42" +
                        "6, MS-OXCTABL_R116, MS-OXCTABL_R610");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R472");
            this.Manager.Checkpoint("MS-OXCTABL_R427");
            this.Manager.Checkpoint("MS-OXCTABL_R426");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R610");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite1RopSeekRowFractionalResponseChecker1(bool zeroNumerator, bool smallDenominator, Microsoft.Protocols.TestSuites.MS_OXCTABL.CursorPosition cursorPosition) {
            this.Manager.Comment("checking step \'event RopSeekRowFractionalResponse(False,False,CURRENT)\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, zeroNumerator, "zeroNumerator of RopSeekRowFractionalResponse, state S376");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, smallDenominator, "smallDenominator of RopSeekRowFractionalResponse, state S376");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.CursorPosition>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.CursorPosition.CURRENT, cursorPosition, "cursorPosition of RopSeekRowFractionalResponse, state S376");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite1CheckRequirementEnabledChecker6(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S95");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite1CheckRequirementEnabledChecker7(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S200");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite1RopQueryRowsResponseChecker2(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SETCOLUMNS,True,True" +
                    ",True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S233");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S233");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S233");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S233");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S233");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S233");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S233");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S233");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S233");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S233");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R472, MS-OXCTABL_R427, MS-OXCTABL_R42" +
                        "6, MS-OXCTABL_R116, MS-OXCTABL_R610");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R472");
            this.Manager.Checkpoint("MS-OXCTABL_R427");
            this.Manager.Checkpoint("MS-OXCTABL_R426");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R610");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite1RopSeekRowFractionalResponseChecker2(bool zeroNumerator, bool smallDenominator, Microsoft.Protocols.TestSuites.MS_OXCTABL.CursorPosition cursorPosition) {
            this.Manager.Comment("checking step \'event RopSeekRowFractionalResponse(False,False,CURRENT)\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, zeroNumerator, "zeroNumerator of RopSeekRowFractionalResponse, state S377");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, smallDenominator, "smallDenominator of RopSeekRowFractionalResponse, state S377");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.CursorPosition>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.CursorPosition.CURRENT, cursorPosition, "cursorPosition of RopSeekRowFractionalResponse, state S377");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite1CheckRequirementEnabledChecker8(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S200");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite1RopQueryRowsResponseChecker3(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SETCOLUMNS,True,True" +
                    ",True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S234");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S234");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S234");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S234");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S234");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S234");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S234");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S234");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S234");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S234");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R472, MS-OXCTABL_R427, MS-OXCTABL_R42" +
                        "6, MS-OXCTABL_R116");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R472");
            this.Manager.Checkpoint("MS-OXCTABL_R427");
            this.Manager.Checkpoint("MS-OXCTABL_R426");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite1RopSeekRowFractionalResponseChecker3(bool zeroNumerator, bool smallDenominator, Microsoft.Protocols.TestSuites.MS_OXCTABL.CursorPosition cursorPosition) {
            this.Manager.Comment("checking step \'event RopSeekRowFractionalResponse(False,False,CURRENT)\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, zeroNumerator, "zeroNumerator of RopSeekRowFractionalResponse, state S378");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, smallDenominator, "smallDenominator of RopSeekRowFractionalResponse, state S378");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.CursorPosition>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.CursorPosition.CURRENT, cursorPosition, "cursorPosition of RopSeekRowFractionalResponse, state S378");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite1CheckRequirementEnabledChecker9(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S69");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite1CheckRequirementEnabledChecker10(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S96");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite1CheckRequirementEnabledChecker11(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S201");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite1RopQueryRowsResponseChecker4(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SETCOLUMNS,True,True" +
                    ",True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S235");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S235");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S235");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S235");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S235");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S235");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S235");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S235");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S235");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S235");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R472, MS-OXCTABL_R427, MS-OXCTABL_R42" +
                        "6, MS-OXCTABL_R116, MS-OXCTABL_R610");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R472");
            this.Manager.Checkpoint("MS-OXCTABL_R427");
            this.Manager.Checkpoint("MS-OXCTABL_R426");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R610");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite1RopSeekRowFractionalResponseChecker4(bool zeroNumerator, bool smallDenominator, Microsoft.Protocols.TestSuites.MS_OXCTABL.CursorPosition cursorPosition) {
            this.Manager.Comment("checking step \'event RopSeekRowFractionalResponse(False,False,CURRENT)\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, zeroNumerator, "zeroNumerator of RopSeekRowFractionalResponse, state S379");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, smallDenominator, "smallDenominator of RopSeekRowFractionalResponse, state S379");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.CursorPosition>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.CursorPosition.CURRENT, cursorPosition, "cursorPosition of RopSeekRowFractionalResponse, state S379");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite1CheckRequirementEnabledChecker12(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S201");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite1RopQueryRowsResponseChecker5(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SETCOLUMNS,True,True" +
                    ",True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S236");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S236");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S236");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S236");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S236");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S236");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S236");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S236");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S236");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S236");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R472, MS-OXCTABL_R427, MS-OXCTABL_R42" +
                        "6, MS-OXCTABL_R116");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R472");
            this.Manager.Checkpoint("MS-OXCTABL_R427");
            this.Manager.Checkpoint("MS-OXCTABL_R426");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite1RopSeekRowFractionalResponseChecker5(bool zeroNumerator, bool smallDenominator, Microsoft.Protocols.TestSuites.MS_OXCTABL.CursorPosition cursorPosition) {
            this.Manager.Comment("checking step \'event RopSeekRowFractionalResponse(False,False,CURRENT)\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, zeroNumerator, "zeroNumerator of RopSeekRowFractionalResponse, state S380");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, smallDenominator, "smallDenominator of RopSeekRowFractionalResponse, state S380");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.CursorPosition>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.CursorPosition.CURRENT, cursorPosition, "cursorPosition of RopSeekRowFractionalResponse, state S380");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite1CheckRequirementEnabledChecker13(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S96");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite1CheckRequirementEnabledChecker14(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S202");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite1RopQueryRowsResponseChecker6(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SETCOLUMNS,True,True" +
                    ",True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S237");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S237");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S237");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S237");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S237");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S237");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S237");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S237");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S237");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S237");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R472, MS-OXCTABL_R427, MS-OXCTABL_R42" +
                        "6, MS-OXCTABL_R116");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R472");
            this.Manager.Checkpoint("MS-OXCTABL_R427");
            this.Manager.Checkpoint("MS-OXCTABL_R426");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite1RopSeekRowFractionalResponseChecker6(bool zeroNumerator, bool smallDenominator, Microsoft.Protocols.TestSuites.MS_OXCTABL.CursorPosition cursorPosition) {
            this.Manager.Comment("checking step \'event RopSeekRowFractionalResponse(False,False,CURRENT)\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, zeroNumerator, "zeroNumerator of RopSeekRowFractionalResponse, state S381");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, smallDenominator, "smallDenominator of RopSeekRowFractionalResponse, state S381");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.CursorPosition>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.CursorPosition.CURRENT, cursorPosition, "cursorPosition of RopSeekRowFractionalResponse, state S381");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite1CheckRequirementEnabledChecker15(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S202");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite1RopQueryRowsResponseChecker7(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SETCOLUMNS,True,True" +
                    ",True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S238");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S238");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S238");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S238");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S238");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S238");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S238");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S238");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S238");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S238");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R472, MS-OXCTABL_R427, MS-OXCTABL_R42" +
                        "6, MS-OXCTABL_R116, MS-OXCTABL_R610");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R472");
            this.Manager.Checkpoint("MS-OXCTABL_R427");
            this.Manager.Checkpoint("MS-OXCTABL_R426");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R610");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite1RopSeekRowFractionalResponseChecker7(bool zeroNumerator, bool smallDenominator, Microsoft.Protocols.TestSuites.MS_OXCTABL.CursorPosition cursorPosition) {
            this.Manager.Comment("checking step \'event RopSeekRowFractionalResponse(False,False,CURRENT)\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, zeroNumerator, "zeroNumerator of RopSeekRowFractionalResponse, state S382");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, smallDenominator, "smallDenominator of RopSeekRowFractionalResponse, state S382");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.CursorPosition>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.CursorPosition.CURRENT, cursorPosition, "cursorPosition of RopSeekRowFractionalResponse, state S382");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite1CheckRequirementEnabledChecker16(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S55");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite1CheckRequirementEnabledChecker17(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S70");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite1CheckRequirementEnabledChecker18(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S97");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite1CheckRequirementEnabledChecker19(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S203");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite1RopQueryRowsResponseChecker8(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SETCOLUMNS,True,True" +
                    ",True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S239");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S239");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S239");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S239");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S239");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S239");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S239");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S239");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S239");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S239");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R472, MS-OXCTABL_R427, MS-OXCTABL_R42" +
                        "6, MS-OXCTABL_R116");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R472");
            this.Manager.Checkpoint("MS-OXCTABL_R427");
            this.Manager.Checkpoint("MS-OXCTABL_R426");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite1RopSeekRowFractionalResponseChecker8(bool zeroNumerator, bool smallDenominator, Microsoft.Protocols.TestSuites.MS_OXCTABL.CursorPosition cursorPosition) {
            this.Manager.Comment("checking step \'event RopSeekRowFractionalResponse(False,False,CURRENT)\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, zeroNumerator, "zeroNumerator of RopSeekRowFractionalResponse, state S383");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, smallDenominator, "smallDenominator of RopSeekRowFractionalResponse, state S383");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.CursorPosition>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.CursorPosition.CURRENT, cursorPosition, "cursorPosition of RopSeekRowFractionalResponse, state S383");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite1CheckRequirementEnabledChecker20(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S203");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite1RopQueryRowsResponseChecker9(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SETCOLUMNS,True,True" +
                    ",True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S240");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S240");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S240");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S240");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S240");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S240");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S240");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S240");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S240");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S240");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R472, MS-OXCTABL_R427, MS-OXCTABL_R42" +
                        "6, MS-OXCTABL_R116, MS-OXCTABL_R610");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R472");
            this.Manager.Checkpoint("MS-OXCTABL_R427");
            this.Manager.Checkpoint("MS-OXCTABL_R426");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R610");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite1RopSeekRowFractionalResponseChecker9(bool zeroNumerator, bool smallDenominator, Microsoft.Protocols.TestSuites.MS_OXCTABL.CursorPosition cursorPosition) {
            this.Manager.Comment("checking step \'event RopSeekRowFractionalResponse(False,False,CURRENT)\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, zeroNumerator, "zeroNumerator of RopSeekRowFractionalResponse, state S384");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, smallDenominator, "smallDenominator of RopSeekRowFractionalResponse, state S384");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.CursorPosition>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.CursorPosition.CURRENT, cursorPosition, "cursorPosition of RopSeekRowFractionalResponse, state S384");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite1CheckRequirementEnabledChecker21(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S97");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite1CheckRequirementEnabledChecker22(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S204");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite1RopQueryRowsResponseChecker10(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SETCOLUMNS,True,True" +
                    ",True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S241");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S241");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S241");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S241");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S241");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S241");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S241");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S241");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S241");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S241");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R472, MS-OXCTABL_R427, MS-OXCTABL_R42" +
                        "6, MS-OXCTABL_R116, MS-OXCTABL_R610");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R472");
            this.Manager.Checkpoint("MS-OXCTABL_R427");
            this.Manager.Checkpoint("MS-OXCTABL_R426");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R610");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite1RopSeekRowFractionalResponseChecker10(bool zeroNumerator, bool smallDenominator, Microsoft.Protocols.TestSuites.MS_OXCTABL.CursorPosition cursorPosition) {
            this.Manager.Comment("checking step \'event RopSeekRowFractionalResponse(False,False,CURRENT)\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, zeroNumerator, "zeroNumerator of RopSeekRowFractionalResponse, state S385");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, smallDenominator, "smallDenominator of RopSeekRowFractionalResponse, state S385");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.CursorPosition>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.CursorPosition.CURRENT, cursorPosition, "cursorPosition of RopSeekRowFractionalResponse, state S385");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite1CheckRequirementEnabledChecker23(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S204");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite1RopQueryRowsResponseChecker11(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SETCOLUMNS,True,True" +
                    ",True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S242");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S242");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S242");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S242");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S242");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S242");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S242");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S242");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S242");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S242");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R472, MS-OXCTABL_R427, MS-OXCTABL_R42" +
                        "6, MS-OXCTABL_R116");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R472");
            this.Manager.Checkpoint("MS-OXCTABL_R427");
            this.Manager.Checkpoint("MS-OXCTABL_R426");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite1RopSeekRowFractionalResponseChecker11(bool zeroNumerator, bool smallDenominator, Microsoft.Protocols.TestSuites.MS_OXCTABL.CursorPosition cursorPosition) {
            this.Manager.Comment("checking step \'event RopSeekRowFractionalResponse(False,False,CURRENT)\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, zeroNumerator, "zeroNumerator of RopSeekRowFractionalResponse, state S386");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, smallDenominator, "smallDenominator of RopSeekRowFractionalResponse, state S386");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.CursorPosition>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.CursorPosition.CURRENT, cursorPosition, "cursorPosition of RopSeekRowFractionalResponse, state S386");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite1CheckRequirementEnabledChecker24(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S70");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite1CheckRequirementEnabledChecker25(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S98");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite1CheckRequirementEnabledChecker26(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S205");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite1RopQueryRowsResponseChecker12(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SETCOLUMNS,True,True" +
                    ",True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S243");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S243");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S243");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S243");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S243");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S243");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S243");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S243");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S243");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S243");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R472, MS-OXCTABL_R427, MS-OXCTABL_R42" +
                        "6, MS-OXCTABL_R116");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R472");
            this.Manager.Checkpoint("MS-OXCTABL_R427");
            this.Manager.Checkpoint("MS-OXCTABL_R426");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite1RopSeekRowFractionalResponseChecker12(bool zeroNumerator, bool smallDenominator, Microsoft.Protocols.TestSuites.MS_OXCTABL.CursorPosition cursorPosition) {
            this.Manager.Comment("checking step \'event RopSeekRowFractionalResponse(False,False,CURRENT)\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, zeroNumerator, "zeroNumerator of RopSeekRowFractionalResponse, state S387");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, smallDenominator, "smallDenominator of RopSeekRowFractionalResponse, state S387");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.CursorPosition>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.CursorPosition.CURRENT, cursorPosition, "cursorPosition of RopSeekRowFractionalResponse, state S387");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite1CheckRequirementEnabledChecker27(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S205");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite1RopQueryRowsResponseChecker13(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SETCOLUMNS,True,True" +
                    ",True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S244");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S244");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S244");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S244");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S244");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S244");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S244");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S244");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S244");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S244");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R472, MS-OXCTABL_R427, MS-OXCTABL_R42" +
                        "6, MS-OXCTABL_R116, MS-OXCTABL_R610");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R472");
            this.Manager.Checkpoint("MS-OXCTABL_R427");
            this.Manager.Checkpoint("MS-OXCTABL_R426");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R610");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite1RopSeekRowFractionalResponseChecker13(bool zeroNumerator, bool smallDenominator, Microsoft.Protocols.TestSuites.MS_OXCTABL.CursorPosition cursorPosition) {
            this.Manager.Comment("checking step \'event RopSeekRowFractionalResponse(False,False,CURRENT)\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, zeroNumerator, "zeroNumerator of RopSeekRowFractionalResponse, state S388");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, smallDenominator, "smallDenominator of RopSeekRowFractionalResponse, state S388");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.CursorPosition>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.CursorPosition.CURRENT, cursorPosition, "cursorPosition of RopSeekRowFractionalResponse, state S388");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite1CheckRequirementEnabledChecker28(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S98");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite1CheckRequirementEnabledChecker29(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S206");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite1RopQueryRowsResponseChecker14(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SETCOLUMNS,True,True" +
                    ",True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S245");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S245");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S245");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S245");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S245");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S245");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S245");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S245");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S245");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S245");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R472, MS-OXCTABL_R427, MS-OXCTABL_R42" +
                        "6, MS-OXCTABL_R116");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R472");
            this.Manager.Checkpoint("MS-OXCTABL_R427");
            this.Manager.Checkpoint("MS-OXCTABL_R426");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite1RopSeekRowFractionalResponseChecker14(bool zeroNumerator, bool smallDenominator, Microsoft.Protocols.TestSuites.MS_OXCTABL.CursorPosition cursorPosition) {
            this.Manager.Comment("checking step \'event RopSeekRowFractionalResponse(False,False,CURRENT)\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, zeroNumerator, "zeroNumerator of RopSeekRowFractionalResponse, state S389");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, smallDenominator, "smallDenominator of RopSeekRowFractionalResponse, state S389");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.CursorPosition>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.CursorPosition.CURRENT, cursorPosition, "cursorPosition of RopSeekRowFractionalResponse, state S389");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite1CheckRequirementEnabledChecker30(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S206");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite1RopQueryRowsResponseChecker15(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SETCOLUMNS,True,True" +
                    ",True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S246");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S246");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S246");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S246");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S246");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S246");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S246");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S246");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S246");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S246");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R472, MS-OXCTABL_R427, MS-OXCTABL_R42" +
                        "6, MS-OXCTABL_R116, MS-OXCTABL_R610");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R472");
            this.Manager.Checkpoint("MS-OXCTABL_R427");
            this.Manager.Checkpoint("MS-OXCTABL_R426");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R610");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite1RopSeekRowFractionalResponseChecker15(bool zeroNumerator, bool smallDenominator, Microsoft.Protocols.TestSuites.MS_OXCTABL.CursorPosition cursorPosition) {
            this.Manager.Comment("checking step \'event RopSeekRowFractionalResponse(False,False,CURRENT)\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, zeroNumerator, "zeroNumerator of RopSeekRowFractionalResponse, state S390");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, smallDenominator, "smallDenominator of RopSeekRowFractionalResponse, state S390");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.CursorPosition>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.CursorPosition.CURRENT, cursorPosition, "cursorPosition of RopSeekRowFractionalResponse, state S390");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite1CheckRequirementEnabledChecker31(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S21");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite1CheckMAPIHTTPTransportSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S3");
        }
        #endregion
        
        #region Test Starting in S4
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite2() {
            this.Manager.BeginTest("MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite2");
            this.Manager.Comment("reaching state \'S4\'");
            bool temp118;
            this.Manager.Comment("executing step \'call CheckMAPIHTTPTransportSupported(out _)\'");
            this.IMS_OXCTABLAdapterInstance.CheckMAPIHTTPTransportSupported(out temp118);
            this.Manager.AddReturn(CheckMAPIHTTPTransportSupportedInfo, null, temp118);
            this.Manager.Comment("reaching state \'S5\'");
            int temp176 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite2CheckMAPIHTTPTransportSupportedChecker)), new ExpectedReturn(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite2CheckMAPIHTTPTransportSupportedChecker1)));
            if ((temp176 == 0)) {
                this.Manager.Comment("reaching state \'S14\'");
                bool temp119;
                this.Manager.Comment("executing step \'call CheckRequirementEnabled(910,out _)\'");
                this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(910, out temp119);
                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp119);
                this.Manager.Comment("reaching state \'S22\'");
                int temp175 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite2CheckRequirementEnabledChecker)), new ExpectedReturn(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite2CheckRequirementEnabledChecker31)));
                if ((temp175 == 0)) {
                    this.Manager.Comment("reaching state \'S29\'");
                    this.Manager.Comment("executing step \'call InitializeTable(CONTENT_TABLE)\'");
                    this.IMS_OXCTABLAdapterInstance.InitializeTable(((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableType)(0)));
                    this.Manager.Comment("reaching state \'S36\'");
                    this.Manager.Comment("checking step \'return InitializeTable\'");
                    this.Manager.Comment("reaching state \'S41\'");
                    Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp120;
                    this.Manager.Comment("executing step \'call RopSetColumns(1,False,False,False)\'");
                    temp120 = this.IMS_OXCTABLAdapterInstance.RopSetColumns(1u, false, false, false);
                    this.Manager.Checkpoint("MS-OXCTABL_R831");
                    this.Manager.Checkpoint("MS-OXCTABL_R45");
                    this.Manager.Comment("reaching state \'S46\'");
                    this.Manager.Comment("checking step \'return RopSetColumns/success\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp120, "return of RopSetColumns, state S46");
                    this.Manager.Comment("reaching state \'S51\'");
                    bool temp121;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(768,out _)\'");
                    this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(768, out temp121);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp121);
                    this.Manager.Comment("reaching state \'S56\'");
                    int temp174 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite2CheckRequirementEnabledChecker1)), new ExpectedReturn(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite2CheckRequirementEnabledChecker16)));
                    if ((temp174 == 0)) {
                        this.Manager.Comment("reaching state \'S63\'");
                        bool temp122;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(866,out _)\'");
                        this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(866, out temp122);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp122);
                        this.Manager.Comment("reaching state \'S71\'");
                        int temp147 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite2CheckRequirementEnabledChecker2)), new ExpectedReturn(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite2CheckRequirementEnabledChecker9)));
                        if ((temp147 == 0)) {
                            this.Manager.Comment("reaching state \'S83\'");
                            bool temp123;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(867,out _)\'");
                            this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(867, out temp123);
                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp123);
                            this.Manager.Comment("reaching state \'S99\'");
                            int temp134 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite2CheckRequirementEnabledChecker3)), new ExpectedReturn(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite2CheckRequirementEnabledChecker6)));
                            if ((temp134 == 0)) {
                                this.Manager.Comment("reaching state \'S123\'");
                                Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp124;
                                this.Manager.Comment("executing step \'call RopQueryRows(Advance,True)\'");
                                temp124 = this.IMS_OXCTABLAdapterInstance.RopQueryRows(((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), true);
                                this.Manager.Checkpoint("MS-OXCTABL_R837");
                                this.Manager.Comment("reaching state \'S151\'");
                                this.Manager.Comment("checking step \'return RopQueryRows/success\'");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp124, "return of RopQueryRows, state S151");
                                this.Manager.Comment("reaching state \'S179\'");
                                bool temp125;
                                this.Manager.Comment("executing step \'call CheckRequirementEnabled(610,out _)\'");
                                this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(610, out temp125);
                                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp125);
                                this.Manager.Comment("reaching state \'S207\'");
                                int temp128 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite2CheckRequirementEnabledChecker4)), new ExpectedReturn(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite2CheckRequirementEnabledChecker5)));
                                if ((temp128 == 0)) {
                                    this.Manager.Comment("reaching state \'S247\'");
                                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite2RopQueryRowsResponseChecker))) != -1)) {
                                        this.Manager.Comment("reaching state \'S295\'");
                                        Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp126;
                                        this.Manager.Comment("executing step \'call RopSeekRowFractional(True,False)\'");
                                        temp126 = this.IMS_OXCTABLAdapterInstance.RopSeekRowFractional(true, false);
                                        this.Manager.Checkpoint("MS-OXCTABL_R855");
                                        this.Manager.Checkpoint("MS-OXCTABL_R910");
                                        this.Manager.Comment("reaching state \'S343\'");
                                        this.Manager.Comment("checking step \'return RopSeekRowFractional/success\'");
                                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp126, "return of RopSeekRowFractional, state S343");
                                        this.Manager.Comment("reaching state \'S391\'");
                                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.RopSeekRowFractionalResponseInfo, null, new RopSeekRowFractionalResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite2RopSeekRowFractionalResponseChecker))) != -1)) {
                                            S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteS422();
                                        }
                                        else {
                                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.RopSeekRowFractionalResponseInfo, null, new RopSeekRowFractionalResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite2RopSeekRowFractionalResponseChecker)));
                                        }
                                    }
                                    else {
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite2RopQueryRowsResponseChecker)));
                                    }
                                    goto label34;
                                }
                                if ((temp128 == 1)) {
                                    this.Manager.Comment("reaching state \'S248\'");
                                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite2RopQueryRowsResponseChecker1))) != -1)) {
                                        this.Manager.Comment("reaching state \'S296\'");
                                        Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp127;
                                        this.Manager.Comment("executing step \'call RopSeekRowFractional(True,False)\'");
                                        temp127 = this.IMS_OXCTABLAdapterInstance.RopSeekRowFractional(true, false);
                                        this.Manager.Checkpoint("MS-OXCTABL_R855");
                                        this.Manager.Checkpoint("MS-OXCTABL_R910");
                                        this.Manager.Comment("reaching state \'S344\'");
                                        this.Manager.Comment("checking step \'return RopSeekRowFractional/success\'");
                                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp127, "return of RopSeekRowFractional, state S344");
                                        this.Manager.Comment("reaching state \'S392\'");
                                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.RopSeekRowFractionalResponseInfo, null, new RopSeekRowFractionalResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite2RopSeekRowFractionalResponseChecker1))) != -1)) {
                                            S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteS421();
                                        }
                                        else {
                                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.RopSeekRowFractionalResponseInfo, null, new RopSeekRowFractionalResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite2RopSeekRowFractionalResponseChecker1)));
                                        }
                                    }
                                    else {
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite2RopQueryRowsResponseChecker1)));
                                    }
                                    goto label34;
                                }
                                throw new InvalidOperationException("never reached");
                            label34:
;
                                goto label36;
                            }
                            if ((temp134 == 1)) {
                                this.Manager.Comment("reaching state \'S124\'");
                                Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp129;
                                this.Manager.Comment("executing step \'call RopQueryRows(Advance,True)\'");
                                temp129 = this.IMS_OXCTABLAdapterInstance.RopQueryRows(((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), true);
                                this.Manager.Checkpoint("MS-OXCTABL_R837");
                                this.Manager.Comment("reaching state \'S152\'");
                                this.Manager.Comment("checking step \'return RopQueryRows/success\'");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp129, "return of RopQueryRows, state S152");
                                this.Manager.Comment("reaching state \'S180\'");
                                bool temp130;
                                this.Manager.Comment("executing step \'call CheckRequirementEnabled(610,out _)\'");
                                this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(610, out temp130);
                                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp130);
                                this.Manager.Comment("reaching state \'S208\'");
                                int temp133 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite2CheckRequirementEnabledChecker7)), new ExpectedReturn(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite2CheckRequirementEnabledChecker8)));
                                if ((temp133 == 0)) {
                                    this.Manager.Comment("reaching state \'S249\'");
                                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite2RopQueryRowsResponseChecker2))) != -1)) {
                                        this.Manager.Comment("reaching state \'S297\'");
                                        Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp131;
                                        this.Manager.Comment("executing step \'call RopSeekRowFractional(True,False)\'");
                                        temp131 = this.IMS_OXCTABLAdapterInstance.RopSeekRowFractional(true, false);
                                        this.Manager.Checkpoint("MS-OXCTABL_R855");
                                        this.Manager.Checkpoint("MS-OXCTABL_R910");
                                        this.Manager.Comment("reaching state \'S345\'");
                                        this.Manager.Comment("checking step \'return RopSeekRowFractional/success\'");
                                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp131, "return of RopSeekRowFractional, state S345");
                                        this.Manager.Comment("reaching state \'S393\'");
                                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.RopSeekRowFractionalResponseInfo, null, new RopSeekRowFractionalResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite2RopSeekRowFractionalResponseChecker2))) != -1)) {
                                            S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteS420();
                                        }
                                        else {
                                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.RopSeekRowFractionalResponseInfo, null, new RopSeekRowFractionalResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite2RopSeekRowFractionalResponseChecker2)));
                                        }
                                    }
                                    else {
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite2RopQueryRowsResponseChecker2)));
                                    }
                                    goto label35;
                                }
                                if ((temp133 == 1)) {
                                    this.Manager.Comment("reaching state \'S250\'");
                                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite2RopQueryRowsResponseChecker3))) != -1)) {
                                        this.Manager.Comment("reaching state \'S298\'");
                                        Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp132;
                                        this.Manager.Comment("executing step \'call RopSeekRowFractional(True,False)\'");
                                        temp132 = this.IMS_OXCTABLAdapterInstance.RopSeekRowFractional(true, false);
                                        this.Manager.Checkpoint("MS-OXCTABL_R855");
                                        this.Manager.Checkpoint("MS-OXCTABL_R910");
                                        this.Manager.Comment("reaching state \'S346\'");
                                        this.Manager.Comment("checking step \'return RopSeekRowFractional/success\'");
                                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp132, "return of RopSeekRowFractional, state S346");
                                        this.Manager.Comment("reaching state \'S394\'");
                                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.RopSeekRowFractionalResponseInfo, null, new RopSeekRowFractionalResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite2RopSeekRowFractionalResponseChecker3))) != -1)) {
                                            S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteS419();
                                        }
                                        else {
                                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.RopSeekRowFractionalResponseInfo, null, new RopSeekRowFractionalResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite2RopSeekRowFractionalResponseChecker3)));
                                        }
                                    }
                                    else {
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite2RopQueryRowsResponseChecker3)));
                                    }
                                    goto label35;
                                }
                                throw new InvalidOperationException("never reached");
                            label35:
;
                                goto label36;
                            }
                            throw new InvalidOperationException("never reached");
                        label36:
;
                            goto label40;
                        }
                        if ((temp147 == 1)) {
                            this.Manager.Comment("reaching state \'S84\'");
                            bool temp135;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(867,out _)\'");
                            this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(867, out temp135);
                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp135);
                            this.Manager.Comment("reaching state \'S100\'");
                            int temp146 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite2CheckRequirementEnabledChecker10)), new ExpectedReturn(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite2CheckRequirementEnabledChecker13)));
                            if ((temp146 == 0)) {
                                this.Manager.Comment("reaching state \'S125\'");
                                Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp136;
                                this.Manager.Comment("executing step \'call RopQueryRows(Advance,True)\'");
                                temp136 = this.IMS_OXCTABLAdapterInstance.RopQueryRows(((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), true);
                                this.Manager.Checkpoint("MS-OXCTABL_R837");
                                this.Manager.Comment("reaching state \'S153\'");
                                this.Manager.Comment("checking step \'return RopQueryRows/success\'");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp136, "return of RopQueryRows, state S153");
                                this.Manager.Comment("reaching state \'S181\'");
                                bool temp137;
                                this.Manager.Comment("executing step \'call CheckRequirementEnabled(610,out _)\'");
                                this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(610, out temp137);
                                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp137);
                                this.Manager.Comment("reaching state \'S209\'");
                                int temp140 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite2CheckRequirementEnabledChecker11)), new ExpectedReturn(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite2CheckRequirementEnabledChecker12)));
                                if ((temp140 == 0)) {
                                    this.Manager.Comment("reaching state \'S251\'");
                                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite2RopQueryRowsResponseChecker4))) != -1)) {
                                        this.Manager.Comment("reaching state \'S299\'");
                                        Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp138;
                                        this.Manager.Comment("executing step \'call RopSeekRowFractional(True,False)\'");
                                        temp138 = this.IMS_OXCTABLAdapterInstance.RopSeekRowFractional(true, false);
                                        this.Manager.Checkpoint("MS-OXCTABL_R855");
                                        this.Manager.Checkpoint("MS-OXCTABL_R910");
                                        this.Manager.Comment("reaching state \'S347\'");
                                        this.Manager.Comment("checking step \'return RopSeekRowFractional/success\'");
                                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp138, "return of RopSeekRowFractional, state S347");
                                        this.Manager.Comment("reaching state \'S395\'");
                                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.RopSeekRowFractionalResponseInfo, null, new RopSeekRowFractionalResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite2RopSeekRowFractionalResponseChecker4))) != -1)) {
                                            S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteS418();
                                        }
                                        else {
                                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.RopSeekRowFractionalResponseInfo, null, new RopSeekRowFractionalResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite2RopSeekRowFractionalResponseChecker4)));
                                        }
                                    }
                                    else {
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite2RopQueryRowsResponseChecker4)));
                                    }
                                    goto label37;
                                }
                                if ((temp140 == 1)) {
                                    this.Manager.Comment("reaching state \'S252\'");
                                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite2RopQueryRowsResponseChecker5))) != -1)) {
                                        this.Manager.Comment("reaching state \'S300\'");
                                        Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp139;
                                        this.Manager.Comment("executing step \'call RopSeekRowFractional(True,False)\'");
                                        temp139 = this.IMS_OXCTABLAdapterInstance.RopSeekRowFractional(true, false);
                                        this.Manager.Checkpoint("MS-OXCTABL_R855");
                                        this.Manager.Checkpoint("MS-OXCTABL_R910");
                                        this.Manager.Comment("reaching state \'S348\'");
                                        this.Manager.Comment("checking step \'return RopSeekRowFractional/success\'");
                                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp139, "return of RopSeekRowFractional, state S348");
                                        this.Manager.Comment("reaching state \'S396\'");
                                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.RopSeekRowFractionalResponseInfo, null, new RopSeekRowFractionalResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite2RopSeekRowFractionalResponseChecker5))) != -1)) {
                                            S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteS417();
                                        }
                                        else {
                                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.RopSeekRowFractionalResponseInfo, null, new RopSeekRowFractionalResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite2RopSeekRowFractionalResponseChecker5)));
                                        }
                                    }
                                    else {
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite2RopQueryRowsResponseChecker5)));
                                    }
                                    goto label37;
                                }
                                throw new InvalidOperationException("never reached");
                            label37:
;
                                goto label39;
                            }
                            if ((temp146 == 1)) {
                                this.Manager.Comment("reaching state \'S126\'");
                                Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp141;
                                this.Manager.Comment("executing step \'call RopQueryRows(Advance,True)\'");
                                temp141 = this.IMS_OXCTABLAdapterInstance.RopQueryRows(((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), true);
                                this.Manager.Checkpoint("MS-OXCTABL_R837");
                                this.Manager.Comment("reaching state \'S154\'");
                                this.Manager.Comment("checking step \'return RopQueryRows/success\'");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp141, "return of RopQueryRows, state S154");
                                this.Manager.Comment("reaching state \'S182\'");
                                bool temp142;
                                this.Manager.Comment("executing step \'call CheckRequirementEnabled(610,out _)\'");
                                this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(610, out temp142);
                                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp142);
                                this.Manager.Comment("reaching state \'S210\'");
                                int temp145 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite2CheckRequirementEnabledChecker14)), new ExpectedReturn(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite2CheckRequirementEnabledChecker15)));
                                if ((temp145 == 0)) {
                                    this.Manager.Comment("reaching state \'S253\'");
                                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite2RopQueryRowsResponseChecker6))) != -1)) {
                                        this.Manager.Comment("reaching state \'S301\'");
                                        Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp143;
                                        this.Manager.Comment("executing step \'call RopSeekRowFractional(True,False)\'");
                                        temp143 = this.IMS_OXCTABLAdapterInstance.RopSeekRowFractional(true, false);
                                        this.Manager.Checkpoint("MS-OXCTABL_R855");
                                        this.Manager.Checkpoint("MS-OXCTABL_R910");
                                        this.Manager.Comment("reaching state \'S349\'");
                                        this.Manager.Comment("checking step \'return RopSeekRowFractional/success\'");
                                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp143, "return of RopSeekRowFractional, state S349");
                                        this.Manager.Comment("reaching state \'S397\'");
                                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.RopSeekRowFractionalResponseInfo, null, new RopSeekRowFractionalResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite2RopSeekRowFractionalResponseChecker6))) != -1)) {
                                            S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteS416();
                                        }
                                        else {
                                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.RopSeekRowFractionalResponseInfo, null, new RopSeekRowFractionalResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite2RopSeekRowFractionalResponseChecker6)));
                                        }
                                    }
                                    else {
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite2RopQueryRowsResponseChecker6)));
                                    }
                                    goto label38;
                                }
                                if ((temp145 == 1)) {
                                    this.Manager.Comment("reaching state \'S254\'");
                                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite2RopQueryRowsResponseChecker7))) != -1)) {
                                        this.Manager.Comment("reaching state \'S302\'");
                                        Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp144;
                                        this.Manager.Comment("executing step \'call RopSeekRowFractional(True,False)\'");
                                        temp144 = this.IMS_OXCTABLAdapterInstance.RopSeekRowFractional(true, false);
                                        this.Manager.Checkpoint("MS-OXCTABL_R855");
                                        this.Manager.Checkpoint("MS-OXCTABL_R910");
                                        this.Manager.Comment("reaching state \'S350\'");
                                        this.Manager.Comment("checking step \'return RopSeekRowFractional/success\'");
                                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp144, "return of RopSeekRowFractional, state S350");
                                        this.Manager.Comment("reaching state \'S398\'");
                                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.RopSeekRowFractionalResponseInfo, null, new RopSeekRowFractionalResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite2RopSeekRowFractionalResponseChecker7))) != -1)) {
                                            S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteS415();
                                        }
                                        else {
                                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.RopSeekRowFractionalResponseInfo, null, new RopSeekRowFractionalResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite2RopSeekRowFractionalResponseChecker7)));
                                        }
                                    }
                                    else {
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite2RopQueryRowsResponseChecker7)));
                                    }
                                    goto label38;
                                }
                                throw new InvalidOperationException("never reached");
                            label38:
;
                                goto label39;
                            }
                            throw new InvalidOperationException("never reached");
                        label39:
;
                            goto label40;
                        }
                        throw new InvalidOperationException("never reached");
                    label40:
;
                        goto label48;
                    }
                    if ((temp174 == 1)) {
                        this.Manager.Comment("reaching state \'S64\'");
                        bool temp148;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(866,out _)\'");
                        this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(866, out temp148);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp148);
                        this.Manager.Comment("reaching state \'S72\'");
                        int temp173 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite2CheckRequirementEnabledChecker17)), new ExpectedReturn(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite2CheckRequirementEnabledChecker24)));
                        if ((temp173 == 0)) {
                            this.Manager.Comment("reaching state \'S85\'");
                            bool temp149;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(867,out _)\'");
                            this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(867, out temp149);
                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp149);
                            this.Manager.Comment("reaching state \'S101\'");
                            int temp160 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite2CheckRequirementEnabledChecker18)), new ExpectedReturn(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite2CheckRequirementEnabledChecker21)));
                            if ((temp160 == 0)) {
                                this.Manager.Comment("reaching state \'S127\'");
                                Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp150;
                                this.Manager.Comment("executing step \'call RopQueryRows(Advance,True)\'");
                                temp150 = this.IMS_OXCTABLAdapterInstance.RopQueryRows(((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), true);
                                this.Manager.Checkpoint("MS-OXCTABL_R837");
                                this.Manager.Comment("reaching state \'S155\'");
                                this.Manager.Comment("checking step \'return RopQueryRows/success\'");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp150, "return of RopQueryRows, state S155");
                                this.Manager.Comment("reaching state \'S183\'");
                                bool temp151;
                                this.Manager.Comment("executing step \'call CheckRequirementEnabled(610,out _)\'");
                                this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(610, out temp151);
                                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp151);
                                this.Manager.Comment("reaching state \'S211\'");
                                int temp154 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite2CheckRequirementEnabledChecker19)), new ExpectedReturn(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite2CheckRequirementEnabledChecker20)));
                                if ((temp154 == 0)) {
                                    this.Manager.Comment("reaching state \'S255\'");
                                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite2RopQueryRowsResponseChecker8))) != -1)) {
                                        this.Manager.Comment("reaching state \'S303\'");
                                        Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp152;
                                        this.Manager.Comment("executing step \'call RopSeekRowFractional(True,False)\'");
                                        temp152 = this.IMS_OXCTABLAdapterInstance.RopSeekRowFractional(true, false);
                                        this.Manager.Checkpoint("MS-OXCTABL_R855");
                                        this.Manager.Checkpoint("MS-OXCTABL_R910");
                                        this.Manager.Comment("reaching state \'S351\'");
                                        this.Manager.Comment("checking step \'return RopSeekRowFractional/success\'");
                                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp152, "return of RopSeekRowFractional, state S351");
                                        this.Manager.Comment("reaching state \'S399\'");
                                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.RopSeekRowFractionalResponseInfo, null, new RopSeekRowFractionalResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite2RopSeekRowFractionalResponseChecker8))) != -1)) {
                                            S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteS414();
                                        }
                                        else {
                                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.RopSeekRowFractionalResponseInfo, null, new RopSeekRowFractionalResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite2RopSeekRowFractionalResponseChecker8)));
                                        }
                                    }
                                    else {
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite2RopQueryRowsResponseChecker8)));
                                    }
                                    goto label41;
                                }
                                if ((temp154 == 1)) {
                                    this.Manager.Comment("reaching state \'S256\'");
                                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite2RopQueryRowsResponseChecker9))) != -1)) {
                                        this.Manager.Comment("reaching state \'S304\'");
                                        Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp153;
                                        this.Manager.Comment("executing step \'call RopSeekRowFractional(True,False)\'");
                                        temp153 = this.IMS_OXCTABLAdapterInstance.RopSeekRowFractional(true, false);
                                        this.Manager.Checkpoint("MS-OXCTABL_R855");
                                        this.Manager.Checkpoint("MS-OXCTABL_R910");
                                        this.Manager.Comment("reaching state \'S352\'");
                                        this.Manager.Comment("checking step \'return RopSeekRowFractional/success\'");
                                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp153, "return of RopSeekRowFractional, state S352");
                                        this.Manager.Comment("reaching state \'S400\'");
                                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.RopSeekRowFractionalResponseInfo, null, new RopSeekRowFractionalResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite2RopSeekRowFractionalResponseChecker9))) != -1)) {
                                            S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteS413();
                                        }
                                        else {
                                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.RopSeekRowFractionalResponseInfo, null, new RopSeekRowFractionalResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite2RopSeekRowFractionalResponseChecker9)));
                                        }
                                    }
                                    else {
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite2RopQueryRowsResponseChecker9)));
                                    }
                                    goto label41;
                                }
                                throw new InvalidOperationException("never reached");
                            label41:
;
                                goto label43;
                            }
                            if ((temp160 == 1)) {
                                this.Manager.Comment("reaching state \'S128\'");
                                Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp155;
                                this.Manager.Comment("executing step \'call RopQueryRows(Advance,True)\'");
                                temp155 = this.IMS_OXCTABLAdapterInstance.RopQueryRows(((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), true);
                                this.Manager.Checkpoint("MS-OXCTABL_R837");
                                this.Manager.Comment("reaching state \'S156\'");
                                this.Manager.Comment("checking step \'return RopQueryRows/success\'");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp155, "return of RopQueryRows, state S156");
                                this.Manager.Comment("reaching state \'S184\'");
                                bool temp156;
                                this.Manager.Comment("executing step \'call CheckRequirementEnabled(610,out _)\'");
                                this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(610, out temp156);
                                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp156);
                                this.Manager.Comment("reaching state \'S212\'");
                                int temp159 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite2CheckRequirementEnabledChecker22)), new ExpectedReturn(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite2CheckRequirementEnabledChecker23)));
                                if ((temp159 == 0)) {
                                    this.Manager.Comment("reaching state \'S257\'");
                                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite2RopQueryRowsResponseChecker10))) != -1)) {
                                        this.Manager.Comment("reaching state \'S305\'");
                                        Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp157;
                                        this.Manager.Comment("executing step \'call RopSeekRowFractional(True,False)\'");
                                        temp157 = this.IMS_OXCTABLAdapterInstance.RopSeekRowFractional(true, false);
                                        this.Manager.Checkpoint("MS-OXCTABL_R855");
                                        this.Manager.Checkpoint("MS-OXCTABL_R910");
                                        this.Manager.Comment("reaching state \'S353\'");
                                        this.Manager.Comment("checking step \'return RopSeekRowFractional/success\'");
                                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp157, "return of RopSeekRowFractional, state S353");
                                        this.Manager.Comment("reaching state \'S401\'");
                                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.RopSeekRowFractionalResponseInfo, null, new RopSeekRowFractionalResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite2RopSeekRowFractionalResponseChecker10))) != -1)) {
                                            S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteS412();
                                        }
                                        else {
                                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.RopSeekRowFractionalResponseInfo, null, new RopSeekRowFractionalResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite2RopSeekRowFractionalResponseChecker10)));
                                        }
                                    }
                                    else {
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite2RopQueryRowsResponseChecker10)));
                                    }
                                    goto label42;
                                }
                                if ((temp159 == 1)) {
                                    this.Manager.Comment("reaching state \'S258\'");
                                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite2RopQueryRowsResponseChecker11))) != -1)) {
                                        this.Manager.Comment("reaching state \'S306\'");
                                        Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp158;
                                        this.Manager.Comment("executing step \'call RopSeekRowFractional(True,False)\'");
                                        temp158 = this.IMS_OXCTABLAdapterInstance.RopSeekRowFractional(true, false);
                                        this.Manager.Checkpoint("MS-OXCTABL_R855");
                                        this.Manager.Checkpoint("MS-OXCTABL_R910");
                                        this.Manager.Comment("reaching state \'S354\'");
                                        this.Manager.Comment("checking step \'return RopSeekRowFractional/success\'");
                                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp158, "return of RopSeekRowFractional, state S354");
                                        this.Manager.Comment("reaching state \'S402\'");
                                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.RopSeekRowFractionalResponseInfo, null, new RopSeekRowFractionalResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite2RopSeekRowFractionalResponseChecker11))) != -1)) {
                                            S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteS411();
                                        }
                                        else {
                                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.RopSeekRowFractionalResponseInfo, null, new RopSeekRowFractionalResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite2RopSeekRowFractionalResponseChecker11)));
                                        }
                                    }
                                    else {
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite2RopQueryRowsResponseChecker11)));
                                    }
                                    goto label42;
                                }
                                throw new InvalidOperationException("never reached");
                            label42:
;
                                goto label43;
                            }
                            throw new InvalidOperationException("never reached");
                        label43:
;
                            goto label47;
                        }
                        if ((temp173 == 1)) {
                            this.Manager.Comment("reaching state \'S86\'");
                            bool temp161;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(867,out _)\'");
                            this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(867, out temp161);
                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp161);
                            this.Manager.Comment("reaching state \'S102\'");
                            int temp172 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite2CheckRequirementEnabledChecker25)), new ExpectedReturn(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite2CheckRequirementEnabledChecker28)));
                            if ((temp172 == 0)) {
                                this.Manager.Comment("reaching state \'S129\'");
                                Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp162;
                                this.Manager.Comment("executing step \'call RopQueryRows(Advance,True)\'");
                                temp162 = this.IMS_OXCTABLAdapterInstance.RopQueryRows(((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), true);
                                this.Manager.Checkpoint("MS-OXCTABL_R837");
                                this.Manager.Comment("reaching state \'S157\'");
                                this.Manager.Comment("checking step \'return RopQueryRows/success\'");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp162, "return of RopQueryRows, state S157");
                                this.Manager.Comment("reaching state \'S185\'");
                                bool temp163;
                                this.Manager.Comment("executing step \'call CheckRequirementEnabled(610,out _)\'");
                                this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(610, out temp163);
                                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp163);
                                this.Manager.Comment("reaching state \'S213\'");
                                int temp166 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite2CheckRequirementEnabledChecker26)), new ExpectedReturn(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite2CheckRequirementEnabledChecker27)));
                                if ((temp166 == 0)) {
                                    this.Manager.Comment("reaching state \'S259\'");
                                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite2RopQueryRowsResponseChecker12))) != -1)) {
                                        this.Manager.Comment("reaching state \'S307\'");
                                        Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp164;
                                        this.Manager.Comment("executing step \'call RopSeekRowFractional(True,False)\'");
                                        temp164 = this.IMS_OXCTABLAdapterInstance.RopSeekRowFractional(true, false);
                                        this.Manager.Checkpoint("MS-OXCTABL_R855");
                                        this.Manager.Checkpoint("MS-OXCTABL_R910");
                                        this.Manager.Comment("reaching state \'S355\'");
                                        this.Manager.Comment("checking step \'return RopSeekRowFractional/success\'");
                                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp164, "return of RopSeekRowFractional, state S355");
                                        this.Manager.Comment("reaching state \'S403\'");
                                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.RopSeekRowFractionalResponseInfo, null, new RopSeekRowFractionalResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite2RopSeekRowFractionalResponseChecker12))) != -1)) {
                                            S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteS410();
                                        }
                                        else {
                                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.RopSeekRowFractionalResponseInfo, null, new RopSeekRowFractionalResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite2RopSeekRowFractionalResponseChecker12)));
                                        }
                                    }
                                    else {
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite2RopQueryRowsResponseChecker12)));
                                    }
                                    goto label44;
                                }
                                if ((temp166 == 1)) {
                                    this.Manager.Comment("reaching state \'S260\'");
                                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite2RopQueryRowsResponseChecker13))) != -1)) {
                                        this.Manager.Comment("reaching state \'S308\'");
                                        Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp165;
                                        this.Manager.Comment("executing step \'call RopSeekRowFractional(True,False)\'");
                                        temp165 = this.IMS_OXCTABLAdapterInstance.RopSeekRowFractional(true, false);
                                        this.Manager.Checkpoint("MS-OXCTABL_R855");
                                        this.Manager.Checkpoint("MS-OXCTABL_R910");
                                        this.Manager.Comment("reaching state \'S356\'");
                                        this.Manager.Comment("checking step \'return RopSeekRowFractional/success\'");
                                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp165, "return of RopSeekRowFractional, state S356");
                                        this.Manager.Comment("reaching state \'S404\'");
                                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.RopSeekRowFractionalResponseInfo, null, new RopSeekRowFractionalResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite2RopSeekRowFractionalResponseChecker13))) != -1)) {
                                            S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteS409();
                                        }
                                        else {
                                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.RopSeekRowFractionalResponseInfo, null, new RopSeekRowFractionalResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite2RopSeekRowFractionalResponseChecker13)));
                                        }
                                    }
                                    else {
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite2RopQueryRowsResponseChecker13)));
                                    }
                                    goto label44;
                                }
                                throw new InvalidOperationException("never reached");
                            label44:
;
                                goto label46;
                            }
                            if ((temp172 == 1)) {
                                this.Manager.Comment("reaching state \'S130\'");
                                Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp167;
                                this.Manager.Comment("executing step \'call RopQueryRows(Advance,True)\'");
                                temp167 = this.IMS_OXCTABLAdapterInstance.RopQueryRows(((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), true);
                                this.Manager.Checkpoint("MS-OXCTABL_R837");
                                this.Manager.Comment("reaching state \'S158\'");
                                this.Manager.Comment("checking step \'return RopQueryRows/success\'");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp167, "return of RopQueryRows, state S158");
                                this.Manager.Comment("reaching state \'S186\'");
                                bool temp168;
                                this.Manager.Comment("executing step \'call CheckRequirementEnabled(610,out _)\'");
                                this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(610, out temp168);
                                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp168);
                                this.Manager.Comment("reaching state \'S214\'");
                                int temp171 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite2CheckRequirementEnabledChecker29)), new ExpectedReturn(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite2CheckRequirementEnabledChecker30)));
                                if ((temp171 == 0)) {
                                    this.Manager.Comment("reaching state \'S261\'");
                                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite2RopQueryRowsResponseChecker14))) != -1)) {
                                        this.Manager.Comment("reaching state \'S309\'");
                                        Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp169;
                                        this.Manager.Comment("executing step \'call RopSeekRowFractional(True,False)\'");
                                        temp169 = this.IMS_OXCTABLAdapterInstance.RopSeekRowFractional(true, false);
                                        this.Manager.Checkpoint("MS-OXCTABL_R855");
                                        this.Manager.Checkpoint("MS-OXCTABL_R910");
                                        this.Manager.Comment("reaching state \'S357\'");
                                        this.Manager.Comment("checking step \'return RopSeekRowFractional/success\'");
                                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp169, "return of RopSeekRowFractional, state S357");
                                        this.Manager.Comment("reaching state \'S405\'");
                                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.RopSeekRowFractionalResponseInfo, null, new RopSeekRowFractionalResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite2RopSeekRowFractionalResponseChecker14))) != -1)) {
                                            S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteS408();
                                        }
                                        else {
                                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.RopSeekRowFractionalResponseInfo, null, new RopSeekRowFractionalResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite2RopSeekRowFractionalResponseChecker14)));
                                        }
                                    }
                                    else {
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite2RopQueryRowsResponseChecker14)));
                                    }
                                    goto label45;
                                }
                                if ((temp171 == 1)) {
                                    this.Manager.Comment("reaching state \'S262\'");
                                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite2RopQueryRowsResponseChecker15))) != -1)) {
                                        this.Manager.Comment("reaching state \'S310\'");
                                        Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp170;
                                        this.Manager.Comment("executing step \'call RopSeekRowFractional(True,False)\'");
                                        temp170 = this.IMS_OXCTABLAdapterInstance.RopSeekRowFractional(true, false);
                                        this.Manager.Checkpoint("MS-OXCTABL_R855");
                                        this.Manager.Checkpoint("MS-OXCTABL_R910");
                                        this.Manager.Comment("reaching state \'S358\'");
                                        this.Manager.Comment("checking step \'return RopSeekRowFractional/success\'");
                                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp170, "return of RopSeekRowFractional, state S358");
                                        this.Manager.Comment("reaching state \'S406\'");
                                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.RopSeekRowFractionalResponseInfo, null, new RopSeekRowFractionalResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite2RopSeekRowFractionalResponseChecker15))) != -1)) {
                                            S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteS407();
                                        }
                                        else {
                                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.RopSeekRowFractionalResponseInfo, null, new RopSeekRowFractionalResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite2RopSeekRowFractionalResponseChecker15)));
                                        }
                                    }
                                    else {
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite2RopQueryRowsResponseChecker15)));
                                    }
                                    goto label45;
                                }
                                throw new InvalidOperationException("never reached");
                            label45:
;
                                goto label46;
                            }
                            throw new InvalidOperationException("never reached");
                        label46:
;
                            goto label47;
                        }
                        throw new InvalidOperationException("never reached");
                    label47:
;
                        goto label48;
                    }
                    throw new InvalidOperationException("never reached");
                label48:
;
                    goto label49;
                }
                if ((temp175 == 1)) {
                    this.Manager.Comment("reaching state \'S30\'");
                    goto label49;
                }
                throw new InvalidOperationException("never reached");
            label49:
;
                goto label50;
            }
            if ((temp176 == 1)) {
                this.Manager.Comment("reaching state \'S15\'");
                goto label50;
            }
            throw new InvalidOperationException("never reached");
        label50:
;
            this.Manager.EndTest();
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite2CheckMAPIHTTPTransportSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S5");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite2CheckRequirementEnabledChecker(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S22");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite2CheckRequirementEnabledChecker1(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S56");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite2CheckRequirementEnabledChecker2(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S71");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite2CheckRequirementEnabledChecker3(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S99");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite2CheckRequirementEnabledChecker4(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S207");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite2RopQueryRowsResponseChecker(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SETCOLUMNS,True,True" +
                    ",True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S247");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S247");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S247");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S247");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S247");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S247");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S247");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S247");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S247");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S247");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R472, MS-OXCTABL_R427, MS-OXCTABL_R42" +
                        "6, MS-OXCTABL_R116");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R472");
            this.Manager.Checkpoint("MS-OXCTABL_R427");
            this.Manager.Checkpoint("MS-OXCTABL_R426");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite2RopSeekRowFractionalResponseChecker(bool zeroNumerator, bool smallDenominator, Microsoft.Protocols.TestSuites.MS_OXCTABL.CursorPosition cursorPosition) {
            this.Manager.Comment("checking step \'event RopSeekRowFractionalResponse(True,False,BEGIN)\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, zeroNumerator, "zeroNumerator of RopSeekRowFractionalResponse, state S391");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, smallDenominator, "smallDenominator of RopSeekRowFractionalResponse, state S391");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.CursorPosition>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.CursorPosition)(0)), cursorPosition, "cursorPosition of RopSeekRowFractionalResponse, state S391");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R514");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R514");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite2CheckRequirementEnabledChecker5(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S207");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite2RopQueryRowsResponseChecker1(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SETCOLUMNS,True,True" +
                    ",True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S248");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S248");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S248");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S248");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S248");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S248");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S248");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S248");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S248");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S248");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R472, MS-OXCTABL_R427, MS-OXCTABL_R42" +
                        "6, MS-OXCTABL_R116, MS-OXCTABL_R610");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R472");
            this.Manager.Checkpoint("MS-OXCTABL_R427");
            this.Manager.Checkpoint("MS-OXCTABL_R426");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R610");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite2RopSeekRowFractionalResponseChecker1(bool zeroNumerator, bool smallDenominator, Microsoft.Protocols.TestSuites.MS_OXCTABL.CursorPosition cursorPosition) {
            this.Manager.Comment("checking step \'event RopSeekRowFractionalResponse(True,False,BEGIN)\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, zeroNumerator, "zeroNumerator of RopSeekRowFractionalResponse, state S392");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, smallDenominator, "smallDenominator of RopSeekRowFractionalResponse, state S392");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.CursorPosition>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.CursorPosition)(0)), cursorPosition, "cursorPosition of RopSeekRowFractionalResponse, state S392");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R514");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R514");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite2CheckRequirementEnabledChecker6(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S99");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite2CheckRequirementEnabledChecker7(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S208");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite2RopQueryRowsResponseChecker2(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SETCOLUMNS,True,True" +
                    ",True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S249");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S249");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S249");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S249");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S249");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S249");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S249");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S249");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S249");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S249");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R472, MS-OXCTABL_R427, MS-OXCTABL_R42" +
                        "6, MS-OXCTABL_R116, MS-OXCTABL_R610");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R472");
            this.Manager.Checkpoint("MS-OXCTABL_R427");
            this.Manager.Checkpoint("MS-OXCTABL_R426");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R610");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite2RopSeekRowFractionalResponseChecker2(bool zeroNumerator, bool smallDenominator, Microsoft.Protocols.TestSuites.MS_OXCTABL.CursorPosition cursorPosition) {
            this.Manager.Comment("checking step \'event RopSeekRowFractionalResponse(True,False,BEGIN)\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, zeroNumerator, "zeroNumerator of RopSeekRowFractionalResponse, state S393");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, smallDenominator, "smallDenominator of RopSeekRowFractionalResponse, state S393");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.CursorPosition>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.CursorPosition)(0)), cursorPosition, "cursorPosition of RopSeekRowFractionalResponse, state S393");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R514");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R514");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite2CheckRequirementEnabledChecker8(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S208");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite2RopQueryRowsResponseChecker3(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SETCOLUMNS,True,True" +
                    ",True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S250");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S250");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S250");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S250");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S250");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S250");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S250");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S250");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S250");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S250");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R472, MS-OXCTABL_R427, MS-OXCTABL_R42" +
                        "6, MS-OXCTABL_R116");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R472");
            this.Manager.Checkpoint("MS-OXCTABL_R427");
            this.Manager.Checkpoint("MS-OXCTABL_R426");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite2RopSeekRowFractionalResponseChecker3(bool zeroNumerator, bool smallDenominator, Microsoft.Protocols.TestSuites.MS_OXCTABL.CursorPosition cursorPosition) {
            this.Manager.Comment("checking step \'event RopSeekRowFractionalResponse(True,False,BEGIN)\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, zeroNumerator, "zeroNumerator of RopSeekRowFractionalResponse, state S394");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, smallDenominator, "smallDenominator of RopSeekRowFractionalResponse, state S394");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.CursorPosition>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.CursorPosition)(0)), cursorPosition, "cursorPosition of RopSeekRowFractionalResponse, state S394");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R514");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R514");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite2CheckRequirementEnabledChecker9(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S71");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite2CheckRequirementEnabledChecker10(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S100");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite2CheckRequirementEnabledChecker11(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S209");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite2RopQueryRowsResponseChecker4(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SETCOLUMNS,True,True" +
                    ",True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S251");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S251");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S251");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S251");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S251");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S251");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S251");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S251");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S251");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S251");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R472, MS-OXCTABL_R427, MS-OXCTABL_R42" +
                        "6, MS-OXCTABL_R116, MS-OXCTABL_R610");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R472");
            this.Manager.Checkpoint("MS-OXCTABL_R427");
            this.Manager.Checkpoint("MS-OXCTABL_R426");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R610");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite2RopSeekRowFractionalResponseChecker4(bool zeroNumerator, bool smallDenominator, Microsoft.Protocols.TestSuites.MS_OXCTABL.CursorPosition cursorPosition) {
            this.Manager.Comment("checking step \'event RopSeekRowFractionalResponse(True,False,BEGIN)\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, zeroNumerator, "zeroNumerator of RopSeekRowFractionalResponse, state S395");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, smallDenominator, "smallDenominator of RopSeekRowFractionalResponse, state S395");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.CursorPosition>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.CursorPosition)(0)), cursorPosition, "cursorPosition of RopSeekRowFractionalResponse, state S395");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R514");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R514");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite2CheckRequirementEnabledChecker12(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S209");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite2RopQueryRowsResponseChecker5(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SETCOLUMNS,True,True" +
                    ",True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S252");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S252");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S252");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S252");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S252");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S252");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S252");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S252");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S252");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S252");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R472, MS-OXCTABL_R427, MS-OXCTABL_R42" +
                        "6, MS-OXCTABL_R116");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R472");
            this.Manager.Checkpoint("MS-OXCTABL_R427");
            this.Manager.Checkpoint("MS-OXCTABL_R426");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite2RopSeekRowFractionalResponseChecker5(bool zeroNumerator, bool smallDenominator, Microsoft.Protocols.TestSuites.MS_OXCTABL.CursorPosition cursorPosition) {
            this.Manager.Comment("checking step \'event RopSeekRowFractionalResponse(True,False,BEGIN)\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, zeroNumerator, "zeroNumerator of RopSeekRowFractionalResponse, state S396");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, smallDenominator, "smallDenominator of RopSeekRowFractionalResponse, state S396");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.CursorPosition>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.CursorPosition)(0)), cursorPosition, "cursorPosition of RopSeekRowFractionalResponse, state S396");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R514");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R514");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite2CheckRequirementEnabledChecker13(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S100");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite2CheckRequirementEnabledChecker14(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S210");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite2RopQueryRowsResponseChecker6(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SETCOLUMNS,True,True" +
                    ",True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S253");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S253");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S253");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S253");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S253");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S253");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S253");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S253");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S253");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S253");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R472, MS-OXCTABL_R427, MS-OXCTABL_R42" +
                        "6, MS-OXCTABL_R116");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R472");
            this.Manager.Checkpoint("MS-OXCTABL_R427");
            this.Manager.Checkpoint("MS-OXCTABL_R426");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite2RopSeekRowFractionalResponseChecker6(bool zeroNumerator, bool smallDenominator, Microsoft.Protocols.TestSuites.MS_OXCTABL.CursorPosition cursorPosition) {
            this.Manager.Comment("checking step \'event RopSeekRowFractionalResponse(True,False,BEGIN)\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, zeroNumerator, "zeroNumerator of RopSeekRowFractionalResponse, state S397");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, smallDenominator, "smallDenominator of RopSeekRowFractionalResponse, state S397");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.CursorPosition>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.CursorPosition)(0)), cursorPosition, "cursorPosition of RopSeekRowFractionalResponse, state S397");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R514");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R514");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite2CheckRequirementEnabledChecker15(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S210");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite2RopQueryRowsResponseChecker7(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SETCOLUMNS,True,True" +
                    ",True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S254");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S254");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S254");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S254");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S254");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S254");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S254");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S254");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S254");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S254");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R472, MS-OXCTABL_R427, MS-OXCTABL_R42" +
                        "6, MS-OXCTABL_R116, MS-OXCTABL_R610");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R472");
            this.Manager.Checkpoint("MS-OXCTABL_R427");
            this.Manager.Checkpoint("MS-OXCTABL_R426");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R610");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite2RopSeekRowFractionalResponseChecker7(bool zeroNumerator, bool smallDenominator, Microsoft.Protocols.TestSuites.MS_OXCTABL.CursorPosition cursorPosition) {
            this.Manager.Comment("checking step \'event RopSeekRowFractionalResponse(True,False,BEGIN)\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, zeroNumerator, "zeroNumerator of RopSeekRowFractionalResponse, state S398");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, smallDenominator, "smallDenominator of RopSeekRowFractionalResponse, state S398");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.CursorPosition>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.CursorPosition)(0)), cursorPosition, "cursorPosition of RopSeekRowFractionalResponse, state S398");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R514");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R514");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite2CheckRequirementEnabledChecker16(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S56");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite2CheckRequirementEnabledChecker17(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S72");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite2CheckRequirementEnabledChecker18(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S101");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite2CheckRequirementEnabledChecker19(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S211");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite2RopQueryRowsResponseChecker8(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SETCOLUMNS,True,True" +
                    ",True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S255");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S255");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S255");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S255");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S255");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S255");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S255");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S255");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S255");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S255");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R472, MS-OXCTABL_R427, MS-OXCTABL_R42" +
                        "6, MS-OXCTABL_R116");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R472");
            this.Manager.Checkpoint("MS-OXCTABL_R427");
            this.Manager.Checkpoint("MS-OXCTABL_R426");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite2RopSeekRowFractionalResponseChecker8(bool zeroNumerator, bool smallDenominator, Microsoft.Protocols.TestSuites.MS_OXCTABL.CursorPosition cursorPosition) {
            this.Manager.Comment("checking step \'event RopSeekRowFractionalResponse(True,False,BEGIN)\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, zeroNumerator, "zeroNumerator of RopSeekRowFractionalResponse, state S399");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, smallDenominator, "smallDenominator of RopSeekRowFractionalResponse, state S399");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.CursorPosition>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.CursorPosition)(0)), cursorPosition, "cursorPosition of RopSeekRowFractionalResponse, state S399");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R514");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R514");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite2CheckRequirementEnabledChecker20(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S211");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite2RopQueryRowsResponseChecker9(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SETCOLUMNS,True,True" +
                    ",True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S256");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S256");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S256");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S256");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S256");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S256");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S256");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S256");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S256");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S256");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R472, MS-OXCTABL_R427, MS-OXCTABL_R42" +
                        "6, MS-OXCTABL_R116, MS-OXCTABL_R610");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R472");
            this.Manager.Checkpoint("MS-OXCTABL_R427");
            this.Manager.Checkpoint("MS-OXCTABL_R426");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R610");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite2RopSeekRowFractionalResponseChecker9(bool zeroNumerator, bool smallDenominator, Microsoft.Protocols.TestSuites.MS_OXCTABL.CursorPosition cursorPosition) {
            this.Manager.Comment("checking step \'event RopSeekRowFractionalResponse(True,False,BEGIN)\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, zeroNumerator, "zeroNumerator of RopSeekRowFractionalResponse, state S400");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, smallDenominator, "smallDenominator of RopSeekRowFractionalResponse, state S400");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.CursorPosition>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.CursorPosition)(0)), cursorPosition, "cursorPosition of RopSeekRowFractionalResponse, state S400");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R514");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R514");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite2CheckRequirementEnabledChecker21(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S101");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite2CheckRequirementEnabledChecker22(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S212");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite2RopQueryRowsResponseChecker10(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SETCOLUMNS,True,True" +
                    ",True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S257");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S257");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S257");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S257");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S257");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S257");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S257");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S257");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S257");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S257");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R472, MS-OXCTABL_R427, MS-OXCTABL_R42" +
                        "6, MS-OXCTABL_R116, MS-OXCTABL_R610");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R472");
            this.Manager.Checkpoint("MS-OXCTABL_R427");
            this.Manager.Checkpoint("MS-OXCTABL_R426");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R610");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite2RopSeekRowFractionalResponseChecker10(bool zeroNumerator, bool smallDenominator, Microsoft.Protocols.TestSuites.MS_OXCTABL.CursorPosition cursorPosition) {
            this.Manager.Comment("checking step \'event RopSeekRowFractionalResponse(True,False,BEGIN)\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, zeroNumerator, "zeroNumerator of RopSeekRowFractionalResponse, state S401");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, smallDenominator, "smallDenominator of RopSeekRowFractionalResponse, state S401");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.CursorPosition>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.CursorPosition)(0)), cursorPosition, "cursorPosition of RopSeekRowFractionalResponse, state S401");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R514");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R514");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite2CheckRequirementEnabledChecker23(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S212");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite2RopQueryRowsResponseChecker11(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SETCOLUMNS,True,True" +
                    ",True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S258");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S258");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S258");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S258");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S258");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S258");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S258");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S258");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S258");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S258");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R472, MS-OXCTABL_R427, MS-OXCTABL_R42" +
                        "6, MS-OXCTABL_R116");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R472");
            this.Manager.Checkpoint("MS-OXCTABL_R427");
            this.Manager.Checkpoint("MS-OXCTABL_R426");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite2RopSeekRowFractionalResponseChecker11(bool zeroNumerator, bool smallDenominator, Microsoft.Protocols.TestSuites.MS_OXCTABL.CursorPosition cursorPosition) {
            this.Manager.Comment("checking step \'event RopSeekRowFractionalResponse(True,False,BEGIN)\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, zeroNumerator, "zeroNumerator of RopSeekRowFractionalResponse, state S402");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, smallDenominator, "smallDenominator of RopSeekRowFractionalResponse, state S402");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.CursorPosition>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.CursorPosition)(0)), cursorPosition, "cursorPosition of RopSeekRowFractionalResponse, state S402");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R514");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R514");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite2CheckRequirementEnabledChecker24(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S72");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite2CheckRequirementEnabledChecker25(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S102");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite2CheckRequirementEnabledChecker26(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S213");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite2RopQueryRowsResponseChecker12(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SETCOLUMNS,True,True" +
                    ",True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S259");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S259");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S259");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S259");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S259");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S259");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S259");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S259");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S259");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S259");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R472, MS-OXCTABL_R427, MS-OXCTABL_R42" +
                        "6, MS-OXCTABL_R116");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R472");
            this.Manager.Checkpoint("MS-OXCTABL_R427");
            this.Manager.Checkpoint("MS-OXCTABL_R426");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite2RopSeekRowFractionalResponseChecker12(bool zeroNumerator, bool smallDenominator, Microsoft.Protocols.TestSuites.MS_OXCTABL.CursorPosition cursorPosition) {
            this.Manager.Comment("checking step \'event RopSeekRowFractionalResponse(True,False,BEGIN)\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, zeroNumerator, "zeroNumerator of RopSeekRowFractionalResponse, state S403");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, smallDenominator, "smallDenominator of RopSeekRowFractionalResponse, state S403");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.CursorPosition>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.CursorPosition)(0)), cursorPosition, "cursorPosition of RopSeekRowFractionalResponse, state S403");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R514");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R514");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite2CheckRequirementEnabledChecker27(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S213");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite2RopQueryRowsResponseChecker13(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SETCOLUMNS,True,True" +
                    ",True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S260");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S260");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S260");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S260");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S260");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S260");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S260");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S260");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S260");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S260");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R472, MS-OXCTABL_R427, MS-OXCTABL_R42" +
                        "6, MS-OXCTABL_R116, MS-OXCTABL_R610");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R472");
            this.Manager.Checkpoint("MS-OXCTABL_R427");
            this.Manager.Checkpoint("MS-OXCTABL_R426");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R610");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite2RopSeekRowFractionalResponseChecker13(bool zeroNumerator, bool smallDenominator, Microsoft.Protocols.TestSuites.MS_OXCTABL.CursorPosition cursorPosition) {
            this.Manager.Comment("checking step \'event RopSeekRowFractionalResponse(True,False,BEGIN)\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, zeroNumerator, "zeroNumerator of RopSeekRowFractionalResponse, state S404");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, smallDenominator, "smallDenominator of RopSeekRowFractionalResponse, state S404");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.CursorPosition>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.CursorPosition)(0)), cursorPosition, "cursorPosition of RopSeekRowFractionalResponse, state S404");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R514");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R514");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite2CheckRequirementEnabledChecker28(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S102");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite2CheckRequirementEnabledChecker29(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S214");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite2RopQueryRowsResponseChecker14(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SETCOLUMNS,True,True" +
                    ",True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S261");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S261");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S261");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S261");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S261");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S261");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S261");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S261");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S261");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S261");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R472, MS-OXCTABL_R427, MS-OXCTABL_R42" +
                        "6, MS-OXCTABL_R116");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R472");
            this.Manager.Checkpoint("MS-OXCTABL_R427");
            this.Manager.Checkpoint("MS-OXCTABL_R426");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite2RopSeekRowFractionalResponseChecker14(bool zeroNumerator, bool smallDenominator, Microsoft.Protocols.TestSuites.MS_OXCTABL.CursorPosition cursorPosition) {
            this.Manager.Comment("checking step \'event RopSeekRowFractionalResponse(True,False,BEGIN)\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, zeroNumerator, "zeroNumerator of RopSeekRowFractionalResponse, state S405");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, smallDenominator, "smallDenominator of RopSeekRowFractionalResponse, state S405");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.CursorPosition>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.CursorPosition)(0)), cursorPosition, "cursorPosition of RopSeekRowFractionalResponse, state S405");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R514");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R514");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite2CheckRequirementEnabledChecker30(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S214");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite2RopQueryRowsResponseChecker15(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SETCOLUMNS,True,True" +
                    ",True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S262");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S262");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S262");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S262");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S262");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S262");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S262");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S262");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S262");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S262");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R472, MS-OXCTABL_R427, MS-OXCTABL_R42" +
                        "6, MS-OXCTABL_R116, MS-OXCTABL_R610");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R472");
            this.Manager.Checkpoint("MS-OXCTABL_R427");
            this.Manager.Checkpoint("MS-OXCTABL_R426");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R610");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite2RopSeekRowFractionalResponseChecker15(bool zeroNumerator, bool smallDenominator, Microsoft.Protocols.TestSuites.MS_OXCTABL.CursorPosition cursorPosition) {
            this.Manager.Comment("checking step \'event RopSeekRowFractionalResponse(True,False,BEGIN)\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, zeroNumerator, "zeroNumerator of RopSeekRowFractionalResponse, state S406");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, smallDenominator, "smallDenominator of RopSeekRowFractionalResponse, state S406");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.CursorPosition>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.CursorPosition)(0)), cursorPosition, "cursorPosition of RopSeekRowFractionalResponse, state S406");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R514");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R514");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite2CheckRequirementEnabledChecker31(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S22");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite2CheckMAPIHTTPTransportSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S5");
        }
        #endregion
        
        #region Test Starting in S6
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite3() {
            this.Manager.BeginTest("MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite3");
            this.Manager.Comment("reaching state \'S6\'");
            bool temp177;
            this.Manager.Comment("executing step \'call CheckMAPIHTTPTransportSupported(out _)\'");
            this.IMS_OXCTABLAdapterInstance.CheckMAPIHTTPTransportSupported(out temp177);
            this.Manager.AddReturn(CheckMAPIHTTPTransportSupportedInfo, null, temp177);
            this.Manager.Comment("reaching state \'S7\'");
            int temp186 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite3CheckMAPIHTTPTransportSupportedChecker)), new ExpectedReturn(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite3CheckMAPIHTTPTransportSupportedChecker1)));
            if ((temp186 == 0)) {
                this.Manager.Comment("reaching state \'S16\'");
                bool temp178;
                this.Manager.Comment("executing step \'call CheckRequirementEnabled(910,out _)\'");
                this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(910, out temp178);
                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp178);
                this.Manager.Comment("reaching state \'S23\'");
                int temp185 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite3CheckRequirementEnabledChecker)), new ExpectedReturn(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite3CheckRequirementEnabledChecker3)));
                if ((temp185 == 0)) {
                    this.Manager.Comment("reaching state \'S31\'");
                    this.Manager.Comment("executing step \'call InitializeTable(HIERARCHY_TABLE)\'");
                    this.IMS_OXCTABLAdapterInstance.InitializeTable(((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableType)(1)));
                    this.Manager.Comment("reaching state \'S37\'");
                    this.Manager.Comment("checking step \'return InitializeTable\'");
                    this.Manager.Comment("reaching state \'S42\'");
                    Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp179;
                    this.Manager.Comment("executing step \'call RopSetColumns(1,False,False,False)\'");
                    temp179 = this.IMS_OXCTABLAdapterInstance.RopSetColumns(1u, false, false, false);
                    this.Manager.Checkpoint("MS-OXCTABL_R829");
                    this.Manager.Checkpoint("MS-OXCTABL_R45");
                    this.Manager.Comment("reaching state \'S47\'");
                    this.Manager.Comment("checking step \'return RopSetColumns/success\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp179, "return of RopSetColumns, state S47");
                    this.Manager.Comment("reaching state \'S52\'");
                    Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp180;
                    this.Manager.Comment("executing step \'call RopQueryRows(Advance,True)\'");
                    temp180 = this.IMS_OXCTABLAdapterInstance.RopQueryRows(((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), true);
                    this.Manager.Checkpoint("MS-OXCTABL_R835");
                    this.Manager.Comment("reaching state \'S57\'");
                    this.Manager.Comment("checking step \'return RopQueryRows/success\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp180, "return of RopQueryRows, state S57");
                    this.Manager.Comment("reaching state \'S65\'");
                    bool temp181;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(610,out _)\'");
                    this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(610, out temp181);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp181);
                    this.Manager.Comment("reaching state \'S73\'");
                    int temp184 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite3CheckRequirementEnabledChecker1)), new ExpectedReturn(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite3CheckRequirementEnabledChecker2)));
                    if ((temp184 == 0)) {
                        this.Manager.Comment("reaching state \'S87\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite3RopQueryRowsResponseChecker))) != -1)) {
                            this.Manager.Comment("reaching state \'S103\'");
                            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp182;
                            this.Manager.Comment("executing step \'call RopSeekRowFractional(False,False)\'");
                            temp182 = this.IMS_OXCTABLAdapterInstance.RopSeekRowFractional(false, false);
                            this.Manager.Checkpoint("MS-OXCTABL_R853");
                            this.Manager.Checkpoint("MS-OXCTABL_R910");
                            this.Manager.Comment("reaching state \'S131\'");
                            this.Manager.Comment("checking step \'return RopSeekRowFractional/success\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp182, "return of RopSeekRowFractional, state S131");
                            this.Manager.Comment("reaching state \'S159\'");
                            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.RopSeekRowFractionalResponseInfo, null, new RopSeekRowFractionalResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite3RopSeekRowFractionalResponseChecker))) != -1)) {
                                this.Manager.Comment("reaching state \'S187\'");
                            }
                            else {
                                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.RopSeekRowFractionalResponseInfo, null, new RopSeekRowFractionalResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite3RopSeekRowFractionalResponseChecker)));
                            }
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite3RopQueryRowsResponseChecker)));
                        }
                        goto label51;
                    }
                    if ((temp184 == 1)) {
                        this.Manager.Comment("reaching state \'S88\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite3RopQueryRowsResponseChecker1))) != -1)) {
                            this.Manager.Comment("reaching state \'S104\'");
                            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp183;
                            this.Manager.Comment("executing step \'call RopSeekRowFractional(False,False)\'");
                            temp183 = this.IMS_OXCTABLAdapterInstance.RopSeekRowFractional(false, false);
                            this.Manager.Checkpoint("MS-OXCTABL_R853");
                            this.Manager.Checkpoint("MS-OXCTABL_R910");
                            this.Manager.Comment("reaching state \'S132\'");
                            this.Manager.Comment("checking step \'return RopSeekRowFractional/success\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp183, "return of RopSeekRowFractional, state S132");
                            this.Manager.Comment("reaching state \'S160\'");
                            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.RopSeekRowFractionalResponseInfo, null, new RopSeekRowFractionalResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite3RopSeekRowFractionalResponseChecker1))) != -1)) {
                                this.Manager.Comment("reaching state \'S188\'");
                            }
                            else {
                                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.RopSeekRowFractionalResponseInfo, null, new RopSeekRowFractionalResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite3RopSeekRowFractionalResponseChecker1)));
                            }
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite3RopQueryRowsResponseChecker1)));
                        }
                        goto label51;
                    }
                    throw new InvalidOperationException("never reached");
                label51:
;
                    goto label52;
                }
                if ((temp185 == 1)) {
                    this.Manager.Comment("reaching state \'S32\'");
                    goto label52;
                }
                throw new InvalidOperationException("never reached");
            label52:
;
                goto label53;
            }
            if ((temp186 == 1)) {
                this.Manager.Comment("reaching state \'S17\'");
                goto label53;
            }
            throw new InvalidOperationException("never reached");
        label53:
;
            this.Manager.EndTest();
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite3CheckMAPIHTTPTransportSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S7");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite3CheckRequirementEnabledChecker(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S23");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite3CheckRequirementEnabledChecker1(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S73");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite3RopQueryRowsResponseChecker(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SETCOLUMNS,True,True" +
                    ",True,True,BOOKMARK_END,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S87");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S87");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S87");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S87");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S87");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S87");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S87");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S87");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_END, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S87");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S87");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R29, MS-OXCTABL_R725, MS-OXCTABL_R472, MS-OXCTABL_R427, MS-OXCTABL_R42" +
                        "6, MS-OXCTABL_R116, MS-OXCTABL_R610");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R29");
            this.Manager.Checkpoint("MS-OXCTABL_R725");
            this.Manager.Checkpoint("MS-OXCTABL_R472");
            this.Manager.Checkpoint("MS-OXCTABL_R427");
            this.Manager.Checkpoint("MS-OXCTABL_R426");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R610");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite3RopSeekRowFractionalResponseChecker(bool zeroNumerator, bool smallDenominator, Microsoft.Protocols.TestSuites.MS_OXCTABL.CursorPosition cursorPosition) {
            this.Manager.Comment("checking step \'event RopSeekRowFractionalResponse(False,False,CURRENT)\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, zeroNumerator, "zeroNumerator of RopSeekRowFractionalResponse, state S159");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, smallDenominator, "smallDenominator of RopSeekRowFractionalResponse, state S159");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.CursorPosition>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.CursorPosition.CURRENT, cursorPosition, "cursorPosition of RopSeekRowFractionalResponse, state S159");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite3CheckRequirementEnabledChecker2(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S73");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite3RopQueryRowsResponseChecker1(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SETCOLUMNS,True,True" +
                    ",True,True,BOOKMARK_END,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S88");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S88");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S88");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S88");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S88");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S88");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S88");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S88");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_END, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S88");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S88");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R29, MS-OXCTABL_R725, MS-OXCTABL_R472, MS-OXCTABL_R427, MS-OXCTABL_R42" +
                        "6, MS-OXCTABL_R116");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R29");
            this.Manager.Checkpoint("MS-OXCTABL_R725");
            this.Manager.Checkpoint("MS-OXCTABL_R472");
            this.Manager.Checkpoint("MS-OXCTABL_R427");
            this.Manager.Checkpoint("MS-OXCTABL_R426");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite3RopSeekRowFractionalResponseChecker1(bool zeroNumerator, bool smallDenominator, Microsoft.Protocols.TestSuites.MS_OXCTABL.CursorPosition cursorPosition) {
            this.Manager.Comment("checking step \'event RopSeekRowFractionalResponse(False,False,CURRENT)\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, zeroNumerator, "zeroNumerator of RopSeekRowFractionalResponse, state S160");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, smallDenominator, "smallDenominator of RopSeekRowFractionalResponse, state S160");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.CursorPosition>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.CursorPosition.CURRENT, cursorPosition, "cursorPosition of RopSeekRowFractionalResponse, state S160");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite3CheckRequirementEnabledChecker3(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S23");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite3CheckMAPIHTTPTransportSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S7");
        }
        #endregion
        
        #region Test Starting in S8
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite4() {
            this.Manager.BeginTest("MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite4");
            this.Manager.Comment("reaching state \'S8\'");
            bool temp187;
            this.Manager.Comment("executing step \'call CheckMAPIHTTPTransportSupported(out _)\'");
            this.IMS_OXCTABLAdapterInstance.CheckMAPIHTTPTransportSupported(out temp187);
            this.Manager.AddReturn(CheckMAPIHTTPTransportSupportedInfo, null, temp187);
            this.Manager.Comment("reaching state \'S9\'");
            int temp196 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite4CheckMAPIHTTPTransportSupportedChecker)), new ExpectedReturn(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite4CheckMAPIHTTPTransportSupportedChecker1)));
            if ((temp196 == 0)) {
                this.Manager.Comment("reaching state \'S18\'");
                bool temp188;
                this.Manager.Comment("executing step \'call CheckRequirementEnabled(910,out _)\'");
                this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(910, out temp188);
                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp188);
                this.Manager.Comment("reaching state \'S24\'");
                int temp195 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite4CheckRequirementEnabledChecker)), new ExpectedReturn(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite4CheckRequirementEnabledChecker1)));
                if ((temp195 == 0)) {
                    S03_BookmarkRops_SeekRowFractionalSuccess_TestSuiteS26();
                    goto label55;
                }
                if ((temp195 == 1)) {
                    this.Manager.Comment("reaching state \'S33\'");
                    this.Manager.Comment("executing step \'call InitializeTable(RULES_TABLE)\'");
                    this.IMS_OXCTABLAdapterInstance.InitializeTable(Microsoft.Protocols.TestSuites.MS_OXCTABL.TableType.RULES_TABLE);
                    this.Manager.Comment("reaching state \'S38\'");
                    this.Manager.Comment("checking step \'return InitializeTable\'");
                    this.Manager.Comment("reaching state \'S43\'");
                    Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp189;
                    this.Manager.Comment("executing step \'call RopSetColumns(1,False,False,False)\'");
                    temp189 = this.IMS_OXCTABLAdapterInstance.RopSetColumns(1u, false, false, false);
                    this.Manager.Checkpoint("MS-OXCTABL_R830");
                    this.Manager.Checkpoint("MS-OXCTABL_R45");
                    this.Manager.Comment("reaching state \'S48\'");
                    this.Manager.Comment("checking step \'return RopSetColumns/success\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp189, "return of RopSetColumns, state S48");
                    this.Manager.Comment("reaching state \'S53\'");
                    Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp190;
                    this.Manager.Comment("executing step \'call RopQueryRows(Advance,True)\'");
                    temp190 = this.IMS_OXCTABLAdapterInstance.RopQueryRows(((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), true);
                    this.Manager.Checkpoint("MS-OXCTABL_R836");
                    this.Manager.Comment("reaching state \'S58\'");
                    this.Manager.Comment("checking step \'return RopQueryRows/success\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp190, "return of RopQueryRows, state S58");
                    this.Manager.Comment("reaching state \'S66\'");
                    bool temp191;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(610,out _)\'");
                    this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(610, out temp191);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp191);
                    this.Manager.Comment("reaching state \'S74\'");
                    int temp194 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite4CheckRequirementEnabledChecker2)), new ExpectedReturn(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite4CheckRequirementEnabledChecker3)));
                    if ((temp194 == 0)) {
                        this.Manager.Comment("reaching state \'S89\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite4RopQueryRowsResponseChecker))) != -1)) {
                            this.Manager.Comment("reaching state \'S105\'");
                            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp192;
                            this.Manager.Comment("executing step \'call RopSeekRowFractional(False,False)\'");
                            temp192 = this.IMS_OXCTABLAdapterInstance.RopSeekRowFractional(false, false);
                            this.Manager.Checkpoint("MS-OXCTABL_R854");
                            this.Manager.Checkpoint("MS-OXCTABL_R910");
                            this.Manager.Comment("reaching state \'S133\'");
                            this.Manager.Comment("checking step \'return RopSeekRowFractional/success\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp192, "return of RopSeekRowFractional, state S133");
                            this.Manager.Comment("reaching state \'S161\'");
                            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.RopSeekRowFractionalResponseInfo, null, new RopSeekRowFractionalResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite4RopSeekRowFractionalResponseChecker))) != -1)) {
                                this.Manager.Comment("reaching state \'S189\'");
                            }
                            else {
                                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.RopSeekRowFractionalResponseInfo, null, new RopSeekRowFractionalResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite4RopSeekRowFractionalResponseChecker)));
                            }
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite4RopQueryRowsResponseChecker)));
                        }
                        goto label54;
                    }
                    if ((temp194 == 1)) {
                        this.Manager.Comment("reaching state \'S90\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite4RopQueryRowsResponseChecker1))) != -1)) {
                            this.Manager.Comment("reaching state \'S106\'");
                            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp193;
                            this.Manager.Comment("executing step \'call RopSeekRowFractional(False,False)\'");
                            temp193 = this.IMS_OXCTABLAdapterInstance.RopSeekRowFractional(false, false);
                            this.Manager.Checkpoint("MS-OXCTABL_R854");
                            this.Manager.Checkpoint("MS-OXCTABL_R910");
                            this.Manager.Comment("reaching state \'S134\'");
                            this.Manager.Comment("checking step \'return RopSeekRowFractional/success\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp193, "return of RopSeekRowFractional, state S134");
                            this.Manager.Comment("reaching state \'S162\'");
                            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.RopSeekRowFractionalResponseInfo, null, new RopSeekRowFractionalResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite4RopSeekRowFractionalResponseChecker1))) != -1)) {
                                this.Manager.Comment("reaching state \'S190\'");
                            }
                            else {
                                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.RopSeekRowFractionalResponseInfo, null, new RopSeekRowFractionalResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite4RopSeekRowFractionalResponseChecker1)));
                            }
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite4RopQueryRowsResponseChecker1)));
                        }
                        goto label54;
                    }
                    throw new InvalidOperationException("never reached");
                label54:
;
                    goto label55;
                }
                throw new InvalidOperationException("never reached");
            label55:
;
                goto label56;
            }
            if ((temp196 == 1)) {
                this.Manager.Comment("reaching state \'S19\'");
                goto label56;
            }
            throw new InvalidOperationException("never reached");
        label56:
;
            this.Manager.EndTest();
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite4CheckMAPIHTTPTransportSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S9");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite4CheckRequirementEnabledChecker(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S24");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite4CheckRequirementEnabledChecker1(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S24");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite4CheckRequirementEnabledChecker2(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S74");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite4RopQueryRowsResponseChecker(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SETCOLUMNS,True,True" +
                    ",True,True,BOOKMARK_END,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S89");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S89");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S89");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S89");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S89");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S89");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S89");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S89");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_END, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S89");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S89");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R29, MS-OXCTABL_R725, MS-OXCTABL_R472, MS-OXCTABL_R427, MS-OXCTABL_R42" +
                        "6, MS-OXCTABL_R116, MS-OXCTABL_R610");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R29");
            this.Manager.Checkpoint("MS-OXCTABL_R725");
            this.Manager.Checkpoint("MS-OXCTABL_R472");
            this.Manager.Checkpoint("MS-OXCTABL_R427");
            this.Manager.Checkpoint("MS-OXCTABL_R426");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R610");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite4RopSeekRowFractionalResponseChecker(bool zeroNumerator, bool smallDenominator, Microsoft.Protocols.TestSuites.MS_OXCTABL.CursorPosition cursorPosition) {
            this.Manager.Comment("checking step \'event RopSeekRowFractionalResponse(False,False,CURRENT)\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, zeroNumerator, "zeroNumerator of RopSeekRowFractionalResponse, state S161");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, smallDenominator, "smallDenominator of RopSeekRowFractionalResponse, state S161");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.CursorPosition>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.CursorPosition.CURRENT, cursorPosition, "cursorPosition of RopSeekRowFractionalResponse, state S161");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite4CheckRequirementEnabledChecker3(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S74");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite4RopQueryRowsResponseChecker1(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SETCOLUMNS,True,True" +
                    ",True,True,BOOKMARK_END,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S90");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S90");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S90");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S90");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S90");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S90");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S90");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S90");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_END, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S90");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S90");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R29, MS-OXCTABL_R725, MS-OXCTABL_R472, MS-OXCTABL_R427, MS-OXCTABL_R42" +
                        "6, MS-OXCTABL_R116");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R29");
            this.Manager.Checkpoint("MS-OXCTABL_R725");
            this.Manager.Checkpoint("MS-OXCTABL_R472");
            this.Manager.Checkpoint("MS-OXCTABL_R427");
            this.Manager.Checkpoint("MS-OXCTABL_R426");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite4RopSeekRowFractionalResponseChecker1(bool zeroNumerator, bool smallDenominator, Microsoft.Protocols.TestSuites.MS_OXCTABL.CursorPosition cursorPosition) {
            this.Manager.Comment("checking step \'event RopSeekRowFractionalResponse(False,False,CURRENT)\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, zeroNumerator, "zeroNumerator of RopSeekRowFractionalResponse, state S162");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, smallDenominator, "smallDenominator of RopSeekRowFractionalResponse, state S162");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.CursorPosition>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.CursorPosition.CURRENT, cursorPosition, "cursorPosition of RopSeekRowFractionalResponse, state S162");
        }
        
        private void MSOXCTABL_S03_BookmarkRops_SeekRowFractionalSuccess_TestSuite4CheckMAPIHTTPTransportSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S9");
        }
        #endregion
    }
}
