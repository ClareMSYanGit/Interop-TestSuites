//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18449
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Microsoft.Protocols.TestSuites.MS_OXCTABL {
    using System;
    using System.Collections.Generic;
    using System.Text;
    using System.Reflection;
    using Microsoft.SpecExplorer.Runtime.Testing;
    using Microsoft.Protocols.TestTools;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Spec Explorer", "3.5.3130.0")]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite : PtfTestClassBase {
        
        public S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite() {
            this.SetSwitch("ProceedControlTimeout", "100");
            this.SetSwitch("QuiescenceTimeout", "2000000");
        }
        
        #region Expect Delegates
        public delegate void CheckMAPIHTTPTransportSupportedDelegate1(bool isSupported);
        
        public delegate void CheckRequirementEnabledDelegate1(bool enabled);
        
        public delegate void RopQueryRowsResponseDelegate1(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger);
        #endregion
        
        #region Event Metadata
        static System.Reflection.MethodBase CheckMAPIHTTPTransportSupportedInfo = TestManagerHelpers.GetMethodInfo(typeof(Microsoft.Protocols.TestSuites.MS_OXCTABL.IMS_OXCTABLAdapter), "CheckMAPIHTTPTransportSupported", typeof(bool).MakeByRefType());
        
        static System.Reflection.MethodBase CheckRequirementEnabledInfo = TestManagerHelpers.GetMethodInfo(typeof(Microsoft.Protocols.TestSuites.MS_OXCTABL.IMS_OXCTABLAdapter), "CheckRequirementEnabled", typeof(int), typeof(bool).MakeByRefType());
        
        static System.Reflection.EventInfo RopQueryRowsResponseInfo = TestManagerHelpers.GetEventInfo(typeof(Microsoft.Protocols.TestSuites.MS_OXCTABL.IMS_OXCTABLAdapter), "RopQueryRowsResponse");
        #endregion
        
        #region Adapter Instances
        private Microsoft.Protocols.TestSuites.MS_OXCTABL.IMS_OXCTABLAdapter IMS_OXCTABLAdapterInstance;
        #endregion
        
        #region Class Initialization and Cleanup
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void ClassInitialize(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext context) {
            PtfTestClassBase.Initialize(context);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void ClassCleanup() {
            PtfTestClassBase.Cleanup();
        }
        #endregion
        
        #region Test Initialization and Cleanup
        protected override void TestInitialize() {
            this.InitializeTestManager();
            this.IMS_OXCTABLAdapterInstance = ((Microsoft.Protocols.TestSuites.MS_OXCTABL.IMS_OXCTABLAdapter)(this.Manager.GetAdapter(typeof(Microsoft.Protocols.TestSuites.MS_OXCTABL.IMS_OXCTABLAdapter))));
            this.Manager.Subscribe(RopQueryRowsResponseInfo, this.IMS_OXCTABLAdapterInstance);
        }
        
        protected override void TestCleanup() {
            base.TestCleanup();
            this.CleanupTestManager();
        }
        #endregion
        
        #region Test Starting in S0
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite() {
            this.Manager.BeginTest("MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite");
            this.Manager.Comment("reaching state \'S0\'");
            bool temp0;
            this.Manager.Comment("executing step \'call CheckMAPIHTTPTransportSupported(out _)\'");
            this.IMS_OXCTABLAdapterInstance.CheckMAPIHTTPTransportSupported(out temp0);
            this.Manager.AddReturn(CheckMAPIHTTPTransportSupportedInfo, null, temp0);
            this.Manager.Comment("reaching state \'S1\'");
            int temp169 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteCheckMAPIHTTPTransportSupportedChecker)), new ExpectedReturn(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteCheckMAPIHTTPTransportSupportedChecker1)));
            if ((temp169 == 0)) {
                this.Manager.Comment("reaching state \'S2\'");
                goto label63;
            }
            if ((temp169 == 1)) {
                this.Manager.Comment("reaching state \'S3\'");
                this.Manager.Comment("executing step \'call InitializeTable(CONTENT_TABLE)\'");
                this.IMS_OXCTABLAdapterInstance.InitializeTable(((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableType)(0)));
                this.Manager.Comment("reaching state \'S4\'");
                this.Manager.Comment("checking step \'return InitializeTable\'");
                this.Manager.Comment("reaching state \'S5\'");
                Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp1;
                this.Manager.Comment("executing step \'call RopSetColumns(1,False,False,False)\'");
                temp1 = this.IMS_OXCTABLAdapterInstance.RopSetColumns(1u, false, false, false);
                this.Manager.Checkpoint("MS-OXCTABL_R831");
                this.Manager.Checkpoint("MS-OXCTABL_R45");
                this.Manager.Comment("reaching state \'S6\'");
                this.Manager.Comment("checking step \'return RopSetColumns/success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp1, "return of RopSetColumns, state S6");
                this.Manager.Comment("reaching state \'S7\'");
                Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp2;
                this.Manager.Comment("executing step \'call RopRestrict(1,True,False,False)\'");
                temp2 = this.IMS_OXCTABLAdapterInstance.RopRestrict(1u, true, false, false);
                this.Manager.Checkpoint("MS-OXCTABL_R834");
                this.Manager.Comment("reaching state \'S8\'");
                this.Manager.Comment("checking step \'return RopRestrict/success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp2, "return of RopRestrict, state S8");
                this.Manager.Comment("reaching state \'S9\'");
                bool temp3;
                this.Manager.Comment("executing step \'call CheckRequirementEnabled(768,out _)\'");
                this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(768, out temp3);
                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp3);
                this.Manager.Comment("reaching state \'S10\'");
                int temp168 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteCheckRequirementEnabledChecker)), new ExpectedReturn(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteCheckRequirementEnabledChecker15)));
                if ((temp168 == 0)) {
                    this.Manager.Comment("reaching state \'S11\'");
                    bool temp4;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(866,out _)\'");
                    this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(866, out temp4);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp4);
                    this.Manager.Comment("reaching state \'S13\'");
                    int temp85 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteCheckRequirementEnabledChecker1)), new ExpectedReturn(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteCheckRequirementEnabledChecker8)));
                    if ((temp85 == 0)) {
                        this.Manager.Comment("reaching state \'S15\'");
                        bool temp5;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(867,out _)\'");
                        this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(867, out temp5);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp5);
                        this.Manager.Comment("reaching state \'S19\'");
                        int temp44 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteCheckRequirementEnabledChecker2)), new ExpectedReturn(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteCheckRequirementEnabledChecker5)));
                        if ((temp44 == 0)) {
                            this.Manager.Comment("reaching state \'S23\'");
                            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp6;
                            this.Manager.Comment("executing step \'call RopQueryRows(NoAdvance,True)\'");
                            temp6 = this.IMS_OXCTABLAdapterInstance.RopQueryRows(((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), true);
                            this.Manager.Checkpoint("MS-OXCTABL_R837");
                            this.Manager.Comment("reaching state \'S31\'");
                            this.Manager.Comment("checking step \'return RopQueryRows/success\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp6, "return of RopQueryRows, state S31");
                            this.Manager.Comment("reaching state \'S39\'");
                            bool temp7;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(456,out _)\'");
                            this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(456, out temp7);
                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp7);
                            this.Manager.Comment("reaching state \'S47\'");
                            int temp24 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteCheckRequirementEnabledChecker3)), new ExpectedReturn(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteCheckRequirementEnabledChecker4)));
                            if ((temp24 == 0)) {
                                this.Manager.Comment("reaching state \'S55\'");
                                int temp15 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker9)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker10)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker11)));
                                if ((temp15 == 0)) {
                                    S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS71();
                                    goto label2;
                                }
                                if ((temp15 == 1)) {
                                    S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS71();
                                    goto label2;
                                }
                                if ((temp15 == 2)) {
                                    S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS71();
                                    goto label2;
                                }
                                if ((temp15 == 3)) {
                                    S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS71();
                                    goto label2;
                                }
                                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker9)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker10)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker11)));
                            label2:
;
                                goto label6;
                            }
                            if ((temp24 == 1)) {
                                this.Manager.Comment("reaching state \'S56\'");
                                int temp23 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker12)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker21)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker22)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker23)));
                                if ((temp23 == 0)) {
                                    S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS72();
                                    goto label5;
                                }
                                if ((temp23 == 1)) {
                                    S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS72();
                                    goto label5;
                                }
                                if ((temp23 == 2)) {
                                    S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS72();
                                    goto label5;
                                }
                                if ((temp23 == 3)) {
                                    S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS72();
                                    goto label5;
                                }
                                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker12)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker21)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker22)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker23)));
                            label5:
;
                                goto label6;
                            }
                            throw new InvalidOperationException("never reached");
                        label6:
;
                            goto label14;
                        }
                        if ((temp44 == 1)) {
                            this.Manager.Comment("reaching state \'S24\'");
                            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp25;
                            this.Manager.Comment("executing step \'call RopQueryRows(NoAdvance,True)\'");
                            temp25 = this.IMS_OXCTABLAdapterInstance.RopQueryRows(((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), true);
                            this.Manager.Checkpoint("MS-OXCTABL_R837");
                            this.Manager.Comment("reaching state \'S32\'");
                            this.Manager.Comment("checking step \'return RopQueryRows/success\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp25, "return of RopQueryRows, state S32");
                            this.Manager.Comment("reaching state \'S40\'");
                            bool temp26;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(456,out _)\'");
                            this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(456, out temp26);
                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp26);
                            this.Manager.Comment("reaching state \'S48\'");
                            int temp43 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteCheckRequirementEnabledChecker6)), new ExpectedReturn(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteCheckRequirementEnabledChecker7)));
                            if ((temp43 == 0)) {
                                this.Manager.Comment("reaching state \'S57\'");
                                int temp34 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker24)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker33)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker34)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker35)));
                                if ((temp34 == 0)) {
                                    S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS73();
                                    goto label9;
                                }
                                if ((temp34 == 1)) {
                                    S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS73();
                                    goto label9;
                                }
                                if ((temp34 == 2)) {
                                    S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS73();
                                    goto label9;
                                }
                                if ((temp34 == 3)) {
                                    S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS73();
                                    goto label9;
                                }
                                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker24)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker33)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker34)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker35)));
                            label9:
;
                                goto label13;
                            }
                            if ((temp43 == 1)) {
                                this.Manager.Comment("reaching state \'S58\'");
                                int temp42 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker36)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker45)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker46)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker47)));
                                if ((temp42 == 0)) {
                                    S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS74();
                                    goto label12;
                                }
                                if ((temp42 == 1)) {
                                    S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS74();
                                    goto label12;
                                }
                                if ((temp42 == 2)) {
                                    S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS74();
                                    goto label12;
                                }
                                if ((temp42 == 3)) {
                                    S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS74();
                                    goto label12;
                                }
                                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker36)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker45)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker46)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker47)));
                            label12:
;
                                goto label13;
                            }
                            throw new InvalidOperationException("never reached");
                        label13:
;
                            goto label14;
                        }
                        throw new InvalidOperationException("never reached");
                    label14:
;
                        goto label30;
                    }
                    if ((temp85 == 1)) {
                        this.Manager.Comment("reaching state \'S16\'");
                        bool temp45;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(867,out _)\'");
                        this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(867, out temp45);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp45);
                        this.Manager.Comment("reaching state \'S20\'");
                        int temp84 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteCheckRequirementEnabledChecker9)), new ExpectedReturn(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteCheckRequirementEnabledChecker12)));
                        if ((temp84 == 0)) {
                            this.Manager.Comment("reaching state \'S25\'");
                            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp46;
                            this.Manager.Comment("executing step \'call RopQueryRows(NoAdvance,True)\'");
                            temp46 = this.IMS_OXCTABLAdapterInstance.RopQueryRows(((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), true);
                            this.Manager.Checkpoint("MS-OXCTABL_R837");
                            this.Manager.Comment("reaching state \'S33\'");
                            this.Manager.Comment("checking step \'return RopQueryRows/success\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp46, "return of RopQueryRows, state S33");
                            this.Manager.Comment("reaching state \'S41\'");
                            bool temp47;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(456,out _)\'");
                            this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(456, out temp47);
                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp47);
                            this.Manager.Comment("reaching state \'S49\'");
                            int temp64 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteCheckRequirementEnabledChecker10)), new ExpectedReturn(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteCheckRequirementEnabledChecker11)));
                            if ((temp64 == 0)) {
                                this.Manager.Comment("reaching state \'S59\'");
                                int temp55 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker48)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker57)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker58)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker59)));
                                if ((temp55 == 0)) {
                                    S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS75();
                                    goto label17;
                                }
                                if ((temp55 == 1)) {
                                    S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS75();
                                    goto label17;
                                }
                                if ((temp55 == 2)) {
                                    S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS75();
                                    goto label17;
                                }
                                if ((temp55 == 3)) {
                                    S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS75();
                                    goto label17;
                                }
                                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker48)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker57)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker58)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker59)));
                            label17:
;
                                goto label21;
                            }
                            if ((temp64 == 1)) {
                                this.Manager.Comment("reaching state \'S60\'");
                                int temp63 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker60)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker69)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker70)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker71)));
                                if ((temp63 == 0)) {
                                    S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS76();
                                    goto label20;
                                }
                                if ((temp63 == 1)) {
                                    S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS76();
                                    goto label20;
                                }
                                if ((temp63 == 2)) {
                                    S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS76();
                                    goto label20;
                                }
                                if ((temp63 == 3)) {
                                    S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS76();
                                    goto label20;
                                }
                                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker60)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker69)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker70)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker71)));
                            label20:
;
                                goto label21;
                            }
                            throw new InvalidOperationException("never reached");
                        label21:
;
                            goto label29;
                        }
                        if ((temp84 == 1)) {
                            this.Manager.Comment("reaching state \'S26\'");
                            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp65;
                            this.Manager.Comment("executing step \'call RopQueryRows(NoAdvance,True)\'");
                            temp65 = this.IMS_OXCTABLAdapterInstance.RopQueryRows(((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), true);
                            this.Manager.Checkpoint("MS-OXCTABL_R837");
                            this.Manager.Comment("reaching state \'S34\'");
                            this.Manager.Comment("checking step \'return RopQueryRows/success\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp65, "return of RopQueryRows, state S34");
                            this.Manager.Comment("reaching state \'S42\'");
                            bool temp66;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(456,out _)\'");
                            this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(456, out temp66);
                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp66);
                            this.Manager.Comment("reaching state \'S50\'");
                            int temp83 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteCheckRequirementEnabledChecker13)), new ExpectedReturn(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteCheckRequirementEnabledChecker14)));
                            if ((temp83 == 0)) {
                                this.Manager.Comment("reaching state \'S61\'");
                                int temp74 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker72)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker81)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker82)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker83)));
                                if ((temp74 == 0)) {
                                    S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS77();
                                    goto label24;
                                }
                                if ((temp74 == 1)) {
                                    S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS77();
                                    goto label24;
                                }
                                if ((temp74 == 2)) {
                                    S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS77();
                                    goto label24;
                                }
                                if ((temp74 == 3)) {
                                    S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS77();
                                    goto label24;
                                }
                                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker72)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker81)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker82)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker83)));
                            label24:
;
                                goto label28;
                            }
                            if ((temp83 == 1)) {
                                this.Manager.Comment("reaching state \'S62\'");
                                int temp82 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker84)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker93)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker94)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker95)));
                                if ((temp82 == 0)) {
                                    S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS78();
                                    goto label27;
                                }
                                if ((temp82 == 1)) {
                                    S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS78();
                                    goto label27;
                                }
                                if ((temp82 == 2)) {
                                    S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS78();
                                    goto label27;
                                }
                                if ((temp82 == 3)) {
                                    S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS78();
                                    goto label27;
                                }
                                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker84)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker93)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker94)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker95)));
                            label27:
;
                                goto label28;
                            }
                            throw new InvalidOperationException("never reached");
                        label28:
;
                            goto label29;
                        }
                        throw new InvalidOperationException("never reached");
                    label29:
;
                        goto label30;
                    }
                    throw new InvalidOperationException("never reached");
                label30:
;
                    goto label62;
                }
                if ((temp168 == 1)) {
                    this.Manager.Comment("reaching state \'S12\'");
                    bool temp86;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(866,out _)\'");
                    this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(866, out temp86);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp86);
                    this.Manager.Comment("reaching state \'S14\'");
                    int temp167 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteCheckRequirementEnabledChecker16)), new ExpectedReturn(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteCheckRequirementEnabledChecker23)));
                    if ((temp167 == 0)) {
                        this.Manager.Comment("reaching state \'S17\'");
                        bool temp87;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(867,out _)\'");
                        this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(867, out temp87);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp87);
                        this.Manager.Comment("reaching state \'S21\'");
                        int temp126 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteCheckRequirementEnabledChecker17)), new ExpectedReturn(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteCheckRequirementEnabledChecker20)));
                        if ((temp126 == 0)) {
                            this.Manager.Comment("reaching state \'S27\'");
                            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp88;
                            this.Manager.Comment("executing step \'call RopQueryRows(NoAdvance,True)\'");
                            temp88 = this.IMS_OXCTABLAdapterInstance.RopQueryRows(((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), true);
                            this.Manager.Checkpoint("MS-OXCTABL_R837");
                            this.Manager.Comment("reaching state \'S35\'");
                            this.Manager.Comment("checking step \'return RopQueryRows/success\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp88, "return of RopQueryRows, state S35");
                            this.Manager.Comment("reaching state \'S43\'");
                            bool temp89;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(456,out _)\'");
                            this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(456, out temp89);
                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp89);
                            this.Manager.Comment("reaching state \'S51\'");
                            int temp106 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteCheckRequirementEnabledChecker18)), new ExpectedReturn(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteCheckRequirementEnabledChecker19)));
                            if ((temp106 == 0)) {
                                this.Manager.Comment("reaching state \'S63\'");
                                int temp97 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker96)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker105)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker106)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker107)));
                                if ((temp97 == 0)) {
                                    S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS79();
                                    goto label33;
                                }
                                if ((temp97 == 1)) {
                                    S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS79();
                                    goto label33;
                                }
                                if ((temp97 == 2)) {
                                    S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS79();
                                    goto label33;
                                }
                                if ((temp97 == 3)) {
                                    S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS79();
                                    goto label33;
                                }
                                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker96)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker105)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker106)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker107)));
                            label33:
;
                                goto label37;
                            }
                            if ((temp106 == 1)) {
                                this.Manager.Comment("reaching state \'S64\'");
                                int temp105 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker108)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker117)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker118)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker119)));
                                if ((temp105 == 0)) {
                                    S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS80();
                                    goto label36;
                                }
                                if ((temp105 == 1)) {
                                    S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS80();
                                    goto label36;
                                }
                                if ((temp105 == 2)) {
                                    S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS80();
                                    goto label36;
                                }
                                if ((temp105 == 3)) {
                                    S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS80();
                                    goto label36;
                                }
                                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker108)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker117)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker118)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker119)));
                            label36:
;
                                goto label37;
                            }
                            throw new InvalidOperationException("never reached");
                        label37:
;
                            goto label45;
                        }
                        if ((temp126 == 1)) {
                            this.Manager.Comment("reaching state \'S28\'");
                            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp107;
                            this.Manager.Comment("executing step \'call RopQueryRows(NoAdvance,True)\'");
                            temp107 = this.IMS_OXCTABLAdapterInstance.RopQueryRows(((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), true);
                            this.Manager.Checkpoint("MS-OXCTABL_R837");
                            this.Manager.Comment("reaching state \'S36\'");
                            this.Manager.Comment("checking step \'return RopQueryRows/success\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp107, "return of RopQueryRows, state S36");
                            this.Manager.Comment("reaching state \'S44\'");
                            bool temp108;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(456,out _)\'");
                            this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(456, out temp108);
                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp108);
                            this.Manager.Comment("reaching state \'S52\'");
                            int temp125 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteCheckRequirementEnabledChecker21)), new ExpectedReturn(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteCheckRequirementEnabledChecker22)));
                            if ((temp125 == 0)) {
                                this.Manager.Comment("reaching state \'S65\'");
                                int temp116 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker120)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker129)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker130)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker131)));
                                if ((temp116 == 0)) {
                                    S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS81();
                                    goto label40;
                                }
                                if ((temp116 == 1)) {
                                    S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS81();
                                    goto label40;
                                }
                                if ((temp116 == 2)) {
                                    S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS81();
                                    goto label40;
                                }
                                if ((temp116 == 3)) {
                                    S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS81();
                                    goto label40;
                                }
                                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker120)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker129)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker130)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker131)));
                            label40:
;
                                goto label44;
                            }
                            if ((temp125 == 1)) {
                                this.Manager.Comment("reaching state \'S66\'");
                                int temp124 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker132)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker141)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker142)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker143)));
                                if ((temp124 == 0)) {
                                    S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS82();
                                    goto label43;
                                }
                                if ((temp124 == 1)) {
                                    S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS82();
                                    goto label43;
                                }
                                if ((temp124 == 2)) {
                                    S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS82();
                                    goto label43;
                                }
                                if ((temp124 == 3)) {
                                    S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS82();
                                    goto label43;
                                }
                                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker132)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker141)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker142)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker143)));
                            label43:
;
                                goto label44;
                            }
                            throw new InvalidOperationException("never reached");
                        label44:
;
                            goto label45;
                        }
                        throw new InvalidOperationException("never reached");
                    label45:
;
                        goto label61;
                    }
                    if ((temp167 == 1)) {
                        this.Manager.Comment("reaching state \'S18\'");
                        bool temp127;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(867,out _)\'");
                        this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(867, out temp127);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp127);
                        this.Manager.Comment("reaching state \'S22\'");
                        int temp166 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteCheckRequirementEnabledChecker24)), new ExpectedReturn(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteCheckRequirementEnabledChecker27)));
                        if ((temp166 == 0)) {
                            this.Manager.Comment("reaching state \'S29\'");
                            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp128;
                            this.Manager.Comment("executing step \'call RopQueryRows(NoAdvance,True)\'");
                            temp128 = this.IMS_OXCTABLAdapterInstance.RopQueryRows(((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), true);
                            this.Manager.Checkpoint("MS-OXCTABL_R837");
                            this.Manager.Comment("reaching state \'S37\'");
                            this.Manager.Comment("checking step \'return RopQueryRows/success\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp128, "return of RopQueryRows, state S37");
                            this.Manager.Comment("reaching state \'S45\'");
                            bool temp129;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(456,out _)\'");
                            this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(456, out temp129);
                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp129);
                            this.Manager.Comment("reaching state \'S53\'");
                            int temp146 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteCheckRequirementEnabledChecker25)), new ExpectedReturn(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteCheckRequirementEnabledChecker26)));
                            if ((temp146 == 0)) {
                                this.Manager.Comment("reaching state \'S67\'");
                                int temp137 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker144)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker153)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker154)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker155)));
                                if ((temp137 == 0)) {
                                    S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS83();
                                    goto label48;
                                }
                                if ((temp137 == 1)) {
                                    S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS83();
                                    goto label48;
                                }
                                if ((temp137 == 2)) {
                                    S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS83();
                                    goto label48;
                                }
                                if ((temp137 == 3)) {
                                    S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS83();
                                    goto label48;
                                }
                                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker144)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker153)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker154)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker155)));
                            label48:
;
                                goto label52;
                            }
                            if ((temp146 == 1)) {
                                this.Manager.Comment("reaching state \'S68\'");
                                int temp145 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker156)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker165)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker166)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker167)));
                                if ((temp145 == 0)) {
                                    S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS84();
                                    goto label51;
                                }
                                if ((temp145 == 1)) {
                                    S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS84();
                                    goto label51;
                                }
                                if ((temp145 == 2)) {
                                    S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS84();
                                    goto label51;
                                }
                                if ((temp145 == 3)) {
                                    S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS84();
                                    goto label51;
                                }
                                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker156)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker165)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker166)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker167)));
                            label51:
;
                                goto label52;
                            }
                            throw new InvalidOperationException("never reached");
                        label52:
;
                            goto label60;
                        }
                        if ((temp166 == 1)) {
                            this.Manager.Comment("reaching state \'S30\'");
                            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp147;
                            this.Manager.Comment("executing step \'call RopQueryRows(NoAdvance,True)\'");
                            temp147 = this.IMS_OXCTABLAdapterInstance.RopQueryRows(((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), true);
                            this.Manager.Checkpoint("MS-OXCTABL_R837");
                            this.Manager.Comment("reaching state \'S38\'");
                            this.Manager.Comment("checking step \'return RopQueryRows/success\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp147, "return of RopQueryRows, state S38");
                            this.Manager.Comment("reaching state \'S46\'");
                            bool temp148;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(456,out _)\'");
                            this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(456, out temp148);
                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp148);
                            this.Manager.Comment("reaching state \'S54\'");
                            int temp165 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteCheckRequirementEnabledChecker28)), new ExpectedReturn(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteCheckRequirementEnabledChecker29)));
                            if ((temp165 == 0)) {
                                this.Manager.Comment("reaching state \'S69\'");
                                int temp156 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker168)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker177)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker178)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker179)));
                                if ((temp156 == 0)) {
                                    S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS85();
                                    goto label55;
                                }
                                if ((temp156 == 1)) {
                                    S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS85();
                                    goto label55;
                                }
                                if ((temp156 == 2)) {
                                    S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS85();
                                    goto label55;
                                }
                                if ((temp156 == 3)) {
                                    S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS85();
                                    goto label55;
                                }
                                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker168)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker177)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker178)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker179)));
                            label55:
;
                                goto label59;
                            }
                            if ((temp165 == 1)) {
                                this.Manager.Comment("reaching state \'S70\'");
                                int temp164 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker180)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker189)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker190)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker191)));
                                if ((temp164 == 0)) {
                                    S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS86();
                                    goto label58;
                                }
                                if ((temp164 == 1)) {
                                    S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS86();
                                    goto label58;
                                }
                                if ((temp164 == 2)) {
                                    S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS86();
                                    goto label58;
                                }
                                if ((temp164 == 3)) {
                                    S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS86();
                                    goto label58;
                                }
                                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker180)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker189)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker190)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker191)));
                            label58:
;
                                goto label59;
                            }
                            throw new InvalidOperationException("never reached");
                        label59:
;
                            goto label60;
                        }
                        throw new InvalidOperationException("never reached");
                    label60:
;
                        goto label61;
                    }
                    throw new InvalidOperationException("never reached");
                label61:
;
                    goto label62;
                }
                throw new InvalidOperationException("never reached");
            label62:
;
                goto label63;
            }
            throw new InvalidOperationException("never reached");
        label63:
;
            this.Manager.EndTest();
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteCheckMAPIHTTPTransportSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S1");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteCheckMAPIHTTPTransportSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S1");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteCheckRequirementEnabledChecker(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S10");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteCheckRequirementEnabledChecker1(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S13");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteCheckRequirementEnabledChecker2(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S19");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteCheckRequirementEnabledChecker3(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S47");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,RESTRICT,True,Fals" +
                    "e,True,True,BOOKMARK_BEGINNING,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S55");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S55");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S55");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType.RESTRICT, ropType, "ropType of RopQueryRowsResponse, state S55");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S55");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S55");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S55");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S55");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(0)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S55");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S55");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R27, MS-OXCTABL_R468, MS" +
                        "-OXCTABL_R462, MS-OXCTABL_R451, MS-OXCTABL_R452, MS-OXCTABL_R117, MS-OXCTABL_R45" +
                        "6");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R27");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R451");
            this.Manager.Checkpoint("MS-OXCTABL_R452");
            this.Manager.Checkpoint("MS-OXCTABL_R117");
            this.Manager.Checkpoint("MS-OXCTABL_R456");
        }
        
        private void S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS71() {
            this.Manager.Comment("reaching state \'S71\'");
            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp8;
            this.Manager.Comment("executing step \'call RopSetColumns(2,False,False,False)\'");
            temp8 = this.IMS_OXCTABLAdapterInstance.RopSetColumns(2u, false, false, false);
            this.Manager.Checkpoint("MS-OXCTABL_R831");
            this.Manager.Checkpoint("MS-OXCTABL_R45");
            this.Manager.Comment("reaching state \'S87\'");
            this.Manager.Comment("checking step \'return RopSetColumns/success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp8, "return of RopSetColumns, state S87");
            this.Manager.Comment("reaching state \'S103\'");
            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp9;
            this.Manager.Comment("executing step \'call RopRestrict(2,False,True,False)\'");
            temp9 = this.IMS_OXCTABLAdapterInstance.RopRestrict(2u, false, true, false);
            this.Manager.Checkpoint("MS-OXCTABL_R834");
            this.Manager.Comment("reaching state \'S119\'");
            this.Manager.Comment("checking step \'return RopRestrict/ecNullObject\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues.ecNullObject, temp9, "return of RopRestrict, state S119");
            this.Manager.Comment("reaching state \'S135\'");
            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp10;
            this.Manager.Comment("executing step \'call RopQueryRows(Advance,True)\'");
            temp10 = this.IMS_OXCTABLAdapterInstance.RopQueryRows(((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), true);
            this.Manager.Checkpoint("MS-OXCTABL_R837");
            this.Manager.Comment("reaching state \'S151\'");
            this.Manager.Comment("checking step \'return RopQueryRows/success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp10, "return of RopQueryRows, state S151");
            this.Manager.Comment("reaching state \'S167\'");
            int temp14 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker1)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker6)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker7)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker8)));
            if ((temp14 == 0)) {
                S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS183();
                goto label1;
            }
            if ((temp14 == 1)) {
                S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS183();
                goto label1;
            }
            if ((temp14 == 2)) {
                S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS183();
                goto label1;
            }
            if ((temp14 == 3)) {
                S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS183();
                goto label1;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker1)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker6)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker7)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker8)));
        label1:
;
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker1(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,RESTRICT,True,True,F" +
                    "alse,True,BOOKMARK_CUSTOM,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S167");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S167");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S167");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType.RESTRICT, ropType, "ropType of RopQueryRowsResponse, state S167");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S167");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S167");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S167");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S167");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_CUSTOM, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S167");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S167");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R451, MS-OXCTABL_R452, MS-OXCTABL_R117");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R451");
            this.Manager.Checkpoint("MS-OXCTABL_R452");
            this.Manager.Checkpoint("MS-OXCTABL_R117");
        }
        
        private void S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS183() {
            this.Manager.Comment("reaching state \'S183\'");
            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp11;
            this.Manager.Comment("executing step \'call RopRestrict(3,True,False,False)\'");
            temp11 = this.IMS_OXCTABLAdapterInstance.RopRestrict(3u, true, false, false);
            this.Manager.Checkpoint("MS-OXCTABL_R834");
            this.Manager.Comment("reaching state \'S199\'");
            this.Manager.Comment("checking step \'return RopRestrict/success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp11, "return of RopRestrict, state S199");
            this.Manager.Comment("reaching state \'S215\'");
            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp12;
            this.Manager.Comment("executing step \'call RopQueryRows(Advance,True)\'");
            temp12 = this.IMS_OXCTABLAdapterInstance.RopQueryRows(((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), true);
            this.Manager.Checkpoint("MS-OXCTABL_R837");
            this.Manager.Comment("reaching state \'S231\'");
            this.Manager.Comment("checking step \'return RopQueryRows/success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp12, "return of RopQueryRows, state S231");
            this.Manager.Comment("reaching state \'S247\'");
            int temp13 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker2)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker3)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker4)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker5)));
            if ((temp13 == 0)) {
                S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS263();
                goto label0;
            }
            if ((temp13 == 1)) {
                S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS263();
                goto label0;
            }
            if ((temp13 == 2)) {
                S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS263();
                goto label0;
            }
            if ((temp13 == 3)) {
                S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS263();
                goto label0;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker2)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker3)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker4)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker5)));
        label0:
;
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker2(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,RESTRICT,True,True,T" +
                    "rue,True,BOOKMARK_CUSTOM,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S247");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S247");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S247");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType.RESTRICT, ropType, "ropType of RopQueryRowsResponse, state S247");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S247");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S247");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S247");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S247");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_CUSTOM, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S247");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S247");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R462, MS-OXCTABL_R451, M" +
                        "S-OXCTABL_R452, MS-OXCTABL_R117, MS-OXCTABL_R456");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R451");
            this.Manager.Checkpoint("MS-OXCTABL_R452");
            this.Manager.Checkpoint("MS-OXCTABL_R117");
            this.Manager.Checkpoint("MS-OXCTABL_R456");
        }
        
        private void S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS263() {
            this.Manager.Comment("reaching state \'S263\'");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker3(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,RESTRICT,True,True,T" +
                    "rue,True,BOOKMARK_CURRENT,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S247");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S247");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S247");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType.RESTRICT, ropType, "ropType of RopQueryRowsResponse, state S247");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S247");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S247");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S247");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S247");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S247");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S247");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R462, MS-OXCTABL_R451, M" +
                        "S-OXCTABL_R452, MS-OXCTABL_R117, MS-OXCTABL_R456");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R451");
            this.Manager.Checkpoint("MS-OXCTABL_R452");
            this.Manager.Checkpoint("MS-OXCTABL_R117");
            this.Manager.Checkpoint("MS-OXCTABL_R456");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker4(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,RESTRICT,True,True,T" +
                    "rue,True,BOOKMARK_END,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S247");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S247");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S247");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType.RESTRICT, ropType, "ropType of RopQueryRowsResponse, state S247");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S247");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S247");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S247");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S247");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_END, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S247");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S247");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R462, MS-OXCTABL_R29, MS" +
                        "-OXCTABL_R725, MS-OXCTABL_R451, MS-OXCTABL_R452, MS-OXCTABL_R117, MS-OXCTABL_R45" +
                        "6");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R29");
            this.Manager.Checkpoint("MS-OXCTABL_R725");
            this.Manager.Checkpoint("MS-OXCTABL_R451");
            this.Manager.Checkpoint("MS-OXCTABL_R452");
            this.Manager.Checkpoint("MS-OXCTABL_R117");
            this.Manager.Checkpoint("MS-OXCTABL_R456");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker5(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,RESTRICT,True,True,T" +
                    "rue,True,BOOKMARK_BEGINNING,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S247");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S247");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S247");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType.RESTRICT, ropType, "ropType of RopQueryRowsResponse, state S247");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S247");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S247");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S247");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S247");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(0)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S247");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S247");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R462, MS-OXCTABL_R451, M" +
                        "S-OXCTABL_R452, MS-OXCTABL_R117, MS-OXCTABL_R456");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R451");
            this.Manager.Checkpoint("MS-OXCTABL_R452");
            this.Manager.Checkpoint("MS-OXCTABL_R117");
            this.Manager.Checkpoint("MS-OXCTABL_R456");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker6(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,RESTRICT,True,True,F" +
                    "alse,True,BOOKMARK_CURRENT,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S167");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S167");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S167");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType.RESTRICT, ropType, "ropType of RopQueryRowsResponse, state S167");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S167");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S167");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S167");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S167");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S167");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S167");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R451, MS-OXCTABL_R452, MS-OXCTABL_R117");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R451");
            this.Manager.Checkpoint("MS-OXCTABL_R452");
            this.Manager.Checkpoint("MS-OXCTABL_R117");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker7(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,RESTRICT,True,True,F" +
                    "alse,True,BOOKMARK_END,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S167");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S167");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S167");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType.RESTRICT, ropType, "ropType of RopQueryRowsResponse, state S167");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S167");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S167");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S167");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S167");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_END, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S167");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S167");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R29, MS-OXCTABL_R725, MS-OXCTABL_R451, MS-OXCTABL_R452, MS-OXCTABL_R11" +
                        "7");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R29");
            this.Manager.Checkpoint("MS-OXCTABL_R725");
            this.Manager.Checkpoint("MS-OXCTABL_R451");
            this.Manager.Checkpoint("MS-OXCTABL_R452");
            this.Manager.Checkpoint("MS-OXCTABL_R117");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker8(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,RESTRICT,True,True,F" +
                    "alse,True,BOOKMARK_BEGINNING,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S167");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S167");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S167");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType.RESTRICT, ropType, "ropType of RopQueryRowsResponse, state S167");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S167");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S167");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S167");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S167");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(0)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S167");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S167");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R451, MS-OXCTABL_R452, MS-OXCTABL_R117");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R451");
            this.Manager.Checkpoint("MS-OXCTABL_R452");
            this.Manager.Checkpoint("MS-OXCTABL_R117");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker9(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,RESTRICT,True,Fals" +
                    "e,True,True,BOOKMARK_END,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S55");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S55");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S55");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType.RESTRICT, ropType, "ropType of RopQueryRowsResponse, state S55");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S55");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S55");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S55");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S55");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_END, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S55");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S55");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R468, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R451, MS-OXCTABL_R452, MS-OXCTABL_R117, MS-OXCTABL_R456");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R451");
            this.Manager.Checkpoint("MS-OXCTABL_R452");
            this.Manager.Checkpoint("MS-OXCTABL_R117");
            this.Manager.Checkpoint("MS-OXCTABL_R456");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker10(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,RESTRICT,True,Fals" +
                    "e,True,True,BOOKMARK_CUSTOM,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S55");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S55");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S55");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType.RESTRICT, ropType, "ropType of RopQueryRowsResponse, state S55");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S55");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S55");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S55");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S55");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_CUSTOM, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S55");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S55");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R468, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R451, MS-OXCTABL_R452, MS-OXCTABL_R117, MS-OXCTABL_R456");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R451");
            this.Manager.Checkpoint("MS-OXCTABL_R452");
            this.Manager.Checkpoint("MS-OXCTABL_R117");
            this.Manager.Checkpoint("MS-OXCTABL_R456");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker11(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,RESTRICT,True,Fals" +
                    "e,True,True,BOOKMARK_CURRENT,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S55");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S55");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S55");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType.RESTRICT, ropType, "ropType of RopQueryRowsResponse, state S55");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S55");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S55");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S55");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S55");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S55");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S55");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R468, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R451, MS-OXCTABL_R452, MS-OXCTABL_R117, MS-OXCTABL_R456");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R451");
            this.Manager.Checkpoint("MS-OXCTABL_R452");
            this.Manager.Checkpoint("MS-OXCTABL_R117");
            this.Manager.Checkpoint("MS-OXCTABL_R456");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteCheckRequirementEnabledChecker4(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S47");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker12(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,RESTRICT,True,Fals" +
                    "e,True,True,BOOKMARK_BEGINNING,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S56");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S56");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S56");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType.RESTRICT, ropType, "ropType of RopQueryRowsResponse, state S56");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S56");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S56");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S56");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S56");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(0)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S56");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S56");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R27, MS-OXCTABL_R468, MS" +
                        "-OXCTABL_R462, MS-OXCTABL_R451, MS-OXCTABL_R452, MS-OXCTABL_R117");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R27");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R451");
            this.Manager.Checkpoint("MS-OXCTABL_R452");
            this.Manager.Checkpoint("MS-OXCTABL_R117");
        }
        
        private void S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS72() {
            this.Manager.Comment("reaching state \'S72\'");
            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp16;
            this.Manager.Comment("executing step \'call RopSetColumns(2,False,False,False)\'");
            temp16 = this.IMS_OXCTABLAdapterInstance.RopSetColumns(2u, false, false, false);
            this.Manager.Checkpoint("MS-OXCTABL_R831");
            this.Manager.Checkpoint("MS-OXCTABL_R45");
            this.Manager.Comment("reaching state \'S88\'");
            this.Manager.Comment("checking step \'return RopSetColumns/success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp16, "return of RopSetColumns, state S88");
            this.Manager.Comment("reaching state \'S104\'");
            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp17;
            this.Manager.Comment("executing step \'call RopRestrict(2,False,True,False)\'");
            temp17 = this.IMS_OXCTABLAdapterInstance.RopRestrict(2u, false, true, false);
            this.Manager.Checkpoint("MS-OXCTABL_R834");
            this.Manager.Comment("reaching state \'S120\'");
            this.Manager.Comment("checking step \'return RopRestrict/ecNullObject\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues.ecNullObject, temp17, "return of RopRestrict, state S120");
            this.Manager.Comment("reaching state \'S136\'");
            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp18;
            this.Manager.Comment("executing step \'call RopQueryRows(Advance,True)\'");
            temp18 = this.IMS_OXCTABLAdapterInstance.RopQueryRows(((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), true);
            this.Manager.Checkpoint("MS-OXCTABL_R837");
            this.Manager.Comment("reaching state \'S152\'");
            this.Manager.Comment("checking step \'return RopQueryRows/success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp18, "return of RopQueryRows, state S152");
            this.Manager.Comment("reaching state \'S168\'");
            int temp22 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker13)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker18)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker19)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker20)));
            if ((temp22 == 0)) {
                S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS184();
                goto label4;
            }
            if ((temp22 == 1)) {
                S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS184();
                goto label4;
            }
            if ((temp22 == 2)) {
                S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS184();
                goto label4;
            }
            if ((temp22 == 3)) {
                S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS184();
                goto label4;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker13)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker18)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker19)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker20)));
        label4:
;
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker13(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,RESTRICT,True,True,F" +
                    "alse,True,BOOKMARK_CURRENT,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S168");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S168");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S168");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType.RESTRICT, ropType, "ropType of RopQueryRowsResponse, state S168");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S168");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S168");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S168");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S168");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S168");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S168");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R451, MS-OXCTABL_R452, MS-OXCTABL_R117");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R451");
            this.Manager.Checkpoint("MS-OXCTABL_R452");
            this.Manager.Checkpoint("MS-OXCTABL_R117");
        }
        
        private void S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS184() {
            this.Manager.Comment("reaching state \'S184\'");
            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp19;
            this.Manager.Comment("executing step \'call RopRestrict(3,True,False,False)\'");
            temp19 = this.IMS_OXCTABLAdapterInstance.RopRestrict(3u, true, false, false);
            this.Manager.Checkpoint("MS-OXCTABL_R834");
            this.Manager.Comment("reaching state \'S200\'");
            this.Manager.Comment("checking step \'return RopRestrict/success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp19, "return of RopRestrict, state S200");
            this.Manager.Comment("reaching state \'S216\'");
            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp20;
            this.Manager.Comment("executing step \'call RopQueryRows(Advance,True)\'");
            temp20 = this.IMS_OXCTABLAdapterInstance.RopQueryRows(((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), true);
            this.Manager.Checkpoint("MS-OXCTABL_R837");
            this.Manager.Comment("reaching state \'S232\'");
            this.Manager.Comment("checking step \'return RopQueryRows/success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp20, "return of RopQueryRows, state S232");
            this.Manager.Comment("reaching state \'S248\'");
            int temp21 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker14)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker15)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker16)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker17)));
            if ((temp21 == 0)) {
                S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS264();
                goto label3;
            }
            if ((temp21 == 1)) {
                S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS264();
                goto label3;
            }
            if ((temp21 == 2)) {
                S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS264();
                goto label3;
            }
            if ((temp21 == 3)) {
                S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS264();
                goto label3;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker14)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker15)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker16)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker17)));
        label3:
;
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker14(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,RESTRICT,True,True,T" +
                    "rue,True,BOOKMARK_CURRENT,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S248");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S248");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S248");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType.RESTRICT, ropType, "ropType of RopQueryRowsResponse, state S248");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S248");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S248");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S248");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S248");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S248");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S248");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R462, MS-OXCTABL_R451, M" +
                        "S-OXCTABL_R452, MS-OXCTABL_R117");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R451");
            this.Manager.Checkpoint("MS-OXCTABL_R452");
            this.Manager.Checkpoint("MS-OXCTABL_R117");
        }
        
        private void S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS264() {
            this.Manager.Comment("reaching state \'S264\'");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker15(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,RESTRICT,True,True,T" +
                    "rue,True,BOOKMARK_CUSTOM,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S248");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S248");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S248");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType.RESTRICT, ropType, "ropType of RopQueryRowsResponse, state S248");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S248");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S248");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S248");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S248");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_CUSTOM, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S248");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S248");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R462, MS-OXCTABL_R451, M" +
                        "S-OXCTABL_R452, MS-OXCTABL_R117");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R451");
            this.Manager.Checkpoint("MS-OXCTABL_R452");
            this.Manager.Checkpoint("MS-OXCTABL_R117");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker16(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,RESTRICT,True,True,T" +
                    "rue,True,BOOKMARK_END,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S248");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S248");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S248");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType.RESTRICT, ropType, "ropType of RopQueryRowsResponse, state S248");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S248");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S248");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S248");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S248");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_END, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S248");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S248");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R462, MS-OXCTABL_R29, MS" +
                        "-OXCTABL_R725, MS-OXCTABL_R451, MS-OXCTABL_R452, MS-OXCTABL_R117");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R29");
            this.Manager.Checkpoint("MS-OXCTABL_R725");
            this.Manager.Checkpoint("MS-OXCTABL_R451");
            this.Manager.Checkpoint("MS-OXCTABL_R452");
            this.Manager.Checkpoint("MS-OXCTABL_R117");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker17(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,RESTRICT,True,True,T" +
                    "rue,True,BOOKMARK_BEGINNING,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S248");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S248");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S248");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType.RESTRICT, ropType, "ropType of RopQueryRowsResponse, state S248");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S248");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S248");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S248");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S248");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(0)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S248");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S248");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R462, MS-OXCTABL_R451, M" +
                        "S-OXCTABL_R452, MS-OXCTABL_R117");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R451");
            this.Manager.Checkpoint("MS-OXCTABL_R452");
            this.Manager.Checkpoint("MS-OXCTABL_R117");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker18(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,RESTRICT,True,True,F" +
                    "alse,True,BOOKMARK_CUSTOM,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S168");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S168");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S168");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType.RESTRICT, ropType, "ropType of RopQueryRowsResponse, state S168");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S168");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S168");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S168");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S168");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_CUSTOM, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S168");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S168");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R451, MS-OXCTABL_R452, MS-OXCTABL_R117");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R451");
            this.Manager.Checkpoint("MS-OXCTABL_R452");
            this.Manager.Checkpoint("MS-OXCTABL_R117");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker19(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,RESTRICT,True,True,F" +
                    "alse,True,BOOKMARK_END,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S168");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S168");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S168");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType.RESTRICT, ropType, "ropType of RopQueryRowsResponse, state S168");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S168");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S168");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S168");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S168");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_END, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S168");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S168");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R29, MS-OXCTABL_R725, MS-OXCTABL_R451, MS-OXCTABL_R452, MS-OXCTABL_R11" +
                        "7");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R29");
            this.Manager.Checkpoint("MS-OXCTABL_R725");
            this.Manager.Checkpoint("MS-OXCTABL_R451");
            this.Manager.Checkpoint("MS-OXCTABL_R452");
            this.Manager.Checkpoint("MS-OXCTABL_R117");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker20(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,RESTRICT,True,True,F" +
                    "alse,True,BOOKMARK_BEGINNING,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S168");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S168");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S168");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType.RESTRICT, ropType, "ropType of RopQueryRowsResponse, state S168");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S168");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S168");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S168");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S168");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(0)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S168");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S168");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R451, MS-OXCTABL_R452, MS-OXCTABL_R117");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R451");
            this.Manager.Checkpoint("MS-OXCTABL_R452");
            this.Manager.Checkpoint("MS-OXCTABL_R117");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker21(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,RESTRICT,True,Fals" +
                    "e,True,True,BOOKMARK_END,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S56");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S56");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S56");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType.RESTRICT, ropType, "ropType of RopQueryRowsResponse, state S56");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S56");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S56");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S56");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S56");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_END, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S56");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S56");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R468, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R451, MS-OXCTABL_R452, MS-OXCTABL_R117");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R451");
            this.Manager.Checkpoint("MS-OXCTABL_R452");
            this.Manager.Checkpoint("MS-OXCTABL_R117");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker22(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,RESTRICT,True,Fals" +
                    "e,True,True,BOOKMARK_CUSTOM,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S56");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S56");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S56");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType.RESTRICT, ropType, "ropType of RopQueryRowsResponse, state S56");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S56");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S56");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S56");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S56");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_CUSTOM, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S56");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S56");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R468, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R451, MS-OXCTABL_R452, MS-OXCTABL_R117");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R451");
            this.Manager.Checkpoint("MS-OXCTABL_R452");
            this.Manager.Checkpoint("MS-OXCTABL_R117");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker23(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,RESTRICT,True,Fals" +
                    "e,True,True,BOOKMARK_CURRENT,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S56");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S56");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S56");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType.RESTRICT, ropType, "ropType of RopQueryRowsResponse, state S56");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S56");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S56");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S56");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S56");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S56");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S56");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R468, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R451, MS-OXCTABL_R452, MS-OXCTABL_R117");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R451");
            this.Manager.Checkpoint("MS-OXCTABL_R452");
            this.Manager.Checkpoint("MS-OXCTABL_R117");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteCheckRequirementEnabledChecker5(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S19");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteCheckRequirementEnabledChecker6(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S48");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker24(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,RESTRICT,True,Fals" +
                    "e,True,True,BOOKMARK_BEGINNING,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S57");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S57");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S57");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType.RESTRICT, ropType, "ropType of RopQueryRowsResponse, state S57");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S57");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S57");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S57");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S57");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(0)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S57");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S57");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R27, MS-OXCTABL_R468, MS" +
                        "-OXCTABL_R462, MS-OXCTABL_R451, MS-OXCTABL_R452, MS-OXCTABL_R117, MS-OXCTABL_R45" +
                        "6");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R27");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R451");
            this.Manager.Checkpoint("MS-OXCTABL_R452");
            this.Manager.Checkpoint("MS-OXCTABL_R117");
            this.Manager.Checkpoint("MS-OXCTABL_R456");
        }
        
        private void S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS73() {
            this.Manager.Comment("reaching state \'S73\'");
            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp27;
            this.Manager.Comment("executing step \'call RopSetColumns(2,False,False,False)\'");
            temp27 = this.IMS_OXCTABLAdapterInstance.RopSetColumns(2u, false, false, false);
            this.Manager.Checkpoint("MS-OXCTABL_R831");
            this.Manager.Checkpoint("MS-OXCTABL_R45");
            this.Manager.Comment("reaching state \'S89\'");
            this.Manager.Comment("checking step \'return RopSetColumns/success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp27, "return of RopSetColumns, state S89");
            this.Manager.Comment("reaching state \'S105\'");
            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp28;
            this.Manager.Comment("executing step \'call RopRestrict(2,False,True,False)\'");
            temp28 = this.IMS_OXCTABLAdapterInstance.RopRestrict(2u, false, true, false);
            this.Manager.Checkpoint("MS-OXCTABL_R834");
            this.Manager.Comment("reaching state \'S121\'");
            this.Manager.Comment("checking step \'return RopRestrict/ecNullObject\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues.ecNullObject, temp28, "return of RopRestrict, state S121");
            this.Manager.Comment("reaching state \'S137\'");
            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp29;
            this.Manager.Comment("executing step \'call RopQueryRows(Advance,True)\'");
            temp29 = this.IMS_OXCTABLAdapterInstance.RopQueryRows(((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), true);
            this.Manager.Checkpoint("MS-OXCTABL_R837");
            this.Manager.Comment("reaching state \'S153\'");
            this.Manager.Comment("checking step \'return RopQueryRows/success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp29, "return of RopQueryRows, state S153");
            this.Manager.Comment("reaching state \'S169\'");
            int temp33 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker25)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker30)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker31)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker32)));
            if ((temp33 == 0)) {
                S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS185();
                goto label8;
            }
            if ((temp33 == 1)) {
                S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS185();
                goto label8;
            }
            if ((temp33 == 2)) {
                S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS185();
                goto label8;
            }
            if ((temp33 == 3)) {
                S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS185();
                goto label8;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker25)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker30)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker31)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker32)));
        label8:
;
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker25(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,RESTRICT,True,True,F" +
                    "alse,True,BOOKMARK_CURRENT,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S169");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S169");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S169");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType.RESTRICT, ropType, "ropType of RopQueryRowsResponse, state S169");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S169");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S169");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S169");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S169");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S169");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S169");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R451, MS-OXCTABL_R452, MS-OXCTABL_R117");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R451");
            this.Manager.Checkpoint("MS-OXCTABL_R452");
            this.Manager.Checkpoint("MS-OXCTABL_R117");
        }
        
        private void S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS185() {
            this.Manager.Comment("reaching state \'S185\'");
            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp30;
            this.Manager.Comment("executing step \'call RopRestrict(3,True,False,False)\'");
            temp30 = this.IMS_OXCTABLAdapterInstance.RopRestrict(3u, true, false, false);
            this.Manager.Checkpoint("MS-OXCTABL_R834");
            this.Manager.Comment("reaching state \'S201\'");
            this.Manager.Comment("checking step \'return RopRestrict/success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp30, "return of RopRestrict, state S201");
            this.Manager.Comment("reaching state \'S217\'");
            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp31;
            this.Manager.Comment("executing step \'call RopQueryRows(Advance,True)\'");
            temp31 = this.IMS_OXCTABLAdapterInstance.RopQueryRows(((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), true);
            this.Manager.Checkpoint("MS-OXCTABL_R837");
            this.Manager.Comment("reaching state \'S233\'");
            this.Manager.Comment("checking step \'return RopQueryRows/success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp31, "return of RopQueryRows, state S233");
            this.Manager.Comment("reaching state \'S249\'");
            int temp32 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker26)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker27)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker28)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker29)));
            if ((temp32 == 0)) {
                S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS265();
                goto label7;
            }
            if ((temp32 == 1)) {
                S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS265();
                goto label7;
            }
            if ((temp32 == 2)) {
                S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS265();
                goto label7;
            }
            if ((temp32 == 3)) {
                S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS265();
                goto label7;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker26)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker27)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker28)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker29)));
        label7:
;
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker26(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,RESTRICT,True,True,T" +
                    "rue,True,BOOKMARK_CURRENT,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S249");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S249");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S249");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType.RESTRICT, ropType, "ropType of RopQueryRowsResponse, state S249");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S249");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S249");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S249");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S249");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S249");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S249");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R462, MS-OXCTABL_R451, M" +
                        "S-OXCTABL_R452, MS-OXCTABL_R117, MS-OXCTABL_R456");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R451");
            this.Manager.Checkpoint("MS-OXCTABL_R452");
            this.Manager.Checkpoint("MS-OXCTABL_R117");
            this.Manager.Checkpoint("MS-OXCTABL_R456");
        }
        
        private void S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS265() {
            this.Manager.Comment("reaching state \'S265\'");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker27(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,RESTRICT,True,True,T" +
                    "rue,True,BOOKMARK_CUSTOM,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S249");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S249");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S249");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType.RESTRICT, ropType, "ropType of RopQueryRowsResponse, state S249");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S249");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S249");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S249");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S249");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_CUSTOM, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S249");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S249");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R462, MS-OXCTABL_R451, M" +
                        "S-OXCTABL_R452, MS-OXCTABL_R117, MS-OXCTABL_R456");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R451");
            this.Manager.Checkpoint("MS-OXCTABL_R452");
            this.Manager.Checkpoint("MS-OXCTABL_R117");
            this.Manager.Checkpoint("MS-OXCTABL_R456");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker28(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,RESTRICT,True,True,T" +
                    "rue,True,BOOKMARK_END,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S249");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S249");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S249");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType.RESTRICT, ropType, "ropType of RopQueryRowsResponse, state S249");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S249");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S249");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S249");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S249");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_END, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S249");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S249");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R462, MS-OXCTABL_R29, MS" +
                        "-OXCTABL_R725, MS-OXCTABL_R451, MS-OXCTABL_R452, MS-OXCTABL_R117, MS-OXCTABL_R45" +
                        "6");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R29");
            this.Manager.Checkpoint("MS-OXCTABL_R725");
            this.Manager.Checkpoint("MS-OXCTABL_R451");
            this.Manager.Checkpoint("MS-OXCTABL_R452");
            this.Manager.Checkpoint("MS-OXCTABL_R117");
            this.Manager.Checkpoint("MS-OXCTABL_R456");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker29(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,RESTRICT,True,True,T" +
                    "rue,True,BOOKMARK_BEGINNING,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S249");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S249");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S249");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType.RESTRICT, ropType, "ropType of RopQueryRowsResponse, state S249");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S249");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S249");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S249");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S249");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(0)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S249");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S249");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R462, MS-OXCTABL_R451, M" +
                        "S-OXCTABL_R452, MS-OXCTABL_R117, MS-OXCTABL_R456");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R451");
            this.Manager.Checkpoint("MS-OXCTABL_R452");
            this.Manager.Checkpoint("MS-OXCTABL_R117");
            this.Manager.Checkpoint("MS-OXCTABL_R456");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker30(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,RESTRICT,True,True,F" +
                    "alse,True,BOOKMARK_CUSTOM,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S169");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S169");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S169");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType.RESTRICT, ropType, "ropType of RopQueryRowsResponse, state S169");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S169");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S169");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S169");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S169");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_CUSTOM, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S169");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S169");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R451, MS-OXCTABL_R452, MS-OXCTABL_R117");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R451");
            this.Manager.Checkpoint("MS-OXCTABL_R452");
            this.Manager.Checkpoint("MS-OXCTABL_R117");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker31(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,RESTRICT,True,True,F" +
                    "alse,True,BOOKMARK_END,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S169");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S169");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S169");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType.RESTRICT, ropType, "ropType of RopQueryRowsResponse, state S169");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S169");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S169");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S169");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S169");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_END, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S169");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S169");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R29, MS-OXCTABL_R725, MS-OXCTABL_R451, MS-OXCTABL_R452, MS-OXCTABL_R11" +
                        "7");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R29");
            this.Manager.Checkpoint("MS-OXCTABL_R725");
            this.Manager.Checkpoint("MS-OXCTABL_R451");
            this.Manager.Checkpoint("MS-OXCTABL_R452");
            this.Manager.Checkpoint("MS-OXCTABL_R117");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker32(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,RESTRICT,True,True,F" +
                    "alse,True,BOOKMARK_BEGINNING,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S169");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S169");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S169");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType.RESTRICT, ropType, "ropType of RopQueryRowsResponse, state S169");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S169");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S169");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S169");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S169");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(0)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S169");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S169");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R451, MS-OXCTABL_R452, MS-OXCTABL_R117");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R451");
            this.Manager.Checkpoint("MS-OXCTABL_R452");
            this.Manager.Checkpoint("MS-OXCTABL_R117");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker33(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,RESTRICT,True,Fals" +
                    "e,True,True,BOOKMARK_END,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S57");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S57");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S57");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType.RESTRICT, ropType, "ropType of RopQueryRowsResponse, state S57");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S57");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S57");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S57");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S57");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_END, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S57");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S57");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R468, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R451, MS-OXCTABL_R452, MS-OXCTABL_R117, MS-OXCTABL_R456");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R451");
            this.Manager.Checkpoint("MS-OXCTABL_R452");
            this.Manager.Checkpoint("MS-OXCTABL_R117");
            this.Manager.Checkpoint("MS-OXCTABL_R456");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker34(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,RESTRICT,True,Fals" +
                    "e,True,True,BOOKMARK_CUSTOM,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S57");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S57");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S57");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType.RESTRICT, ropType, "ropType of RopQueryRowsResponse, state S57");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S57");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S57");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S57");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S57");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_CUSTOM, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S57");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S57");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R468, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R451, MS-OXCTABL_R452, MS-OXCTABL_R117, MS-OXCTABL_R456");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R451");
            this.Manager.Checkpoint("MS-OXCTABL_R452");
            this.Manager.Checkpoint("MS-OXCTABL_R117");
            this.Manager.Checkpoint("MS-OXCTABL_R456");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker35(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,RESTRICT,True,Fals" +
                    "e,True,True,BOOKMARK_CURRENT,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S57");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S57");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S57");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType.RESTRICT, ropType, "ropType of RopQueryRowsResponse, state S57");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S57");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S57");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S57");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S57");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S57");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S57");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R468, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R451, MS-OXCTABL_R452, MS-OXCTABL_R117, MS-OXCTABL_R456");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R451");
            this.Manager.Checkpoint("MS-OXCTABL_R452");
            this.Manager.Checkpoint("MS-OXCTABL_R117");
            this.Manager.Checkpoint("MS-OXCTABL_R456");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteCheckRequirementEnabledChecker7(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S48");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker36(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,RESTRICT,True,Fals" +
                    "e,True,True,BOOKMARK_BEGINNING,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S58");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S58");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S58");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType.RESTRICT, ropType, "ropType of RopQueryRowsResponse, state S58");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S58");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S58");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S58");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S58");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(0)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S58");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S58");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R27, MS-OXCTABL_R468, MS" +
                        "-OXCTABL_R462, MS-OXCTABL_R451, MS-OXCTABL_R452, MS-OXCTABL_R117");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R27");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R451");
            this.Manager.Checkpoint("MS-OXCTABL_R452");
            this.Manager.Checkpoint("MS-OXCTABL_R117");
        }
        
        private void S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS74() {
            this.Manager.Comment("reaching state \'S74\'");
            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp35;
            this.Manager.Comment("executing step \'call RopSetColumns(2,False,False,False)\'");
            temp35 = this.IMS_OXCTABLAdapterInstance.RopSetColumns(2u, false, false, false);
            this.Manager.Checkpoint("MS-OXCTABL_R831");
            this.Manager.Checkpoint("MS-OXCTABL_R45");
            this.Manager.Comment("reaching state \'S90\'");
            this.Manager.Comment("checking step \'return RopSetColumns/success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp35, "return of RopSetColumns, state S90");
            this.Manager.Comment("reaching state \'S106\'");
            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp36;
            this.Manager.Comment("executing step \'call RopRestrict(2,False,True,False)\'");
            temp36 = this.IMS_OXCTABLAdapterInstance.RopRestrict(2u, false, true, false);
            this.Manager.Checkpoint("MS-OXCTABL_R834");
            this.Manager.Comment("reaching state \'S122\'");
            this.Manager.Comment("checking step \'return RopRestrict/ecNullObject\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues.ecNullObject, temp36, "return of RopRestrict, state S122");
            this.Manager.Comment("reaching state \'S138\'");
            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp37;
            this.Manager.Comment("executing step \'call RopQueryRows(Advance,True)\'");
            temp37 = this.IMS_OXCTABLAdapterInstance.RopQueryRows(((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), true);
            this.Manager.Checkpoint("MS-OXCTABL_R837");
            this.Manager.Comment("reaching state \'S154\'");
            this.Manager.Comment("checking step \'return RopQueryRows/success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp37, "return of RopQueryRows, state S154");
            this.Manager.Comment("reaching state \'S170\'");
            int temp41 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker37)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker42)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker43)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker44)));
            if ((temp41 == 0)) {
                S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS186();
                goto label11;
            }
            if ((temp41 == 1)) {
                S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS186();
                goto label11;
            }
            if ((temp41 == 2)) {
                S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS186();
                goto label11;
            }
            if ((temp41 == 3)) {
                S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS186();
                goto label11;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker37)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker42)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker43)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker44)));
        label11:
;
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker37(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,RESTRICT,True,True,F" +
                    "alse,True,BOOKMARK_CURRENT,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S170");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S170");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S170");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType.RESTRICT, ropType, "ropType of RopQueryRowsResponse, state S170");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S170");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S170");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S170");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S170");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S170");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S170");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R451, MS-OXCTABL_R452, MS-OXCTABL_R117");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R451");
            this.Manager.Checkpoint("MS-OXCTABL_R452");
            this.Manager.Checkpoint("MS-OXCTABL_R117");
        }
        
        private void S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS186() {
            this.Manager.Comment("reaching state \'S186\'");
            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp38;
            this.Manager.Comment("executing step \'call RopRestrict(3,True,False,False)\'");
            temp38 = this.IMS_OXCTABLAdapterInstance.RopRestrict(3u, true, false, false);
            this.Manager.Checkpoint("MS-OXCTABL_R834");
            this.Manager.Comment("reaching state \'S202\'");
            this.Manager.Comment("checking step \'return RopRestrict/success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp38, "return of RopRestrict, state S202");
            this.Manager.Comment("reaching state \'S218\'");
            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp39;
            this.Manager.Comment("executing step \'call RopQueryRows(Advance,True)\'");
            temp39 = this.IMS_OXCTABLAdapterInstance.RopQueryRows(((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), true);
            this.Manager.Checkpoint("MS-OXCTABL_R837");
            this.Manager.Comment("reaching state \'S234\'");
            this.Manager.Comment("checking step \'return RopQueryRows/success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp39, "return of RopQueryRows, state S234");
            this.Manager.Comment("reaching state \'S250\'");
            int temp40 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker38)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker39)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker40)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker41)));
            if ((temp40 == 0)) {
                S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS266();
                goto label10;
            }
            if ((temp40 == 1)) {
                S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS266();
                goto label10;
            }
            if ((temp40 == 2)) {
                S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS266();
                goto label10;
            }
            if ((temp40 == 3)) {
                S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS266();
                goto label10;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker38)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker39)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker40)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker41)));
        label10:
;
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker38(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,RESTRICT,True,True,T" +
                    "rue,True,BOOKMARK_CURRENT,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S250");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S250");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S250");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType.RESTRICT, ropType, "ropType of RopQueryRowsResponse, state S250");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S250");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S250");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S250");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S250");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S250");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S250");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R462, MS-OXCTABL_R451, M" +
                        "S-OXCTABL_R452, MS-OXCTABL_R117");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R451");
            this.Manager.Checkpoint("MS-OXCTABL_R452");
            this.Manager.Checkpoint("MS-OXCTABL_R117");
        }
        
        private void S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS266() {
            this.Manager.Comment("reaching state \'S266\'");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker39(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,RESTRICT,True,True,T" +
                    "rue,True,BOOKMARK_CUSTOM,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S250");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S250");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S250");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType.RESTRICT, ropType, "ropType of RopQueryRowsResponse, state S250");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S250");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S250");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S250");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S250");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_CUSTOM, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S250");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S250");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R462, MS-OXCTABL_R451, M" +
                        "S-OXCTABL_R452, MS-OXCTABL_R117");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R451");
            this.Manager.Checkpoint("MS-OXCTABL_R452");
            this.Manager.Checkpoint("MS-OXCTABL_R117");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker40(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,RESTRICT,True,True,T" +
                    "rue,True,BOOKMARK_END,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S250");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S250");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S250");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType.RESTRICT, ropType, "ropType of RopQueryRowsResponse, state S250");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S250");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S250");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S250");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S250");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_END, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S250");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S250");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R462, MS-OXCTABL_R29, MS" +
                        "-OXCTABL_R725, MS-OXCTABL_R451, MS-OXCTABL_R452, MS-OXCTABL_R117");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R29");
            this.Manager.Checkpoint("MS-OXCTABL_R725");
            this.Manager.Checkpoint("MS-OXCTABL_R451");
            this.Manager.Checkpoint("MS-OXCTABL_R452");
            this.Manager.Checkpoint("MS-OXCTABL_R117");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker41(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,RESTRICT,True,True,T" +
                    "rue,True,BOOKMARK_BEGINNING,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S250");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S250");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S250");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType.RESTRICT, ropType, "ropType of RopQueryRowsResponse, state S250");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S250");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S250");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S250");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S250");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(0)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S250");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S250");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R462, MS-OXCTABL_R451, M" +
                        "S-OXCTABL_R452, MS-OXCTABL_R117");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R451");
            this.Manager.Checkpoint("MS-OXCTABL_R452");
            this.Manager.Checkpoint("MS-OXCTABL_R117");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker42(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,RESTRICT,True,True,F" +
                    "alse,True,BOOKMARK_CUSTOM,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S170");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S170");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S170");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType.RESTRICT, ropType, "ropType of RopQueryRowsResponse, state S170");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S170");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S170");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S170");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S170");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_CUSTOM, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S170");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S170");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R451, MS-OXCTABL_R452, MS-OXCTABL_R117");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R451");
            this.Manager.Checkpoint("MS-OXCTABL_R452");
            this.Manager.Checkpoint("MS-OXCTABL_R117");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker43(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,RESTRICT,True,True,F" +
                    "alse,True,BOOKMARK_END,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S170");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S170");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S170");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType.RESTRICT, ropType, "ropType of RopQueryRowsResponse, state S170");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S170");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S170");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S170");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S170");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_END, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S170");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S170");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R29, MS-OXCTABL_R725, MS-OXCTABL_R451, MS-OXCTABL_R452, MS-OXCTABL_R11" +
                        "7");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R29");
            this.Manager.Checkpoint("MS-OXCTABL_R725");
            this.Manager.Checkpoint("MS-OXCTABL_R451");
            this.Manager.Checkpoint("MS-OXCTABL_R452");
            this.Manager.Checkpoint("MS-OXCTABL_R117");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker44(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,RESTRICT,True,True,F" +
                    "alse,True,BOOKMARK_BEGINNING,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S170");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S170");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S170");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType.RESTRICT, ropType, "ropType of RopQueryRowsResponse, state S170");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S170");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S170");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S170");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S170");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(0)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S170");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S170");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R451, MS-OXCTABL_R452, MS-OXCTABL_R117");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R451");
            this.Manager.Checkpoint("MS-OXCTABL_R452");
            this.Manager.Checkpoint("MS-OXCTABL_R117");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker45(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,RESTRICT,True,Fals" +
                    "e,True,True,BOOKMARK_END,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S58");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S58");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S58");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType.RESTRICT, ropType, "ropType of RopQueryRowsResponse, state S58");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S58");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S58");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S58");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S58");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_END, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S58");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S58");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R468, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R451, MS-OXCTABL_R452, MS-OXCTABL_R117");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R451");
            this.Manager.Checkpoint("MS-OXCTABL_R452");
            this.Manager.Checkpoint("MS-OXCTABL_R117");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker46(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,RESTRICT,True,Fals" +
                    "e,True,True,BOOKMARK_CUSTOM,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S58");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S58");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S58");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType.RESTRICT, ropType, "ropType of RopQueryRowsResponse, state S58");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S58");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S58");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S58");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S58");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_CUSTOM, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S58");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S58");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R468, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R451, MS-OXCTABL_R452, MS-OXCTABL_R117");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R451");
            this.Manager.Checkpoint("MS-OXCTABL_R452");
            this.Manager.Checkpoint("MS-OXCTABL_R117");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker47(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,RESTRICT,True,Fals" +
                    "e,True,True,BOOKMARK_CURRENT,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S58");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S58");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S58");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType.RESTRICT, ropType, "ropType of RopQueryRowsResponse, state S58");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S58");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S58");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S58");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S58");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S58");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S58");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R468, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R451, MS-OXCTABL_R452, MS-OXCTABL_R117");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R451");
            this.Manager.Checkpoint("MS-OXCTABL_R452");
            this.Manager.Checkpoint("MS-OXCTABL_R117");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteCheckRequirementEnabledChecker8(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S13");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteCheckRequirementEnabledChecker9(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S20");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteCheckRequirementEnabledChecker10(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S49");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker48(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,RESTRICT,True,Fals" +
                    "e,True,True,BOOKMARK_BEGINNING,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S59");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S59");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S59");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType.RESTRICT, ropType, "ropType of RopQueryRowsResponse, state S59");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S59");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S59");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S59");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S59");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(0)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S59");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S59");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R27, MS-OXCTABL_R468, MS" +
                        "-OXCTABL_R462, MS-OXCTABL_R451, MS-OXCTABL_R452, MS-OXCTABL_R117, MS-OXCTABL_R45" +
                        "6");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R27");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R451");
            this.Manager.Checkpoint("MS-OXCTABL_R452");
            this.Manager.Checkpoint("MS-OXCTABL_R117");
            this.Manager.Checkpoint("MS-OXCTABL_R456");
        }
        
        private void S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS75() {
            this.Manager.Comment("reaching state \'S75\'");
            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp48;
            this.Manager.Comment("executing step \'call RopSetColumns(2,False,False,False)\'");
            temp48 = this.IMS_OXCTABLAdapterInstance.RopSetColumns(2u, false, false, false);
            this.Manager.Checkpoint("MS-OXCTABL_R831");
            this.Manager.Checkpoint("MS-OXCTABL_R45");
            this.Manager.Comment("reaching state \'S91\'");
            this.Manager.Comment("checking step \'return RopSetColumns/success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp48, "return of RopSetColumns, state S91");
            this.Manager.Comment("reaching state \'S107\'");
            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp49;
            this.Manager.Comment("executing step \'call RopRestrict(2,False,True,False)\'");
            temp49 = this.IMS_OXCTABLAdapterInstance.RopRestrict(2u, false, true, false);
            this.Manager.Checkpoint("MS-OXCTABL_R834");
            this.Manager.Comment("reaching state \'S123\'");
            this.Manager.Comment("checking step \'return RopRestrict/ecNullObject\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues.ecNullObject, temp49, "return of RopRestrict, state S123");
            this.Manager.Comment("reaching state \'S139\'");
            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp50;
            this.Manager.Comment("executing step \'call RopQueryRows(Advance,True)\'");
            temp50 = this.IMS_OXCTABLAdapterInstance.RopQueryRows(((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), true);
            this.Manager.Checkpoint("MS-OXCTABL_R837");
            this.Manager.Comment("reaching state \'S155\'");
            this.Manager.Comment("checking step \'return RopQueryRows/success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp50, "return of RopQueryRows, state S155");
            this.Manager.Comment("reaching state \'S171\'");
            int temp54 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker49)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker54)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker55)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker56)));
            if ((temp54 == 0)) {
                S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS187();
                goto label16;
            }
            if ((temp54 == 1)) {
                S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS187();
                goto label16;
            }
            if ((temp54 == 2)) {
                S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS187();
                goto label16;
            }
            if ((temp54 == 3)) {
                S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS187();
                goto label16;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker49)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker54)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker55)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker56)));
        label16:
;
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker49(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,RESTRICT,True,True,F" +
                    "alse,True,BOOKMARK_CUSTOM,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S171");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S171");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S171");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType.RESTRICT, ropType, "ropType of RopQueryRowsResponse, state S171");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S171");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S171");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S171");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S171");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_CUSTOM, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S171");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S171");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R451, MS-OXCTABL_R452, MS-OXCTABL_R117");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R451");
            this.Manager.Checkpoint("MS-OXCTABL_R452");
            this.Manager.Checkpoint("MS-OXCTABL_R117");
        }
        
        private void S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS187() {
            this.Manager.Comment("reaching state \'S187\'");
            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp51;
            this.Manager.Comment("executing step \'call RopRestrict(3,True,False,False)\'");
            temp51 = this.IMS_OXCTABLAdapterInstance.RopRestrict(3u, true, false, false);
            this.Manager.Checkpoint("MS-OXCTABL_R834");
            this.Manager.Comment("reaching state \'S203\'");
            this.Manager.Comment("checking step \'return RopRestrict/success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp51, "return of RopRestrict, state S203");
            this.Manager.Comment("reaching state \'S219\'");
            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp52;
            this.Manager.Comment("executing step \'call RopQueryRows(Advance,True)\'");
            temp52 = this.IMS_OXCTABLAdapterInstance.RopQueryRows(((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), true);
            this.Manager.Checkpoint("MS-OXCTABL_R837");
            this.Manager.Comment("reaching state \'S235\'");
            this.Manager.Comment("checking step \'return RopQueryRows/success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp52, "return of RopQueryRows, state S235");
            this.Manager.Comment("reaching state \'S251\'");
            int temp53 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker50)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker51)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker52)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker53)));
            if ((temp53 == 0)) {
                S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS267();
                goto label15;
            }
            if ((temp53 == 1)) {
                S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS267();
                goto label15;
            }
            if ((temp53 == 2)) {
                S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS267();
                goto label15;
            }
            if ((temp53 == 3)) {
                S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS267();
                goto label15;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker50)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker51)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker52)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker53)));
        label15:
;
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker50(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,RESTRICT,True,True,T" +
                    "rue,True,BOOKMARK_CURRENT,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S251");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S251");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S251");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType.RESTRICT, ropType, "ropType of RopQueryRowsResponse, state S251");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S251");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S251");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S251");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S251");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S251");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S251");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R462, MS-OXCTABL_R451, M" +
                        "S-OXCTABL_R452, MS-OXCTABL_R117, MS-OXCTABL_R456");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R451");
            this.Manager.Checkpoint("MS-OXCTABL_R452");
            this.Manager.Checkpoint("MS-OXCTABL_R117");
            this.Manager.Checkpoint("MS-OXCTABL_R456");
        }
        
        private void S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS267() {
            this.Manager.Comment("reaching state \'S267\'");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker51(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,RESTRICT,True,True,T" +
                    "rue,True,BOOKMARK_CUSTOM,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S251");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S251");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S251");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType.RESTRICT, ropType, "ropType of RopQueryRowsResponse, state S251");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S251");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S251");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S251");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S251");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_CUSTOM, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S251");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S251");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R462, MS-OXCTABL_R451, M" +
                        "S-OXCTABL_R452, MS-OXCTABL_R117, MS-OXCTABL_R456");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R451");
            this.Manager.Checkpoint("MS-OXCTABL_R452");
            this.Manager.Checkpoint("MS-OXCTABL_R117");
            this.Manager.Checkpoint("MS-OXCTABL_R456");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker52(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,RESTRICT,True,True,T" +
                    "rue,True,BOOKMARK_END,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S251");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S251");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S251");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType.RESTRICT, ropType, "ropType of RopQueryRowsResponse, state S251");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S251");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S251");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S251");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S251");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_END, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S251");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S251");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R462, MS-OXCTABL_R29, MS" +
                        "-OXCTABL_R725, MS-OXCTABL_R451, MS-OXCTABL_R452, MS-OXCTABL_R117, MS-OXCTABL_R45" +
                        "6");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R29");
            this.Manager.Checkpoint("MS-OXCTABL_R725");
            this.Manager.Checkpoint("MS-OXCTABL_R451");
            this.Manager.Checkpoint("MS-OXCTABL_R452");
            this.Manager.Checkpoint("MS-OXCTABL_R117");
            this.Manager.Checkpoint("MS-OXCTABL_R456");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker53(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,RESTRICT,True,True,T" +
                    "rue,True,BOOKMARK_BEGINNING,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S251");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S251");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S251");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType.RESTRICT, ropType, "ropType of RopQueryRowsResponse, state S251");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S251");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S251");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S251");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S251");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(0)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S251");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S251");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R462, MS-OXCTABL_R451, M" +
                        "S-OXCTABL_R452, MS-OXCTABL_R117, MS-OXCTABL_R456");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R451");
            this.Manager.Checkpoint("MS-OXCTABL_R452");
            this.Manager.Checkpoint("MS-OXCTABL_R117");
            this.Manager.Checkpoint("MS-OXCTABL_R456");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker54(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,RESTRICT,True,True,F" +
                    "alse,True,BOOKMARK_CURRENT,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S171");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S171");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S171");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType.RESTRICT, ropType, "ropType of RopQueryRowsResponse, state S171");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S171");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S171");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S171");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S171");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S171");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S171");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R451, MS-OXCTABL_R452, MS-OXCTABL_R117");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R451");
            this.Manager.Checkpoint("MS-OXCTABL_R452");
            this.Manager.Checkpoint("MS-OXCTABL_R117");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker55(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,RESTRICT,True,True,F" +
                    "alse,True,BOOKMARK_END,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S171");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S171");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S171");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType.RESTRICT, ropType, "ropType of RopQueryRowsResponse, state S171");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S171");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S171");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S171");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S171");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_END, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S171");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S171");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R29, MS-OXCTABL_R725, MS-OXCTABL_R451, MS-OXCTABL_R452, MS-OXCTABL_R11" +
                        "7");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R29");
            this.Manager.Checkpoint("MS-OXCTABL_R725");
            this.Manager.Checkpoint("MS-OXCTABL_R451");
            this.Manager.Checkpoint("MS-OXCTABL_R452");
            this.Manager.Checkpoint("MS-OXCTABL_R117");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker56(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,RESTRICT,True,True,F" +
                    "alse,True,BOOKMARK_BEGINNING,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S171");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S171");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S171");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType.RESTRICT, ropType, "ropType of RopQueryRowsResponse, state S171");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S171");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S171");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S171");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S171");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(0)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S171");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S171");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R451, MS-OXCTABL_R452, MS-OXCTABL_R117");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R451");
            this.Manager.Checkpoint("MS-OXCTABL_R452");
            this.Manager.Checkpoint("MS-OXCTABL_R117");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker57(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,RESTRICT,True,Fals" +
                    "e,True,True,BOOKMARK_END,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S59");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S59");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S59");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType.RESTRICT, ropType, "ropType of RopQueryRowsResponse, state S59");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S59");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S59");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S59");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S59");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_END, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S59");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S59");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R468, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R451, MS-OXCTABL_R452, MS-OXCTABL_R117, MS-OXCTABL_R456");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R451");
            this.Manager.Checkpoint("MS-OXCTABL_R452");
            this.Manager.Checkpoint("MS-OXCTABL_R117");
            this.Manager.Checkpoint("MS-OXCTABL_R456");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker58(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,RESTRICT,True,Fals" +
                    "e,True,True,BOOKMARK_CUSTOM,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S59");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S59");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S59");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType.RESTRICT, ropType, "ropType of RopQueryRowsResponse, state S59");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S59");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S59");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S59");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S59");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_CUSTOM, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S59");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S59");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R468, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R451, MS-OXCTABL_R452, MS-OXCTABL_R117, MS-OXCTABL_R456");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R451");
            this.Manager.Checkpoint("MS-OXCTABL_R452");
            this.Manager.Checkpoint("MS-OXCTABL_R117");
            this.Manager.Checkpoint("MS-OXCTABL_R456");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker59(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,RESTRICT,True,Fals" +
                    "e,True,True,BOOKMARK_CURRENT,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S59");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S59");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S59");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType.RESTRICT, ropType, "ropType of RopQueryRowsResponse, state S59");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S59");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S59");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S59");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S59");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S59");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S59");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R468, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R451, MS-OXCTABL_R452, MS-OXCTABL_R117, MS-OXCTABL_R456");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R451");
            this.Manager.Checkpoint("MS-OXCTABL_R452");
            this.Manager.Checkpoint("MS-OXCTABL_R117");
            this.Manager.Checkpoint("MS-OXCTABL_R456");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteCheckRequirementEnabledChecker11(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S49");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker60(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,RESTRICT,True,Fals" +
                    "e,True,True,BOOKMARK_BEGINNING,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S60");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S60");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S60");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType.RESTRICT, ropType, "ropType of RopQueryRowsResponse, state S60");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S60");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S60");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S60");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S60");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(0)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S60");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S60");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R27, MS-OXCTABL_R468, MS" +
                        "-OXCTABL_R462, MS-OXCTABL_R451, MS-OXCTABL_R452, MS-OXCTABL_R117");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R27");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R451");
            this.Manager.Checkpoint("MS-OXCTABL_R452");
            this.Manager.Checkpoint("MS-OXCTABL_R117");
        }
        
        private void S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS76() {
            this.Manager.Comment("reaching state \'S76\'");
            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp56;
            this.Manager.Comment("executing step \'call RopSetColumns(2,False,False,False)\'");
            temp56 = this.IMS_OXCTABLAdapterInstance.RopSetColumns(2u, false, false, false);
            this.Manager.Checkpoint("MS-OXCTABL_R831");
            this.Manager.Checkpoint("MS-OXCTABL_R45");
            this.Manager.Comment("reaching state \'S92\'");
            this.Manager.Comment("checking step \'return RopSetColumns/success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp56, "return of RopSetColumns, state S92");
            this.Manager.Comment("reaching state \'S108\'");
            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp57;
            this.Manager.Comment("executing step \'call RopRestrict(2,False,True,False)\'");
            temp57 = this.IMS_OXCTABLAdapterInstance.RopRestrict(2u, false, true, false);
            this.Manager.Checkpoint("MS-OXCTABL_R834");
            this.Manager.Comment("reaching state \'S124\'");
            this.Manager.Comment("checking step \'return RopRestrict/ecNullObject\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues.ecNullObject, temp57, "return of RopRestrict, state S124");
            this.Manager.Comment("reaching state \'S140\'");
            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp58;
            this.Manager.Comment("executing step \'call RopQueryRows(Advance,True)\'");
            temp58 = this.IMS_OXCTABLAdapterInstance.RopQueryRows(((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), true);
            this.Manager.Checkpoint("MS-OXCTABL_R837");
            this.Manager.Comment("reaching state \'S156\'");
            this.Manager.Comment("checking step \'return RopQueryRows/success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp58, "return of RopQueryRows, state S156");
            this.Manager.Comment("reaching state \'S172\'");
            int temp62 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker61)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker66)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker67)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker68)));
            if ((temp62 == 0)) {
                S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS188();
                goto label19;
            }
            if ((temp62 == 1)) {
                S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS188();
                goto label19;
            }
            if ((temp62 == 2)) {
                S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS188();
                goto label19;
            }
            if ((temp62 == 3)) {
                S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS188();
                goto label19;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker61)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker66)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker67)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker68)));
        label19:
;
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker61(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,RESTRICT,True,True,F" +
                    "alse,True,BOOKMARK_CUSTOM,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S172");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S172");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S172");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType.RESTRICT, ropType, "ropType of RopQueryRowsResponse, state S172");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S172");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S172");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S172");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S172");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_CUSTOM, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S172");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S172");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R451, MS-OXCTABL_R452, MS-OXCTABL_R117");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R451");
            this.Manager.Checkpoint("MS-OXCTABL_R452");
            this.Manager.Checkpoint("MS-OXCTABL_R117");
        }
        
        private void S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS188() {
            this.Manager.Comment("reaching state \'S188\'");
            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp59;
            this.Manager.Comment("executing step \'call RopRestrict(3,True,False,False)\'");
            temp59 = this.IMS_OXCTABLAdapterInstance.RopRestrict(3u, true, false, false);
            this.Manager.Checkpoint("MS-OXCTABL_R834");
            this.Manager.Comment("reaching state \'S204\'");
            this.Manager.Comment("checking step \'return RopRestrict/success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp59, "return of RopRestrict, state S204");
            this.Manager.Comment("reaching state \'S220\'");
            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp60;
            this.Manager.Comment("executing step \'call RopQueryRows(Advance,True)\'");
            temp60 = this.IMS_OXCTABLAdapterInstance.RopQueryRows(((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), true);
            this.Manager.Checkpoint("MS-OXCTABL_R837");
            this.Manager.Comment("reaching state \'S236\'");
            this.Manager.Comment("checking step \'return RopQueryRows/success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp60, "return of RopQueryRows, state S236");
            this.Manager.Comment("reaching state \'S252\'");
            int temp61 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker62)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker63)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker64)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker65)));
            if ((temp61 == 0)) {
                S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS268();
                goto label18;
            }
            if ((temp61 == 1)) {
                S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS268();
                goto label18;
            }
            if ((temp61 == 2)) {
                S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS268();
                goto label18;
            }
            if ((temp61 == 3)) {
                S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS268();
                goto label18;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker62)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker63)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker64)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker65)));
        label18:
;
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker62(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,RESTRICT,True,True,T" +
                    "rue,True,BOOKMARK_CURRENT,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S252");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S252");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S252");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType.RESTRICT, ropType, "ropType of RopQueryRowsResponse, state S252");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S252");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S252");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S252");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S252");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S252");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S252");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R462, MS-OXCTABL_R451, M" +
                        "S-OXCTABL_R452, MS-OXCTABL_R117");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R451");
            this.Manager.Checkpoint("MS-OXCTABL_R452");
            this.Manager.Checkpoint("MS-OXCTABL_R117");
        }
        
        private void S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS268() {
            this.Manager.Comment("reaching state \'S268\'");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker63(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,RESTRICT,True,True,T" +
                    "rue,True,BOOKMARK_CUSTOM,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S252");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S252");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S252");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType.RESTRICT, ropType, "ropType of RopQueryRowsResponse, state S252");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S252");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S252");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S252");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S252");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_CUSTOM, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S252");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S252");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R462, MS-OXCTABL_R451, M" +
                        "S-OXCTABL_R452, MS-OXCTABL_R117");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R451");
            this.Manager.Checkpoint("MS-OXCTABL_R452");
            this.Manager.Checkpoint("MS-OXCTABL_R117");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker64(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,RESTRICT,True,True,T" +
                    "rue,True,BOOKMARK_END,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S252");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S252");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S252");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType.RESTRICT, ropType, "ropType of RopQueryRowsResponse, state S252");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S252");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S252");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S252");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S252");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_END, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S252");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S252");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R462, MS-OXCTABL_R29, MS" +
                        "-OXCTABL_R725, MS-OXCTABL_R451, MS-OXCTABL_R452, MS-OXCTABL_R117");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R29");
            this.Manager.Checkpoint("MS-OXCTABL_R725");
            this.Manager.Checkpoint("MS-OXCTABL_R451");
            this.Manager.Checkpoint("MS-OXCTABL_R452");
            this.Manager.Checkpoint("MS-OXCTABL_R117");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker65(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,RESTRICT,True,True,T" +
                    "rue,True,BOOKMARK_BEGINNING,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S252");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S252");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S252");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType.RESTRICT, ropType, "ropType of RopQueryRowsResponse, state S252");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S252");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S252");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S252");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S252");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(0)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S252");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S252");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R462, MS-OXCTABL_R451, M" +
                        "S-OXCTABL_R452, MS-OXCTABL_R117");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R451");
            this.Manager.Checkpoint("MS-OXCTABL_R452");
            this.Manager.Checkpoint("MS-OXCTABL_R117");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker66(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,RESTRICT,True,True,F" +
                    "alse,True,BOOKMARK_CURRENT,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S172");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S172");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S172");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType.RESTRICT, ropType, "ropType of RopQueryRowsResponse, state S172");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S172");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S172");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S172");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S172");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S172");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S172");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R451, MS-OXCTABL_R452, MS-OXCTABL_R117");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R451");
            this.Manager.Checkpoint("MS-OXCTABL_R452");
            this.Manager.Checkpoint("MS-OXCTABL_R117");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker67(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,RESTRICT,True,True,F" +
                    "alse,True,BOOKMARK_END,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S172");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S172");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S172");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType.RESTRICT, ropType, "ropType of RopQueryRowsResponse, state S172");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S172");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S172");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S172");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S172");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_END, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S172");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S172");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R29, MS-OXCTABL_R725, MS-OXCTABL_R451, MS-OXCTABL_R452, MS-OXCTABL_R11" +
                        "7");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R29");
            this.Manager.Checkpoint("MS-OXCTABL_R725");
            this.Manager.Checkpoint("MS-OXCTABL_R451");
            this.Manager.Checkpoint("MS-OXCTABL_R452");
            this.Manager.Checkpoint("MS-OXCTABL_R117");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker68(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,RESTRICT,True,True,F" +
                    "alse,True,BOOKMARK_BEGINNING,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S172");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S172");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S172");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType.RESTRICT, ropType, "ropType of RopQueryRowsResponse, state S172");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S172");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S172");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S172");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S172");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(0)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S172");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S172");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R451, MS-OXCTABL_R452, MS-OXCTABL_R117");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R451");
            this.Manager.Checkpoint("MS-OXCTABL_R452");
            this.Manager.Checkpoint("MS-OXCTABL_R117");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker69(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,RESTRICT,True,Fals" +
                    "e,True,True,BOOKMARK_END,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S60");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S60");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S60");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType.RESTRICT, ropType, "ropType of RopQueryRowsResponse, state S60");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S60");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S60");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S60");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S60");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_END, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S60");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S60");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R468, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R451, MS-OXCTABL_R452, MS-OXCTABL_R117");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R451");
            this.Manager.Checkpoint("MS-OXCTABL_R452");
            this.Manager.Checkpoint("MS-OXCTABL_R117");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker70(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,RESTRICT,True,Fals" +
                    "e,True,True,BOOKMARK_CUSTOM,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S60");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S60");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S60");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType.RESTRICT, ropType, "ropType of RopQueryRowsResponse, state S60");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S60");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S60");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S60");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S60");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_CUSTOM, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S60");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S60");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R468, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R451, MS-OXCTABL_R452, MS-OXCTABL_R117");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R451");
            this.Manager.Checkpoint("MS-OXCTABL_R452");
            this.Manager.Checkpoint("MS-OXCTABL_R117");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker71(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,RESTRICT,True,Fals" +
                    "e,True,True,BOOKMARK_CURRENT,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S60");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S60");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S60");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType.RESTRICT, ropType, "ropType of RopQueryRowsResponse, state S60");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S60");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S60");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S60");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S60");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S60");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S60");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R468, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R451, MS-OXCTABL_R452, MS-OXCTABL_R117");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R451");
            this.Manager.Checkpoint("MS-OXCTABL_R452");
            this.Manager.Checkpoint("MS-OXCTABL_R117");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteCheckRequirementEnabledChecker12(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S20");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteCheckRequirementEnabledChecker13(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S50");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker72(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,RESTRICT,True,Fals" +
                    "e,True,True,BOOKMARK_BEGINNING,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S61");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S61");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S61");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType.RESTRICT, ropType, "ropType of RopQueryRowsResponse, state S61");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S61");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S61");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S61");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S61");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(0)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S61");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S61");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R27, MS-OXCTABL_R468, MS" +
                        "-OXCTABL_R462, MS-OXCTABL_R451, MS-OXCTABL_R452, MS-OXCTABL_R117");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R27");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R451");
            this.Manager.Checkpoint("MS-OXCTABL_R452");
            this.Manager.Checkpoint("MS-OXCTABL_R117");
        }
        
        private void S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS77() {
            this.Manager.Comment("reaching state \'S77\'");
            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp67;
            this.Manager.Comment("executing step \'call RopSetColumns(2,False,False,False)\'");
            temp67 = this.IMS_OXCTABLAdapterInstance.RopSetColumns(2u, false, false, false);
            this.Manager.Checkpoint("MS-OXCTABL_R831");
            this.Manager.Checkpoint("MS-OXCTABL_R45");
            this.Manager.Comment("reaching state \'S93\'");
            this.Manager.Comment("checking step \'return RopSetColumns/success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp67, "return of RopSetColumns, state S93");
            this.Manager.Comment("reaching state \'S109\'");
            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp68;
            this.Manager.Comment("executing step \'call RopRestrict(2,False,True,False)\'");
            temp68 = this.IMS_OXCTABLAdapterInstance.RopRestrict(2u, false, true, false);
            this.Manager.Checkpoint("MS-OXCTABL_R834");
            this.Manager.Comment("reaching state \'S125\'");
            this.Manager.Comment("checking step \'return RopRestrict/ecNullObject\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues.ecNullObject, temp68, "return of RopRestrict, state S125");
            this.Manager.Comment("reaching state \'S141\'");
            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp69;
            this.Manager.Comment("executing step \'call RopQueryRows(Advance,True)\'");
            temp69 = this.IMS_OXCTABLAdapterInstance.RopQueryRows(((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), true);
            this.Manager.Checkpoint("MS-OXCTABL_R837");
            this.Manager.Comment("reaching state \'S157\'");
            this.Manager.Comment("checking step \'return RopQueryRows/success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp69, "return of RopQueryRows, state S157");
            this.Manager.Comment("reaching state \'S173\'");
            int temp73 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker73)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker78)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker79)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker80)));
            if ((temp73 == 0)) {
                S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS189();
                goto label23;
            }
            if ((temp73 == 1)) {
                S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS189();
                goto label23;
            }
            if ((temp73 == 2)) {
                S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS189();
                goto label23;
            }
            if ((temp73 == 3)) {
                S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS189();
                goto label23;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker73)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker78)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker79)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker80)));
        label23:
;
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker73(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,RESTRICT,True,True,F" +
                    "alse,True,BOOKMARK_CUSTOM,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S173");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S173");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S173");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType.RESTRICT, ropType, "ropType of RopQueryRowsResponse, state S173");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S173");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S173");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S173");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S173");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_CUSTOM, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S173");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S173");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R451, MS-OXCTABL_R452, MS-OXCTABL_R117");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R451");
            this.Manager.Checkpoint("MS-OXCTABL_R452");
            this.Manager.Checkpoint("MS-OXCTABL_R117");
        }
        
        private void S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS189() {
            this.Manager.Comment("reaching state \'S189\'");
            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp70;
            this.Manager.Comment("executing step \'call RopRestrict(3,True,False,False)\'");
            temp70 = this.IMS_OXCTABLAdapterInstance.RopRestrict(3u, true, false, false);
            this.Manager.Checkpoint("MS-OXCTABL_R834");
            this.Manager.Comment("reaching state \'S205\'");
            this.Manager.Comment("checking step \'return RopRestrict/success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp70, "return of RopRestrict, state S205");
            this.Manager.Comment("reaching state \'S221\'");
            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp71;
            this.Manager.Comment("executing step \'call RopQueryRows(Advance,True)\'");
            temp71 = this.IMS_OXCTABLAdapterInstance.RopQueryRows(((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), true);
            this.Manager.Checkpoint("MS-OXCTABL_R837");
            this.Manager.Comment("reaching state \'S237\'");
            this.Manager.Comment("checking step \'return RopQueryRows/success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp71, "return of RopQueryRows, state S237");
            this.Manager.Comment("reaching state \'S253\'");
            int temp72 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker74)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker75)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker76)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker77)));
            if ((temp72 == 0)) {
                S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS269();
                goto label22;
            }
            if ((temp72 == 1)) {
                S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS269();
                goto label22;
            }
            if ((temp72 == 2)) {
                S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS269();
                goto label22;
            }
            if ((temp72 == 3)) {
                S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS269();
                goto label22;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker74)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker75)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker76)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker77)));
        label22:
;
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker74(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,RESTRICT,True,True,T" +
                    "rue,True,BOOKMARK_CUSTOM,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S253");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S253");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S253");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType.RESTRICT, ropType, "ropType of RopQueryRowsResponse, state S253");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S253");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S253");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S253");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S253");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_CUSTOM, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S253");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S253");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R462, MS-OXCTABL_R451, M" +
                        "S-OXCTABL_R452, MS-OXCTABL_R117");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R451");
            this.Manager.Checkpoint("MS-OXCTABL_R452");
            this.Manager.Checkpoint("MS-OXCTABL_R117");
        }
        
        private void S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS269() {
            this.Manager.Comment("reaching state \'S269\'");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker75(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,RESTRICT,True,True,T" +
                    "rue,True,BOOKMARK_CURRENT,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S253");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S253");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S253");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType.RESTRICT, ropType, "ropType of RopQueryRowsResponse, state S253");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S253");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S253");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S253");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S253");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S253");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S253");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R462, MS-OXCTABL_R451, M" +
                        "S-OXCTABL_R452, MS-OXCTABL_R117");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R451");
            this.Manager.Checkpoint("MS-OXCTABL_R452");
            this.Manager.Checkpoint("MS-OXCTABL_R117");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker76(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,RESTRICT,True,True,T" +
                    "rue,True,BOOKMARK_END,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S253");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S253");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S253");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType.RESTRICT, ropType, "ropType of RopQueryRowsResponse, state S253");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S253");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S253");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S253");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S253");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_END, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S253");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S253");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R462, MS-OXCTABL_R29, MS" +
                        "-OXCTABL_R725, MS-OXCTABL_R451, MS-OXCTABL_R452, MS-OXCTABL_R117");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R29");
            this.Manager.Checkpoint("MS-OXCTABL_R725");
            this.Manager.Checkpoint("MS-OXCTABL_R451");
            this.Manager.Checkpoint("MS-OXCTABL_R452");
            this.Manager.Checkpoint("MS-OXCTABL_R117");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker77(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,RESTRICT,True,True,T" +
                    "rue,True,BOOKMARK_BEGINNING,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S253");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S253");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S253");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType.RESTRICT, ropType, "ropType of RopQueryRowsResponse, state S253");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S253");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S253");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S253");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S253");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(0)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S253");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S253");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R462, MS-OXCTABL_R451, M" +
                        "S-OXCTABL_R452, MS-OXCTABL_R117");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R451");
            this.Manager.Checkpoint("MS-OXCTABL_R452");
            this.Manager.Checkpoint("MS-OXCTABL_R117");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker78(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,RESTRICT,True,True,F" +
                    "alse,True,BOOKMARK_CURRENT,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S173");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S173");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S173");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType.RESTRICT, ropType, "ropType of RopQueryRowsResponse, state S173");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S173");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S173");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S173");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S173");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S173");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S173");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R451, MS-OXCTABL_R452, MS-OXCTABL_R117");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R451");
            this.Manager.Checkpoint("MS-OXCTABL_R452");
            this.Manager.Checkpoint("MS-OXCTABL_R117");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker79(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,RESTRICT,True,True,F" +
                    "alse,True,BOOKMARK_END,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S173");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S173");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S173");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType.RESTRICT, ropType, "ropType of RopQueryRowsResponse, state S173");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S173");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S173");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S173");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S173");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_END, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S173");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S173");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R29, MS-OXCTABL_R725, MS-OXCTABL_R451, MS-OXCTABL_R452, MS-OXCTABL_R11" +
                        "7");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R29");
            this.Manager.Checkpoint("MS-OXCTABL_R725");
            this.Manager.Checkpoint("MS-OXCTABL_R451");
            this.Manager.Checkpoint("MS-OXCTABL_R452");
            this.Manager.Checkpoint("MS-OXCTABL_R117");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker80(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,RESTRICT,True,True,F" +
                    "alse,True,BOOKMARK_BEGINNING,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S173");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S173");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S173");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType.RESTRICT, ropType, "ropType of RopQueryRowsResponse, state S173");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S173");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S173");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S173");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S173");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(0)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S173");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S173");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R451, MS-OXCTABL_R452, MS-OXCTABL_R117");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R451");
            this.Manager.Checkpoint("MS-OXCTABL_R452");
            this.Manager.Checkpoint("MS-OXCTABL_R117");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker81(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,RESTRICT,True,Fals" +
                    "e,True,True,BOOKMARK_END,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S61");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S61");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S61");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType.RESTRICT, ropType, "ropType of RopQueryRowsResponse, state S61");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S61");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S61");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S61");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S61");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_END, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S61");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S61");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R468, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R451, MS-OXCTABL_R452, MS-OXCTABL_R117");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R451");
            this.Manager.Checkpoint("MS-OXCTABL_R452");
            this.Manager.Checkpoint("MS-OXCTABL_R117");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker82(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,RESTRICT,True,Fals" +
                    "e,True,True,BOOKMARK_CUSTOM,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S61");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S61");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S61");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType.RESTRICT, ropType, "ropType of RopQueryRowsResponse, state S61");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S61");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S61");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S61");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S61");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_CUSTOM, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S61");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S61");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R468, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R451, MS-OXCTABL_R452, MS-OXCTABL_R117");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R451");
            this.Manager.Checkpoint("MS-OXCTABL_R452");
            this.Manager.Checkpoint("MS-OXCTABL_R117");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker83(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,RESTRICT,True,Fals" +
                    "e,True,True,BOOKMARK_CURRENT,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S61");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S61");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S61");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType.RESTRICT, ropType, "ropType of RopQueryRowsResponse, state S61");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S61");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S61");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S61");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S61");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S61");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S61");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R468, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R451, MS-OXCTABL_R452, MS-OXCTABL_R117");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R451");
            this.Manager.Checkpoint("MS-OXCTABL_R452");
            this.Manager.Checkpoint("MS-OXCTABL_R117");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteCheckRequirementEnabledChecker14(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S50");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker84(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,RESTRICT,True,Fals" +
                    "e,True,True,BOOKMARK_BEGINNING,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S62");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S62");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S62");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType.RESTRICT, ropType, "ropType of RopQueryRowsResponse, state S62");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S62");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S62");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S62");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S62");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(0)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S62");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S62");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R27, MS-OXCTABL_R468, MS" +
                        "-OXCTABL_R462, MS-OXCTABL_R451, MS-OXCTABL_R452, MS-OXCTABL_R117, MS-OXCTABL_R45" +
                        "6");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R27");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R451");
            this.Manager.Checkpoint("MS-OXCTABL_R452");
            this.Manager.Checkpoint("MS-OXCTABL_R117");
            this.Manager.Checkpoint("MS-OXCTABL_R456");
        }
        
        private void S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS78() {
            this.Manager.Comment("reaching state \'S78\'");
            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp75;
            this.Manager.Comment("executing step \'call RopSetColumns(2,False,False,False)\'");
            temp75 = this.IMS_OXCTABLAdapterInstance.RopSetColumns(2u, false, false, false);
            this.Manager.Checkpoint("MS-OXCTABL_R831");
            this.Manager.Checkpoint("MS-OXCTABL_R45");
            this.Manager.Comment("reaching state \'S94\'");
            this.Manager.Comment("checking step \'return RopSetColumns/success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp75, "return of RopSetColumns, state S94");
            this.Manager.Comment("reaching state \'S110\'");
            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp76;
            this.Manager.Comment("executing step \'call RopRestrict(2,False,True,False)\'");
            temp76 = this.IMS_OXCTABLAdapterInstance.RopRestrict(2u, false, true, false);
            this.Manager.Checkpoint("MS-OXCTABL_R834");
            this.Manager.Comment("reaching state \'S126\'");
            this.Manager.Comment("checking step \'return RopRestrict/ecNullObject\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues.ecNullObject, temp76, "return of RopRestrict, state S126");
            this.Manager.Comment("reaching state \'S142\'");
            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp77;
            this.Manager.Comment("executing step \'call RopQueryRows(Advance,True)\'");
            temp77 = this.IMS_OXCTABLAdapterInstance.RopQueryRows(((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), true);
            this.Manager.Checkpoint("MS-OXCTABL_R837");
            this.Manager.Comment("reaching state \'S158\'");
            this.Manager.Comment("checking step \'return RopQueryRows/success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp77, "return of RopQueryRows, state S158");
            this.Manager.Comment("reaching state \'S174\'");
            int temp81 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker85)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker90)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker91)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker92)));
            if ((temp81 == 0)) {
                S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS190();
                goto label26;
            }
            if ((temp81 == 1)) {
                S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS190();
                goto label26;
            }
            if ((temp81 == 2)) {
                S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS190();
                goto label26;
            }
            if ((temp81 == 3)) {
                S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS190();
                goto label26;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker85)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker90)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker91)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker92)));
        label26:
;
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker85(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,RESTRICT,True,True,F" +
                    "alse,True,BOOKMARK_END,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S174");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S174");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S174");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType.RESTRICT, ropType, "ropType of RopQueryRowsResponse, state S174");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S174");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S174");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S174");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S174");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_END, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S174");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S174");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R29, MS-OXCTABL_R725, MS-OXCTABL_R451, MS-OXCTABL_R452, MS-OXCTABL_R11" +
                        "7");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R29");
            this.Manager.Checkpoint("MS-OXCTABL_R725");
            this.Manager.Checkpoint("MS-OXCTABL_R451");
            this.Manager.Checkpoint("MS-OXCTABL_R452");
            this.Manager.Checkpoint("MS-OXCTABL_R117");
        }
        
        private void S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS190() {
            this.Manager.Comment("reaching state \'S190\'");
            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp78;
            this.Manager.Comment("executing step \'call RopRestrict(3,True,False,False)\'");
            temp78 = this.IMS_OXCTABLAdapterInstance.RopRestrict(3u, true, false, false);
            this.Manager.Checkpoint("MS-OXCTABL_R834");
            this.Manager.Comment("reaching state \'S206\'");
            this.Manager.Comment("checking step \'return RopRestrict/success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp78, "return of RopRestrict, state S206");
            this.Manager.Comment("reaching state \'S222\'");
            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp79;
            this.Manager.Comment("executing step \'call RopQueryRows(Advance,True)\'");
            temp79 = this.IMS_OXCTABLAdapterInstance.RopQueryRows(((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), true);
            this.Manager.Checkpoint("MS-OXCTABL_R837");
            this.Manager.Comment("reaching state \'S238\'");
            this.Manager.Comment("checking step \'return RopQueryRows/success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp79, "return of RopQueryRows, state S238");
            this.Manager.Comment("reaching state \'S254\'");
            int temp80 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker86)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker87)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker88)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker89)));
            if ((temp80 == 0)) {
                S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS270();
                goto label25;
            }
            if ((temp80 == 1)) {
                S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS270();
                goto label25;
            }
            if ((temp80 == 2)) {
                S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS270();
                goto label25;
            }
            if ((temp80 == 3)) {
                S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS270();
                goto label25;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker86)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker87)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker88)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker89)));
        label25:
;
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker86(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,RESTRICT,True,True,T" +
                    "rue,True,BOOKMARK_CURRENT,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S254");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S254");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S254");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType.RESTRICT, ropType, "ropType of RopQueryRowsResponse, state S254");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S254");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S254");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S254");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S254");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S254");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S254");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R462, MS-OXCTABL_R451, M" +
                        "S-OXCTABL_R452, MS-OXCTABL_R117, MS-OXCTABL_R456");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R451");
            this.Manager.Checkpoint("MS-OXCTABL_R452");
            this.Manager.Checkpoint("MS-OXCTABL_R117");
            this.Manager.Checkpoint("MS-OXCTABL_R456");
        }
        
        private void S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS270() {
            this.Manager.Comment("reaching state \'S270\'");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker87(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,RESTRICT,True,True,T" +
                    "rue,True,BOOKMARK_CUSTOM,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S254");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S254");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S254");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType.RESTRICT, ropType, "ropType of RopQueryRowsResponse, state S254");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S254");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S254");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S254");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S254");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_CUSTOM, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S254");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S254");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R462, MS-OXCTABL_R451, M" +
                        "S-OXCTABL_R452, MS-OXCTABL_R117, MS-OXCTABL_R456");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R451");
            this.Manager.Checkpoint("MS-OXCTABL_R452");
            this.Manager.Checkpoint("MS-OXCTABL_R117");
            this.Manager.Checkpoint("MS-OXCTABL_R456");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker88(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,RESTRICT,True,True,T" +
                    "rue,True,BOOKMARK_END,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S254");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S254");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S254");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType.RESTRICT, ropType, "ropType of RopQueryRowsResponse, state S254");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S254");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S254");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S254");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S254");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_END, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S254");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S254");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R462, MS-OXCTABL_R29, MS" +
                        "-OXCTABL_R725, MS-OXCTABL_R451, MS-OXCTABL_R452, MS-OXCTABL_R117, MS-OXCTABL_R45" +
                        "6");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R29");
            this.Manager.Checkpoint("MS-OXCTABL_R725");
            this.Manager.Checkpoint("MS-OXCTABL_R451");
            this.Manager.Checkpoint("MS-OXCTABL_R452");
            this.Manager.Checkpoint("MS-OXCTABL_R117");
            this.Manager.Checkpoint("MS-OXCTABL_R456");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker89(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,RESTRICT,True,True,T" +
                    "rue,True,BOOKMARK_BEGINNING,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S254");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S254");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S254");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType.RESTRICT, ropType, "ropType of RopQueryRowsResponse, state S254");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S254");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S254");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S254");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S254");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(0)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S254");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S254");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R462, MS-OXCTABL_R451, M" +
                        "S-OXCTABL_R452, MS-OXCTABL_R117, MS-OXCTABL_R456");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R451");
            this.Manager.Checkpoint("MS-OXCTABL_R452");
            this.Manager.Checkpoint("MS-OXCTABL_R117");
            this.Manager.Checkpoint("MS-OXCTABL_R456");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker90(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,RESTRICT,True,True,F" +
                    "alse,True,BOOKMARK_CUSTOM,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S174");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S174");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S174");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType.RESTRICT, ropType, "ropType of RopQueryRowsResponse, state S174");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S174");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S174");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S174");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S174");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_CUSTOM, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S174");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S174");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R451, MS-OXCTABL_R452, MS-OXCTABL_R117");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R451");
            this.Manager.Checkpoint("MS-OXCTABL_R452");
            this.Manager.Checkpoint("MS-OXCTABL_R117");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker91(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,RESTRICT,True,True,F" +
                    "alse,True,BOOKMARK_CURRENT,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S174");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S174");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S174");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType.RESTRICT, ropType, "ropType of RopQueryRowsResponse, state S174");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S174");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S174");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S174");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S174");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S174");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S174");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R451, MS-OXCTABL_R452, MS-OXCTABL_R117");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R451");
            this.Manager.Checkpoint("MS-OXCTABL_R452");
            this.Manager.Checkpoint("MS-OXCTABL_R117");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker92(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,RESTRICT,True,True,F" +
                    "alse,True,BOOKMARK_BEGINNING,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S174");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S174");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S174");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType.RESTRICT, ropType, "ropType of RopQueryRowsResponse, state S174");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S174");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S174");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S174");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S174");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(0)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S174");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S174");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R451, MS-OXCTABL_R452, MS-OXCTABL_R117");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R451");
            this.Manager.Checkpoint("MS-OXCTABL_R452");
            this.Manager.Checkpoint("MS-OXCTABL_R117");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker93(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,RESTRICT,True,Fals" +
                    "e,True,True,BOOKMARK_END,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S62");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S62");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S62");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType.RESTRICT, ropType, "ropType of RopQueryRowsResponse, state S62");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S62");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S62");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S62");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S62");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_END, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S62");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S62");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R468, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R451, MS-OXCTABL_R452, MS-OXCTABL_R117, MS-OXCTABL_R456");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R451");
            this.Manager.Checkpoint("MS-OXCTABL_R452");
            this.Manager.Checkpoint("MS-OXCTABL_R117");
            this.Manager.Checkpoint("MS-OXCTABL_R456");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker94(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,RESTRICT,True,Fals" +
                    "e,True,True,BOOKMARK_CUSTOM,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S62");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S62");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S62");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType.RESTRICT, ropType, "ropType of RopQueryRowsResponse, state S62");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S62");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S62");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S62");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S62");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_CUSTOM, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S62");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S62");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R468, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R451, MS-OXCTABL_R452, MS-OXCTABL_R117, MS-OXCTABL_R456");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R451");
            this.Manager.Checkpoint("MS-OXCTABL_R452");
            this.Manager.Checkpoint("MS-OXCTABL_R117");
            this.Manager.Checkpoint("MS-OXCTABL_R456");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker95(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,RESTRICT,True,Fals" +
                    "e,True,True,BOOKMARK_CURRENT,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S62");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S62");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S62");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType.RESTRICT, ropType, "ropType of RopQueryRowsResponse, state S62");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S62");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S62");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S62");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S62");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S62");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S62");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R468, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R451, MS-OXCTABL_R452, MS-OXCTABL_R117, MS-OXCTABL_R456");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R451");
            this.Manager.Checkpoint("MS-OXCTABL_R452");
            this.Manager.Checkpoint("MS-OXCTABL_R117");
            this.Manager.Checkpoint("MS-OXCTABL_R456");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteCheckRequirementEnabledChecker15(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S10");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteCheckRequirementEnabledChecker16(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S14");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteCheckRequirementEnabledChecker17(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S21");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteCheckRequirementEnabledChecker18(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S51");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker96(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,RESTRICT,True,Fals" +
                    "e,True,True,BOOKMARK_BEGINNING,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S63");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S63");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S63");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType.RESTRICT, ropType, "ropType of RopQueryRowsResponse, state S63");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S63");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S63");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S63");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S63");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(0)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S63");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S63");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R27, MS-OXCTABL_R468, MS" +
                        "-OXCTABL_R462, MS-OXCTABL_R451, MS-OXCTABL_R452, MS-OXCTABL_R117, MS-OXCTABL_R45" +
                        "6");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R27");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R451");
            this.Manager.Checkpoint("MS-OXCTABL_R452");
            this.Manager.Checkpoint("MS-OXCTABL_R117");
            this.Manager.Checkpoint("MS-OXCTABL_R456");
        }
        
        private void S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS79() {
            this.Manager.Comment("reaching state \'S79\'");
            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp90;
            this.Manager.Comment("executing step \'call RopSetColumns(2,False,False,False)\'");
            temp90 = this.IMS_OXCTABLAdapterInstance.RopSetColumns(2u, false, false, false);
            this.Manager.Checkpoint("MS-OXCTABL_R831");
            this.Manager.Checkpoint("MS-OXCTABL_R45");
            this.Manager.Comment("reaching state \'S95\'");
            this.Manager.Comment("checking step \'return RopSetColumns/success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp90, "return of RopSetColumns, state S95");
            this.Manager.Comment("reaching state \'S111\'");
            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp91;
            this.Manager.Comment("executing step \'call RopRestrict(2,False,True,False)\'");
            temp91 = this.IMS_OXCTABLAdapterInstance.RopRestrict(2u, false, true, false);
            this.Manager.Checkpoint("MS-OXCTABL_R834");
            this.Manager.Comment("reaching state \'S127\'");
            this.Manager.Comment("checking step \'return RopRestrict/ecNullObject\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues.ecNullObject, temp91, "return of RopRestrict, state S127");
            this.Manager.Comment("reaching state \'S143\'");
            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp92;
            this.Manager.Comment("executing step \'call RopQueryRows(Advance,True)\'");
            temp92 = this.IMS_OXCTABLAdapterInstance.RopQueryRows(((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), true);
            this.Manager.Checkpoint("MS-OXCTABL_R837");
            this.Manager.Comment("reaching state \'S159\'");
            this.Manager.Comment("checking step \'return RopQueryRows/success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp92, "return of RopQueryRows, state S159");
            this.Manager.Comment("reaching state \'S175\'");
            int temp96 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker97)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker102)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker103)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker104)));
            if ((temp96 == 0)) {
                S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS191();
                goto label32;
            }
            if ((temp96 == 1)) {
                S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS191();
                goto label32;
            }
            if ((temp96 == 2)) {
                S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS191();
                goto label32;
            }
            if ((temp96 == 3)) {
                S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS191();
                goto label32;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker97)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker102)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker103)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker104)));
        label32:
;
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker97(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,RESTRICT,True,True,F" +
                    "alse,True,BOOKMARK_CUSTOM,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S175");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S175");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S175");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType.RESTRICT, ropType, "ropType of RopQueryRowsResponse, state S175");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S175");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S175");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S175");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S175");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_CUSTOM, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S175");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S175");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R451, MS-OXCTABL_R452, MS-OXCTABL_R117");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R451");
            this.Manager.Checkpoint("MS-OXCTABL_R452");
            this.Manager.Checkpoint("MS-OXCTABL_R117");
        }
        
        private void S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS191() {
            this.Manager.Comment("reaching state \'S191\'");
            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp93;
            this.Manager.Comment("executing step \'call RopRestrict(3,True,False,False)\'");
            temp93 = this.IMS_OXCTABLAdapterInstance.RopRestrict(3u, true, false, false);
            this.Manager.Checkpoint("MS-OXCTABL_R834");
            this.Manager.Comment("reaching state \'S207\'");
            this.Manager.Comment("checking step \'return RopRestrict/success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp93, "return of RopRestrict, state S207");
            this.Manager.Comment("reaching state \'S223\'");
            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp94;
            this.Manager.Comment("executing step \'call RopQueryRows(Advance,True)\'");
            temp94 = this.IMS_OXCTABLAdapterInstance.RopQueryRows(((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), true);
            this.Manager.Checkpoint("MS-OXCTABL_R837");
            this.Manager.Comment("reaching state \'S239\'");
            this.Manager.Comment("checking step \'return RopQueryRows/success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp94, "return of RopQueryRows, state S239");
            this.Manager.Comment("reaching state \'S255\'");
            int temp95 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker98)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker99)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker100)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker101)));
            if ((temp95 == 0)) {
                S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS271();
                goto label31;
            }
            if ((temp95 == 1)) {
                S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS271();
                goto label31;
            }
            if ((temp95 == 2)) {
                S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS271();
                goto label31;
            }
            if ((temp95 == 3)) {
                S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS271();
                goto label31;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker98)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker99)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker100)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker101)));
        label31:
;
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker98(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,RESTRICT,True,True,T" +
                    "rue,True,BOOKMARK_CURRENT,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S255");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S255");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S255");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType.RESTRICT, ropType, "ropType of RopQueryRowsResponse, state S255");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S255");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S255");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S255");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S255");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S255");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S255");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R462, MS-OXCTABL_R451, M" +
                        "S-OXCTABL_R452, MS-OXCTABL_R117, MS-OXCTABL_R456");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R451");
            this.Manager.Checkpoint("MS-OXCTABL_R452");
            this.Manager.Checkpoint("MS-OXCTABL_R117");
            this.Manager.Checkpoint("MS-OXCTABL_R456");
        }
        
        private void S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS271() {
            this.Manager.Comment("reaching state \'S271\'");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker99(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,RESTRICT,True,True,T" +
                    "rue,True,BOOKMARK_CUSTOM,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S255");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S255");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S255");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType.RESTRICT, ropType, "ropType of RopQueryRowsResponse, state S255");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S255");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S255");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S255");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S255");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_CUSTOM, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S255");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S255");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R462, MS-OXCTABL_R451, M" +
                        "S-OXCTABL_R452, MS-OXCTABL_R117, MS-OXCTABL_R456");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R451");
            this.Manager.Checkpoint("MS-OXCTABL_R452");
            this.Manager.Checkpoint("MS-OXCTABL_R117");
            this.Manager.Checkpoint("MS-OXCTABL_R456");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker100(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,RESTRICT,True,True,T" +
                    "rue,True,BOOKMARK_END,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S255");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S255");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S255");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType.RESTRICT, ropType, "ropType of RopQueryRowsResponse, state S255");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S255");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S255");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S255");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S255");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_END, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S255");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S255");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R462, MS-OXCTABL_R29, MS" +
                        "-OXCTABL_R725, MS-OXCTABL_R451, MS-OXCTABL_R452, MS-OXCTABL_R117, MS-OXCTABL_R45" +
                        "6");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R29");
            this.Manager.Checkpoint("MS-OXCTABL_R725");
            this.Manager.Checkpoint("MS-OXCTABL_R451");
            this.Manager.Checkpoint("MS-OXCTABL_R452");
            this.Manager.Checkpoint("MS-OXCTABL_R117");
            this.Manager.Checkpoint("MS-OXCTABL_R456");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker101(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,RESTRICT,True,True,T" +
                    "rue,True,BOOKMARK_BEGINNING,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S255");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S255");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S255");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType.RESTRICT, ropType, "ropType of RopQueryRowsResponse, state S255");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S255");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S255");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S255");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S255");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(0)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S255");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S255");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R462, MS-OXCTABL_R451, M" +
                        "S-OXCTABL_R452, MS-OXCTABL_R117, MS-OXCTABL_R456");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R451");
            this.Manager.Checkpoint("MS-OXCTABL_R452");
            this.Manager.Checkpoint("MS-OXCTABL_R117");
            this.Manager.Checkpoint("MS-OXCTABL_R456");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker102(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,RESTRICT,True,True,F" +
                    "alse,True,BOOKMARK_CURRENT,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S175");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S175");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S175");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType.RESTRICT, ropType, "ropType of RopQueryRowsResponse, state S175");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S175");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S175");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S175");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S175");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S175");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S175");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R451, MS-OXCTABL_R452, MS-OXCTABL_R117");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R451");
            this.Manager.Checkpoint("MS-OXCTABL_R452");
            this.Manager.Checkpoint("MS-OXCTABL_R117");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker103(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,RESTRICT,True,True,F" +
                    "alse,True,BOOKMARK_END,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S175");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S175");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S175");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType.RESTRICT, ropType, "ropType of RopQueryRowsResponse, state S175");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S175");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S175");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S175");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S175");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_END, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S175");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S175");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R29, MS-OXCTABL_R725, MS-OXCTABL_R451, MS-OXCTABL_R452, MS-OXCTABL_R11" +
                        "7");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R29");
            this.Manager.Checkpoint("MS-OXCTABL_R725");
            this.Manager.Checkpoint("MS-OXCTABL_R451");
            this.Manager.Checkpoint("MS-OXCTABL_R452");
            this.Manager.Checkpoint("MS-OXCTABL_R117");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker104(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,RESTRICT,True,True,F" +
                    "alse,True,BOOKMARK_BEGINNING,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S175");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S175");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S175");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType.RESTRICT, ropType, "ropType of RopQueryRowsResponse, state S175");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S175");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S175");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S175");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S175");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(0)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S175");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S175");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R451, MS-OXCTABL_R452, MS-OXCTABL_R117");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R451");
            this.Manager.Checkpoint("MS-OXCTABL_R452");
            this.Manager.Checkpoint("MS-OXCTABL_R117");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker105(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,RESTRICT,True,Fals" +
                    "e,True,True,BOOKMARK_END,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S63");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S63");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S63");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType.RESTRICT, ropType, "ropType of RopQueryRowsResponse, state S63");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S63");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S63");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S63");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S63");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_END, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S63");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S63");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R468, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R451, MS-OXCTABL_R452, MS-OXCTABL_R117, MS-OXCTABL_R456");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R451");
            this.Manager.Checkpoint("MS-OXCTABL_R452");
            this.Manager.Checkpoint("MS-OXCTABL_R117");
            this.Manager.Checkpoint("MS-OXCTABL_R456");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker106(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,RESTRICT,True,Fals" +
                    "e,True,True,BOOKMARK_CUSTOM,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S63");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S63");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S63");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType.RESTRICT, ropType, "ropType of RopQueryRowsResponse, state S63");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S63");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S63");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S63");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S63");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_CUSTOM, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S63");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S63");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R468, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R451, MS-OXCTABL_R452, MS-OXCTABL_R117, MS-OXCTABL_R456");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R451");
            this.Manager.Checkpoint("MS-OXCTABL_R452");
            this.Manager.Checkpoint("MS-OXCTABL_R117");
            this.Manager.Checkpoint("MS-OXCTABL_R456");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker107(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,RESTRICT,True,Fals" +
                    "e,True,True,BOOKMARK_CURRENT,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S63");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S63");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S63");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType.RESTRICT, ropType, "ropType of RopQueryRowsResponse, state S63");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S63");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S63");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S63");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S63");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S63");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S63");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R468, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R451, MS-OXCTABL_R452, MS-OXCTABL_R117, MS-OXCTABL_R456");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R451");
            this.Manager.Checkpoint("MS-OXCTABL_R452");
            this.Manager.Checkpoint("MS-OXCTABL_R117");
            this.Manager.Checkpoint("MS-OXCTABL_R456");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteCheckRequirementEnabledChecker19(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S51");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker108(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,RESTRICT,True,Fals" +
                    "e,True,True,BOOKMARK_BEGINNING,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S64");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S64");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S64");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType.RESTRICT, ropType, "ropType of RopQueryRowsResponse, state S64");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S64");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S64");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S64");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S64");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(0)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S64");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S64");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R27, MS-OXCTABL_R468, MS" +
                        "-OXCTABL_R462, MS-OXCTABL_R451, MS-OXCTABL_R452, MS-OXCTABL_R117");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R27");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R451");
            this.Manager.Checkpoint("MS-OXCTABL_R452");
            this.Manager.Checkpoint("MS-OXCTABL_R117");
        }
        
        private void S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS80() {
            this.Manager.Comment("reaching state \'S80\'");
            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp98;
            this.Manager.Comment("executing step \'call RopSetColumns(2,False,False,False)\'");
            temp98 = this.IMS_OXCTABLAdapterInstance.RopSetColumns(2u, false, false, false);
            this.Manager.Checkpoint("MS-OXCTABL_R831");
            this.Manager.Checkpoint("MS-OXCTABL_R45");
            this.Manager.Comment("reaching state \'S96\'");
            this.Manager.Comment("checking step \'return RopSetColumns/success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp98, "return of RopSetColumns, state S96");
            this.Manager.Comment("reaching state \'S112\'");
            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp99;
            this.Manager.Comment("executing step \'call RopRestrict(2,False,True,False)\'");
            temp99 = this.IMS_OXCTABLAdapterInstance.RopRestrict(2u, false, true, false);
            this.Manager.Checkpoint("MS-OXCTABL_R834");
            this.Manager.Comment("reaching state \'S128\'");
            this.Manager.Comment("checking step \'return RopRestrict/ecNullObject\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues.ecNullObject, temp99, "return of RopRestrict, state S128");
            this.Manager.Comment("reaching state \'S144\'");
            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp100;
            this.Manager.Comment("executing step \'call RopQueryRows(Advance,True)\'");
            temp100 = this.IMS_OXCTABLAdapterInstance.RopQueryRows(((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), true);
            this.Manager.Checkpoint("MS-OXCTABL_R837");
            this.Manager.Comment("reaching state \'S160\'");
            this.Manager.Comment("checking step \'return RopQueryRows/success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp100, "return of RopQueryRows, state S160");
            this.Manager.Comment("reaching state \'S176\'");
            int temp104 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker109)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker114)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker115)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker116)));
            if ((temp104 == 0)) {
                S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS192();
                goto label35;
            }
            if ((temp104 == 1)) {
                S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS192();
                goto label35;
            }
            if ((temp104 == 2)) {
                S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS192();
                goto label35;
            }
            if ((temp104 == 3)) {
                S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS192();
                goto label35;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker109)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker114)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker115)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker116)));
        label35:
;
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker109(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,RESTRICT,True,True,F" +
                    "alse,True,BOOKMARK_CURRENT,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S176");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S176");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S176");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType.RESTRICT, ropType, "ropType of RopQueryRowsResponse, state S176");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S176");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S176");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S176");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S176");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S176");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S176");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R451, MS-OXCTABL_R452, MS-OXCTABL_R117");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R451");
            this.Manager.Checkpoint("MS-OXCTABL_R452");
            this.Manager.Checkpoint("MS-OXCTABL_R117");
        }
        
        private void S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS192() {
            this.Manager.Comment("reaching state \'S192\'");
            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp101;
            this.Manager.Comment("executing step \'call RopRestrict(3,True,False,False)\'");
            temp101 = this.IMS_OXCTABLAdapterInstance.RopRestrict(3u, true, false, false);
            this.Manager.Checkpoint("MS-OXCTABL_R834");
            this.Manager.Comment("reaching state \'S208\'");
            this.Manager.Comment("checking step \'return RopRestrict/success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp101, "return of RopRestrict, state S208");
            this.Manager.Comment("reaching state \'S224\'");
            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp102;
            this.Manager.Comment("executing step \'call RopQueryRows(Advance,True)\'");
            temp102 = this.IMS_OXCTABLAdapterInstance.RopQueryRows(((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), true);
            this.Manager.Checkpoint("MS-OXCTABL_R837");
            this.Manager.Comment("reaching state \'S240\'");
            this.Manager.Comment("checking step \'return RopQueryRows/success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp102, "return of RopQueryRows, state S240");
            this.Manager.Comment("reaching state \'S256\'");
            int temp103 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker110)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker111)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker112)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker113)));
            if ((temp103 == 0)) {
                S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS272();
                goto label34;
            }
            if ((temp103 == 1)) {
                S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS272();
                goto label34;
            }
            if ((temp103 == 2)) {
                S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS272();
                goto label34;
            }
            if ((temp103 == 3)) {
                S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS272();
                goto label34;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker110)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker111)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker112)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker113)));
        label34:
;
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker110(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,RESTRICT,True,True,T" +
                    "rue,True,BOOKMARK_CURRENT,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S256");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S256");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S256");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType.RESTRICT, ropType, "ropType of RopQueryRowsResponse, state S256");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S256");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S256");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S256");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S256");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S256");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S256");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R462, MS-OXCTABL_R451, M" +
                        "S-OXCTABL_R452, MS-OXCTABL_R117");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R451");
            this.Manager.Checkpoint("MS-OXCTABL_R452");
            this.Manager.Checkpoint("MS-OXCTABL_R117");
        }
        
        private void S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS272() {
            this.Manager.Comment("reaching state \'S272\'");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker111(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,RESTRICT,True,True,T" +
                    "rue,True,BOOKMARK_CUSTOM,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S256");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S256");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S256");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType.RESTRICT, ropType, "ropType of RopQueryRowsResponse, state S256");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S256");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S256");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S256");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S256");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_CUSTOM, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S256");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S256");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R462, MS-OXCTABL_R451, M" +
                        "S-OXCTABL_R452, MS-OXCTABL_R117");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R451");
            this.Manager.Checkpoint("MS-OXCTABL_R452");
            this.Manager.Checkpoint("MS-OXCTABL_R117");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker112(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,RESTRICT,True,True,T" +
                    "rue,True,BOOKMARK_END,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S256");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S256");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S256");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType.RESTRICT, ropType, "ropType of RopQueryRowsResponse, state S256");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S256");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S256");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S256");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S256");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_END, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S256");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S256");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R462, MS-OXCTABL_R29, MS" +
                        "-OXCTABL_R725, MS-OXCTABL_R451, MS-OXCTABL_R452, MS-OXCTABL_R117");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R29");
            this.Manager.Checkpoint("MS-OXCTABL_R725");
            this.Manager.Checkpoint("MS-OXCTABL_R451");
            this.Manager.Checkpoint("MS-OXCTABL_R452");
            this.Manager.Checkpoint("MS-OXCTABL_R117");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker113(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,RESTRICT,True,True,T" +
                    "rue,True,BOOKMARK_BEGINNING,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S256");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S256");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S256");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType.RESTRICT, ropType, "ropType of RopQueryRowsResponse, state S256");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S256");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S256");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S256");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S256");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(0)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S256");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S256");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R462, MS-OXCTABL_R451, M" +
                        "S-OXCTABL_R452, MS-OXCTABL_R117");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R451");
            this.Manager.Checkpoint("MS-OXCTABL_R452");
            this.Manager.Checkpoint("MS-OXCTABL_R117");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker114(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,RESTRICT,True,True,F" +
                    "alse,True,BOOKMARK_CUSTOM,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S176");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S176");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S176");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType.RESTRICT, ropType, "ropType of RopQueryRowsResponse, state S176");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S176");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S176");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S176");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S176");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_CUSTOM, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S176");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S176");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R451, MS-OXCTABL_R452, MS-OXCTABL_R117");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R451");
            this.Manager.Checkpoint("MS-OXCTABL_R452");
            this.Manager.Checkpoint("MS-OXCTABL_R117");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker115(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,RESTRICT,True,True,F" +
                    "alse,True,BOOKMARK_END,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S176");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S176");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S176");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType.RESTRICT, ropType, "ropType of RopQueryRowsResponse, state S176");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S176");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S176");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S176");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S176");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_END, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S176");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S176");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R29, MS-OXCTABL_R725, MS-OXCTABL_R451, MS-OXCTABL_R452, MS-OXCTABL_R11" +
                        "7");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R29");
            this.Manager.Checkpoint("MS-OXCTABL_R725");
            this.Manager.Checkpoint("MS-OXCTABL_R451");
            this.Manager.Checkpoint("MS-OXCTABL_R452");
            this.Manager.Checkpoint("MS-OXCTABL_R117");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker116(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,RESTRICT,True,True,F" +
                    "alse,True,BOOKMARK_BEGINNING,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S176");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S176");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S176");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType.RESTRICT, ropType, "ropType of RopQueryRowsResponse, state S176");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S176");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S176");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S176");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S176");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(0)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S176");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S176");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R451, MS-OXCTABL_R452, MS-OXCTABL_R117");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R451");
            this.Manager.Checkpoint("MS-OXCTABL_R452");
            this.Manager.Checkpoint("MS-OXCTABL_R117");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker117(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,RESTRICT,True,Fals" +
                    "e,True,True,BOOKMARK_END,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S64");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S64");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S64");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType.RESTRICT, ropType, "ropType of RopQueryRowsResponse, state S64");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S64");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S64");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S64");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S64");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_END, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S64");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S64");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R468, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R451, MS-OXCTABL_R452, MS-OXCTABL_R117");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R451");
            this.Manager.Checkpoint("MS-OXCTABL_R452");
            this.Manager.Checkpoint("MS-OXCTABL_R117");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker118(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,RESTRICT,True,Fals" +
                    "e,True,True,BOOKMARK_CUSTOM,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S64");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S64");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S64");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType.RESTRICT, ropType, "ropType of RopQueryRowsResponse, state S64");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S64");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S64");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S64");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S64");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_CUSTOM, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S64");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S64");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R468, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R451, MS-OXCTABL_R452, MS-OXCTABL_R117");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R451");
            this.Manager.Checkpoint("MS-OXCTABL_R452");
            this.Manager.Checkpoint("MS-OXCTABL_R117");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker119(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,RESTRICT,True,Fals" +
                    "e,True,True,BOOKMARK_CURRENT,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S64");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S64");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S64");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType.RESTRICT, ropType, "ropType of RopQueryRowsResponse, state S64");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S64");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S64");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S64");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S64");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S64");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S64");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R468, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R451, MS-OXCTABL_R452, MS-OXCTABL_R117");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R451");
            this.Manager.Checkpoint("MS-OXCTABL_R452");
            this.Manager.Checkpoint("MS-OXCTABL_R117");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteCheckRequirementEnabledChecker20(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S21");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteCheckRequirementEnabledChecker21(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S52");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker120(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,RESTRICT,True,Fals" +
                    "e,True,True,BOOKMARK_BEGINNING,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S65");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S65");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S65");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType.RESTRICT, ropType, "ropType of RopQueryRowsResponse, state S65");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S65");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S65");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S65");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S65");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(0)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S65");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S65");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R27, MS-OXCTABL_R468, MS" +
                        "-OXCTABL_R462, MS-OXCTABL_R451, MS-OXCTABL_R452, MS-OXCTABL_R117, MS-OXCTABL_R45" +
                        "6");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R27");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R451");
            this.Manager.Checkpoint("MS-OXCTABL_R452");
            this.Manager.Checkpoint("MS-OXCTABL_R117");
            this.Manager.Checkpoint("MS-OXCTABL_R456");
        }
        
        private void S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS81() {
            this.Manager.Comment("reaching state \'S81\'");
            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp109;
            this.Manager.Comment("executing step \'call RopSetColumns(2,False,False,False)\'");
            temp109 = this.IMS_OXCTABLAdapterInstance.RopSetColumns(2u, false, false, false);
            this.Manager.Checkpoint("MS-OXCTABL_R831");
            this.Manager.Checkpoint("MS-OXCTABL_R45");
            this.Manager.Comment("reaching state \'S97\'");
            this.Manager.Comment("checking step \'return RopSetColumns/success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp109, "return of RopSetColumns, state S97");
            this.Manager.Comment("reaching state \'S113\'");
            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp110;
            this.Manager.Comment("executing step \'call RopRestrict(2,False,True,False)\'");
            temp110 = this.IMS_OXCTABLAdapterInstance.RopRestrict(2u, false, true, false);
            this.Manager.Checkpoint("MS-OXCTABL_R834");
            this.Manager.Comment("reaching state \'S129\'");
            this.Manager.Comment("checking step \'return RopRestrict/ecNullObject\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues.ecNullObject, temp110, "return of RopRestrict, state S129");
            this.Manager.Comment("reaching state \'S145\'");
            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp111;
            this.Manager.Comment("executing step \'call RopQueryRows(Advance,True)\'");
            temp111 = this.IMS_OXCTABLAdapterInstance.RopQueryRows(((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), true);
            this.Manager.Checkpoint("MS-OXCTABL_R837");
            this.Manager.Comment("reaching state \'S161\'");
            this.Manager.Comment("checking step \'return RopQueryRows/success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp111, "return of RopQueryRows, state S161");
            this.Manager.Comment("reaching state \'S177\'");
            int temp115 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker121)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker126)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker127)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker128)));
            if ((temp115 == 0)) {
                S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS193();
                goto label39;
            }
            if ((temp115 == 1)) {
                S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS193();
                goto label39;
            }
            if ((temp115 == 2)) {
                S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS193();
                goto label39;
            }
            if ((temp115 == 3)) {
                S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS193();
                goto label39;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker121)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker126)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker127)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker128)));
        label39:
;
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker121(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,RESTRICT,True,True,F" +
                    "alse,True,BOOKMARK_CUSTOM,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S177");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S177");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S177");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType.RESTRICT, ropType, "ropType of RopQueryRowsResponse, state S177");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S177");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S177");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S177");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S177");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_CUSTOM, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S177");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S177");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R451, MS-OXCTABL_R452, MS-OXCTABL_R117");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R451");
            this.Manager.Checkpoint("MS-OXCTABL_R452");
            this.Manager.Checkpoint("MS-OXCTABL_R117");
        }
        
        private void S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS193() {
            this.Manager.Comment("reaching state \'S193\'");
            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp112;
            this.Manager.Comment("executing step \'call RopRestrict(3,True,False,False)\'");
            temp112 = this.IMS_OXCTABLAdapterInstance.RopRestrict(3u, true, false, false);
            this.Manager.Checkpoint("MS-OXCTABL_R834");
            this.Manager.Comment("reaching state \'S209\'");
            this.Manager.Comment("checking step \'return RopRestrict/success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp112, "return of RopRestrict, state S209");
            this.Manager.Comment("reaching state \'S225\'");
            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp113;
            this.Manager.Comment("executing step \'call RopQueryRows(Advance,True)\'");
            temp113 = this.IMS_OXCTABLAdapterInstance.RopQueryRows(((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), true);
            this.Manager.Checkpoint("MS-OXCTABL_R837");
            this.Manager.Comment("reaching state \'S241\'");
            this.Manager.Comment("checking step \'return RopQueryRows/success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp113, "return of RopQueryRows, state S241");
            this.Manager.Comment("reaching state \'S257\'");
            int temp114 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker122)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker123)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker124)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker125)));
            if ((temp114 == 0)) {
                S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS273();
                goto label38;
            }
            if ((temp114 == 1)) {
                S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS273();
                goto label38;
            }
            if ((temp114 == 2)) {
                S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS273();
                goto label38;
            }
            if ((temp114 == 3)) {
                S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS273();
                goto label38;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker122)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker123)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker124)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker125)));
        label38:
;
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker122(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,RESTRICT,True,True,T" +
                    "rue,True,BOOKMARK_CUSTOM,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S257");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S257");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S257");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType.RESTRICT, ropType, "ropType of RopQueryRowsResponse, state S257");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S257");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S257");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S257");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S257");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_CUSTOM, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S257");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S257");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R462, MS-OXCTABL_R451, M" +
                        "S-OXCTABL_R452, MS-OXCTABL_R117, MS-OXCTABL_R456");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R451");
            this.Manager.Checkpoint("MS-OXCTABL_R452");
            this.Manager.Checkpoint("MS-OXCTABL_R117");
            this.Manager.Checkpoint("MS-OXCTABL_R456");
        }
        
        private void S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS273() {
            this.Manager.Comment("reaching state \'S273\'");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker123(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,RESTRICT,True,True,T" +
                    "rue,True,BOOKMARK_CURRENT,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S257");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S257");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S257");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType.RESTRICT, ropType, "ropType of RopQueryRowsResponse, state S257");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S257");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S257");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S257");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S257");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S257");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S257");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R462, MS-OXCTABL_R451, M" +
                        "S-OXCTABL_R452, MS-OXCTABL_R117, MS-OXCTABL_R456");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R451");
            this.Manager.Checkpoint("MS-OXCTABL_R452");
            this.Manager.Checkpoint("MS-OXCTABL_R117");
            this.Manager.Checkpoint("MS-OXCTABL_R456");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker124(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,RESTRICT,True,True,T" +
                    "rue,True,BOOKMARK_END,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S257");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S257");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S257");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType.RESTRICT, ropType, "ropType of RopQueryRowsResponse, state S257");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S257");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S257");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S257");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S257");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_END, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S257");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S257");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R462, MS-OXCTABL_R29, MS" +
                        "-OXCTABL_R725, MS-OXCTABL_R451, MS-OXCTABL_R452, MS-OXCTABL_R117, MS-OXCTABL_R45" +
                        "6");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R29");
            this.Manager.Checkpoint("MS-OXCTABL_R725");
            this.Manager.Checkpoint("MS-OXCTABL_R451");
            this.Manager.Checkpoint("MS-OXCTABL_R452");
            this.Manager.Checkpoint("MS-OXCTABL_R117");
            this.Manager.Checkpoint("MS-OXCTABL_R456");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker125(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,RESTRICT,True,True,T" +
                    "rue,True,BOOKMARK_BEGINNING,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S257");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S257");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S257");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType.RESTRICT, ropType, "ropType of RopQueryRowsResponse, state S257");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S257");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S257");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S257");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S257");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(0)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S257");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S257");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R462, MS-OXCTABL_R451, M" +
                        "S-OXCTABL_R452, MS-OXCTABL_R117, MS-OXCTABL_R456");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R451");
            this.Manager.Checkpoint("MS-OXCTABL_R452");
            this.Manager.Checkpoint("MS-OXCTABL_R117");
            this.Manager.Checkpoint("MS-OXCTABL_R456");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker126(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,RESTRICT,True,True,F" +
                    "alse,True,BOOKMARK_CURRENT,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S177");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S177");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S177");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType.RESTRICT, ropType, "ropType of RopQueryRowsResponse, state S177");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S177");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S177");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S177");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S177");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S177");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S177");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R451, MS-OXCTABL_R452, MS-OXCTABL_R117");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R451");
            this.Manager.Checkpoint("MS-OXCTABL_R452");
            this.Manager.Checkpoint("MS-OXCTABL_R117");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker127(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,RESTRICT,True,True,F" +
                    "alse,True,BOOKMARK_END,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S177");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S177");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S177");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType.RESTRICT, ropType, "ropType of RopQueryRowsResponse, state S177");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S177");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S177");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S177");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S177");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_END, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S177");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S177");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R29, MS-OXCTABL_R725, MS-OXCTABL_R451, MS-OXCTABL_R452, MS-OXCTABL_R11" +
                        "7");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R29");
            this.Manager.Checkpoint("MS-OXCTABL_R725");
            this.Manager.Checkpoint("MS-OXCTABL_R451");
            this.Manager.Checkpoint("MS-OXCTABL_R452");
            this.Manager.Checkpoint("MS-OXCTABL_R117");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker128(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,RESTRICT,True,True,F" +
                    "alse,True,BOOKMARK_BEGINNING,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S177");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S177");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S177");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType.RESTRICT, ropType, "ropType of RopQueryRowsResponse, state S177");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S177");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S177");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S177");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S177");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(0)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S177");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S177");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R451, MS-OXCTABL_R452, MS-OXCTABL_R117");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R451");
            this.Manager.Checkpoint("MS-OXCTABL_R452");
            this.Manager.Checkpoint("MS-OXCTABL_R117");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker129(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,RESTRICT,True,Fals" +
                    "e,True,True,BOOKMARK_END,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S65");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S65");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S65");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType.RESTRICT, ropType, "ropType of RopQueryRowsResponse, state S65");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S65");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S65");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S65");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S65");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_END, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S65");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S65");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R468, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R451, MS-OXCTABL_R452, MS-OXCTABL_R117, MS-OXCTABL_R456");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R451");
            this.Manager.Checkpoint("MS-OXCTABL_R452");
            this.Manager.Checkpoint("MS-OXCTABL_R117");
            this.Manager.Checkpoint("MS-OXCTABL_R456");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker130(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,RESTRICT,True,Fals" +
                    "e,True,True,BOOKMARK_CUSTOM,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S65");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S65");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S65");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType.RESTRICT, ropType, "ropType of RopQueryRowsResponse, state S65");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S65");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S65");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S65");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S65");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_CUSTOM, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S65");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S65");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R468, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R451, MS-OXCTABL_R452, MS-OXCTABL_R117, MS-OXCTABL_R456");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R451");
            this.Manager.Checkpoint("MS-OXCTABL_R452");
            this.Manager.Checkpoint("MS-OXCTABL_R117");
            this.Manager.Checkpoint("MS-OXCTABL_R456");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker131(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,RESTRICT,True,Fals" +
                    "e,True,True,BOOKMARK_CURRENT,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S65");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S65");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S65");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType.RESTRICT, ropType, "ropType of RopQueryRowsResponse, state S65");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S65");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S65");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S65");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S65");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S65");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S65");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R468, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R451, MS-OXCTABL_R452, MS-OXCTABL_R117, MS-OXCTABL_R456");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R451");
            this.Manager.Checkpoint("MS-OXCTABL_R452");
            this.Manager.Checkpoint("MS-OXCTABL_R117");
            this.Manager.Checkpoint("MS-OXCTABL_R456");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteCheckRequirementEnabledChecker22(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S52");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker132(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,RESTRICT,True,Fals" +
                    "e,True,True,BOOKMARK_BEGINNING,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S66");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S66");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S66");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType.RESTRICT, ropType, "ropType of RopQueryRowsResponse, state S66");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S66");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S66");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S66");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S66");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(0)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S66");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S66");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R27, MS-OXCTABL_R468, MS" +
                        "-OXCTABL_R462, MS-OXCTABL_R451, MS-OXCTABL_R452, MS-OXCTABL_R117");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R27");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R451");
            this.Manager.Checkpoint("MS-OXCTABL_R452");
            this.Manager.Checkpoint("MS-OXCTABL_R117");
        }
        
        private void S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS82() {
            this.Manager.Comment("reaching state \'S82\'");
            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp117;
            this.Manager.Comment("executing step \'call RopSetColumns(2,False,False,False)\'");
            temp117 = this.IMS_OXCTABLAdapterInstance.RopSetColumns(2u, false, false, false);
            this.Manager.Checkpoint("MS-OXCTABL_R831");
            this.Manager.Checkpoint("MS-OXCTABL_R45");
            this.Manager.Comment("reaching state \'S98\'");
            this.Manager.Comment("checking step \'return RopSetColumns/success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp117, "return of RopSetColumns, state S98");
            this.Manager.Comment("reaching state \'S114\'");
            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp118;
            this.Manager.Comment("executing step \'call RopRestrict(2,False,True,False)\'");
            temp118 = this.IMS_OXCTABLAdapterInstance.RopRestrict(2u, false, true, false);
            this.Manager.Checkpoint("MS-OXCTABL_R834");
            this.Manager.Comment("reaching state \'S130\'");
            this.Manager.Comment("checking step \'return RopRestrict/ecNullObject\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues.ecNullObject, temp118, "return of RopRestrict, state S130");
            this.Manager.Comment("reaching state \'S146\'");
            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp119;
            this.Manager.Comment("executing step \'call RopQueryRows(Advance,True)\'");
            temp119 = this.IMS_OXCTABLAdapterInstance.RopQueryRows(((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), true);
            this.Manager.Checkpoint("MS-OXCTABL_R837");
            this.Manager.Comment("reaching state \'S162\'");
            this.Manager.Comment("checking step \'return RopQueryRows/success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp119, "return of RopQueryRows, state S162");
            this.Manager.Comment("reaching state \'S178\'");
            int temp123 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker133)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker138)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker139)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker140)));
            if ((temp123 == 0)) {
                S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS194();
                goto label42;
            }
            if ((temp123 == 1)) {
                S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS194();
                goto label42;
            }
            if ((temp123 == 2)) {
                S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS194();
                goto label42;
            }
            if ((temp123 == 3)) {
                S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS194();
                goto label42;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker133)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker138)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker139)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker140)));
        label42:
;
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker133(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,RESTRICT,True,True,F" +
                    "alse,True,BOOKMARK_CUSTOM,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S178");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S178");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S178");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType.RESTRICT, ropType, "ropType of RopQueryRowsResponse, state S178");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S178");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S178");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S178");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S178");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_CUSTOM, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S178");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S178");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R451, MS-OXCTABL_R452, MS-OXCTABL_R117");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R451");
            this.Manager.Checkpoint("MS-OXCTABL_R452");
            this.Manager.Checkpoint("MS-OXCTABL_R117");
        }
        
        private void S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS194() {
            this.Manager.Comment("reaching state \'S194\'");
            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp120;
            this.Manager.Comment("executing step \'call RopRestrict(3,True,False,False)\'");
            temp120 = this.IMS_OXCTABLAdapterInstance.RopRestrict(3u, true, false, false);
            this.Manager.Checkpoint("MS-OXCTABL_R834");
            this.Manager.Comment("reaching state \'S210\'");
            this.Manager.Comment("checking step \'return RopRestrict/success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp120, "return of RopRestrict, state S210");
            this.Manager.Comment("reaching state \'S226\'");
            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp121;
            this.Manager.Comment("executing step \'call RopQueryRows(Advance,True)\'");
            temp121 = this.IMS_OXCTABLAdapterInstance.RopQueryRows(((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), true);
            this.Manager.Checkpoint("MS-OXCTABL_R837");
            this.Manager.Comment("reaching state \'S242\'");
            this.Manager.Comment("checking step \'return RopQueryRows/success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp121, "return of RopQueryRows, state S242");
            this.Manager.Comment("reaching state \'S258\'");
            int temp122 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker134)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker135)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker136)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker137)));
            if ((temp122 == 0)) {
                S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS274();
                goto label41;
            }
            if ((temp122 == 1)) {
                S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS274();
                goto label41;
            }
            if ((temp122 == 2)) {
                S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS274();
                goto label41;
            }
            if ((temp122 == 3)) {
                S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS274();
                goto label41;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker134)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker135)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker136)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker137)));
        label41:
;
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker134(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,RESTRICT,True,True,T" +
                    "rue,True,BOOKMARK_CURRENT,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S258");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S258");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S258");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType.RESTRICT, ropType, "ropType of RopQueryRowsResponse, state S258");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S258");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S258");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S258");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S258");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S258");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S258");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R462, MS-OXCTABL_R451, M" +
                        "S-OXCTABL_R452, MS-OXCTABL_R117");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R451");
            this.Manager.Checkpoint("MS-OXCTABL_R452");
            this.Manager.Checkpoint("MS-OXCTABL_R117");
        }
        
        private void S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS274() {
            this.Manager.Comment("reaching state \'S274\'");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker135(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,RESTRICT,True,True,T" +
                    "rue,True,BOOKMARK_CUSTOM,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S258");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S258");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S258");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType.RESTRICT, ropType, "ropType of RopQueryRowsResponse, state S258");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S258");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S258");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S258");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S258");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_CUSTOM, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S258");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S258");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R462, MS-OXCTABL_R451, M" +
                        "S-OXCTABL_R452, MS-OXCTABL_R117");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R451");
            this.Manager.Checkpoint("MS-OXCTABL_R452");
            this.Manager.Checkpoint("MS-OXCTABL_R117");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker136(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,RESTRICT,True,True,T" +
                    "rue,True,BOOKMARK_END,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S258");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S258");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S258");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType.RESTRICT, ropType, "ropType of RopQueryRowsResponse, state S258");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S258");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S258");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S258");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S258");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_END, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S258");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S258");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R462, MS-OXCTABL_R29, MS" +
                        "-OXCTABL_R725, MS-OXCTABL_R451, MS-OXCTABL_R452, MS-OXCTABL_R117");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R29");
            this.Manager.Checkpoint("MS-OXCTABL_R725");
            this.Manager.Checkpoint("MS-OXCTABL_R451");
            this.Manager.Checkpoint("MS-OXCTABL_R452");
            this.Manager.Checkpoint("MS-OXCTABL_R117");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker137(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,RESTRICT,True,True,T" +
                    "rue,True,BOOKMARK_BEGINNING,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S258");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S258");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S258");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType.RESTRICT, ropType, "ropType of RopQueryRowsResponse, state S258");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S258");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S258");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S258");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S258");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(0)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S258");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S258");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R462, MS-OXCTABL_R451, M" +
                        "S-OXCTABL_R452, MS-OXCTABL_R117");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R451");
            this.Manager.Checkpoint("MS-OXCTABL_R452");
            this.Manager.Checkpoint("MS-OXCTABL_R117");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker138(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,RESTRICT,True,True,F" +
                    "alse,True,BOOKMARK_CURRENT,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S178");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S178");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S178");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType.RESTRICT, ropType, "ropType of RopQueryRowsResponse, state S178");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S178");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S178");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S178");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S178");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S178");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S178");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R451, MS-OXCTABL_R452, MS-OXCTABL_R117");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R451");
            this.Manager.Checkpoint("MS-OXCTABL_R452");
            this.Manager.Checkpoint("MS-OXCTABL_R117");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker139(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,RESTRICT,True,True,F" +
                    "alse,True,BOOKMARK_END,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S178");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S178");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S178");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType.RESTRICT, ropType, "ropType of RopQueryRowsResponse, state S178");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S178");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S178");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S178");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S178");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_END, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S178");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S178");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R29, MS-OXCTABL_R725, MS-OXCTABL_R451, MS-OXCTABL_R452, MS-OXCTABL_R11" +
                        "7");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R29");
            this.Manager.Checkpoint("MS-OXCTABL_R725");
            this.Manager.Checkpoint("MS-OXCTABL_R451");
            this.Manager.Checkpoint("MS-OXCTABL_R452");
            this.Manager.Checkpoint("MS-OXCTABL_R117");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker140(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,RESTRICT,True,True,F" +
                    "alse,True,BOOKMARK_BEGINNING,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S178");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S178");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S178");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType.RESTRICT, ropType, "ropType of RopQueryRowsResponse, state S178");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S178");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S178");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S178");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S178");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(0)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S178");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S178");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R451, MS-OXCTABL_R452, MS-OXCTABL_R117");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R451");
            this.Manager.Checkpoint("MS-OXCTABL_R452");
            this.Manager.Checkpoint("MS-OXCTABL_R117");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker141(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,RESTRICT,True,Fals" +
                    "e,True,True,BOOKMARK_END,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S66");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S66");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S66");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType.RESTRICT, ropType, "ropType of RopQueryRowsResponse, state S66");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S66");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S66");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S66");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S66");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_END, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S66");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S66");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R468, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R451, MS-OXCTABL_R452, MS-OXCTABL_R117");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R451");
            this.Manager.Checkpoint("MS-OXCTABL_R452");
            this.Manager.Checkpoint("MS-OXCTABL_R117");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker142(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,RESTRICT,True,Fals" +
                    "e,True,True,BOOKMARK_CUSTOM,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S66");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S66");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S66");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType.RESTRICT, ropType, "ropType of RopQueryRowsResponse, state S66");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S66");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S66");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S66");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S66");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_CUSTOM, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S66");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S66");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R468, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R451, MS-OXCTABL_R452, MS-OXCTABL_R117");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R451");
            this.Manager.Checkpoint("MS-OXCTABL_R452");
            this.Manager.Checkpoint("MS-OXCTABL_R117");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker143(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,RESTRICT,True,Fals" +
                    "e,True,True,BOOKMARK_CURRENT,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S66");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S66");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S66");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType.RESTRICT, ropType, "ropType of RopQueryRowsResponse, state S66");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S66");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S66");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S66");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S66");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S66");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S66");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R468, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R451, MS-OXCTABL_R452, MS-OXCTABL_R117");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R451");
            this.Manager.Checkpoint("MS-OXCTABL_R452");
            this.Manager.Checkpoint("MS-OXCTABL_R117");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteCheckRequirementEnabledChecker23(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S14");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteCheckRequirementEnabledChecker24(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S22");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteCheckRequirementEnabledChecker25(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S53");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker144(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,RESTRICT,True,Fals" +
                    "e,True,True,BOOKMARK_BEGINNING,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S67");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S67");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S67");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType.RESTRICT, ropType, "ropType of RopQueryRowsResponse, state S67");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S67");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S67");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S67");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S67");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(0)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S67");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S67");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R27, MS-OXCTABL_R468, MS" +
                        "-OXCTABL_R462, MS-OXCTABL_R451, MS-OXCTABL_R452, MS-OXCTABL_R117");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R27");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R451");
            this.Manager.Checkpoint("MS-OXCTABL_R452");
            this.Manager.Checkpoint("MS-OXCTABL_R117");
        }
        
        private void S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS83() {
            this.Manager.Comment("reaching state \'S83\'");
            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp130;
            this.Manager.Comment("executing step \'call RopSetColumns(2,False,False,False)\'");
            temp130 = this.IMS_OXCTABLAdapterInstance.RopSetColumns(2u, false, false, false);
            this.Manager.Checkpoint("MS-OXCTABL_R831");
            this.Manager.Checkpoint("MS-OXCTABL_R45");
            this.Manager.Comment("reaching state \'S99\'");
            this.Manager.Comment("checking step \'return RopSetColumns/success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp130, "return of RopSetColumns, state S99");
            this.Manager.Comment("reaching state \'S115\'");
            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp131;
            this.Manager.Comment("executing step \'call RopRestrict(2,False,True,False)\'");
            temp131 = this.IMS_OXCTABLAdapterInstance.RopRestrict(2u, false, true, false);
            this.Manager.Checkpoint("MS-OXCTABL_R834");
            this.Manager.Comment("reaching state \'S131\'");
            this.Manager.Comment("checking step \'return RopRestrict/ecNullObject\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues.ecNullObject, temp131, "return of RopRestrict, state S131");
            this.Manager.Comment("reaching state \'S147\'");
            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp132;
            this.Manager.Comment("executing step \'call RopQueryRows(Advance,True)\'");
            temp132 = this.IMS_OXCTABLAdapterInstance.RopQueryRows(((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), true);
            this.Manager.Checkpoint("MS-OXCTABL_R837");
            this.Manager.Comment("reaching state \'S163\'");
            this.Manager.Comment("checking step \'return RopQueryRows/success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp132, "return of RopQueryRows, state S163");
            this.Manager.Comment("reaching state \'S179\'");
            int temp136 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker145)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker150)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker151)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker152)));
            if ((temp136 == 0)) {
                S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS195();
                goto label47;
            }
            if ((temp136 == 1)) {
                S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS195();
                goto label47;
            }
            if ((temp136 == 2)) {
                S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS195();
                goto label47;
            }
            if ((temp136 == 3)) {
                S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS195();
                goto label47;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker145)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker150)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker151)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker152)));
        label47:
;
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker145(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,RESTRICT,True,True,F" +
                    "alse,True,BOOKMARK_CURRENT,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S179");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S179");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S179");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType.RESTRICT, ropType, "ropType of RopQueryRowsResponse, state S179");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S179");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S179");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S179");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S179");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S179");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S179");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R451, MS-OXCTABL_R452, MS-OXCTABL_R117");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R451");
            this.Manager.Checkpoint("MS-OXCTABL_R452");
            this.Manager.Checkpoint("MS-OXCTABL_R117");
        }
        
        private void S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS195() {
            this.Manager.Comment("reaching state \'S195\'");
            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp133;
            this.Manager.Comment("executing step \'call RopRestrict(3,True,False,False)\'");
            temp133 = this.IMS_OXCTABLAdapterInstance.RopRestrict(3u, true, false, false);
            this.Manager.Checkpoint("MS-OXCTABL_R834");
            this.Manager.Comment("reaching state \'S211\'");
            this.Manager.Comment("checking step \'return RopRestrict/success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp133, "return of RopRestrict, state S211");
            this.Manager.Comment("reaching state \'S227\'");
            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp134;
            this.Manager.Comment("executing step \'call RopQueryRows(Advance,True)\'");
            temp134 = this.IMS_OXCTABLAdapterInstance.RopQueryRows(((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), true);
            this.Manager.Checkpoint("MS-OXCTABL_R837");
            this.Manager.Comment("reaching state \'S243\'");
            this.Manager.Comment("checking step \'return RopQueryRows/success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp134, "return of RopQueryRows, state S243");
            this.Manager.Comment("reaching state \'S259\'");
            int temp135 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker146)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker147)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker148)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker149)));
            if ((temp135 == 0)) {
                S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS275();
                goto label46;
            }
            if ((temp135 == 1)) {
                S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS275();
                goto label46;
            }
            if ((temp135 == 2)) {
                S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS275();
                goto label46;
            }
            if ((temp135 == 3)) {
                S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS275();
                goto label46;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker146)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker147)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker148)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker149)));
        label46:
;
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker146(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,RESTRICT,True,True,T" +
                    "rue,True,BOOKMARK_CUSTOM,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S259");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S259");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S259");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType.RESTRICT, ropType, "ropType of RopQueryRowsResponse, state S259");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S259");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S259");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S259");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S259");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_CUSTOM, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S259");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S259");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R462, MS-OXCTABL_R451, M" +
                        "S-OXCTABL_R452, MS-OXCTABL_R117");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R451");
            this.Manager.Checkpoint("MS-OXCTABL_R452");
            this.Manager.Checkpoint("MS-OXCTABL_R117");
        }
        
        private void S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS275() {
            this.Manager.Comment("reaching state \'S275\'");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker147(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,RESTRICT,True,True,T" +
                    "rue,True,BOOKMARK_CURRENT,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S259");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S259");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S259");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType.RESTRICT, ropType, "ropType of RopQueryRowsResponse, state S259");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S259");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S259");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S259");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S259");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S259");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S259");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R462, MS-OXCTABL_R451, M" +
                        "S-OXCTABL_R452, MS-OXCTABL_R117");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R451");
            this.Manager.Checkpoint("MS-OXCTABL_R452");
            this.Manager.Checkpoint("MS-OXCTABL_R117");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker148(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,RESTRICT,True,True,T" +
                    "rue,True,BOOKMARK_END,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S259");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S259");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S259");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType.RESTRICT, ropType, "ropType of RopQueryRowsResponse, state S259");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S259");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S259");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S259");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S259");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_END, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S259");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S259");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R462, MS-OXCTABL_R29, MS" +
                        "-OXCTABL_R725, MS-OXCTABL_R451, MS-OXCTABL_R452, MS-OXCTABL_R117");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R29");
            this.Manager.Checkpoint("MS-OXCTABL_R725");
            this.Manager.Checkpoint("MS-OXCTABL_R451");
            this.Manager.Checkpoint("MS-OXCTABL_R452");
            this.Manager.Checkpoint("MS-OXCTABL_R117");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker149(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,RESTRICT,True,True,T" +
                    "rue,True,BOOKMARK_BEGINNING,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S259");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S259");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S259");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType.RESTRICT, ropType, "ropType of RopQueryRowsResponse, state S259");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S259");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S259");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S259");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S259");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(0)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S259");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S259");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R462, MS-OXCTABL_R451, M" +
                        "S-OXCTABL_R452, MS-OXCTABL_R117");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R451");
            this.Manager.Checkpoint("MS-OXCTABL_R452");
            this.Manager.Checkpoint("MS-OXCTABL_R117");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker150(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,RESTRICT,True,True,F" +
                    "alse,True,BOOKMARK_CUSTOM,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S179");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S179");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S179");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType.RESTRICT, ropType, "ropType of RopQueryRowsResponse, state S179");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S179");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S179");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S179");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S179");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_CUSTOM, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S179");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S179");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R451, MS-OXCTABL_R452, MS-OXCTABL_R117");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R451");
            this.Manager.Checkpoint("MS-OXCTABL_R452");
            this.Manager.Checkpoint("MS-OXCTABL_R117");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker151(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,RESTRICT,True,True,F" +
                    "alse,True,BOOKMARK_END,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S179");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S179");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S179");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType.RESTRICT, ropType, "ropType of RopQueryRowsResponse, state S179");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S179");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S179");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S179");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S179");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_END, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S179");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S179");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R29, MS-OXCTABL_R725, MS-OXCTABL_R451, MS-OXCTABL_R452, MS-OXCTABL_R11" +
                        "7");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R29");
            this.Manager.Checkpoint("MS-OXCTABL_R725");
            this.Manager.Checkpoint("MS-OXCTABL_R451");
            this.Manager.Checkpoint("MS-OXCTABL_R452");
            this.Manager.Checkpoint("MS-OXCTABL_R117");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker152(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,RESTRICT,True,True,F" +
                    "alse,True,BOOKMARK_BEGINNING,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S179");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S179");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S179");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType.RESTRICT, ropType, "ropType of RopQueryRowsResponse, state S179");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S179");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S179");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S179");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S179");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(0)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S179");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S179");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R451, MS-OXCTABL_R452, MS-OXCTABL_R117");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R451");
            this.Manager.Checkpoint("MS-OXCTABL_R452");
            this.Manager.Checkpoint("MS-OXCTABL_R117");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker153(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,RESTRICT,True,Fals" +
                    "e,True,True,BOOKMARK_END,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S67");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S67");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S67");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType.RESTRICT, ropType, "ropType of RopQueryRowsResponse, state S67");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S67");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S67");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S67");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S67");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_END, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S67");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S67");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R468, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R451, MS-OXCTABL_R452, MS-OXCTABL_R117");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R451");
            this.Manager.Checkpoint("MS-OXCTABL_R452");
            this.Manager.Checkpoint("MS-OXCTABL_R117");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker154(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,RESTRICT,True,Fals" +
                    "e,True,True,BOOKMARK_CUSTOM,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S67");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S67");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S67");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType.RESTRICT, ropType, "ropType of RopQueryRowsResponse, state S67");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S67");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S67");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S67");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S67");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_CUSTOM, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S67");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S67");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R468, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R451, MS-OXCTABL_R452, MS-OXCTABL_R117");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R451");
            this.Manager.Checkpoint("MS-OXCTABL_R452");
            this.Manager.Checkpoint("MS-OXCTABL_R117");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker155(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,RESTRICT,True,Fals" +
                    "e,True,True,BOOKMARK_CURRENT,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S67");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S67");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S67");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType.RESTRICT, ropType, "ropType of RopQueryRowsResponse, state S67");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S67");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S67");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S67");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S67");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S67");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S67");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R468, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R451, MS-OXCTABL_R452, MS-OXCTABL_R117");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R451");
            this.Manager.Checkpoint("MS-OXCTABL_R452");
            this.Manager.Checkpoint("MS-OXCTABL_R117");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteCheckRequirementEnabledChecker26(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S53");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker156(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,RESTRICT,True,Fals" +
                    "e,True,True,BOOKMARK_BEGINNING,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S68");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S68");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S68");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType.RESTRICT, ropType, "ropType of RopQueryRowsResponse, state S68");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S68");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S68");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S68");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S68");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(0)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S68");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S68");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R27, MS-OXCTABL_R468, MS" +
                        "-OXCTABL_R462, MS-OXCTABL_R451, MS-OXCTABL_R452, MS-OXCTABL_R117, MS-OXCTABL_R45" +
                        "6");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R27");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R451");
            this.Manager.Checkpoint("MS-OXCTABL_R452");
            this.Manager.Checkpoint("MS-OXCTABL_R117");
            this.Manager.Checkpoint("MS-OXCTABL_R456");
        }
        
        private void S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS84() {
            this.Manager.Comment("reaching state \'S84\'");
            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp138;
            this.Manager.Comment("executing step \'call RopSetColumns(2,False,False,False)\'");
            temp138 = this.IMS_OXCTABLAdapterInstance.RopSetColumns(2u, false, false, false);
            this.Manager.Checkpoint("MS-OXCTABL_R831");
            this.Manager.Checkpoint("MS-OXCTABL_R45");
            this.Manager.Comment("reaching state \'S100\'");
            this.Manager.Comment("checking step \'return RopSetColumns/success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp138, "return of RopSetColumns, state S100");
            this.Manager.Comment("reaching state \'S116\'");
            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp139;
            this.Manager.Comment("executing step \'call RopRestrict(2,False,True,False)\'");
            temp139 = this.IMS_OXCTABLAdapterInstance.RopRestrict(2u, false, true, false);
            this.Manager.Checkpoint("MS-OXCTABL_R834");
            this.Manager.Comment("reaching state \'S132\'");
            this.Manager.Comment("checking step \'return RopRestrict/ecNullObject\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues.ecNullObject, temp139, "return of RopRestrict, state S132");
            this.Manager.Comment("reaching state \'S148\'");
            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp140;
            this.Manager.Comment("executing step \'call RopQueryRows(Advance,True)\'");
            temp140 = this.IMS_OXCTABLAdapterInstance.RopQueryRows(((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), true);
            this.Manager.Checkpoint("MS-OXCTABL_R837");
            this.Manager.Comment("reaching state \'S164\'");
            this.Manager.Comment("checking step \'return RopQueryRows/success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp140, "return of RopQueryRows, state S164");
            this.Manager.Comment("reaching state \'S180\'");
            int temp144 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker157)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker162)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker163)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker164)));
            if ((temp144 == 0)) {
                S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS196();
                goto label50;
            }
            if ((temp144 == 1)) {
                S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS196();
                goto label50;
            }
            if ((temp144 == 2)) {
                S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS196();
                goto label50;
            }
            if ((temp144 == 3)) {
                S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS196();
                goto label50;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker157)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker162)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker163)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker164)));
        label50:
;
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker157(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,RESTRICT,True,True,F" +
                    "alse,True,BOOKMARK_CUSTOM,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S180");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S180");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S180");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType.RESTRICT, ropType, "ropType of RopQueryRowsResponse, state S180");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S180");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S180");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S180");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S180");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_CUSTOM, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S180");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S180");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R451, MS-OXCTABL_R452, MS-OXCTABL_R117");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R451");
            this.Manager.Checkpoint("MS-OXCTABL_R452");
            this.Manager.Checkpoint("MS-OXCTABL_R117");
        }
        
        private void S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS196() {
            this.Manager.Comment("reaching state \'S196\'");
            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp141;
            this.Manager.Comment("executing step \'call RopRestrict(3,True,False,False)\'");
            temp141 = this.IMS_OXCTABLAdapterInstance.RopRestrict(3u, true, false, false);
            this.Manager.Checkpoint("MS-OXCTABL_R834");
            this.Manager.Comment("reaching state \'S212\'");
            this.Manager.Comment("checking step \'return RopRestrict/success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp141, "return of RopRestrict, state S212");
            this.Manager.Comment("reaching state \'S228\'");
            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp142;
            this.Manager.Comment("executing step \'call RopQueryRows(Advance,True)\'");
            temp142 = this.IMS_OXCTABLAdapterInstance.RopQueryRows(((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), true);
            this.Manager.Checkpoint("MS-OXCTABL_R837");
            this.Manager.Comment("reaching state \'S244\'");
            this.Manager.Comment("checking step \'return RopQueryRows/success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp142, "return of RopQueryRows, state S244");
            this.Manager.Comment("reaching state \'S260\'");
            int temp143 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker158)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker159)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker160)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker161)));
            if ((temp143 == 0)) {
                S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS276();
                goto label49;
            }
            if ((temp143 == 1)) {
                S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS276();
                goto label49;
            }
            if ((temp143 == 2)) {
                S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS276();
                goto label49;
            }
            if ((temp143 == 3)) {
                S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS276();
                goto label49;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker158)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker159)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker160)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker161)));
        label49:
;
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker158(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,RESTRICT,True,True,T" +
                    "rue,True,BOOKMARK_CUSTOM,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S260");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S260");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S260");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType.RESTRICT, ropType, "ropType of RopQueryRowsResponse, state S260");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S260");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S260");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S260");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S260");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_CUSTOM, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S260");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S260");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R462, MS-OXCTABL_R451, M" +
                        "S-OXCTABL_R452, MS-OXCTABL_R117, MS-OXCTABL_R456");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R451");
            this.Manager.Checkpoint("MS-OXCTABL_R452");
            this.Manager.Checkpoint("MS-OXCTABL_R117");
            this.Manager.Checkpoint("MS-OXCTABL_R456");
        }
        
        private void S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS276() {
            this.Manager.Comment("reaching state \'S276\'");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker159(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,RESTRICT,True,True,T" +
                    "rue,True,BOOKMARK_CURRENT,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S260");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S260");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S260");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType.RESTRICT, ropType, "ropType of RopQueryRowsResponse, state S260");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S260");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S260");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S260");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S260");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S260");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S260");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R462, MS-OXCTABL_R451, M" +
                        "S-OXCTABL_R452, MS-OXCTABL_R117, MS-OXCTABL_R456");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R451");
            this.Manager.Checkpoint("MS-OXCTABL_R452");
            this.Manager.Checkpoint("MS-OXCTABL_R117");
            this.Manager.Checkpoint("MS-OXCTABL_R456");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker160(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,RESTRICT,True,True,T" +
                    "rue,True,BOOKMARK_END,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S260");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S260");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S260");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType.RESTRICT, ropType, "ropType of RopQueryRowsResponse, state S260");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S260");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S260");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S260");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S260");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_END, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S260");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S260");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R462, MS-OXCTABL_R29, MS" +
                        "-OXCTABL_R725, MS-OXCTABL_R451, MS-OXCTABL_R452, MS-OXCTABL_R117, MS-OXCTABL_R45" +
                        "6");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R29");
            this.Manager.Checkpoint("MS-OXCTABL_R725");
            this.Manager.Checkpoint("MS-OXCTABL_R451");
            this.Manager.Checkpoint("MS-OXCTABL_R452");
            this.Manager.Checkpoint("MS-OXCTABL_R117");
            this.Manager.Checkpoint("MS-OXCTABL_R456");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker161(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,RESTRICT,True,True,T" +
                    "rue,True,BOOKMARK_BEGINNING,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S260");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S260");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S260");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType.RESTRICT, ropType, "ropType of RopQueryRowsResponse, state S260");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S260");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S260");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S260");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S260");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(0)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S260");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S260");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R462, MS-OXCTABL_R451, M" +
                        "S-OXCTABL_R452, MS-OXCTABL_R117, MS-OXCTABL_R456");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R451");
            this.Manager.Checkpoint("MS-OXCTABL_R452");
            this.Manager.Checkpoint("MS-OXCTABL_R117");
            this.Manager.Checkpoint("MS-OXCTABL_R456");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker162(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,RESTRICT,True,True,F" +
                    "alse,True,BOOKMARK_CURRENT,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S180");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S180");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S180");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType.RESTRICT, ropType, "ropType of RopQueryRowsResponse, state S180");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S180");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S180");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S180");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S180");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S180");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S180");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R451, MS-OXCTABL_R452, MS-OXCTABL_R117");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R451");
            this.Manager.Checkpoint("MS-OXCTABL_R452");
            this.Manager.Checkpoint("MS-OXCTABL_R117");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker163(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,RESTRICT,True,True,F" +
                    "alse,True,BOOKMARK_END,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S180");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S180");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S180");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType.RESTRICT, ropType, "ropType of RopQueryRowsResponse, state S180");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S180");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S180");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S180");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S180");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_END, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S180");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S180");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R29, MS-OXCTABL_R725, MS-OXCTABL_R451, MS-OXCTABL_R452, MS-OXCTABL_R11" +
                        "7");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R29");
            this.Manager.Checkpoint("MS-OXCTABL_R725");
            this.Manager.Checkpoint("MS-OXCTABL_R451");
            this.Manager.Checkpoint("MS-OXCTABL_R452");
            this.Manager.Checkpoint("MS-OXCTABL_R117");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker164(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,RESTRICT,True,True,F" +
                    "alse,True,BOOKMARK_BEGINNING,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S180");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S180");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S180");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType.RESTRICT, ropType, "ropType of RopQueryRowsResponse, state S180");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S180");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S180");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S180");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S180");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(0)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S180");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S180");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R451, MS-OXCTABL_R452, MS-OXCTABL_R117");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R451");
            this.Manager.Checkpoint("MS-OXCTABL_R452");
            this.Manager.Checkpoint("MS-OXCTABL_R117");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker165(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,RESTRICT,True,Fals" +
                    "e,True,True,BOOKMARK_END,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S68");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S68");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S68");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType.RESTRICT, ropType, "ropType of RopQueryRowsResponse, state S68");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S68");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S68");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S68");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S68");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_END, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S68");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S68");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R468, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R451, MS-OXCTABL_R452, MS-OXCTABL_R117, MS-OXCTABL_R456");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R451");
            this.Manager.Checkpoint("MS-OXCTABL_R452");
            this.Manager.Checkpoint("MS-OXCTABL_R117");
            this.Manager.Checkpoint("MS-OXCTABL_R456");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker166(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,RESTRICT,True,Fals" +
                    "e,True,True,BOOKMARK_CUSTOM,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S68");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S68");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S68");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType.RESTRICT, ropType, "ropType of RopQueryRowsResponse, state S68");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S68");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S68");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S68");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S68");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_CUSTOM, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S68");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S68");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R468, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R451, MS-OXCTABL_R452, MS-OXCTABL_R117, MS-OXCTABL_R456");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R451");
            this.Manager.Checkpoint("MS-OXCTABL_R452");
            this.Manager.Checkpoint("MS-OXCTABL_R117");
            this.Manager.Checkpoint("MS-OXCTABL_R456");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker167(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,RESTRICT,True,Fals" +
                    "e,True,True,BOOKMARK_CURRENT,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S68");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S68");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S68");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType.RESTRICT, ropType, "ropType of RopQueryRowsResponse, state S68");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S68");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S68");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S68");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S68");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S68");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S68");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R468, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R451, MS-OXCTABL_R452, MS-OXCTABL_R117, MS-OXCTABL_R456");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R451");
            this.Manager.Checkpoint("MS-OXCTABL_R452");
            this.Manager.Checkpoint("MS-OXCTABL_R117");
            this.Manager.Checkpoint("MS-OXCTABL_R456");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteCheckRequirementEnabledChecker27(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S22");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteCheckRequirementEnabledChecker28(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S54");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker168(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,RESTRICT,True,Fals" +
                    "e,True,True,BOOKMARK_BEGINNING,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S69");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S69");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S69");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType.RESTRICT, ropType, "ropType of RopQueryRowsResponse, state S69");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S69");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S69");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S69");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S69");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(0)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S69");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S69");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R27, MS-OXCTABL_R468, MS" +
                        "-OXCTABL_R462, MS-OXCTABL_R451, MS-OXCTABL_R452, MS-OXCTABL_R117, MS-OXCTABL_R45" +
                        "6");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R27");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R451");
            this.Manager.Checkpoint("MS-OXCTABL_R452");
            this.Manager.Checkpoint("MS-OXCTABL_R117");
            this.Manager.Checkpoint("MS-OXCTABL_R456");
        }
        
        private void S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS85() {
            this.Manager.Comment("reaching state \'S85\'");
            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp149;
            this.Manager.Comment("executing step \'call RopSetColumns(2,False,False,False)\'");
            temp149 = this.IMS_OXCTABLAdapterInstance.RopSetColumns(2u, false, false, false);
            this.Manager.Checkpoint("MS-OXCTABL_R831");
            this.Manager.Checkpoint("MS-OXCTABL_R45");
            this.Manager.Comment("reaching state \'S101\'");
            this.Manager.Comment("checking step \'return RopSetColumns/success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp149, "return of RopSetColumns, state S101");
            this.Manager.Comment("reaching state \'S117\'");
            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp150;
            this.Manager.Comment("executing step \'call RopRestrict(2,False,True,False)\'");
            temp150 = this.IMS_OXCTABLAdapterInstance.RopRestrict(2u, false, true, false);
            this.Manager.Checkpoint("MS-OXCTABL_R834");
            this.Manager.Comment("reaching state \'S133\'");
            this.Manager.Comment("checking step \'return RopRestrict/ecNullObject\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues.ecNullObject, temp150, "return of RopRestrict, state S133");
            this.Manager.Comment("reaching state \'S149\'");
            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp151;
            this.Manager.Comment("executing step \'call RopQueryRows(Advance,True)\'");
            temp151 = this.IMS_OXCTABLAdapterInstance.RopQueryRows(((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), true);
            this.Manager.Checkpoint("MS-OXCTABL_R837");
            this.Manager.Comment("reaching state \'S165\'");
            this.Manager.Comment("checking step \'return RopQueryRows/success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp151, "return of RopQueryRows, state S165");
            this.Manager.Comment("reaching state \'S181\'");
            int temp155 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker169)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker174)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker175)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker176)));
            if ((temp155 == 0)) {
                S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS197();
                goto label54;
            }
            if ((temp155 == 1)) {
                S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS197();
                goto label54;
            }
            if ((temp155 == 2)) {
                S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS197();
                goto label54;
            }
            if ((temp155 == 3)) {
                S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS197();
                goto label54;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker169)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker174)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker175)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker176)));
        label54:
;
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker169(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,RESTRICT,True,True,F" +
                    "alse,True,BOOKMARK_CURRENT,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S181");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S181");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S181");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType.RESTRICT, ropType, "ropType of RopQueryRowsResponse, state S181");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S181");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S181");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S181");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S181");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S181");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S181");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R451, MS-OXCTABL_R452, MS-OXCTABL_R117");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R451");
            this.Manager.Checkpoint("MS-OXCTABL_R452");
            this.Manager.Checkpoint("MS-OXCTABL_R117");
        }
        
        private void S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS197() {
            this.Manager.Comment("reaching state \'S197\'");
            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp152;
            this.Manager.Comment("executing step \'call RopRestrict(3,True,False,False)\'");
            temp152 = this.IMS_OXCTABLAdapterInstance.RopRestrict(3u, true, false, false);
            this.Manager.Checkpoint("MS-OXCTABL_R834");
            this.Manager.Comment("reaching state \'S213\'");
            this.Manager.Comment("checking step \'return RopRestrict/success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp152, "return of RopRestrict, state S213");
            this.Manager.Comment("reaching state \'S229\'");
            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp153;
            this.Manager.Comment("executing step \'call RopQueryRows(Advance,True)\'");
            temp153 = this.IMS_OXCTABLAdapterInstance.RopQueryRows(((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), true);
            this.Manager.Checkpoint("MS-OXCTABL_R837");
            this.Manager.Comment("reaching state \'S245\'");
            this.Manager.Comment("checking step \'return RopQueryRows/success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp153, "return of RopQueryRows, state S245");
            this.Manager.Comment("reaching state \'S261\'");
            int temp154 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker170)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker171)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker172)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker173)));
            if ((temp154 == 0)) {
                S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS277();
                goto label53;
            }
            if ((temp154 == 1)) {
                S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS277();
                goto label53;
            }
            if ((temp154 == 2)) {
                S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS277();
                goto label53;
            }
            if ((temp154 == 3)) {
                S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS277();
                goto label53;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker170)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker171)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker172)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker173)));
        label53:
;
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker170(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,RESTRICT,True,True,T" +
                    "rue,True,BOOKMARK_CUSTOM,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S261");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S261");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S261");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType.RESTRICT, ropType, "ropType of RopQueryRowsResponse, state S261");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S261");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S261");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S261");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S261");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_CUSTOM, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S261");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S261");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R462, MS-OXCTABL_R451, M" +
                        "S-OXCTABL_R452, MS-OXCTABL_R117, MS-OXCTABL_R456");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R451");
            this.Manager.Checkpoint("MS-OXCTABL_R452");
            this.Manager.Checkpoint("MS-OXCTABL_R117");
            this.Manager.Checkpoint("MS-OXCTABL_R456");
        }
        
        private void S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS277() {
            this.Manager.Comment("reaching state \'S277\'");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker171(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,RESTRICT,True,True,T" +
                    "rue,True,BOOKMARK_CURRENT,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S261");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S261");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S261");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType.RESTRICT, ropType, "ropType of RopQueryRowsResponse, state S261");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S261");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S261");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S261");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S261");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S261");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S261");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R462, MS-OXCTABL_R451, M" +
                        "S-OXCTABL_R452, MS-OXCTABL_R117, MS-OXCTABL_R456");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R451");
            this.Manager.Checkpoint("MS-OXCTABL_R452");
            this.Manager.Checkpoint("MS-OXCTABL_R117");
            this.Manager.Checkpoint("MS-OXCTABL_R456");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker172(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,RESTRICT,True,True,T" +
                    "rue,True,BOOKMARK_END,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S261");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S261");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S261");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType.RESTRICT, ropType, "ropType of RopQueryRowsResponse, state S261");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S261");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S261");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S261");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S261");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_END, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S261");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S261");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R462, MS-OXCTABL_R29, MS" +
                        "-OXCTABL_R725, MS-OXCTABL_R451, MS-OXCTABL_R452, MS-OXCTABL_R117, MS-OXCTABL_R45" +
                        "6");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R29");
            this.Manager.Checkpoint("MS-OXCTABL_R725");
            this.Manager.Checkpoint("MS-OXCTABL_R451");
            this.Manager.Checkpoint("MS-OXCTABL_R452");
            this.Manager.Checkpoint("MS-OXCTABL_R117");
            this.Manager.Checkpoint("MS-OXCTABL_R456");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker173(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,RESTRICT,True,True,T" +
                    "rue,True,BOOKMARK_BEGINNING,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S261");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S261");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S261");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType.RESTRICT, ropType, "ropType of RopQueryRowsResponse, state S261");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S261");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S261");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S261");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S261");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(0)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S261");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S261");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R462, MS-OXCTABL_R451, M" +
                        "S-OXCTABL_R452, MS-OXCTABL_R117, MS-OXCTABL_R456");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R451");
            this.Manager.Checkpoint("MS-OXCTABL_R452");
            this.Manager.Checkpoint("MS-OXCTABL_R117");
            this.Manager.Checkpoint("MS-OXCTABL_R456");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker174(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,RESTRICT,True,True,F" +
                    "alse,True,BOOKMARK_CUSTOM,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S181");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S181");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S181");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType.RESTRICT, ropType, "ropType of RopQueryRowsResponse, state S181");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S181");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S181");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S181");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S181");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_CUSTOM, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S181");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S181");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R451, MS-OXCTABL_R452, MS-OXCTABL_R117");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R451");
            this.Manager.Checkpoint("MS-OXCTABL_R452");
            this.Manager.Checkpoint("MS-OXCTABL_R117");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker175(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,RESTRICT,True,True,F" +
                    "alse,True,BOOKMARK_END,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S181");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S181");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S181");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType.RESTRICT, ropType, "ropType of RopQueryRowsResponse, state S181");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S181");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S181");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S181");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S181");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_END, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S181");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S181");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R29, MS-OXCTABL_R725, MS-OXCTABL_R451, MS-OXCTABL_R452, MS-OXCTABL_R11" +
                        "7");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R29");
            this.Manager.Checkpoint("MS-OXCTABL_R725");
            this.Manager.Checkpoint("MS-OXCTABL_R451");
            this.Manager.Checkpoint("MS-OXCTABL_R452");
            this.Manager.Checkpoint("MS-OXCTABL_R117");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker176(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,RESTRICT,True,True,F" +
                    "alse,True,BOOKMARK_BEGINNING,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S181");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S181");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S181");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType.RESTRICT, ropType, "ropType of RopQueryRowsResponse, state S181");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S181");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S181");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S181");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S181");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(0)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S181");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S181");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R451, MS-OXCTABL_R452, MS-OXCTABL_R117");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R451");
            this.Manager.Checkpoint("MS-OXCTABL_R452");
            this.Manager.Checkpoint("MS-OXCTABL_R117");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker177(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,RESTRICT,True,Fals" +
                    "e,True,True,BOOKMARK_END,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S69");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S69");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S69");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType.RESTRICT, ropType, "ropType of RopQueryRowsResponse, state S69");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S69");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S69");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S69");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S69");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_END, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S69");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S69");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R468, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R451, MS-OXCTABL_R452, MS-OXCTABL_R117, MS-OXCTABL_R456");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R451");
            this.Manager.Checkpoint("MS-OXCTABL_R452");
            this.Manager.Checkpoint("MS-OXCTABL_R117");
            this.Manager.Checkpoint("MS-OXCTABL_R456");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker178(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,RESTRICT,True,Fals" +
                    "e,True,True,BOOKMARK_CUSTOM,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S69");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S69");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S69");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType.RESTRICT, ropType, "ropType of RopQueryRowsResponse, state S69");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S69");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S69");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S69");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S69");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_CUSTOM, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S69");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S69");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R468, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R451, MS-OXCTABL_R452, MS-OXCTABL_R117, MS-OXCTABL_R456");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R451");
            this.Manager.Checkpoint("MS-OXCTABL_R452");
            this.Manager.Checkpoint("MS-OXCTABL_R117");
            this.Manager.Checkpoint("MS-OXCTABL_R456");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker179(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,RESTRICT,True,Fals" +
                    "e,True,True,BOOKMARK_CURRENT,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S69");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S69");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S69");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType.RESTRICT, ropType, "ropType of RopQueryRowsResponse, state S69");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S69");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S69");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S69");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S69");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S69");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S69");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R468, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R451, MS-OXCTABL_R452, MS-OXCTABL_R117, MS-OXCTABL_R456");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R451");
            this.Manager.Checkpoint("MS-OXCTABL_R452");
            this.Manager.Checkpoint("MS-OXCTABL_R117");
            this.Manager.Checkpoint("MS-OXCTABL_R456");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteCheckRequirementEnabledChecker29(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S54");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker180(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,RESTRICT,True,Fals" +
                    "e,True,True,BOOKMARK_BEGINNING,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S70");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S70");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S70");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType.RESTRICT, ropType, "ropType of RopQueryRowsResponse, state S70");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S70");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S70");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S70");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S70");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(0)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S70");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S70");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R27, MS-OXCTABL_R468, MS" +
                        "-OXCTABL_R462, MS-OXCTABL_R451, MS-OXCTABL_R452, MS-OXCTABL_R117");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R27");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R451");
            this.Manager.Checkpoint("MS-OXCTABL_R452");
            this.Manager.Checkpoint("MS-OXCTABL_R117");
        }
        
        private void S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS86() {
            this.Manager.Comment("reaching state \'S86\'");
            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp157;
            this.Manager.Comment("executing step \'call RopSetColumns(2,False,False,False)\'");
            temp157 = this.IMS_OXCTABLAdapterInstance.RopSetColumns(2u, false, false, false);
            this.Manager.Checkpoint("MS-OXCTABL_R831");
            this.Manager.Checkpoint("MS-OXCTABL_R45");
            this.Manager.Comment("reaching state \'S102\'");
            this.Manager.Comment("checking step \'return RopSetColumns/success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp157, "return of RopSetColumns, state S102");
            this.Manager.Comment("reaching state \'S118\'");
            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp158;
            this.Manager.Comment("executing step \'call RopRestrict(2,False,True,False)\'");
            temp158 = this.IMS_OXCTABLAdapterInstance.RopRestrict(2u, false, true, false);
            this.Manager.Checkpoint("MS-OXCTABL_R834");
            this.Manager.Comment("reaching state \'S134\'");
            this.Manager.Comment("checking step \'return RopRestrict/ecNullObject\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues.ecNullObject, temp158, "return of RopRestrict, state S134");
            this.Manager.Comment("reaching state \'S150\'");
            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp159;
            this.Manager.Comment("executing step \'call RopQueryRows(Advance,True)\'");
            temp159 = this.IMS_OXCTABLAdapterInstance.RopQueryRows(((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), true);
            this.Manager.Checkpoint("MS-OXCTABL_R837");
            this.Manager.Comment("reaching state \'S166\'");
            this.Manager.Comment("checking step \'return RopQueryRows/success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp159, "return of RopQueryRows, state S166");
            this.Manager.Comment("reaching state \'S182\'");
            int temp163 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker181)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker186)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker187)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker188)));
            if ((temp163 == 0)) {
                S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS198();
                goto label57;
            }
            if ((temp163 == 1)) {
                S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS198();
                goto label57;
            }
            if ((temp163 == 2)) {
                S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS198();
                goto label57;
            }
            if ((temp163 == 3)) {
                S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS198();
                goto label57;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker181)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker186)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker187)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker188)));
        label57:
;
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker181(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,RESTRICT,True,True,F" +
                    "alse,True,BOOKMARK_CUSTOM,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S182");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S182");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S182");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType.RESTRICT, ropType, "ropType of RopQueryRowsResponse, state S182");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S182");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S182");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S182");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S182");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_CUSTOM, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S182");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S182");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R451, MS-OXCTABL_R452, MS-OXCTABL_R117");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R451");
            this.Manager.Checkpoint("MS-OXCTABL_R452");
            this.Manager.Checkpoint("MS-OXCTABL_R117");
        }
        
        private void S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS198() {
            this.Manager.Comment("reaching state \'S198\'");
            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp160;
            this.Manager.Comment("executing step \'call RopRestrict(3,True,False,False)\'");
            temp160 = this.IMS_OXCTABLAdapterInstance.RopRestrict(3u, true, false, false);
            this.Manager.Checkpoint("MS-OXCTABL_R834");
            this.Manager.Comment("reaching state \'S214\'");
            this.Manager.Comment("checking step \'return RopRestrict/success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp160, "return of RopRestrict, state S214");
            this.Manager.Comment("reaching state \'S230\'");
            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp161;
            this.Manager.Comment("executing step \'call RopQueryRows(Advance,True)\'");
            temp161 = this.IMS_OXCTABLAdapterInstance.RopQueryRows(((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), true);
            this.Manager.Checkpoint("MS-OXCTABL_R837");
            this.Manager.Comment("reaching state \'S246\'");
            this.Manager.Comment("checking step \'return RopQueryRows/success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp161, "return of RopQueryRows, state S246");
            this.Manager.Comment("reaching state \'S262\'");
            int temp162 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker182)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker183)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker184)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker185)));
            if ((temp162 == 0)) {
                S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS278();
                goto label56;
            }
            if ((temp162 == 1)) {
                S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS278();
                goto label56;
            }
            if ((temp162 == 2)) {
                S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS278();
                goto label56;
            }
            if ((temp162 == 3)) {
                S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS278();
                goto label56;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker182)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker183)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker184)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterRestrict_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker185)));
        label56:
;
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker182(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,RESTRICT,True,True,T" +
                    "rue,True,BOOKMARK_CURRENT,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S262");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S262");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S262");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType.RESTRICT, ropType, "ropType of RopQueryRowsResponse, state S262");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S262");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S262");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S262");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S262");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S262");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S262");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R462, MS-OXCTABL_R451, M" +
                        "S-OXCTABL_R452, MS-OXCTABL_R117");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R451");
            this.Manager.Checkpoint("MS-OXCTABL_R452");
            this.Manager.Checkpoint("MS-OXCTABL_R117");
        }
        
        private void S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteS278() {
            this.Manager.Comment("reaching state \'S278\'");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker183(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,RESTRICT,True,True,T" +
                    "rue,True,BOOKMARK_CUSTOM,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S262");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S262");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S262");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType.RESTRICT, ropType, "ropType of RopQueryRowsResponse, state S262");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S262");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S262");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S262");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S262");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_CUSTOM, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S262");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S262");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R462, MS-OXCTABL_R451, M" +
                        "S-OXCTABL_R452, MS-OXCTABL_R117");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R451");
            this.Manager.Checkpoint("MS-OXCTABL_R452");
            this.Manager.Checkpoint("MS-OXCTABL_R117");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker184(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,RESTRICT,True,True,T" +
                    "rue,True,BOOKMARK_END,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S262");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S262");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S262");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType.RESTRICT, ropType, "ropType of RopQueryRowsResponse, state S262");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S262");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S262");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S262");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S262");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_END, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S262");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S262");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R462, MS-OXCTABL_R29, MS" +
                        "-OXCTABL_R725, MS-OXCTABL_R451, MS-OXCTABL_R452, MS-OXCTABL_R117");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R29");
            this.Manager.Checkpoint("MS-OXCTABL_R725");
            this.Manager.Checkpoint("MS-OXCTABL_R451");
            this.Manager.Checkpoint("MS-OXCTABL_R452");
            this.Manager.Checkpoint("MS-OXCTABL_R117");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker185(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,RESTRICT,True,True,T" +
                    "rue,True,BOOKMARK_BEGINNING,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S262");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S262");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S262");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType.RESTRICT, ropType, "ropType of RopQueryRowsResponse, state S262");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S262");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S262");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S262");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S262");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(0)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S262");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S262");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R462, MS-OXCTABL_R451, M" +
                        "S-OXCTABL_R452, MS-OXCTABL_R117");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R451");
            this.Manager.Checkpoint("MS-OXCTABL_R452");
            this.Manager.Checkpoint("MS-OXCTABL_R117");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker186(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,RESTRICT,True,True,F" +
                    "alse,True,BOOKMARK_CURRENT,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S182");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S182");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S182");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType.RESTRICT, ropType, "ropType of RopQueryRowsResponse, state S182");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S182");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S182");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S182");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S182");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S182");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S182");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R451, MS-OXCTABL_R452, MS-OXCTABL_R117");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R451");
            this.Manager.Checkpoint("MS-OXCTABL_R452");
            this.Manager.Checkpoint("MS-OXCTABL_R117");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker187(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,RESTRICT,True,True,F" +
                    "alse,True,BOOKMARK_END,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S182");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S182");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S182");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType.RESTRICT, ropType, "ropType of RopQueryRowsResponse, state S182");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S182");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S182");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S182");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S182");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_END, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S182");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S182");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R29, MS-OXCTABL_R725, MS-OXCTABL_R451, MS-OXCTABL_R452, MS-OXCTABL_R11" +
                        "7");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R29");
            this.Manager.Checkpoint("MS-OXCTABL_R725");
            this.Manager.Checkpoint("MS-OXCTABL_R451");
            this.Manager.Checkpoint("MS-OXCTABL_R452");
            this.Manager.Checkpoint("MS-OXCTABL_R117");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker188(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,RESTRICT,True,True,F" +
                    "alse,True,BOOKMARK_BEGINNING,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S182");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S182");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S182");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType.RESTRICT, ropType, "ropType of RopQueryRowsResponse, state S182");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S182");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S182");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S182");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S182");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(0)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S182");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S182");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R451, MS-OXCTABL_R452, MS-OXCTABL_R117");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R451");
            this.Manager.Checkpoint("MS-OXCTABL_R452");
            this.Manager.Checkpoint("MS-OXCTABL_R117");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker189(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,RESTRICT,True,Fals" +
                    "e,True,True,BOOKMARK_END,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S70");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S70");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S70");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType.RESTRICT, ropType, "ropType of RopQueryRowsResponse, state S70");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S70");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S70");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S70");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S70");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_END, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S70");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S70");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R468, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R451, MS-OXCTABL_R452, MS-OXCTABL_R117");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R451");
            this.Manager.Checkpoint("MS-OXCTABL_R452");
            this.Manager.Checkpoint("MS-OXCTABL_R117");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker190(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,RESTRICT,True,Fals" +
                    "e,True,True,BOOKMARK_CUSTOM,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S70");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S70");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S70");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType.RESTRICT, ropType, "ropType of RopQueryRowsResponse, state S70");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S70");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S70");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S70");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S70");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_CUSTOM, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S70");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S70");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R468, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R451, MS-OXCTABL_R452, MS-OXCTABL_R117");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R451");
            this.Manager.Checkpoint("MS-OXCTABL_R452");
            this.Manager.Checkpoint("MS-OXCTABL_R117");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterRestrict_TestSuiteRopQueryRowsResponseChecker191(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,RESTRICT,True,Fals" +
                    "e,True,True,BOOKMARK_CURRENT,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S70");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S70");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S70");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType.RESTRICT, ropType, "ropType of RopQueryRowsResponse, state S70");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S70");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S70");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S70");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S70");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S70");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S70");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R468, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R451, MS-OXCTABL_R452, MS-OXCTABL_R117");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R451");
            this.Manager.Checkpoint("MS-OXCTABL_R452");
            this.Manager.Checkpoint("MS-OXCTABL_R117");
        }
        #endregion
    }
}
