//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18449
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Microsoft.Protocols.TestSuites.MS_OXCTABL {
    using System;
    using System.Collections.Generic;
    using System.Text;
    using System.Reflection;
    using Microsoft.SpecExplorer.Runtime.Testing;
    using Microsoft.Protocols.TestTools;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Spec Explorer", "3.5.3130.0")]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuite : PtfTestClassBase {
        
        public S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuite() {
            this.SetSwitch("ProceedControlTimeout", "100");
            this.SetSwitch("QuiescenceTimeout", "2000000");
        }
        
        #region Expect Delegates
        public delegate void CheckMAPIHTTPTransportSupportedDelegate1(bool isSupported);
        
        public delegate void CheckRequirementEnabledDelegate1(bool enabled);
        
        public delegate void RopQueryRowsResponseDelegate1(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger);
        #endregion
        
        #region Event Metadata
        static System.Reflection.MethodBase CheckMAPIHTTPTransportSupportedInfo = TestManagerHelpers.GetMethodInfo(typeof(Microsoft.Protocols.TestSuites.MS_OXCTABL.IMS_OXCTABLAdapter), "CheckMAPIHTTPTransportSupported", typeof(bool).MakeByRefType());
        
        static System.Reflection.MethodBase CheckRequirementEnabledInfo = TestManagerHelpers.GetMethodInfo(typeof(Microsoft.Protocols.TestSuites.MS_OXCTABL.IMS_OXCTABLAdapter), "CheckRequirementEnabled", typeof(int), typeof(bool).MakeByRefType());
        
        static System.Reflection.EventInfo RopQueryRowsResponseInfo = TestManagerHelpers.GetEventInfo(typeof(Microsoft.Protocols.TestSuites.MS_OXCTABL.IMS_OXCTABLAdapter), "RopQueryRowsResponse");
        #endregion
        
        #region Adapter Instances
        private Microsoft.Protocols.TestSuites.MS_OXCTABL.IMS_OXCTABLAdapter IMS_OXCTABLAdapterInstance;
        #endregion
        
        #region Class Initialization and Cleanup
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void ClassInitialize(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext context) {
            PtfTestClassBase.Initialize(context);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void ClassCleanup() {
            PtfTestClassBase.Cleanup();
        }
        #endregion
        
        #region Test Initialization and Cleanup
        protected override void TestInitialize() {
            this.InitializeTestManager();
            this.IMS_OXCTABLAdapterInstance = ((Microsoft.Protocols.TestSuites.MS_OXCTABL.IMS_OXCTABLAdapter)(this.Manager.GetAdapter(typeof(Microsoft.Protocols.TestSuites.MS_OXCTABL.IMS_OXCTABLAdapter))));
            this.Manager.Subscribe(RopQueryRowsResponseInfo, this.IMS_OXCTABLAdapterInstance);
        }
        
        protected override void TestCleanup() {
            base.TestCleanup();
            this.CleanupTestManager();
        }
        #endregion
        
        #region Test Starting in S0
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuite() {
            this.Manager.BeginTest("MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuite");
            this.Manager.Comment("reaching state \'S0\'");
            bool temp0;
            this.Manager.Comment("executing step \'call CheckMAPIHTTPTransportSupported(out _)\'");
            this.IMS_OXCTABLAdapterInstance.CheckMAPIHTTPTransportSupported(out temp0);
            this.Manager.AddReturn(CheckMAPIHTTPTransportSupportedInfo, null, temp0);
            this.Manager.Comment("reaching state \'S1\'");
            int temp20 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuiteCheckMAPIHTTPTransportSupportedChecker)), new ExpectedReturn(S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuiteCheckMAPIHTTPTransportSupportedChecker1)));
            if ((temp20 == 0)) {
                this.Manager.Comment("reaching state \'S2\'");
                goto label9;
            }
            if ((temp20 == 1)) {
                this.Manager.Comment("reaching state \'S3\'");
                this.Manager.Comment("executing step \'call InitializeTable(CONTENT_TABLE)\'");
                this.IMS_OXCTABLAdapterInstance.InitializeTable(((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableType)(0)));
                this.Manager.Comment("reaching state \'S4\'");
                this.Manager.Comment("checking step \'return InitializeTable\'");
                this.Manager.Comment("reaching state \'S5\'");
                Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp1;
                this.Manager.Comment("executing step \'call RopSetColumns(1,True,False,False)\'");
                temp1 = this.IMS_OXCTABLAdapterInstance.RopSetColumns(1u, true, false, false);
                this.Manager.Checkpoint("MS-OXCTABL_R831");
                this.Manager.Checkpoint("MS-OXCTABL_R435");
                this.Manager.Comment("reaching state \'S6\'");
                this.Manager.Comment("checking step \'return RopSetColumns/ecInvalidParam\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues.ecInvalidParam, temp1, "return of RopSetColumns, state S6");
                this.Manager.Comment("reaching state \'S7\'");
                bool temp2;
                this.Manager.Comment("executing step \'call CheckRequirementEnabled(768,out _)\'");
                this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(768, out temp2);
                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp2);
                this.Manager.Comment("reaching state \'S8\'");
                int temp19 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuiteCheckRequirementEnabledChecker)), new ExpectedReturn(S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuiteCheckRequirementEnabledChecker7)));
                if ((temp19 == 0)) {
                    this.Manager.Comment("reaching state \'S10\'");
                    bool temp3;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(866,out _)\'");
                    this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(866, out temp3);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp3);
                    this.Manager.Comment("reaching state \'S12\'");
                    int temp10 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuiteCheckRequirementEnabledChecker1)), new ExpectedReturn(S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuiteCheckRequirementEnabledChecker4)));
                    if ((temp10 == 0)) {
                        this.Manager.Comment("reaching state \'S15\'");
                        bool temp4;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(867,out _)\'");
                        this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(867, out temp4);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp4);
                        this.Manager.Comment("reaching state \'S19\'");
                        int temp7 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuiteCheckRequirementEnabledChecker2)), new ExpectedReturn(S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuiteCheckRequirementEnabledChecker3)));
                        if ((temp7 == 0)) {
                            this.Manager.Comment("reaching state \'S25\'");
                            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp5;
                            this.Manager.Comment("executing step \'call RopQueryRows(NoAdvance,True)\'");
                            temp5 = this.IMS_OXCTABLAdapterInstance.RopQueryRows(((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), true);
                            this.Manager.Checkpoint("MS-OXCTABL_R837");
                            this.Manager.Comment("reaching state \'S30\'");
                            this.Manager.Comment("checking step \'return RopQueryRows/success\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp5, "return of RopQueryRows, state S30");
                            this.Manager.Comment("reaching state \'S32\'");
                            int temp6 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuiteRopQueryRowsResponseChecker)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuiteRopQueryRowsResponseChecker1)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuiteRopQueryRowsResponseChecker2)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuiteRopQueryRowsResponseChecker3)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuiteRopQueryRowsResponseChecker4)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuiteRopQueryRowsResponseChecker5)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuiteRopQueryRowsResponseChecker6)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuiteRopQueryRowsResponseChecker7)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuiteRopQueryRowsResponseChecker8)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuiteRopQueryRowsResponseChecker9)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuiteRopQueryRowsResponseChecker10)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuiteRopQueryRowsResponseChecker11)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuiteRopQueryRowsResponseChecker12)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuiteRopQueryRowsResponseChecker13)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuiteRopQueryRowsResponseChecker14)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuiteRopQueryRowsResponseChecker15)));
                            if ((temp6 == 0)) {
                                S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuiteS34();
                                goto label0;
                            }
                            if ((temp6 == 1)) {
                                S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuiteS34();
                                goto label0;
                            }
                            if ((temp6 == 2)) {
                                S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuiteS34();
                                goto label0;
                            }
                            if ((temp6 == 3)) {
                                S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuiteS34();
                                goto label0;
                            }
                            if ((temp6 == 4)) {
                                S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuiteS34();
                                goto label0;
                            }
                            if ((temp6 == 5)) {
                                S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuiteS34();
                                goto label0;
                            }
                            if ((temp6 == 6)) {
                                S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuiteS34();
                                goto label0;
                            }
                            if ((temp6 == 7)) {
                                S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuiteS34();
                                goto label0;
                            }
                            if ((temp6 == 8)) {
                                S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuiteS34();
                                goto label0;
                            }
                            if ((temp6 == 9)) {
                                S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuiteS34();
                                goto label0;
                            }
                            if ((temp6 == 10)) {
                                S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuiteS34();
                                goto label0;
                            }
                            if ((temp6 == 11)) {
                                S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuiteS34();
                                goto label0;
                            }
                            if ((temp6 == 12)) {
                                S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuiteS34();
                                goto label0;
                            }
                            if ((temp6 == 13)) {
                                S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuiteS34();
                                goto label0;
                            }
                            if ((temp6 == 14)) {
                                S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuiteS34();
                                goto label0;
                            }
                            if ((temp6 == 15)) {
                                S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuiteS34();
                                goto label0;
                            }
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuiteRopQueryRowsResponseChecker)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuiteRopQueryRowsResponseChecker1)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuiteRopQueryRowsResponseChecker2)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuiteRopQueryRowsResponseChecker3)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuiteRopQueryRowsResponseChecker4)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuiteRopQueryRowsResponseChecker5)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuiteRopQueryRowsResponseChecker6)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuiteRopQueryRowsResponseChecker7)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuiteRopQueryRowsResponseChecker8)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuiteRopQueryRowsResponseChecker9)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuiteRopQueryRowsResponseChecker10)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuiteRopQueryRowsResponseChecker11)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuiteRopQueryRowsResponseChecker12)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuiteRopQueryRowsResponseChecker13)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuiteRopQueryRowsResponseChecker14)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuiteRopQueryRowsResponseChecker15)));
                        label0:
;
                            goto label1;
                        }
                        if ((temp7 == 1)) {
                            this.Manager.Comment("reaching state \'S26\'");
                            this.Manager.Assert(false, "reached non-accepting end state \'S26\'.");
                            goto label1;
                        }
                        throw new InvalidOperationException("never reached");
                    label1:
;
                        goto label3;
                    }
                    if ((temp10 == 1)) {
                        this.Manager.Comment("reaching state \'S16\'");
                        bool temp8;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(867,out _)\'");
                        this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(867, out temp8);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp8);
                        this.Manager.Comment("reaching state \'S20\'");
                        int temp9 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuiteCheckRequirementEnabledChecker5)), new ExpectedReturn(S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuiteCheckRequirementEnabledChecker6)));
                        if ((temp9 == 0)) {
                            this.Manager.Comment("reaching state \'S27\'");
                            this.Manager.Assert(false, "reached non-accepting end state \'S27\'.");
                            goto label2;
                        }
                        if ((temp9 == 1)) {
                            this.Manager.Comment("reaching state \'S28\'");
                            this.Manager.Assert(false, "reached non-accepting end state \'S28\'.");
                            goto label2;
                        }
                        throw new InvalidOperationException("never reached");
                    label2:
;
                        goto label3;
                    }
                    throw new InvalidOperationException("never reached");
                label3:
;
                    goto label8;
                }
                if ((temp19 == 1)) {
                    this.Manager.Comment("reaching state \'S9\'");
                    bool temp11;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(866,out _)\'");
                    this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(866, out temp11);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp11);
                    this.Manager.Comment("reaching state \'S11\'");
                    int temp18 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuiteCheckRequirementEnabledChecker8)), new ExpectedReturn(S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuiteCheckRequirementEnabledChecker11)));
                    if ((temp18 == 0)) {
                        this.Manager.Comment("reaching state \'S13\'");
                        bool temp12;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(867,out _)\'");
                        this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(867, out temp12);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp12);
                        this.Manager.Comment("reaching state \'S17\'");
                        int temp15 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuiteCheckRequirementEnabledChecker9)), new ExpectedReturn(S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuiteCheckRequirementEnabledChecker10)));
                        if ((temp15 == 0)) {
                            this.Manager.Comment("reaching state \'S21\'");
                            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp13;
                            this.Manager.Comment("executing step \'call RopQueryRows(NoAdvance,True)\'");
                            temp13 = this.IMS_OXCTABLAdapterInstance.RopQueryRows(((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), true);
                            this.Manager.Checkpoint("MS-OXCTABL_R837");
                            this.Manager.Checkpoint("MS-OXCTABL_R768");
                            this.Manager.Checkpoint("MS-OXCTABL_R866");
                            this.Manager.Checkpoint("MS-OXCTABL_R867");
                            this.Manager.Comment("reaching state \'S29\'");
                            this.Manager.Comment("checking step \'return RopQueryRows/ecNullObject\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues.ecNullObject, temp13, "return of RopQueryRows, state S29");
                            this.Manager.Comment("reaching state \'S31\'");
                            int temp14 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuiteRopQueryRowsResponseChecker16)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuiteRopQueryRowsResponseChecker17)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuiteRopQueryRowsResponseChecker18)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuiteRopQueryRowsResponseChecker19)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuiteRopQueryRowsResponseChecker20)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuiteRopQueryRowsResponseChecker21)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuiteRopQueryRowsResponseChecker22)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuiteRopQueryRowsResponseChecker23)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuiteRopQueryRowsResponseChecker24)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuiteRopQueryRowsResponseChecker25)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuiteRopQueryRowsResponseChecker26)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuiteRopQueryRowsResponseChecker27)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuiteRopQueryRowsResponseChecker28)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuiteRopQueryRowsResponseChecker29)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuiteRopQueryRowsResponseChecker30)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuiteRopQueryRowsResponseChecker31)));
                            if ((temp14 == 0)) {
                                S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuiteS33();
                                goto label4;
                            }
                            if ((temp14 == 1)) {
                                S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuiteS33();
                                goto label4;
                            }
                            if ((temp14 == 2)) {
                                S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuiteS33();
                                goto label4;
                            }
                            if ((temp14 == 3)) {
                                S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuiteS33();
                                goto label4;
                            }
                            if ((temp14 == 4)) {
                                S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuiteS33();
                                goto label4;
                            }
                            if ((temp14 == 5)) {
                                S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuiteS33();
                                goto label4;
                            }
                            if ((temp14 == 6)) {
                                S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuiteS33();
                                goto label4;
                            }
                            if ((temp14 == 7)) {
                                S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuiteS33();
                                goto label4;
                            }
                            if ((temp14 == 8)) {
                                S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuiteS33();
                                goto label4;
                            }
                            if ((temp14 == 9)) {
                                S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuiteS33();
                                goto label4;
                            }
                            if ((temp14 == 10)) {
                                S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuiteS33();
                                goto label4;
                            }
                            if ((temp14 == 11)) {
                                S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuiteS33();
                                goto label4;
                            }
                            if ((temp14 == 12)) {
                                S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuiteS33();
                                goto label4;
                            }
                            if ((temp14 == 13)) {
                                S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuiteS33();
                                goto label4;
                            }
                            if ((temp14 == 14)) {
                                S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuiteS33();
                                goto label4;
                            }
                            if ((temp14 == 15)) {
                                S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuiteS33();
                                goto label4;
                            }
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuiteRopQueryRowsResponseChecker16)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuiteRopQueryRowsResponseChecker17)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuiteRopQueryRowsResponseChecker18)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuiteRopQueryRowsResponseChecker19)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuiteRopQueryRowsResponseChecker20)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuiteRopQueryRowsResponseChecker21)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuiteRopQueryRowsResponseChecker22)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuiteRopQueryRowsResponseChecker23)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuiteRopQueryRowsResponseChecker24)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuiteRopQueryRowsResponseChecker25)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuiteRopQueryRowsResponseChecker26)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuiteRopQueryRowsResponseChecker27)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuiteRopQueryRowsResponseChecker28)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuiteRopQueryRowsResponseChecker29)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuiteRopQueryRowsResponseChecker30)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuiteRopQueryRowsResponseChecker31)));
                        label4:
;
                            goto label5;
                        }
                        if ((temp15 == 1)) {
                            this.Manager.Comment("reaching state \'S22\'");
                            this.Manager.Assert(false, "reached non-accepting end state \'S22\'.");
                            goto label5;
                        }
                        throw new InvalidOperationException("never reached");
                    label5:
;
                        goto label7;
                    }
                    if ((temp18 == 1)) {
                        this.Manager.Comment("reaching state \'S14\'");
                        bool temp16;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(867,out _)\'");
                        this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(867, out temp16);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp16);
                        this.Manager.Comment("reaching state \'S18\'");
                        int temp17 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuiteCheckRequirementEnabledChecker12)), new ExpectedReturn(S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuiteCheckRequirementEnabledChecker13)));
                        if ((temp17 == 0)) {
                            this.Manager.Comment("reaching state \'S23\'");
                            this.Manager.Assert(false, "reached non-accepting end state \'S23\'.");
                            goto label6;
                        }
                        if ((temp17 == 1)) {
                            this.Manager.Comment("reaching state \'S24\'");
                            this.Manager.Assert(false, "reached non-accepting end state \'S24\'.");
                            goto label6;
                        }
                        throw new InvalidOperationException("never reached");
                    label6:
;
                        goto label7;
                    }
                    throw new InvalidOperationException("never reached");
                label7:
;
                    goto label8;
                }
                throw new InvalidOperationException("never reached");
            label8:
;
                goto label9;
            }
            throw new InvalidOperationException("never reached");
        label9:
;
            this.Manager.EndTest();
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuiteCheckMAPIHTTPTransportSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S1");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuiteCheckMAPIHTTPTransportSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S1");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuiteCheckRequirementEnabledChecker(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S8");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuiteCheckRequirementEnabledChecker1(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S12");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuiteCheckRequirementEnabledChecker2(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S19");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuiteRopQueryRowsResponseChecker(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,True,SETCOLUMNS,True,Fal" +
                    "se,False,False,BOOKMARK_BEGINNING,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S32");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S32");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S32");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S32");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S32");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S32");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S32");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S32");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(0)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S32");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S32");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R27, MS-OXCTABL_R462");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R27");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
        }
        
        private void S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuiteS34() {
            this.Manager.Comment("reaching state \'S34\'");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuiteRopQueryRowsResponseChecker1(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,SETCOLUMNS,False,F" +
                    "alse,False,False,BOOKMARK_BEGINNING,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S32");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S32");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S32");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S32");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S32");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S32");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S32");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S32");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(0)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S32");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S32");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R27, MS-OXCTABL_R462");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R27");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuiteRopQueryRowsResponseChecker2(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,True,SETCOLUMNS,False,Fa" +
                    "lse,False,False,BOOKMARK_BEGINNING,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S32");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S32");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S32");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S32");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S32");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S32");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S32");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S32");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(0)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S32");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S32");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R27, MS-OXCTABL_R462");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R27");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuiteRopQueryRowsResponseChecker3(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,SETCOLUMNS,False,F" +
                    "alse,False,False,BOOKMARK_END,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S32");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S32");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S32");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S32");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S32");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S32");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S32");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S32");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_END, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S32");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S32");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R462");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuiteRopQueryRowsResponseChecker4(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,True,SETCOLUMNS,False,Fa" +
                    "lse,False,False,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S32");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S32");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S32");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S32");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S32");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S32");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S32");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S32");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S32");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S32");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R462");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuiteRopQueryRowsResponseChecker5(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,True,SETCOLUMNS,False,Fa" +
                    "lse,False,False,BOOKMARK_END,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S32");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S32");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S32");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S32");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S32");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S32");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S32");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S32");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_END, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S32");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S32");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R462");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuiteRopQueryRowsResponseChecker6(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,True,SETCOLUMNS,True,Fal" +
                    "se,False,False,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S32");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S32");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S32");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S32");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S32");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S32");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S32");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S32");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S32");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S32");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R462");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuiteRopQueryRowsResponseChecker7(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,True,SETCOLUMNS,True,Fal" +
                    "se,False,False,BOOKMARK_END,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S32");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S32");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S32");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S32");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S32");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S32");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S32");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S32");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_END, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S32");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S32");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R462");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuiteRopQueryRowsResponseChecker8(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,SETCOLUMNS,True,Fa" +
                    "lse,False,False,BOOKMARK_BEGINNING,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S32");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S32");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S32");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S32");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S32");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S32");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S32");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S32");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(0)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S32");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S32");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R27, MS-OXCTABL_R462");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R27");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuiteRopQueryRowsResponseChecker9(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,SETCOLUMNS,True,Fa" +
                    "lse,False,False,BOOKMARK_END,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S32");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S32");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S32");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S32");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S32");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S32");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S32");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S32");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_END, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S32");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S32");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R462");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuiteRopQueryRowsResponseChecker10(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,SETCOLUMNS,True,Fa" +
                    "lse,False,False,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S32");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S32");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S32");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S32");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S32");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S32");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S32");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S32");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S32");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S32");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R462");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuiteRopQueryRowsResponseChecker11(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,True,SETCOLUMNS,True,Fal" +
                    "se,False,False,BOOKMARK_CUSTOM,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S32");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S32");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S32");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S32");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S32");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S32");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S32");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S32");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_CUSTOM, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S32");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S32");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R462");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuiteRopQueryRowsResponseChecker12(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,SETCOLUMNS,True,Fa" +
                    "lse,False,False,BOOKMARK_CUSTOM,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S32");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S32");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S32");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S32");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S32");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S32");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S32");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S32");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_CUSTOM, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S32");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S32");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R462");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuiteRopQueryRowsResponseChecker13(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,True,SETCOLUMNS,False,Fa" +
                    "lse,False,False,BOOKMARK_CUSTOM,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S32");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S32");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S32");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S32");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S32");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S32");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S32");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S32");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_CUSTOM, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S32");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S32");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R462");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuiteRopQueryRowsResponseChecker14(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,SETCOLUMNS,False,F" +
                    "alse,False,False,BOOKMARK_CUSTOM,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S32");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S32");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S32");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S32");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S32");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S32");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S32");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S32");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_CUSTOM, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S32");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S32");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R462");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuiteRopQueryRowsResponseChecker15(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,SETCOLUMNS,False,F" +
                    "alse,False,False,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S32");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S32");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S32");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S32");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S32");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S32");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S32");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S32");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S32");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S32");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R462");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuiteCheckRequirementEnabledChecker3(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S19");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuiteCheckRequirementEnabledChecker4(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S12");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuiteCheckRequirementEnabledChecker5(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S20");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuiteCheckRequirementEnabledChecker6(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S20");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuiteCheckRequirementEnabledChecker7(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S8");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuiteCheckRequirementEnabledChecker8(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S11");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuiteCheckRequirementEnabledChecker9(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S17");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuiteRopQueryRowsResponseChecker16(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,True,SETCOLUMNS,True,Fal" +
                    "se,False,False,BOOKMARK_BEGINNING,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S31");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S31");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S31");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S31");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S31");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S31");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S31");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S31");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(0)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S31");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S31");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R27, MS-OXCTABL_R462");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R27");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
        }
        
        private void S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuiteS33() {
            this.Manager.Comment("reaching state \'S33\'");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuiteRopQueryRowsResponseChecker17(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,SETCOLUMNS,False,F" +
                    "alse,False,False,BOOKMARK_BEGINNING,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S31");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S31");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S31");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S31");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S31");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S31");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S31");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S31");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(0)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S31");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S31");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R27, MS-OXCTABL_R462");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R27");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuiteRopQueryRowsResponseChecker18(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,True,SETCOLUMNS,False,Fa" +
                    "lse,False,False,BOOKMARK_BEGINNING,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S31");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S31");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S31");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S31");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S31");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S31");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S31");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S31");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(0)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S31");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S31");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R27, MS-OXCTABL_R462");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R27");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuiteRopQueryRowsResponseChecker19(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,SETCOLUMNS,False,F" +
                    "alse,False,False,BOOKMARK_END,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S31");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S31");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S31");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S31");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S31");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S31");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S31");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S31");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_END, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S31");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S31");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R462");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuiteRopQueryRowsResponseChecker20(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,True,SETCOLUMNS,False,Fa" +
                    "lse,False,False,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S31");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S31");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S31");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S31");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S31");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S31");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S31");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S31");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S31");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S31");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R462");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuiteRopQueryRowsResponseChecker21(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,True,SETCOLUMNS,False,Fa" +
                    "lse,False,False,BOOKMARK_END,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S31");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S31");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S31");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S31");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S31");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S31");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S31");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S31");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_END, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S31");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S31");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R462");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuiteRopQueryRowsResponseChecker22(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,True,SETCOLUMNS,True,Fal" +
                    "se,False,False,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S31");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S31");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S31");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S31");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S31");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S31");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S31");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S31");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S31");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S31");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R462");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuiteRopQueryRowsResponseChecker23(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,True,SETCOLUMNS,True,Fal" +
                    "se,False,False,BOOKMARK_END,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S31");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S31");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S31");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S31");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S31");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S31");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S31");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S31");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_END, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S31");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S31");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R462");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuiteRopQueryRowsResponseChecker24(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,SETCOLUMNS,True,Fa" +
                    "lse,False,False,BOOKMARK_BEGINNING,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S31");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S31");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S31");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S31");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S31");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S31");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S31");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S31");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(0)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S31");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S31");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R27, MS-OXCTABL_R462");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R27");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuiteRopQueryRowsResponseChecker25(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,SETCOLUMNS,True,Fa" +
                    "lse,False,False,BOOKMARK_END,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S31");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S31");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S31");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S31");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S31");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S31");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S31");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S31");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_END, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S31");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S31");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R462");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuiteRopQueryRowsResponseChecker26(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,SETCOLUMNS,True,Fa" +
                    "lse,False,False,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S31");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S31");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S31");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S31");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S31");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S31");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S31");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S31");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S31");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S31");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R462");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuiteRopQueryRowsResponseChecker27(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,True,SETCOLUMNS,True,Fal" +
                    "se,False,False,BOOKMARK_CUSTOM,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S31");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S31");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S31");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S31");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S31");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S31");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S31");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S31");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_CUSTOM, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S31");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S31");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R462");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuiteRopQueryRowsResponseChecker28(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,SETCOLUMNS,True,Fa" +
                    "lse,False,False,BOOKMARK_CUSTOM,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S31");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S31");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S31");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S31");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S31");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S31");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S31");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S31");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_CUSTOM, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S31");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S31");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R462");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuiteRopQueryRowsResponseChecker29(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,True,SETCOLUMNS,False,Fa" +
                    "lse,False,False,BOOKMARK_CUSTOM,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S31");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S31");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S31");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S31");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S31");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S31");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S31");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S31");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_CUSTOM, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S31");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S31");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R462");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuiteRopQueryRowsResponseChecker30(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,SETCOLUMNS,False,F" +
                    "alse,False,False,BOOKMARK_CUSTOM,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S31");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S31");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S31");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S31");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S31");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S31");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S31");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S31");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_CUSTOM, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S31");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S31");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R462");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuiteRopQueryRowsResponseChecker31(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,SETCOLUMNS,False,F" +
                    "alse,False,False,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S31");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S31");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S31");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S31");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S31");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S31");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S31");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S31");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S31");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S31");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R462");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuiteCheckRequirementEnabledChecker10(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S17");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuiteCheckRequirementEnabledChecker11(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S11");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuiteCheckRequirementEnabledChecker12(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S18");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSetColumnsFailed_TestSuiteCheckRequirementEnabledChecker13(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S18");
        }
        #endregion
    }
}
