//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18449
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Microsoft.Protocols.TestSuites.MS_OXCTABL {
    using System;
    using System.Collections.Generic;
    using System.Text;
    using System.Reflection;
    using Microsoft.SpecExplorer.Runtime.Testing;
    using Microsoft.Protocols.TestTools;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Spec Explorer", "3.5.3130.0")]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class S04_ExpandRowRops_CollapseorExpandRow_TestSuite : PtfTestClassBase {
        
        public S04_ExpandRowRops_CollapseorExpandRow_TestSuite() {
            this.SetSwitch("ProceedControlTimeout", "100");
            this.SetSwitch("QuiescenceTimeout", "2000000");
        }
        
        #region Expect Delegates
        public delegate void CheckMAPIHTTPTransportSupportedDelegate1(bool isSupported);
        
        public delegate void CheckRequirementEnabledDelegate1(bool enabled);
        
        public delegate void RopQueryRowsResponseDelegate1(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger);
        
        public delegate void RopExpandRowResponseDelegate1(bool isLastSetColumnData);
        #endregion
        
        #region Event Metadata
        static System.Reflection.MethodBase CheckMAPIHTTPTransportSupportedInfo = TestManagerHelpers.GetMethodInfo(typeof(Microsoft.Protocols.TestSuites.MS_OXCTABL.IMS_OXCTABLAdapter), "CheckMAPIHTTPTransportSupported", typeof(bool).MakeByRefType());
        
        static System.Reflection.MethodBase CheckRequirementEnabledInfo = TestManagerHelpers.GetMethodInfo(typeof(Microsoft.Protocols.TestSuites.MS_OXCTABL.IMS_OXCTABLAdapter), "CheckRequirementEnabled", typeof(int), typeof(bool).MakeByRefType());
        
        static System.Reflection.EventInfo RopQueryRowsResponseInfo = TestManagerHelpers.GetEventInfo(typeof(Microsoft.Protocols.TestSuites.MS_OXCTABL.IMS_OXCTABLAdapter), "RopQueryRowsResponse");
        
        static System.Reflection.EventInfo RopExpandRowResponseInfo = TestManagerHelpers.GetEventInfo(typeof(Microsoft.Protocols.TestSuites.MS_OXCTABL.IMS_OXCTABLAdapter), "RopExpandRowResponse");
        #endregion
        
        #region Adapter Instances
        private Microsoft.Protocols.TestSuites.MS_OXCTABL.IMS_OXCTABLAdapter IMS_OXCTABLAdapterInstance;
        #endregion
        
        #region Class Initialization and Cleanup
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void ClassInitialize(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext context) {
            PtfTestClassBase.Initialize(context);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void ClassCleanup() {
            PtfTestClassBase.Cleanup();
        }
        #endregion
        
        #region Test Initialization and Cleanup
        protected override void TestInitialize() {
            this.InitializeTestManager();
            this.IMS_OXCTABLAdapterInstance = ((Microsoft.Protocols.TestSuites.MS_OXCTABL.IMS_OXCTABLAdapter)(this.Manager.GetAdapter(typeof(Microsoft.Protocols.TestSuites.MS_OXCTABL.IMS_OXCTABLAdapter))));
            this.Manager.Subscribe(RopExpandRowResponseInfo, this.IMS_OXCTABLAdapterInstance);
            this.Manager.Subscribe(RopQueryRowsResponseInfo, this.IMS_OXCTABLAdapterInstance);
        }
        
        protected override void TestCleanup() {
            base.TestCleanup();
            this.CleanupTestManager();
        }
        #endregion
        
        #region Test Starting in S0
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite() {
            this.Manager.BeginTest("MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite");
            this.Manager.Comment("reaching state \'S0\'");
            bool temp0;
            this.Manager.Comment("executing step \'call CheckMAPIHTTPTransportSupported(out _)\'");
            this.IMS_OXCTABLAdapterInstance.CheckMAPIHTTPTransportSupported(out temp0);
            this.Manager.AddReturn(CheckMAPIHTTPTransportSupportedInfo, null, temp0);
            this.Manager.Comment("reaching state \'S1\'");
            int temp112 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteCheckMAPIHTTPTransportSupportedChecker)), new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteCheckMAPIHTTPTransportSupportedChecker1)));
            if ((temp112 == 0)) {
                this.Manager.Comment("reaching state \'S12\'");
                goto label38;
            }
            if ((temp112 == 1)) {
                this.Manager.Comment("reaching state \'S13\'");
                this.Manager.Comment("executing step \'call InitializeTable(CONTENT_TABLE)\'");
                this.IMS_OXCTABLAdapterInstance.InitializeTable(((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableType)(0)));
                this.Manager.Comment("reaching state \'S24\'");
                this.Manager.Comment("checking step \'return InitializeTable\'");
                this.Manager.Comment("reaching state \'S30\'");
                Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp1;
                this.Manager.Comment("executing step \'call RopSortTable(1,True,False,True,True,True,False,False)\'");
                temp1 = this.IMS_OXCTABLAdapterInstance.RopSortTable(1u, true, false, true, true, true, false, false);
                this.Manager.Checkpoint("MS-OXCTABL_R447");
                this.Manager.Comment("reaching state \'S36\'");
                this.Manager.Comment("checking step \'return RopSortTable/success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp1, "return of RopSortTable, state S36");
                this.Manager.Comment("reaching state \'S42\'");
                Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp2;
                this.Manager.Comment("executing step \'call RopSetColumns(1,False,False,False)\'");
                temp2 = this.IMS_OXCTABLAdapterInstance.RopSetColumns(1u, false, false, false);
                this.Manager.Checkpoint("MS-OXCTABL_R831");
                this.Manager.Checkpoint("MS-OXCTABL_R45");
                this.Manager.Comment("reaching state \'S48\'");
                this.Manager.Comment("checking step \'return RopSetColumns/success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp2, "return of RopSetColumns, state S48");
                this.Manager.Comment("reaching state \'S54\'");
                bool temp3;
                this.Manager.Comment("executing step \'call CheckRequirementEnabled(768,out _)\'");
                this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(768, out temp3);
                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp3);
                this.Manager.Comment("reaching state \'S60\'");
                int temp111 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteCheckRequirementEnabledChecker)), new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteCheckRequirementEnabledChecker31)));
                if ((temp111 == 0)) {
                    this.Manager.Comment("reaching state \'S66\'");
                    bool temp4;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(866,out _)\'");
                    this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(866, out temp4);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp4);
                    this.Manager.Comment("reaching state \'S78\'");
                    int temp58 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteCheckRequirementEnabledChecker1)), new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteCheckRequirementEnabledChecker16)));
                    if ((temp58 == 0)) {
                        this.Manager.Comment("reaching state \'S90\'");
                        bool temp5;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(867,out _)\'");
                        this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(867, out temp5);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp5);
                        this.Manager.Comment("reaching state \'S114\'");
                        int temp31 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteCheckRequirementEnabledChecker2)), new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteCheckRequirementEnabledChecker9)));
                        if ((temp31 == 0)) {
                            this.Manager.Comment("reaching state \'S138\'");
                            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp6;
                            this.Manager.Comment("executing step \'call RopQueryRows(Advance,True)\'");
                            temp6 = this.IMS_OXCTABLAdapterInstance.RopQueryRows(((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), true);
                            this.Manager.Checkpoint("MS-OXCTABL_R837");
                            this.Manager.Comment("reaching state \'S186\'");
                            this.Manager.Comment("checking step \'return RopQueryRows/success\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp6, "return of RopQueryRows, state S186");
                            this.Manager.Comment("reaching state \'S234\'");
                            bool temp7;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(610,out _)\'");
                            this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(610, out temp7);
                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp7);
                            this.Manager.Comment("reaching state \'S282\'");
                            int temp18 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteCheckRequirementEnabledChecker3)), new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteCheckRequirementEnabledChecker6)));
                            if ((temp18 == 0)) {
                                this.Manager.Comment("reaching state \'S330\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteRopQueryRowsResponseChecker))) != -1)) {
                                    this.Manager.Comment("reaching state \'S426\'");
                                    bool temp8;
                                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(748,out _)\'");
                                    this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(748, out temp8);
                                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp8);
                                    this.Manager.Comment("reaching state \'S522\'");
                                    int temp12 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteCheckRequirementEnabledChecker4)), new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteCheckRequirementEnabledChecker5)));
                                    if ((temp12 == 0)) {
                                        this.Manager.Comment("reaching state \'S618\'");
                                        Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp9;
                                        this.Manager.Comment("executing step \'call RopExpandRow(False,False,False)\'");
                                        temp9 = this.IMS_OXCTABLAdapterInstance.RopExpandRow(false, false, false);
                                        this.Manager.Checkpoint("MS-OXCTABL_R568");
                                        this.Manager.Checkpoint("MS-OXCTABL_R567");
                                        this.Manager.Comment("reaching state \'S746\'");
                                        this.Manager.Comment("checking step \'return RopExpandRow/success\'");
                                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp9, "return of RopExpandRow, state S746");
                                        this.Manager.Comment("reaching state \'S842\'");
                                        int temp10 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopExpandRowResponseInfo, null, new RopExpandRowResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteRopExpandRowResponseChecker)), new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopExpandRowResponseInfo, null, new RopExpandRowResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteRopExpandRowResponseChecker1)));
                                        if ((temp10 == 0)) {
                                            S04_ExpandRowRops_CollapseorExpandRow_TestSuiteS906();
                                            goto label0;
                                        }
                                        if ((temp10 == 1)) {
                                            S04_ExpandRowRops_CollapseorExpandRow_TestSuiteS906();
                                            goto label0;
                                        }
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopExpandRowResponseInfo, null, new RopExpandRowResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteRopExpandRowResponseChecker)), new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopExpandRowResponseInfo, null, new RopExpandRowResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteRopExpandRowResponseChecker1)));
                                    label0:
;
                                        goto label1;
                                    }
                                    if ((temp12 == 1)) {
                                        this.Manager.Comment("reaching state \'S619\'");
                                        Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp11;
                                        this.Manager.Comment("executing step \'call RopExpandRow(False,False,False)\'");
                                        temp11 = this.IMS_OXCTABLAdapterInstance.RopExpandRow(false, false, false);
                                        this.Manager.Checkpoint("MS-OXCTABL_R568");
                                        this.Manager.Checkpoint("MS-OXCTABL_R567");
                                        this.Manager.Comment("reaching state \'S747\'");
                                        this.Manager.Comment("checking step \'return RopExpandRow/success\'");
                                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp11, "return of RopExpandRow, state S747");
                                        this.Manager.Comment("reaching state \'S843\'");
                                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopExpandRowResponseInfo, null, new RopExpandRowResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteRopExpandRowResponseChecker2))) != -1)) {
                                            this.Manager.Comment("reaching state \'S907\'");
                                        }
                                        else {
                                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopExpandRowResponseInfo, null, new RopExpandRowResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteRopExpandRowResponseChecker2)));
                                        }
                                        goto label1;
                                    }
                                    throw new InvalidOperationException("never reached");
                                label1:
;
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteRopQueryRowsResponseChecker)));
                                }
                                goto label4;
                            }
                            if ((temp18 == 1)) {
                                this.Manager.Comment("reaching state \'S331\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteRopQueryRowsResponseChecker1))) != -1)) {
                                    this.Manager.Comment("reaching state \'S427\'");
                                    bool temp13;
                                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(748,out _)\'");
                                    this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(748, out temp13);
                                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp13);
                                    this.Manager.Comment("reaching state \'S523\'");
                                    int temp17 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteCheckRequirementEnabledChecker7)), new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteCheckRequirementEnabledChecker8)));
                                    if ((temp17 == 0)) {
                                        this.Manager.Comment("reaching state \'S620\'");
                                        Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp14;
                                        this.Manager.Comment("executing step \'call RopExpandRow(False,False,False)\'");
                                        temp14 = this.IMS_OXCTABLAdapterInstance.RopExpandRow(false, false, false);
                                        this.Manager.Checkpoint("MS-OXCTABL_R568");
                                        this.Manager.Checkpoint("MS-OXCTABL_R567");
                                        this.Manager.Comment("reaching state \'S748\'");
                                        this.Manager.Comment("checking step \'return RopExpandRow/success\'");
                                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp14, "return of RopExpandRow, state S748");
                                        this.Manager.Comment("reaching state \'S844\'");
                                        int temp15 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopExpandRowResponseInfo, null, new RopExpandRowResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteRopExpandRowResponseChecker3)), new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopExpandRowResponseInfo, null, new RopExpandRowResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteRopExpandRowResponseChecker4)));
                                        if ((temp15 == 0)) {
                                            S04_ExpandRowRops_CollapseorExpandRow_TestSuiteS908();
                                            goto label2;
                                        }
                                        if ((temp15 == 1)) {
                                            S04_ExpandRowRops_CollapseorExpandRow_TestSuiteS908();
                                            goto label2;
                                        }
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopExpandRowResponseInfo, null, new RopExpandRowResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteRopExpandRowResponseChecker3)), new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopExpandRowResponseInfo, null, new RopExpandRowResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteRopExpandRowResponseChecker4)));
                                    label2:
;
                                        goto label3;
                                    }
                                    if ((temp17 == 1)) {
                                        this.Manager.Comment("reaching state \'S621\'");
                                        Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp16;
                                        this.Manager.Comment("executing step \'call RopExpandRow(False,False,False)\'");
                                        temp16 = this.IMS_OXCTABLAdapterInstance.RopExpandRow(false, false, false);
                                        this.Manager.Checkpoint("MS-OXCTABL_R568");
                                        this.Manager.Checkpoint("MS-OXCTABL_R567");
                                        this.Manager.Comment("reaching state \'S749\'");
                                        this.Manager.Comment("checking step \'return RopExpandRow/success\'");
                                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp16, "return of RopExpandRow, state S749");
                                        this.Manager.Comment("reaching state \'S845\'");
                                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopExpandRowResponseInfo, null, new RopExpandRowResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteRopExpandRowResponseChecker5))) != -1)) {
                                            this.Manager.Comment("reaching state \'S909\'");
                                        }
                                        else {
                                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopExpandRowResponseInfo, null, new RopExpandRowResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteRopExpandRowResponseChecker5)));
                                        }
                                        goto label3;
                                    }
                                    throw new InvalidOperationException("never reached");
                                label3:
;
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteRopQueryRowsResponseChecker1)));
                                }
                                goto label4;
                            }
                            throw new InvalidOperationException("never reached");
                        label4:
;
                            goto label9;
                        }
                        if ((temp31 == 1)) {
                            this.Manager.Comment("reaching state \'S139\'");
                            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp19;
                            this.Manager.Comment("executing step \'call RopQueryRows(Advance,True)\'");
                            temp19 = this.IMS_OXCTABLAdapterInstance.RopQueryRows(((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), true);
                            this.Manager.Checkpoint("MS-OXCTABL_R837");
                            this.Manager.Comment("reaching state \'S187\'");
                            this.Manager.Comment("checking step \'return RopQueryRows/success\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp19, "return of RopQueryRows, state S187");
                            this.Manager.Comment("reaching state \'S235\'");
                            bool temp20;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(610,out _)\'");
                            this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(610, out temp20);
                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp20);
                            this.Manager.Comment("reaching state \'S283\'");
                            int temp30 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteCheckRequirementEnabledChecker10)), new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteCheckRequirementEnabledChecker13)));
                            if ((temp30 == 0)) {
                                this.Manager.Comment("reaching state \'S332\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteRopQueryRowsResponseChecker2))) != -1)) {
                                    this.Manager.Comment("reaching state \'S428\'");
                                    bool temp21;
                                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(748,out _)\'");
                                    this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(748, out temp21);
                                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp21);
                                    this.Manager.Comment("reaching state \'S524\'");
                                    int temp25 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteCheckRequirementEnabledChecker11)), new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteCheckRequirementEnabledChecker12)));
                                    if ((temp25 == 0)) {
                                        this.Manager.Comment("reaching state \'S622\'");
                                        Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp22;
                                        this.Manager.Comment("executing step \'call RopExpandRow(False,False,False)\'");
                                        temp22 = this.IMS_OXCTABLAdapterInstance.RopExpandRow(false, false, false);
                                        this.Manager.Checkpoint("MS-OXCTABL_R568");
                                        this.Manager.Checkpoint("MS-OXCTABL_R567");
                                        this.Manager.Comment("reaching state \'S750\'");
                                        this.Manager.Comment("checking step \'return RopExpandRow/success\'");
                                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp22, "return of RopExpandRow, state S750");
                                        this.Manager.Comment("reaching state \'S846\'");
                                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopExpandRowResponseInfo, null, new RopExpandRowResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteRopExpandRowResponseChecker6))) != -1)) {
                                            this.Manager.Comment("reaching state \'S910\'");
                                        }
                                        else {
                                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopExpandRowResponseInfo, null, new RopExpandRowResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteRopExpandRowResponseChecker6)));
                                        }
                                        goto label6;
                                    }
                                    if ((temp25 == 1)) {
                                        this.Manager.Comment("reaching state \'S623\'");
                                        Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp23;
                                        this.Manager.Comment("executing step \'call RopExpandRow(False,False,False)\'");
                                        temp23 = this.IMS_OXCTABLAdapterInstance.RopExpandRow(false, false, false);
                                        this.Manager.Checkpoint("MS-OXCTABL_R568");
                                        this.Manager.Checkpoint("MS-OXCTABL_R567");
                                        this.Manager.Comment("reaching state \'S751\'");
                                        this.Manager.Comment("checking step \'return RopExpandRow/success\'");
                                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp23, "return of RopExpandRow, state S751");
                                        this.Manager.Comment("reaching state \'S847\'");
                                        int temp24 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopExpandRowResponseInfo, null, new RopExpandRowResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteRopExpandRowResponseChecker7)), new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopExpandRowResponseInfo, null, new RopExpandRowResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteRopExpandRowResponseChecker8)));
                                        if ((temp24 == 0)) {
                                            S04_ExpandRowRops_CollapseorExpandRow_TestSuiteS911();
                                            goto label5;
                                        }
                                        if ((temp24 == 1)) {
                                            S04_ExpandRowRops_CollapseorExpandRow_TestSuiteS911();
                                            goto label5;
                                        }
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopExpandRowResponseInfo, null, new RopExpandRowResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteRopExpandRowResponseChecker7)), new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopExpandRowResponseInfo, null, new RopExpandRowResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteRopExpandRowResponseChecker8)));
                                    label5:
;
                                        goto label6;
                                    }
                                    throw new InvalidOperationException("never reached");
                                label6:
;
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteRopQueryRowsResponseChecker2)));
                                }
                                goto label8;
                            }
                            if ((temp30 == 1)) {
                                this.Manager.Comment("reaching state \'S333\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteRopQueryRowsResponseChecker3))) != -1)) {
                                    this.Manager.Comment("reaching state \'S429\'");
                                    bool temp26;
                                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(748,out _)\'");
                                    this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(748, out temp26);
                                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp26);
                                    this.Manager.Comment("reaching state \'S525\'");
                                    int temp29 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteCheckRequirementEnabledChecker14)), new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteCheckRequirementEnabledChecker15)));
                                    if ((temp29 == 0)) {
                                        this.Manager.Comment("reaching state \'S624\'");
                                        Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp27;
                                        this.Manager.Comment("executing step \'call RopExpandRow(True,False,False)\'");
                                        temp27 = this.IMS_OXCTABLAdapterInstance.RopExpandRow(true, false, false);
                                        this.Manager.Checkpoint("MS-OXCTABL_R568");
                                        this.Manager.Checkpoint("MS-OXCTABL_R570");
                                        this.Manager.Comment("reaching state \'S752\'");
                                        this.Manager.Comment("checking step \'return RopExpandRow/ecNotFound\'");
                                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues.ecNotFound, temp27, "return of RopExpandRow, state S752");
                                        S04_ExpandRowRops_CollapseorExpandRow_TestSuiteS848();
                                        goto label7;
                                    }
                                    if ((temp29 == 1)) {
                                        this.Manager.Comment("reaching state \'S625\'");
                                        Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp28;
                                        this.Manager.Comment("executing step \'call RopExpandRow(True,False,False)\'");
                                        temp28 = this.IMS_OXCTABLAdapterInstance.RopExpandRow(true, false, false);
                                        this.Manager.Checkpoint("MS-OXCTABL_R568");
                                        this.Manager.Checkpoint("MS-OXCTABL_R570");
                                        this.Manager.Comment("reaching state \'S753\'");
                                        this.Manager.Comment("checking step \'return RopExpandRow/ecNotFound\'");
                                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues.ecNotFound, temp28, "return of RopExpandRow, state S753");
                                        S04_ExpandRowRops_CollapseorExpandRow_TestSuiteS849();
                                        goto label7;
                                    }
                                    throw new InvalidOperationException("never reached");
                                label7:
;
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteRopQueryRowsResponseChecker3)));
                                }
                                goto label8;
                            }
                            throw new InvalidOperationException("never reached");
                        label8:
;
                            goto label9;
                        }
                        throw new InvalidOperationException("never reached");
                    label9:
;
                        goto label19;
                    }
                    if ((temp58 == 1)) {
                        this.Manager.Comment("reaching state \'S91\'");
                        bool temp32;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(867,out _)\'");
                        this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(867, out temp32);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp32);
                        this.Manager.Comment("reaching state \'S115\'");
                        int temp57 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteCheckRequirementEnabledChecker17)), new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteCheckRequirementEnabledChecker24)));
                        if ((temp57 == 0)) {
                            this.Manager.Comment("reaching state \'S140\'");
                            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp33;
                            this.Manager.Comment("executing step \'call RopQueryRows(Advance,True)\'");
                            temp33 = this.IMS_OXCTABLAdapterInstance.RopQueryRows(((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), true);
                            this.Manager.Checkpoint("MS-OXCTABL_R837");
                            this.Manager.Comment("reaching state \'S188\'");
                            this.Manager.Comment("checking step \'return RopQueryRows/success\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp33, "return of RopQueryRows, state S188");
                            this.Manager.Comment("reaching state \'S236\'");
                            bool temp34;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(610,out _)\'");
                            this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(610, out temp34);
                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp34);
                            this.Manager.Comment("reaching state \'S284\'");
                            int temp44 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteCheckRequirementEnabledChecker18)), new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteCheckRequirementEnabledChecker21)));
                            if ((temp44 == 0)) {
                                this.Manager.Comment("reaching state \'S334\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteRopQueryRowsResponseChecker4))) != -1)) {
                                    this.Manager.Comment("reaching state \'S430\'");
                                    bool temp35;
                                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(748,out _)\'");
                                    this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(748, out temp35);
                                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp35);
                                    this.Manager.Comment("reaching state \'S526\'");
                                    int temp39 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteCheckRequirementEnabledChecker19)), new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteCheckRequirementEnabledChecker20)));
                                    if ((temp39 == 0)) {
                                        this.Manager.Comment("reaching state \'S626\'");
                                        Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp36;
                                        this.Manager.Comment("executing step \'call RopExpandRow(False,False,False)\'");
                                        temp36 = this.IMS_OXCTABLAdapterInstance.RopExpandRow(false, false, false);
                                        this.Manager.Checkpoint("MS-OXCTABL_R568");
                                        this.Manager.Checkpoint("MS-OXCTABL_R567");
                                        this.Manager.Comment("reaching state \'S754\'");
                                        this.Manager.Comment("checking step \'return RopExpandRow/success\'");
                                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp36, "return of RopExpandRow, state S754");
                                        this.Manager.Comment("reaching state \'S850\'");
                                        int temp37 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopExpandRowResponseInfo, null, new RopExpandRowResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteRopExpandRowResponseChecker9)), new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopExpandRowResponseInfo, null, new RopExpandRowResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteRopExpandRowResponseChecker10)));
                                        if ((temp37 == 0)) {
                                            S04_ExpandRowRops_CollapseorExpandRow_TestSuiteS912();
                                            goto label10;
                                        }
                                        if ((temp37 == 1)) {
                                            S04_ExpandRowRops_CollapseorExpandRow_TestSuiteS912();
                                            goto label10;
                                        }
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopExpandRowResponseInfo, null, new RopExpandRowResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteRopExpandRowResponseChecker9)), new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopExpandRowResponseInfo, null, new RopExpandRowResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteRopExpandRowResponseChecker10)));
                                    label10:
;
                                        goto label11;
                                    }
                                    if ((temp39 == 1)) {
                                        this.Manager.Comment("reaching state \'S627\'");
                                        Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp38;
                                        this.Manager.Comment("executing step \'call RopExpandRow(False,False,False)\'");
                                        temp38 = this.IMS_OXCTABLAdapterInstance.RopExpandRow(false, false, false);
                                        this.Manager.Checkpoint("MS-OXCTABL_R568");
                                        this.Manager.Checkpoint("MS-OXCTABL_R567");
                                        this.Manager.Comment("reaching state \'S755\'");
                                        this.Manager.Comment("checking step \'return RopExpandRow/success\'");
                                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp38, "return of RopExpandRow, state S755");
                                        this.Manager.Comment("reaching state \'S851\'");
                                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopExpandRowResponseInfo, null, new RopExpandRowResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteRopExpandRowResponseChecker11))) != -1)) {
                                            this.Manager.Comment("reaching state \'S913\'");
                                        }
                                        else {
                                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopExpandRowResponseInfo, null, new RopExpandRowResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteRopExpandRowResponseChecker11)));
                                        }
                                        goto label11;
                                    }
                                    throw new InvalidOperationException("never reached");
                                label11:
;
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteRopQueryRowsResponseChecker4)));
                                }
                                goto label13;
                            }
                            if ((temp44 == 1)) {
                                this.Manager.Comment("reaching state \'S335\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteRopQueryRowsResponseChecker5))) != -1)) {
                                    this.Manager.Comment("reaching state \'S431\'");
                                    bool temp40;
                                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(748,out _)\'");
                                    this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(748, out temp40);
                                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp40);
                                    this.Manager.Comment("reaching state \'S527\'");
                                    int temp43 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteCheckRequirementEnabledChecker22)), new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteCheckRequirementEnabledChecker23)));
                                    if ((temp43 == 0)) {
                                        this.Manager.Comment("reaching state \'S628\'");
                                        Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp41;
                                        this.Manager.Comment("executing step \'call RopExpandRow(True,False,False)\'");
                                        temp41 = this.IMS_OXCTABLAdapterInstance.RopExpandRow(true, false, false);
                                        this.Manager.Checkpoint("MS-OXCTABL_R568");
                                        this.Manager.Checkpoint("MS-OXCTABL_R570");
                                        this.Manager.Comment("reaching state \'S756\'");
                                        this.Manager.Comment("checking step \'return RopExpandRow/ecNotFound\'");
                                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues.ecNotFound, temp41, "return of RopExpandRow, state S756");
                                        S04_ExpandRowRops_CollapseorExpandRow_TestSuiteS852();
                                        goto label12;
                                    }
                                    if ((temp43 == 1)) {
                                        this.Manager.Comment("reaching state \'S629\'");
                                        Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp42;
                                        this.Manager.Comment("executing step \'call RopExpandRow(True,False,False)\'");
                                        temp42 = this.IMS_OXCTABLAdapterInstance.RopExpandRow(true, false, false);
                                        this.Manager.Checkpoint("MS-OXCTABL_R568");
                                        this.Manager.Checkpoint("MS-OXCTABL_R570");
                                        this.Manager.Comment("reaching state \'S757\'");
                                        this.Manager.Comment("checking step \'return RopExpandRow/ecNotFound\'");
                                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues.ecNotFound, temp42, "return of RopExpandRow, state S757");
                                        S04_ExpandRowRops_CollapseorExpandRow_TestSuiteS853();
                                        goto label12;
                                    }
                                    throw new InvalidOperationException("never reached");
                                label12:
;
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteRopQueryRowsResponseChecker5)));
                                }
                                goto label13;
                            }
                            throw new InvalidOperationException("never reached");
                        label13:
;
                            goto label18;
                        }
                        if ((temp57 == 1)) {
                            this.Manager.Comment("reaching state \'S141\'");
                            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp45;
                            this.Manager.Comment("executing step \'call RopQueryRows(Advance,True)\'");
                            temp45 = this.IMS_OXCTABLAdapterInstance.RopQueryRows(((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), true);
                            this.Manager.Checkpoint("MS-OXCTABL_R837");
                            this.Manager.Comment("reaching state \'S189\'");
                            this.Manager.Comment("checking step \'return RopQueryRows/success\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp45, "return of RopQueryRows, state S189");
                            this.Manager.Comment("reaching state \'S237\'");
                            bool temp46;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(610,out _)\'");
                            this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(610, out temp46);
                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp46);
                            this.Manager.Comment("reaching state \'S285\'");
                            int temp56 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteCheckRequirementEnabledChecker25)), new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteCheckRequirementEnabledChecker28)));
                            if ((temp56 == 0)) {
                                this.Manager.Comment("reaching state \'S336\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteRopQueryRowsResponseChecker6))) != -1)) {
                                    this.Manager.Comment("reaching state \'S432\'");
                                    bool temp47;
                                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(748,out _)\'");
                                    this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(748, out temp47);
                                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp47);
                                    this.Manager.Comment("reaching state \'S528\'");
                                    int temp51 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteCheckRequirementEnabledChecker26)), new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteCheckRequirementEnabledChecker27)));
                                    if ((temp51 == 0)) {
                                        this.Manager.Comment("reaching state \'S630\'");
                                        Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp48;
                                        this.Manager.Comment("executing step \'call RopExpandRow(False,False,False)\'");
                                        temp48 = this.IMS_OXCTABLAdapterInstance.RopExpandRow(false, false, false);
                                        this.Manager.Checkpoint("MS-OXCTABL_R568");
                                        this.Manager.Checkpoint("MS-OXCTABL_R567");
                                        this.Manager.Comment("reaching state \'S758\'");
                                        this.Manager.Comment("checking step \'return RopExpandRow/success\'");
                                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp48, "return of RopExpandRow, state S758");
                                        this.Manager.Comment("reaching state \'S854\'");
                                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopExpandRowResponseInfo, null, new RopExpandRowResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteRopExpandRowResponseChecker12))) != -1)) {
                                            this.Manager.Comment("reaching state \'S914\'");
                                        }
                                        else {
                                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopExpandRowResponseInfo, null, new RopExpandRowResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteRopExpandRowResponseChecker12)));
                                        }
                                        goto label15;
                                    }
                                    if ((temp51 == 1)) {
                                        this.Manager.Comment("reaching state \'S631\'");
                                        Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp49;
                                        this.Manager.Comment("executing step \'call RopExpandRow(False,False,False)\'");
                                        temp49 = this.IMS_OXCTABLAdapterInstance.RopExpandRow(false, false, false);
                                        this.Manager.Checkpoint("MS-OXCTABL_R568");
                                        this.Manager.Checkpoint("MS-OXCTABL_R567");
                                        this.Manager.Comment("reaching state \'S759\'");
                                        this.Manager.Comment("checking step \'return RopExpandRow/success\'");
                                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp49, "return of RopExpandRow, state S759");
                                        this.Manager.Comment("reaching state \'S855\'");
                                        int temp50 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopExpandRowResponseInfo, null, new RopExpandRowResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteRopExpandRowResponseChecker13)), new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopExpandRowResponseInfo, null, new RopExpandRowResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteRopExpandRowResponseChecker14)));
                                        if ((temp50 == 0)) {
                                            S04_ExpandRowRops_CollapseorExpandRow_TestSuiteS915();
                                            goto label14;
                                        }
                                        if ((temp50 == 1)) {
                                            S04_ExpandRowRops_CollapseorExpandRow_TestSuiteS915();
                                            goto label14;
                                        }
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopExpandRowResponseInfo, null, new RopExpandRowResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteRopExpandRowResponseChecker13)), new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopExpandRowResponseInfo, null, new RopExpandRowResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteRopExpandRowResponseChecker14)));
                                    label14:
;
                                        goto label15;
                                    }
                                    throw new InvalidOperationException("never reached");
                                label15:
;
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteRopQueryRowsResponseChecker6)));
                                }
                                goto label17;
                            }
                            if ((temp56 == 1)) {
                                this.Manager.Comment("reaching state \'S337\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteRopQueryRowsResponseChecker7))) != -1)) {
                                    this.Manager.Comment("reaching state \'S433\'");
                                    bool temp52;
                                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(748,out _)\'");
                                    this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(748, out temp52);
                                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp52);
                                    this.Manager.Comment("reaching state \'S529\'");
                                    int temp55 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteCheckRequirementEnabledChecker29)), new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteCheckRequirementEnabledChecker30)));
                                    if ((temp55 == 0)) {
                                        this.Manager.Comment("reaching state \'S632\'");
                                        Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp53;
                                        this.Manager.Comment("executing step \'call RopExpandRow(True,False,False)\'");
                                        temp53 = this.IMS_OXCTABLAdapterInstance.RopExpandRow(true, false, false);
                                        this.Manager.Checkpoint("MS-OXCTABL_R568");
                                        this.Manager.Checkpoint("MS-OXCTABL_R570");
                                        this.Manager.Comment("reaching state \'S760\'");
                                        this.Manager.Comment("checking step \'return RopExpandRow/ecNotFound\'");
                                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues.ecNotFound, temp53, "return of RopExpandRow, state S760");
                                        S04_ExpandRowRops_CollapseorExpandRow_TestSuiteS856();
                                        goto label16;
                                    }
                                    if ((temp55 == 1)) {
                                        this.Manager.Comment("reaching state \'S633\'");
                                        Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp54;
                                        this.Manager.Comment("executing step \'call RopExpandRow(True,False,False)\'");
                                        temp54 = this.IMS_OXCTABLAdapterInstance.RopExpandRow(true, false, false);
                                        this.Manager.Checkpoint("MS-OXCTABL_R568");
                                        this.Manager.Checkpoint("MS-OXCTABL_R570");
                                        this.Manager.Comment("reaching state \'S761\'");
                                        this.Manager.Comment("checking step \'return RopExpandRow/ecNotFound\'");
                                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues.ecNotFound, temp54, "return of RopExpandRow, state S761");
                                        S04_ExpandRowRops_CollapseorExpandRow_TestSuiteS857();
                                        goto label16;
                                    }
                                    throw new InvalidOperationException("never reached");
                                label16:
;
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteRopQueryRowsResponseChecker7)));
                                }
                                goto label17;
                            }
                            throw new InvalidOperationException("never reached");
                        label17:
;
                            goto label18;
                        }
                        throw new InvalidOperationException("never reached");
                    label18:
;
                        goto label19;
                    }
                    throw new InvalidOperationException("never reached");
                label19:
;
                    goto label37;
                }
                if ((temp111 == 1)) {
                    this.Manager.Comment("reaching state \'S67\'");
                    bool temp59;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(866,out _)\'");
                    this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(866, out temp59);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp59);
                    this.Manager.Comment("reaching state \'S79\'");
                    int temp110 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteCheckRequirementEnabledChecker32)), new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteCheckRequirementEnabledChecker47)));
                    if ((temp110 == 0)) {
                        this.Manager.Comment("reaching state \'S92\'");
                        bool temp60;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(867,out _)\'");
                        this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(867, out temp60);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp60);
                        this.Manager.Comment("reaching state \'S116\'");
                        int temp84 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteCheckRequirementEnabledChecker33)), new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteCheckRequirementEnabledChecker40)));
                        if ((temp84 == 0)) {
                            this.Manager.Comment("reaching state \'S142\'");
                            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp61;
                            this.Manager.Comment("executing step \'call RopQueryRows(Advance,True)\'");
                            temp61 = this.IMS_OXCTABLAdapterInstance.RopQueryRows(((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), true);
                            this.Manager.Checkpoint("MS-OXCTABL_R837");
                            this.Manager.Comment("reaching state \'S190\'");
                            this.Manager.Comment("checking step \'return RopQueryRows/success\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp61, "return of RopQueryRows, state S190");
                            this.Manager.Comment("reaching state \'S238\'");
                            bool temp62;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(610,out _)\'");
                            this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(610, out temp62);
                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp62);
                            this.Manager.Comment("reaching state \'S286\'");
                            int temp71 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteCheckRequirementEnabledChecker34)), new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteCheckRequirementEnabledChecker37)));
                            if ((temp71 == 0)) {
                                this.Manager.Comment("reaching state \'S338\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteRopQueryRowsResponseChecker8))) != -1)) {
                                    this.Manager.Comment("reaching state \'S434\'");
                                    bool temp63;
                                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(748,out _)\'");
                                    this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(748, out temp63);
                                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp63);
                                    this.Manager.Comment("reaching state \'S530\'");
                                    int temp66 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteCheckRequirementEnabledChecker35)), new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteCheckRequirementEnabledChecker36)));
                                    if ((temp66 == 0)) {
                                        this.Manager.Comment("reaching state \'S634\'");
                                        Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp64;
                                        this.Manager.Comment("executing step \'call RopExpandRow(True,False,False)\'");
                                        temp64 = this.IMS_OXCTABLAdapterInstance.RopExpandRow(true, false, false);
                                        this.Manager.Checkpoint("MS-OXCTABL_R568");
                                        this.Manager.Checkpoint("MS-OXCTABL_R570");
                                        this.Manager.Comment("reaching state \'S762\'");
                                        this.Manager.Comment("checking step \'return RopExpandRow/ecNotFound\'");
                                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues.ecNotFound, temp64, "return of RopExpandRow, state S762");
                                        S04_ExpandRowRops_CollapseorExpandRow_TestSuiteS858();
                                        goto label20;
                                    }
                                    if ((temp66 == 1)) {
                                        this.Manager.Comment("reaching state \'S635\'");
                                        Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp65;
                                        this.Manager.Comment("executing step \'call RopExpandRow(True,False,False)\'");
                                        temp65 = this.IMS_OXCTABLAdapterInstance.RopExpandRow(true, false, false);
                                        this.Manager.Checkpoint("MS-OXCTABL_R568");
                                        this.Manager.Checkpoint("MS-OXCTABL_R570");
                                        this.Manager.Comment("reaching state \'S763\'");
                                        this.Manager.Comment("checking step \'return RopExpandRow/ecNotFound\'");
                                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues.ecNotFound, temp65, "return of RopExpandRow, state S763");
                                        S04_ExpandRowRops_CollapseorExpandRow_TestSuiteS859();
                                        goto label20;
                                    }
                                    throw new InvalidOperationException("never reached");
                                label20:
;
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteRopQueryRowsResponseChecker8)));
                                }
                                goto label22;
                            }
                            if ((temp71 == 1)) {
                                this.Manager.Comment("reaching state \'S339\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteRopQueryRowsResponseChecker9))) != -1)) {
                                    this.Manager.Comment("reaching state \'S435\'");
                                    bool temp67;
                                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(748,out _)\'");
                                    this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(748, out temp67);
                                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp67);
                                    this.Manager.Comment("reaching state \'S531\'");
                                    int temp70 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteCheckRequirementEnabledChecker38)), new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteCheckRequirementEnabledChecker39)));
                                    if ((temp70 == 0)) {
                                        this.Manager.Comment("reaching state \'S636\'");
                                        Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp68;
                                        this.Manager.Comment("executing step \'call RopExpandRow(True,False,False)\'");
                                        temp68 = this.IMS_OXCTABLAdapterInstance.RopExpandRow(true, false, false);
                                        this.Manager.Checkpoint("MS-OXCTABL_R568");
                                        this.Manager.Checkpoint("MS-OXCTABL_R570");
                                        this.Manager.Comment("reaching state \'S764\'");
                                        this.Manager.Comment("checking step \'return RopExpandRow/ecNotFound\'");
                                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues.ecNotFound, temp68, "return of RopExpandRow, state S764");
                                        S04_ExpandRowRops_CollapseorExpandRow_TestSuiteS860();
                                        goto label21;
                                    }
                                    if ((temp70 == 1)) {
                                        this.Manager.Comment("reaching state \'S637\'");
                                        Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp69;
                                        this.Manager.Comment("executing step \'call RopExpandRow(True,False,False)\'");
                                        temp69 = this.IMS_OXCTABLAdapterInstance.RopExpandRow(true, false, false);
                                        this.Manager.Checkpoint("MS-OXCTABL_R568");
                                        this.Manager.Checkpoint("MS-OXCTABL_R570");
                                        this.Manager.Comment("reaching state \'S765\'");
                                        this.Manager.Comment("checking step \'return RopExpandRow/ecNotFound\'");
                                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues.ecNotFound, temp69, "return of RopExpandRow, state S765");
                                        S04_ExpandRowRops_CollapseorExpandRow_TestSuiteS861();
                                        goto label21;
                                    }
                                    throw new InvalidOperationException("never reached");
                                label21:
;
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteRopQueryRowsResponseChecker9)));
                                }
                                goto label22;
                            }
                            throw new InvalidOperationException("never reached");
                        label22:
;
                            goto label27;
                        }
                        if ((temp84 == 1)) {
                            this.Manager.Comment("reaching state \'S143\'");
                            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp72;
                            this.Manager.Comment("executing step \'call RopQueryRows(Advance,True)\'");
                            temp72 = this.IMS_OXCTABLAdapterInstance.RopQueryRows(((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), true);
                            this.Manager.Checkpoint("MS-OXCTABL_R837");
                            this.Manager.Comment("reaching state \'S191\'");
                            this.Manager.Comment("checking step \'return RopQueryRows/success\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp72, "return of RopQueryRows, state S191");
                            this.Manager.Comment("reaching state \'S239\'");
                            bool temp73;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(610,out _)\'");
                            this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(610, out temp73);
                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp73);
                            this.Manager.Comment("reaching state \'S287\'");
                            int temp83 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteCheckRequirementEnabledChecker41)), new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteCheckRequirementEnabledChecker44)));
                            if ((temp83 == 0)) {
                                this.Manager.Comment("reaching state \'S340\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteRopQueryRowsResponseChecker10))) != -1)) {
                                    this.Manager.Comment("reaching state \'S436\'");
                                    bool temp74;
                                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(748,out _)\'");
                                    this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(748, out temp74);
                                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp74);
                                    this.Manager.Comment("reaching state \'S532\'");
                                    int temp78 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteCheckRequirementEnabledChecker42)), new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteCheckRequirementEnabledChecker43)));
                                    if ((temp78 == 0)) {
                                        this.Manager.Comment("reaching state \'S638\'");
                                        Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp75;
                                        this.Manager.Comment("executing step \'call RopExpandRow(False,False,False)\'");
                                        temp75 = this.IMS_OXCTABLAdapterInstance.RopExpandRow(false, false, false);
                                        this.Manager.Checkpoint("MS-OXCTABL_R568");
                                        this.Manager.Checkpoint("MS-OXCTABL_R567");
                                        this.Manager.Comment("reaching state \'S766\'");
                                        this.Manager.Comment("checking step \'return RopExpandRow/success\'");
                                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp75, "return of RopExpandRow, state S766");
                                        this.Manager.Comment("reaching state \'S862\'");
                                        int temp76 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopExpandRowResponseInfo, null, new RopExpandRowResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteRopExpandRowResponseChecker15)), new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopExpandRowResponseInfo, null, new RopExpandRowResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteRopExpandRowResponseChecker16)));
                                        if ((temp76 == 0)) {
                                            S04_ExpandRowRops_CollapseorExpandRow_TestSuiteS916();
                                            goto label23;
                                        }
                                        if ((temp76 == 1)) {
                                            S04_ExpandRowRops_CollapseorExpandRow_TestSuiteS916();
                                            goto label23;
                                        }
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopExpandRowResponseInfo, null, new RopExpandRowResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteRopExpandRowResponseChecker15)), new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopExpandRowResponseInfo, null, new RopExpandRowResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteRopExpandRowResponseChecker16)));
                                    label23:
;
                                        goto label24;
                                    }
                                    if ((temp78 == 1)) {
                                        this.Manager.Comment("reaching state \'S639\'");
                                        Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp77;
                                        this.Manager.Comment("executing step \'call RopExpandRow(False,False,False)\'");
                                        temp77 = this.IMS_OXCTABLAdapterInstance.RopExpandRow(false, false, false);
                                        this.Manager.Checkpoint("MS-OXCTABL_R568");
                                        this.Manager.Checkpoint("MS-OXCTABL_R567");
                                        this.Manager.Comment("reaching state \'S767\'");
                                        this.Manager.Comment("checking step \'return RopExpandRow/success\'");
                                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp77, "return of RopExpandRow, state S767");
                                        this.Manager.Comment("reaching state \'S863\'");
                                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopExpandRowResponseInfo, null, new RopExpandRowResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteRopExpandRowResponseChecker17))) != -1)) {
                                            this.Manager.Comment("reaching state \'S917\'");
                                        }
                                        else {
                                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopExpandRowResponseInfo, null, new RopExpandRowResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteRopExpandRowResponseChecker17)));
                                        }
                                        goto label24;
                                    }
                                    throw new InvalidOperationException("never reached");
                                label24:
;
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteRopQueryRowsResponseChecker10)));
                                }
                                goto label26;
                            }
                            if ((temp83 == 1)) {
                                this.Manager.Comment("reaching state \'S341\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteRopQueryRowsResponseChecker11))) != -1)) {
                                    this.Manager.Comment("reaching state \'S437\'");
                                    bool temp79;
                                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(748,out _)\'");
                                    this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(748, out temp79);
                                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp79);
                                    this.Manager.Comment("reaching state \'S533\'");
                                    int temp82 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteCheckRequirementEnabledChecker45)), new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteCheckRequirementEnabledChecker46)));
                                    if ((temp82 == 0)) {
                                        this.Manager.Comment("reaching state \'S640\'");
                                        Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp80;
                                        this.Manager.Comment("executing step \'call RopExpandRow(True,False,False)\'");
                                        temp80 = this.IMS_OXCTABLAdapterInstance.RopExpandRow(true, false, false);
                                        this.Manager.Checkpoint("MS-OXCTABL_R568");
                                        this.Manager.Checkpoint("MS-OXCTABL_R570");
                                        this.Manager.Comment("reaching state \'S768\'");
                                        this.Manager.Comment("checking step \'return RopExpandRow/ecNotFound\'");
                                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues.ecNotFound, temp80, "return of RopExpandRow, state S768");
                                        S04_ExpandRowRops_CollapseorExpandRow_TestSuiteS864();
                                        goto label25;
                                    }
                                    if ((temp82 == 1)) {
                                        this.Manager.Comment("reaching state \'S641\'");
                                        Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp81;
                                        this.Manager.Comment("executing step \'call RopExpandRow(True,False,False)\'");
                                        temp81 = this.IMS_OXCTABLAdapterInstance.RopExpandRow(true, false, false);
                                        this.Manager.Checkpoint("MS-OXCTABL_R568");
                                        this.Manager.Checkpoint("MS-OXCTABL_R570");
                                        this.Manager.Comment("reaching state \'S769\'");
                                        this.Manager.Comment("checking step \'return RopExpandRow/ecNotFound\'");
                                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues.ecNotFound, temp81, "return of RopExpandRow, state S769");
                                        S04_ExpandRowRops_CollapseorExpandRow_TestSuiteS865();
                                        goto label25;
                                    }
                                    throw new InvalidOperationException("never reached");
                                label25:
;
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteRopQueryRowsResponseChecker11)));
                                }
                                goto label26;
                            }
                            throw new InvalidOperationException("never reached");
                        label26:
;
                            goto label27;
                        }
                        throw new InvalidOperationException("never reached");
                    label27:
;
                        goto label36;
                    }
                    if ((temp110 == 1)) {
                        this.Manager.Comment("reaching state \'S93\'");
                        bool temp85;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(867,out _)\'");
                        this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(867, out temp85);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp85);
                        this.Manager.Comment("reaching state \'S117\'");
                        int temp109 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteCheckRequirementEnabledChecker48)), new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteCheckRequirementEnabledChecker55)));
                        if ((temp109 == 0)) {
                            this.Manager.Comment("reaching state \'S144\'");
                            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp86;
                            this.Manager.Comment("executing step \'call RopQueryRows(Advance,True)\'");
                            temp86 = this.IMS_OXCTABLAdapterInstance.RopQueryRows(((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), true);
                            this.Manager.Checkpoint("MS-OXCTABL_R837");
                            this.Manager.Comment("reaching state \'S192\'");
                            this.Manager.Comment("checking step \'return RopQueryRows/success\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp86, "return of RopQueryRows, state S192");
                            this.Manager.Comment("reaching state \'S240\'");
                            bool temp87;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(610,out _)\'");
                            this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(610, out temp87);
                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp87);
                            this.Manager.Comment("reaching state \'S288\'");
                            int temp97 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteCheckRequirementEnabledChecker49)), new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteCheckRequirementEnabledChecker52)));
                            if ((temp97 == 0)) {
                                this.Manager.Comment("reaching state \'S342\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteRopQueryRowsResponseChecker12))) != -1)) {
                                    this.Manager.Comment("reaching state \'S438\'");
                                    bool temp88;
                                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(748,out _)\'");
                                    this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(748, out temp88);
                                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp88);
                                    this.Manager.Comment("reaching state \'S534\'");
                                    int temp92 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteCheckRequirementEnabledChecker50)), new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteCheckRequirementEnabledChecker51)));
                                    if ((temp92 == 0)) {
                                        this.Manager.Comment("reaching state \'S642\'");
                                        Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp89;
                                        this.Manager.Comment("executing step \'call RopExpandRow(False,False,False)\'");
                                        temp89 = this.IMS_OXCTABLAdapterInstance.RopExpandRow(false, false, false);
                                        this.Manager.Checkpoint("MS-OXCTABL_R568");
                                        this.Manager.Checkpoint("MS-OXCTABL_R567");
                                        this.Manager.Comment("reaching state \'S770\'");
                                        this.Manager.Comment("checking step \'return RopExpandRow/success\'");
                                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp89, "return of RopExpandRow, state S770");
                                        this.Manager.Comment("reaching state \'S866\'");
                                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopExpandRowResponseInfo, null, new RopExpandRowResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteRopExpandRowResponseChecker18))) != -1)) {
                                            this.Manager.Comment("reaching state \'S918\'");
                                        }
                                        else {
                                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopExpandRowResponseInfo, null, new RopExpandRowResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteRopExpandRowResponseChecker18)));
                                        }
                                        goto label29;
                                    }
                                    if ((temp92 == 1)) {
                                        this.Manager.Comment("reaching state \'S643\'");
                                        Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp90;
                                        this.Manager.Comment("executing step \'call RopExpandRow(False,False,False)\'");
                                        temp90 = this.IMS_OXCTABLAdapterInstance.RopExpandRow(false, false, false);
                                        this.Manager.Checkpoint("MS-OXCTABL_R568");
                                        this.Manager.Checkpoint("MS-OXCTABL_R567");
                                        this.Manager.Comment("reaching state \'S771\'");
                                        this.Manager.Comment("checking step \'return RopExpandRow/success\'");
                                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp90, "return of RopExpandRow, state S771");
                                        this.Manager.Comment("reaching state \'S867\'");
                                        int temp91 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopExpandRowResponseInfo, null, new RopExpandRowResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteRopExpandRowResponseChecker19)), new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopExpandRowResponseInfo, null, new RopExpandRowResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteRopExpandRowResponseChecker20)));
                                        if ((temp91 == 0)) {
                                            S04_ExpandRowRops_CollapseorExpandRow_TestSuiteS919();
                                            goto label28;
                                        }
                                        if ((temp91 == 1)) {
                                            S04_ExpandRowRops_CollapseorExpandRow_TestSuiteS919();
                                            goto label28;
                                        }
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopExpandRowResponseInfo, null, new RopExpandRowResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteRopExpandRowResponseChecker19)), new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopExpandRowResponseInfo, null, new RopExpandRowResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteRopExpandRowResponseChecker20)));
                                    label28:
;
                                        goto label29;
                                    }
                                    throw new InvalidOperationException("never reached");
                                label29:
;
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteRopQueryRowsResponseChecker12)));
                                }
                                goto label31;
                            }
                            if ((temp97 == 1)) {
                                this.Manager.Comment("reaching state \'S343\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteRopQueryRowsResponseChecker13))) != -1)) {
                                    this.Manager.Comment("reaching state \'S439\'");
                                    bool temp93;
                                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(748,out _)\'");
                                    this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(748, out temp93);
                                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp93);
                                    this.Manager.Comment("reaching state \'S535\'");
                                    int temp96 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteCheckRequirementEnabledChecker53)), new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteCheckRequirementEnabledChecker54)));
                                    if ((temp96 == 0)) {
                                        this.Manager.Comment("reaching state \'S644\'");
                                        Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp94;
                                        this.Manager.Comment("executing step \'call RopExpandRow(True,False,False)\'");
                                        temp94 = this.IMS_OXCTABLAdapterInstance.RopExpandRow(true, false, false);
                                        this.Manager.Checkpoint("MS-OXCTABL_R568");
                                        this.Manager.Checkpoint("MS-OXCTABL_R570");
                                        this.Manager.Comment("reaching state \'S772\'");
                                        this.Manager.Comment("checking step \'return RopExpandRow/ecNotFound\'");
                                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues.ecNotFound, temp94, "return of RopExpandRow, state S772");
                                        S04_ExpandRowRops_CollapseorExpandRow_TestSuiteS868();
                                        goto label30;
                                    }
                                    if ((temp96 == 1)) {
                                        this.Manager.Comment("reaching state \'S645\'");
                                        Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp95;
                                        this.Manager.Comment("executing step \'call RopExpandRow(True,False,False)\'");
                                        temp95 = this.IMS_OXCTABLAdapterInstance.RopExpandRow(true, false, false);
                                        this.Manager.Checkpoint("MS-OXCTABL_R568");
                                        this.Manager.Checkpoint("MS-OXCTABL_R570");
                                        this.Manager.Comment("reaching state \'S773\'");
                                        this.Manager.Comment("checking step \'return RopExpandRow/ecNotFound\'");
                                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues.ecNotFound, temp95, "return of RopExpandRow, state S773");
                                        S04_ExpandRowRops_CollapseorExpandRow_TestSuiteS869();
                                        goto label30;
                                    }
                                    throw new InvalidOperationException("never reached");
                                label30:
;
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteRopQueryRowsResponseChecker13)));
                                }
                                goto label31;
                            }
                            throw new InvalidOperationException("never reached");
                        label31:
;
                            goto label35;
                        }
                        if ((temp109 == 1)) {
                            this.Manager.Comment("reaching state \'S145\'");
                            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp98;
                            this.Manager.Comment("executing step \'call RopQueryRows(Advance,True)\'");
                            temp98 = this.IMS_OXCTABLAdapterInstance.RopQueryRows(((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), true);
                            this.Manager.Checkpoint("MS-OXCTABL_R837");
                            this.Manager.Comment("reaching state \'S193\'");
                            this.Manager.Comment("checking step \'return RopQueryRows/success\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp98, "return of RopQueryRows, state S193");
                            this.Manager.Comment("reaching state \'S241\'");
                            bool temp99;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(610,out _)\'");
                            this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(610, out temp99);
                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp99);
                            this.Manager.Comment("reaching state \'S289\'");
                            int temp108 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteCheckRequirementEnabledChecker56)), new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteCheckRequirementEnabledChecker59)));
                            if ((temp108 == 0)) {
                                this.Manager.Comment("reaching state \'S344\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteRopQueryRowsResponseChecker14))) != -1)) {
                                    this.Manager.Comment("reaching state \'S440\'");
                                    bool temp100;
                                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(748,out _)\'");
                                    this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(748, out temp100);
                                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp100);
                                    this.Manager.Comment("reaching state \'S536\'");
                                    int temp103 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteCheckRequirementEnabledChecker57)), new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteCheckRequirementEnabledChecker58)));
                                    if ((temp103 == 0)) {
                                        this.Manager.Comment("reaching state \'S646\'");
                                        Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp101;
                                        this.Manager.Comment("executing step \'call RopExpandRow(False,True,False)\'");
                                        temp101 = this.IMS_OXCTABLAdapterInstance.RopExpandRow(false, true, false);
                                        this.Manager.Checkpoint("MS-OXCTABL_R568");
                                        this.Manager.Checkpoint("MS-OXCTABL_R571");
                                        this.Manager.Comment("reaching state \'S774\'");
                                        this.Manager.Comment("checking step \'return RopExpandRow/ecNotCollapsed\'");
                                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues.ecNotCollapsed, temp101, "return of RopExpandRow, state S774");
                                        S04_ExpandRowRops_CollapseorExpandRow_TestSuiteS870();
                                        goto label32;
                                    }
                                    if ((temp103 == 1)) {
                                        this.Manager.Comment("reaching state \'S647\'");
                                        Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp102;
                                        this.Manager.Comment("executing step \'call RopExpandRow(False,True,False)\'");
                                        temp102 = this.IMS_OXCTABLAdapterInstance.RopExpandRow(false, true, false);
                                        this.Manager.Checkpoint("MS-OXCTABL_R568");
                                        this.Manager.Checkpoint("MS-OXCTABL_R571");
                                        this.Manager.Comment("reaching state \'S775\'");
                                        this.Manager.Comment("checking step \'return RopExpandRow/ecNotCollapsed\'");
                                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues.ecNotCollapsed, temp102, "return of RopExpandRow, state S775");
                                        S04_ExpandRowRops_CollapseorExpandRow_TestSuiteS871();
                                        goto label32;
                                    }
                                    throw new InvalidOperationException("never reached");
                                label32:
;
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteRopQueryRowsResponseChecker14)));
                                }
                                goto label34;
                            }
                            if ((temp108 == 1)) {
                                this.Manager.Comment("reaching state \'S345\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteRopQueryRowsResponseChecker15))) != -1)) {
                                    this.Manager.Comment("reaching state \'S441\'");
                                    bool temp104;
                                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(748,out _)\'");
                                    this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(748, out temp104);
                                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp104);
                                    this.Manager.Comment("reaching state \'S537\'");
                                    int temp107 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteCheckRequirementEnabledChecker60)), new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteCheckRequirementEnabledChecker61)));
                                    if ((temp107 == 0)) {
                                        this.Manager.Comment("reaching state \'S648\'");
                                        Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp105;
                                        this.Manager.Comment("executing step \'call RopExpandRow(True,False,False)\'");
                                        temp105 = this.IMS_OXCTABLAdapterInstance.RopExpandRow(true, false, false);
                                        this.Manager.Checkpoint("MS-OXCTABL_R568");
                                        this.Manager.Checkpoint("MS-OXCTABL_R570");
                                        this.Manager.Comment("reaching state \'S776\'");
                                        this.Manager.Comment("checking step \'return RopExpandRow/ecNotFound\'");
                                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues.ecNotFound, temp105, "return of RopExpandRow, state S776");
                                        S04_ExpandRowRops_CollapseorExpandRow_TestSuiteS872();
                                        goto label33;
                                    }
                                    if ((temp107 == 1)) {
                                        this.Manager.Comment("reaching state \'S649\'");
                                        Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp106;
                                        this.Manager.Comment("executing step \'call RopExpandRow(True,False,False)\'");
                                        temp106 = this.IMS_OXCTABLAdapterInstance.RopExpandRow(true, false, false);
                                        this.Manager.Checkpoint("MS-OXCTABL_R568");
                                        this.Manager.Checkpoint("MS-OXCTABL_R570");
                                        this.Manager.Comment("reaching state \'S777\'");
                                        this.Manager.Comment("checking step \'return RopExpandRow/ecNotFound\'");
                                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues.ecNotFound, temp106, "return of RopExpandRow, state S777");
                                        S04_ExpandRowRops_CollapseorExpandRow_TestSuiteS873();
                                        goto label33;
                                    }
                                    throw new InvalidOperationException("never reached");
                                label33:
;
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteRopQueryRowsResponseChecker15)));
                                }
                                goto label34;
                            }
                            throw new InvalidOperationException("never reached");
                        label34:
;
                            goto label35;
                        }
                        throw new InvalidOperationException("never reached");
                    label35:
;
                        goto label36;
                    }
                    throw new InvalidOperationException("never reached");
                label36:
;
                    goto label37;
                }
                throw new InvalidOperationException("never reached");
            label37:
;
                goto label38;
            }
            throw new InvalidOperationException("never reached");
        label38:
;
            this.Manager.EndTest();
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteCheckMAPIHTTPTransportSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S1");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteCheckMAPIHTTPTransportSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S1");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteCheckRequirementEnabledChecker(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S60");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteCheckRequirementEnabledChecker1(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S78");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteCheckRequirementEnabledChecker2(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S114");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteCheckRequirementEnabledChecker3(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S282");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteRopQueryRowsResponseChecker(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SETCOLUMNS,True,True" +
                    ",True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S330");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S330");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S330");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S330");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S330");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S330");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S330");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S330");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S330");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S330");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R472, MS-OXCTABL_R427, MS-OXCTABL_R42" +
                        "6, MS-OXCTABL_R116, MS-OXCTABL_R610");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R472");
            this.Manager.Checkpoint("MS-OXCTABL_R427");
            this.Manager.Checkpoint("MS-OXCTABL_R426");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R610");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteCheckRequirementEnabledChecker4(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S522");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteRopExpandRowResponseChecker(bool isLastSetColumnData) {
            this.Manager.Comment("checking step \'event RopExpandRowResponse(True)\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isLastSetColumnData, "isLastSetColumnData of RopExpandRowResponse, state S842");
        }
        
        private void S04_ExpandRowRops_CollapseorExpandRow_TestSuiteS906() {
            this.Manager.Comment("reaching state \'S906\'");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteRopExpandRowResponseChecker1(bool isLastSetColumnData) {
            this.Manager.Comment("checking step \'event RopExpandRowResponse(False)\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isLastSetColumnData, "isLastSetColumnData of RopExpandRowResponse, state S842");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteCheckRequirementEnabledChecker5(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S522");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteRopExpandRowResponseChecker2(bool isLastSetColumnData) {
            this.Manager.Comment("checking step \'event RopExpandRowResponse(True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isLastSetColumnData, "isLastSetColumnData of RopExpandRowResponse, state S843");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R814, MS-OXCTABL_R825");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R814");
            this.Manager.Checkpoint("MS-OXCTABL_R825");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteCheckRequirementEnabledChecker6(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S282");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteRopQueryRowsResponseChecker1(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SETCOLUMNS,True,True" +
                    ",True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S331");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S331");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S331");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S331");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S331");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S331");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S331");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S331");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S331");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S331");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R472, MS-OXCTABL_R427, MS-OXCTABL_R42" +
                        "6, MS-OXCTABL_R116");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R472");
            this.Manager.Checkpoint("MS-OXCTABL_R427");
            this.Manager.Checkpoint("MS-OXCTABL_R426");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteCheckRequirementEnabledChecker7(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S523");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteRopExpandRowResponseChecker3(bool isLastSetColumnData) {
            this.Manager.Comment("checking step \'event RopExpandRowResponse(True)\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isLastSetColumnData, "isLastSetColumnData of RopExpandRowResponse, state S844");
        }
        
        private void S04_ExpandRowRops_CollapseorExpandRow_TestSuiteS908() {
            this.Manager.Comment("reaching state \'S908\'");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteRopExpandRowResponseChecker4(bool isLastSetColumnData) {
            this.Manager.Comment("checking step \'event RopExpandRowResponse(False)\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isLastSetColumnData, "isLastSetColumnData of RopExpandRowResponse, state S844");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteCheckRequirementEnabledChecker8(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S523");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteRopExpandRowResponseChecker5(bool isLastSetColumnData) {
            this.Manager.Comment("checking step \'event RopExpandRowResponse(True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isLastSetColumnData, "isLastSetColumnData of RopExpandRowResponse, state S845");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R814, MS-OXCTABL_R825");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R814");
            this.Manager.Checkpoint("MS-OXCTABL_R825");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteCheckRequirementEnabledChecker9(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S114");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteCheckRequirementEnabledChecker10(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S283");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteRopQueryRowsResponseChecker2(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SETCOLUMNS,True,True" +
                    ",True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S332");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S332");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S332");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S332");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S332");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S332");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S332");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S332");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S332");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S332");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R472, MS-OXCTABL_R427, MS-OXCTABL_R42" +
                        "6, MS-OXCTABL_R116, MS-OXCTABL_R610");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R472");
            this.Manager.Checkpoint("MS-OXCTABL_R427");
            this.Manager.Checkpoint("MS-OXCTABL_R426");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R610");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteCheckRequirementEnabledChecker11(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S524");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteRopExpandRowResponseChecker6(bool isLastSetColumnData) {
            this.Manager.Comment("checking step \'event RopExpandRowResponse(True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isLastSetColumnData, "isLastSetColumnData of RopExpandRowResponse, state S846");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R814, MS-OXCTABL_R825");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R814");
            this.Manager.Checkpoint("MS-OXCTABL_R825");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteCheckRequirementEnabledChecker12(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S524");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteRopExpandRowResponseChecker7(bool isLastSetColumnData) {
            this.Manager.Comment("checking step \'event RopExpandRowResponse(True)\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isLastSetColumnData, "isLastSetColumnData of RopExpandRowResponse, state S847");
        }
        
        private void S04_ExpandRowRops_CollapseorExpandRow_TestSuiteS911() {
            this.Manager.Comment("reaching state \'S911\'");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteRopExpandRowResponseChecker8(bool isLastSetColumnData) {
            this.Manager.Comment("checking step \'event RopExpandRowResponse(False)\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isLastSetColumnData, "isLastSetColumnData of RopExpandRowResponse, state S847");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteCheckRequirementEnabledChecker13(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S283");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteRopQueryRowsResponseChecker3(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SETCOLUMNS,True,True" +
                    ",True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S333");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S333");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S333");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S333");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S333");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S333");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S333");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S333");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S333");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S333");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R472, MS-OXCTABL_R427, MS-OXCTABL_R42" +
                        "6, MS-OXCTABL_R116");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R472");
            this.Manager.Checkpoint("MS-OXCTABL_R427");
            this.Manager.Checkpoint("MS-OXCTABL_R426");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteCheckRequirementEnabledChecker14(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S525");
        }
        
        private void S04_ExpandRowRops_CollapseorExpandRow_TestSuiteS848() {
            this.Manager.Comment("reaching state \'S848\'");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteCheckRequirementEnabledChecker15(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S525");
        }
        
        private void S04_ExpandRowRops_CollapseorExpandRow_TestSuiteS849() {
            this.Manager.Comment("reaching state \'S849\'");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteCheckRequirementEnabledChecker16(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S78");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteCheckRequirementEnabledChecker17(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S115");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteCheckRequirementEnabledChecker18(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S284");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteRopQueryRowsResponseChecker4(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SETCOLUMNS,True,True" +
                    ",True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S334");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S334");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S334");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S334");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S334");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S334");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S334");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S334");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S334");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S334");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R472, MS-OXCTABL_R427, MS-OXCTABL_R42" +
                        "6, MS-OXCTABL_R116");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R472");
            this.Manager.Checkpoint("MS-OXCTABL_R427");
            this.Manager.Checkpoint("MS-OXCTABL_R426");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteCheckRequirementEnabledChecker19(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S526");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteRopExpandRowResponseChecker9(bool isLastSetColumnData) {
            this.Manager.Comment("checking step \'event RopExpandRowResponse(True)\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isLastSetColumnData, "isLastSetColumnData of RopExpandRowResponse, state S850");
        }
        
        private void S04_ExpandRowRops_CollapseorExpandRow_TestSuiteS912() {
            this.Manager.Comment("reaching state \'S912\'");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteRopExpandRowResponseChecker10(bool isLastSetColumnData) {
            this.Manager.Comment("checking step \'event RopExpandRowResponse(False)\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isLastSetColumnData, "isLastSetColumnData of RopExpandRowResponse, state S850");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteCheckRequirementEnabledChecker20(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S526");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteRopExpandRowResponseChecker11(bool isLastSetColumnData) {
            this.Manager.Comment("checking step \'event RopExpandRowResponse(True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isLastSetColumnData, "isLastSetColumnData of RopExpandRowResponse, state S851");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R814, MS-OXCTABL_R825");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R814");
            this.Manager.Checkpoint("MS-OXCTABL_R825");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteCheckRequirementEnabledChecker21(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S284");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteRopQueryRowsResponseChecker5(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SETCOLUMNS,True,True" +
                    ",True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S335");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S335");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S335");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S335");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S335");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S335");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S335");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S335");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S335");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S335");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R472, MS-OXCTABL_R427, MS-OXCTABL_R42" +
                        "6, MS-OXCTABL_R116, MS-OXCTABL_R610");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R472");
            this.Manager.Checkpoint("MS-OXCTABL_R427");
            this.Manager.Checkpoint("MS-OXCTABL_R426");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R610");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteCheckRequirementEnabledChecker22(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S527");
        }
        
        private void S04_ExpandRowRops_CollapseorExpandRow_TestSuiteS852() {
            this.Manager.Comment("reaching state \'S852\'");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteCheckRequirementEnabledChecker23(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S527");
        }
        
        private void S04_ExpandRowRops_CollapseorExpandRow_TestSuiteS853() {
            this.Manager.Comment("reaching state \'S853\'");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteCheckRequirementEnabledChecker24(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S115");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteCheckRequirementEnabledChecker25(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S285");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteRopQueryRowsResponseChecker6(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SETCOLUMNS,True,True" +
                    ",True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S336");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S336");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S336");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S336");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S336");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S336");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S336");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S336");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S336");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S336");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R472, MS-OXCTABL_R427, MS-OXCTABL_R42" +
                        "6, MS-OXCTABL_R116");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R472");
            this.Manager.Checkpoint("MS-OXCTABL_R427");
            this.Manager.Checkpoint("MS-OXCTABL_R426");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteCheckRequirementEnabledChecker26(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S528");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteRopExpandRowResponseChecker12(bool isLastSetColumnData) {
            this.Manager.Comment("checking step \'event RopExpandRowResponse(True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isLastSetColumnData, "isLastSetColumnData of RopExpandRowResponse, state S854");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R814, MS-OXCTABL_R825");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R814");
            this.Manager.Checkpoint("MS-OXCTABL_R825");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteCheckRequirementEnabledChecker27(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S528");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteRopExpandRowResponseChecker13(bool isLastSetColumnData) {
            this.Manager.Comment("checking step \'event RopExpandRowResponse(True)\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isLastSetColumnData, "isLastSetColumnData of RopExpandRowResponse, state S855");
        }
        
        private void S04_ExpandRowRops_CollapseorExpandRow_TestSuiteS915() {
            this.Manager.Comment("reaching state \'S915\'");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteRopExpandRowResponseChecker14(bool isLastSetColumnData) {
            this.Manager.Comment("checking step \'event RopExpandRowResponse(False)\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isLastSetColumnData, "isLastSetColumnData of RopExpandRowResponse, state S855");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteCheckRequirementEnabledChecker28(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S285");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteRopQueryRowsResponseChecker7(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SETCOLUMNS,True,True" +
                    ",True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S337");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S337");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S337");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S337");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S337");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S337");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S337");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S337");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S337");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S337");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R472, MS-OXCTABL_R427, MS-OXCTABL_R42" +
                        "6, MS-OXCTABL_R116, MS-OXCTABL_R610");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R472");
            this.Manager.Checkpoint("MS-OXCTABL_R427");
            this.Manager.Checkpoint("MS-OXCTABL_R426");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R610");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteCheckRequirementEnabledChecker29(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S529");
        }
        
        private void S04_ExpandRowRops_CollapseorExpandRow_TestSuiteS856() {
            this.Manager.Comment("reaching state \'S856\'");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteCheckRequirementEnabledChecker30(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S529");
        }
        
        private void S04_ExpandRowRops_CollapseorExpandRow_TestSuiteS857() {
            this.Manager.Comment("reaching state \'S857\'");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteCheckRequirementEnabledChecker31(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S60");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteCheckRequirementEnabledChecker32(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S79");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteCheckRequirementEnabledChecker33(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S116");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteCheckRequirementEnabledChecker34(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S286");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteRopQueryRowsResponseChecker8(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SETCOLUMNS,True,True" +
                    ",True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S338");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S338");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S338");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S338");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S338");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S338");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S338");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S338");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S338");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S338");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R472, MS-OXCTABL_R427, MS-OXCTABL_R42" +
                        "6, MS-OXCTABL_R116");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R472");
            this.Manager.Checkpoint("MS-OXCTABL_R427");
            this.Manager.Checkpoint("MS-OXCTABL_R426");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteCheckRequirementEnabledChecker35(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S530");
        }
        
        private void S04_ExpandRowRops_CollapseorExpandRow_TestSuiteS858() {
            this.Manager.Comment("reaching state \'S858\'");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteCheckRequirementEnabledChecker36(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S530");
        }
        
        private void S04_ExpandRowRops_CollapseorExpandRow_TestSuiteS859() {
            this.Manager.Comment("reaching state \'S859\'");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteCheckRequirementEnabledChecker37(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S286");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteRopQueryRowsResponseChecker9(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SETCOLUMNS,True,True" +
                    ",True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S339");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S339");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S339");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S339");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S339");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S339");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S339");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S339");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S339");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S339");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R472, MS-OXCTABL_R427, MS-OXCTABL_R42" +
                        "6, MS-OXCTABL_R116, MS-OXCTABL_R610");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R472");
            this.Manager.Checkpoint("MS-OXCTABL_R427");
            this.Manager.Checkpoint("MS-OXCTABL_R426");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R610");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteCheckRequirementEnabledChecker38(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S531");
        }
        
        private void S04_ExpandRowRops_CollapseorExpandRow_TestSuiteS860() {
            this.Manager.Comment("reaching state \'S860\'");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteCheckRequirementEnabledChecker39(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S531");
        }
        
        private void S04_ExpandRowRops_CollapseorExpandRow_TestSuiteS861() {
            this.Manager.Comment("reaching state \'S861\'");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteCheckRequirementEnabledChecker40(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S116");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteCheckRequirementEnabledChecker41(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S287");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteRopQueryRowsResponseChecker10(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SETCOLUMNS,True,True" +
                    ",True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S340");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S340");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S340");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S340");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S340");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S340");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S340");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S340");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S340");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S340");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R472, MS-OXCTABL_R427, MS-OXCTABL_R42" +
                        "6, MS-OXCTABL_R116");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R472");
            this.Manager.Checkpoint("MS-OXCTABL_R427");
            this.Manager.Checkpoint("MS-OXCTABL_R426");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteCheckRequirementEnabledChecker42(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S532");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteRopExpandRowResponseChecker15(bool isLastSetColumnData) {
            this.Manager.Comment("checking step \'event RopExpandRowResponse(True)\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isLastSetColumnData, "isLastSetColumnData of RopExpandRowResponse, state S862");
        }
        
        private void S04_ExpandRowRops_CollapseorExpandRow_TestSuiteS916() {
            this.Manager.Comment("reaching state \'S916\'");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteRopExpandRowResponseChecker16(bool isLastSetColumnData) {
            this.Manager.Comment("checking step \'event RopExpandRowResponse(False)\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isLastSetColumnData, "isLastSetColumnData of RopExpandRowResponse, state S862");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteCheckRequirementEnabledChecker43(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S532");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteRopExpandRowResponseChecker17(bool isLastSetColumnData) {
            this.Manager.Comment("checking step \'event RopExpandRowResponse(True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isLastSetColumnData, "isLastSetColumnData of RopExpandRowResponse, state S863");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R814, MS-OXCTABL_R825");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R814");
            this.Manager.Checkpoint("MS-OXCTABL_R825");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteCheckRequirementEnabledChecker44(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S287");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteRopQueryRowsResponseChecker11(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SETCOLUMNS,True,True" +
                    ",True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S341");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S341");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S341");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S341");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S341");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S341");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S341");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S341");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S341");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S341");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R472, MS-OXCTABL_R427, MS-OXCTABL_R42" +
                        "6, MS-OXCTABL_R116, MS-OXCTABL_R610");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R472");
            this.Manager.Checkpoint("MS-OXCTABL_R427");
            this.Manager.Checkpoint("MS-OXCTABL_R426");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R610");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteCheckRequirementEnabledChecker45(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S533");
        }
        
        private void S04_ExpandRowRops_CollapseorExpandRow_TestSuiteS864() {
            this.Manager.Comment("reaching state \'S864\'");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteCheckRequirementEnabledChecker46(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S533");
        }
        
        private void S04_ExpandRowRops_CollapseorExpandRow_TestSuiteS865() {
            this.Manager.Comment("reaching state \'S865\'");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteCheckRequirementEnabledChecker47(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S79");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteCheckRequirementEnabledChecker48(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S117");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteCheckRequirementEnabledChecker49(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S288");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteRopQueryRowsResponseChecker12(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SETCOLUMNS,True,True" +
                    ",True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S342");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S342");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S342");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S342");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S342");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S342");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S342");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S342");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S342");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S342");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R472, MS-OXCTABL_R427, MS-OXCTABL_R42" +
                        "6, MS-OXCTABL_R116, MS-OXCTABL_R610");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R472");
            this.Manager.Checkpoint("MS-OXCTABL_R427");
            this.Manager.Checkpoint("MS-OXCTABL_R426");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R610");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteCheckRequirementEnabledChecker50(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S534");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteRopExpandRowResponseChecker18(bool isLastSetColumnData) {
            this.Manager.Comment("checking step \'event RopExpandRowResponse(True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isLastSetColumnData, "isLastSetColumnData of RopExpandRowResponse, state S866");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R814, MS-OXCTABL_R825");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R814");
            this.Manager.Checkpoint("MS-OXCTABL_R825");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteCheckRequirementEnabledChecker51(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S534");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteRopExpandRowResponseChecker19(bool isLastSetColumnData) {
            this.Manager.Comment("checking step \'event RopExpandRowResponse(True)\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isLastSetColumnData, "isLastSetColumnData of RopExpandRowResponse, state S867");
        }
        
        private void S04_ExpandRowRops_CollapseorExpandRow_TestSuiteS919() {
            this.Manager.Comment("reaching state \'S919\'");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteRopExpandRowResponseChecker20(bool isLastSetColumnData) {
            this.Manager.Comment("checking step \'event RopExpandRowResponse(False)\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isLastSetColumnData, "isLastSetColumnData of RopExpandRowResponse, state S867");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteCheckRequirementEnabledChecker52(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S288");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteRopQueryRowsResponseChecker13(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SETCOLUMNS,True,True" +
                    ",True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S343");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S343");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S343");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S343");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S343");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S343");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S343");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S343");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S343");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S343");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R472, MS-OXCTABL_R427, MS-OXCTABL_R42" +
                        "6, MS-OXCTABL_R116");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R472");
            this.Manager.Checkpoint("MS-OXCTABL_R427");
            this.Manager.Checkpoint("MS-OXCTABL_R426");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteCheckRequirementEnabledChecker53(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S535");
        }
        
        private void S04_ExpandRowRops_CollapseorExpandRow_TestSuiteS868() {
            this.Manager.Comment("reaching state \'S868\'");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteCheckRequirementEnabledChecker54(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S535");
        }
        
        private void S04_ExpandRowRops_CollapseorExpandRow_TestSuiteS869() {
            this.Manager.Comment("reaching state \'S869\'");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteCheckRequirementEnabledChecker55(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S117");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteCheckRequirementEnabledChecker56(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S289");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteRopQueryRowsResponseChecker14(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SETCOLUMNS,True,True" +
                    ",True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S344");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S344");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S344");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S344");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S344");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S344");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S344");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S344");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S344");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S344");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R472, MS-OXCTABL_R427, MS-OXCTABL_R42" +
                        "6, MS-OXCTABL_R116, MS-OXCTABL_R610");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R472");
            this.Manager.Checkpoint("MS-OXCTABL_R427");
            this.Manager.Checkpoint("MS-OXCTABL_R426");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R610");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteCheckRequirementEnabledChecker57(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S536");
        }
        
        private void S04_ExpandRowRops_CollapseorExpandRow_TestSuiteS870() {
            this.Manager.Comment("reaching state \'S870\'");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteCheckRequirementEnabledChecker58(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S536");
        }
        
        private void S04_ExpandRowRops_CollapseorExpandRow_TestSuiteS871() {
            this.Manager.Comment("reaching state \'S871\'");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteCheckRequirementEnabledChecker59(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S289");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteRopQueryRowsResponseChecker15(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SETCOLUMNS,True,True" +
                    ",True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S345");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S345");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S345");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S345");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S345");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S345");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S345");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S345");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S345");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S345");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R472, MS-OXCTABL_R427, MS-OXCTABL_R42" +
                        "6, MS-OXCTABL_R116");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R472");
            this.Manager.Checkpoint("MS-OXCTABL_R427");
            this.Manager.Checkpoint("MS-OXCTABL_R426");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteCheckRequirementEnabledChecker60(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S537");
        }
        
        private void S04_ExpandRowRops_CollapseorExpandRow_TestSuiteS872() {
            this.Manager.Comment("reaching state \'S872\'");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuiteCheckRequirementEnabledChecker61(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S537");
        }
        
        private void S04_ExpandRowRops_CollapseorExpandRow_TestSuiteS873() {
            this.Manager.Comment("reaching state \'S873\'");
        }
        #endregion
        
        #region Test Starting in S10
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite1() {
            this.Manager.BeginTest("MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite1");
            this.Manager.Comment("reaching state \'S10\'");
            bool temp113;
            this.Manager.Comment("executing step \'call CheckMAPIHTTPTransportSupported(out _)\'");
            this.IMS_OXCTABLAdapterInstance.CheckMAPIHTTPTransportSupported(out temp113);
            this.Manager.AddReturn(CheckMAPIHTTPTransportSupportedInfo, null, temp113);
            this.Manager.Comment("reaching state \'S11\'");
            int temp223 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite1CheckMAPIHTTPTransportSupportedChecker)), new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite1CheckMAPIHTTPTransportSupportedChecker1)));
            if ((temp223 == 0)) {
                this.Manager.Comment("reaching state \'S22\'");
                this.Manager.Comment("executing step \'call InitializeTable(CONTENT_TABLE)\'");
                this.IMS_OXCTABLAdapterInstance.InitializeTable(((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableType)(0)));
                this.Manager.Comment("reaching state \'S29\'");
                this.Manager.Comment("checking step \'return InitializeTable\'");
                this.Manager.Comment("reaching state \'S35\'");
                Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp114;
                this.Manager.Comment("executing step \'call RopSortTable(1,True,False,True,True,True,False,False)\'");
                temp114 = this.IMS_OXCTABLAdapterInstance.RopSortTable(1u, true, false, true, true, true, false, false);
                this.Manager.Checkpoint("MS-OXCTABL_R447");
                this.Manager.Comment("reaching state \'S41\'");
                this.Manager.Comment("checking step \'return RopSortTable/success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp114, "return of RopSortTable, state S41");
                this.Manager.Comment("reaching state \'S47\'");
                Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp115;
                this.Manager.Comment("executing step \'call RopSetColumns(1,False,False,False)\'");
                temp115 = this.IMS_OXCTABLAdapterInstance.RopSetColumns(1u, false, false, false);
                this.Manager.Checkpoint("MS-OXCTABL_R831");
                this.Manager.Checkpoint("MS-OXCTABL_R45");
                this.Manager.Comment("reaching state \'S53\'");
                this.Manager.Comment("checking step \'return RopSetColumns/success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp115, "return of RopSetColumns, state S53");
                this.Manager.Comment("reaching state \'S59\'");
                bool temp116;
                this.Manager.Comment("executing step \'call CheckRequirementEnabled(768,out _)\'");
                this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(768, out temp116);
                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp116);
                this.Manager.Comment("reaching state \'S65\'");
                int temp222 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite1CheckRequirementEnabledChecker)), new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite1CheckRequirementEnabledChecker31)));
                if ((temp222 == 0)) {
                    this.Manager.Comment("reaching state \'S76\'");
                    bool temp117;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(866,out _)\'");
                    this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(866, out temp117);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp117);
                    this.Manager.Comment("reaching state \'S88\'");
                    int temp169 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite1CheckRequirementEnabledChecker1)), new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite1CheckRequirementEnabledChecker16)));
                    if ((temp169 == 0)) {
                        this.Manager.Comment("reaching state \'S110\'");
                        bool temp118;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(867,out _)\'");
                        this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(867, out temp118);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp118);
                        this.Manager.Comment("reaching state \'S134\'");
                        int temp142 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite1CheckRequirementEnabledChecker2)), new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite1CheckRequirementEnabledChecker9)));
                        if ((temp142 == 0)) {
                            this.Manager.Comment("reaching state \'S178\'");
                            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp119;
                            this.Manager.Comment("executing step \'call RopQueryRows(Advance,True)\'");
                            temp119 = this.IMS_OXCTABLAdapterInstance.RopQueryRows(((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), true);
                            this.Manager.Checkpoint("MS-OXCTABL_R837");
                            this.Manager.Comment("reaching state \'S226\'");
                            this.Manager.Comment("checking step \'return RopQueryRows/success\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp119, "return of RopQueryRows, state S226");
                            this.Manager.Comment("reaching state \'S274\'");
                            bool temp120;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(610,out _)\'");
                            this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(610, out temp120);
                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp120);
                            this.Manager.Comment("reaching state \'S322\'");
                            int temp129 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite1CheckRequirementEnabledChecker3)), new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite1CheckRequirementEnabledChecker6)));
                            if ((temp129 == 0)) {
                                this.Manager.Comment("reaching state \'S410\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite1RopQueryRowsResponseChecker))) != -1)) {
                                    this.Manager.Comment("reaching state \'S506\'");
                                    bool temp121;
                                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(748,out _)\'");
                                    this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(748, out temp121);
                                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp121);
                                    this.Manager.Comment("reaching state \'S602\'");
                                    int temp124 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite1CheckRequirementEnabledChecker4)), new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite1CheckRequirementEnabledChecker5)));
                                    if ((temp124 == 0)) {
                                        this.Manager.Comment("reaching state \'S714\'");
                                        Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp122;
                                        this.Manager.Comment("executing step \'call RopExpandRow(False,True,False)\'");
                                        temp122 = this.IMS_OXCTABLAdapterInstance.RopExpandRow(false, true, false);
                                        this.Manager.Checkpoint("MS-OXCTABL_R568");
                                        this.Manager.Checkpoint("MS-OXCTABL_R571");
                                        this.Manager.Comment("reaching state \'S810\'");
                                        this.Manager.Comment("checking step \'return RopExpandRow/ecNotCollapsed\'");
                                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues.ecNotCollapsed, temp122, "return of RopExpandRow, state S810");
                                        S04_ExpandRowRops_CollapseorExpandRow_TestSuiteS868();
                                        goto label39;
                                    }
                                    if ((temp124 == 1)) {
                                        this.Manager.Comment("reaching state \'S715\'");
                                        Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp123;
                                        this.Manager.Comment("executing step \'call RopExpandRow(False,True,False)\'");
                                        temp123 = this.IMS_OXCTABLAdapterInstance.RopExpandRow(false, true, false);
                                        this.Manager.Checkpoint("MS-OXCTABL_R568");
                                        this.Manager.Checkpoint("MS-OXCTABL_R571");
                                        this.Manager.Comment("reaching state \'S811\'");
                                        this.Manager.Comment("checking step \'return RopExpandRow/ecNotCollapsed\'");
                                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues.ecNotCollapsed, temp123, "return of RopExpandRow, state S811");
                                        S04_ExpandRowRops_CollapseorExpandRow_TestSuiteS869();
                                        goto label39;
                                    }
                                    throw new InvalidOperationException("never reached");
                                label39:
;
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite1RopQueryRowsResponseChecker)));
                                }
                                goto label41;
                            }
                            if ((temp129 == 1)) {
                                this.Manager.Comment("reaching state \'S411\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite1RopQueryRowsResponseChecker1))) != -1)) {
                                    this.Manager.Comment("reaching state \'S507\'");
                                    bool temp125;
                                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(748,out _)\'");
                                    this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(748, out temp125);
                                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp125);
                                    this.Manager.Comment("reaching state \'S603\'");
                                    int temp128 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite1CheckRequirementEnabledChecker7)), new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite1CheckRequirementEnabledChecker8)));
                                    if ((temp128 == 0)) {
                                        this.Manager.Comment("reaching state \'S716\'");
                                        Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp126;
                                        this.Manager.Comment("executing step \'call RopExpandRow(True,False,False)\'");
                                        temp126 = this.IMS_OXCTABLAdapterInstance.RopExpandRow(true, false, false);
                                        this.Manager.Checkpoint("MS-OXCTABL_R568");
                                        this.Manager.Checkpoint("MS-OXCTABL_R570");
                                        this.Manager.Comment("reaching state \'S812\'");
                                        this.Manager.Comment("checking step \'return RopExpandRow/ecNotFound\'");
                                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues.ecNotFound, temp126, "return of RopExpandRow, state S812");
                                        S04_ExpandRowRops_CollapseorExpandRow_TestSuiteS883();
                                        goto label40;
                                    }
                                    if ((temp128 == 1)) {
                                        this.Manager.Comment("reaching state \'S717\'");
                                        Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp127;
                                        this.Manager.Comment("executing step \'call RopExpandRow(True,False,False)\'");
                                        temp127 = this.IMS_OXCTABLAdapterInstance.RopExpandRow(true, false, false);
                                        this.Manager.Checkpoint("MS-OXCTABL_R568");
                                        this.Manager.Checkpoint("MS-OXCTABL_R570");
                                        this.Manager.Comment("reaching state \'S813\'");
                                        this.Manager.Comment("checking step \'return RopExpandRow/ecNotFound\'");
                                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues.ecNotFound, temp127, "return of RopExpandRow, state S813");
                                        S04_ExpandRowRops_CollapseorExpandRow_TestSuiteS882();
                                        goto label40;
                                    }
                                    throw new InvalidOperationException("never reached");
                                label40:
;
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite1RopQueryRowsResponseChecker1)));
                                }
                                goto label41;
                            }
                            throw new InvalidOperationException("never reached");
                        label41:
;
                            goto label46;
                        }
                        if ((temp142 == 1)) {
                            this.Manager.Comment("reaching state \'S179\'");
                            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp130;
                            this.Manager.Comment("executing step \'call RopQueryRows(Advance,True)\'");
                            temp130 = this.IMS_OXCTABLAdapterInstance.RopQueryRows(((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), true);
                            this.Manager.Checkpoint("MS-OXCTABL_R837");
                            this.Manager.Comment("reaching state \'S227\'");
                            this.Manager.Comment("checking step \'return RopQueryRows/success\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp130, "return of RopQueryRows, state S227");
                            this.Manager.Comment("reaching state \'S275\'");
                            bool temp131;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(610,out _)\'");
                            this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(610, out temp131);
                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp131);
                            this.Manager.Comment("reaching state \'S323\'");
                            int temp141 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite1CheckRequirementEnabledChecker10)), new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite1CheckRequirementEnabledChecker13)));
                            if ((temp141 == 0)) {
                                this.Manager.Comment("reaching state \'S412\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite1RopQueryRowsResponseChecker2))) != -1)) {
                                    this.Manager.Comment("reaching state \'S508\'");
                                    bool temp132;
                                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(748,out _)\'");
                                    this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(748, out temp132);
                                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp132);
                                    this.Manager.Comment("reaching state \'S604\'");
                                    int temp136 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite1CheckRequirementEnabledChecker11)), new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite1CheckRequirementEnabledChecker12)));
                                    if ((temp136 == 0)) {
                                        this.Manager.Comment("reaching state \'S718\'");
                                        Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp133;
                                        this.Manager.Comment("executing step \'call RopExpandRow(False,False,False)\'");
                                        temp133 = this.IMS_OXCTABLAdapterInstance.RopExpandRow(false, false, false);
                                        this.Manager.Checkpoint("MS-OXCTABL_R568");
                                        this.Manager.Checkpoint("MS-OXCTABL_R567");
                                        this.Manager.Comment("reaching state \'S814\'");
                                        this.Manager.Comment("checking step \'return RopExpandRow/success\'");
                                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp133, "return of RopExpandRow, state S814");
                                        this.Manager.Comment("reaching state \'S896\'");
                                        int temp134 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopExpandRowResponseInfo, null, new RopExpandRowResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite1RopExpandRowResponseChecker)), new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopExpandRowResponseInfo, null, new RopExpandRowResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite1RopExpandRowResponseChecker1)));
                                        if ((temp134 == 0)) {
                                            S04_ExpandRowRops_CollapseorExpandRow_TestSuiteS928();
                                            goto label42;
                                        }
                                        if ((temp134 == 1)) {
                                            S04_ExpandRowRops_CollapseorExpandRow_TestSuiteS928();
                                            goto label42;
                                        }
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopExpandRowResponseInfo, null, new RopExpandRowResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite1RopExpandRowResponseChecker)), new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopExpandRowResponseInfo, null, new RopExpandRowResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite1RopExpandRowResponseChecker1)));
                                    label42:
;
                                        goto label43;
                                    }
                                    if ((temp136 == 1)) {
                                        this.Manager.Comment("reaching state \'S719\'");
                                        Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp135;
                                        this.Manager.Comment("executing step \'call RopExpandRow(False,False,False)\'");
                                        temp135 = this.IMS_OXCTABLAdapterInstance.RopExpandRow(false, false, false);
                                        this.Manager.Checkpoint("MS-OXCTABL_R568");
                                        this.Manager.Checkpoint("MS-OXCTABL_R567");
                                        this.Manager.Comment("reaching state \'S815\'");
                                        this.Manager.Comment("checking step \'return RopExpandRow/success\'");
                                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp135, "return of RopExpandRow, state S815");
                                        this.Manager.Comment("reaching state \'S897\'");
                                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopExpandRowResponseInfo, null, new RopExpandRowResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite1RopExpandRowResponseChecker2))) != -1)) {
                                            this.Manager.Comment("reaching state \'S929\'");
                                        }
                                        else {
                                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopExpandRowResponseInfo, null, new RopExpandRowResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite1RopExpandRowResponseChecker2)));
                                        }
                                        goto label43;
                                    }
                                    throw new InvalidOperationException("never reached");
                                label43:
;
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite1RopQueryRowsResponseChecker2)));
                                }
                                goto label45;
                            }
                            if ((temp141 == 1)) {
                                this.Manager.Comment("reaching state \'S413\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite1RopQueryRowsResponseChecker3))) != -1)) {
                                    this.Manager.Comment("reaching state \'S509\'");
                                    bool temp137;
                                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(748,out _)\'");
                                    this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(748, out temp137);
                                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp137);
                                    this.Manager.Comment("reaching state \'S605\'");
                                    int temp140 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite1CheckRequirementEnabledChecker14)), new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite1CheckRequirementEnabledChecker15)));
                                    if ((temp140 == 0)) {
                                        this.Manager.Comment("reaching state \'S720\'");
                                        Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp138;
                                        this.Manager.Comment("executing step \'call RopExpandRow(True,False,False)\'");
                                        temp138 = this.IMS_OXCTABLAdapterInstance.RopExpandRow(true, false, false);
                                        this.Manager.Checkpoint("MS-OXCTABL_R568");
                                        this.Manager.Checkpoint("MS-OXCTABL_R570");
                                        this.Manager.Comment("reaching state \'S816\'");
                                        this.Manager.Comment("checking step \'return RopExpandRow/ecNotFound\'");
                                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues.ecNotFound, temp138, "return of RopExpandRow, state S816");
                                        S04_ExpandRowRops_CollapseorExpandRow_TestSuiteS870();
                                        goto label44;
                                    }
                                    if ((temp140 == 1)) {
                                        this.Manager.Comment("reaching state \'S721\'");
                                        Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp139;
                                        this.Manager.Comment("executing step \'call RopExpandRow(True,False,False)\'");
                                        temp139 = this.IMS_OXCTABLAdapterInstance.RopExpandRow(true, false, false);
                                        this.Manager.Checkpoint("MS-OXCTABL_R568");
                                        this.Manager.Checkpoint("MS-OXCTABL_R570");
                                        this.Manager.Comment("reaching state \'S817\'");
                                        this.Manager.Comment("checking step \'return RopExpandRow/ecNotFound\'");
                                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues.ecNotFound, temp139, "return of RopExpandRow, state S817");
                                        S04_ExpandRowRops_CollapseorExpandRow_TestSuiteS871();
                                        goto label44;
                                    }
                                    throw new InvalidOperationException("never reached");
                                label44:
;
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite1RopQueryRowsResponseChecker3)));
                                }
                                goto label45;
                            }
                            throw new InvalidOperationException("never reached");
                        label45:
;
                            goto label46;
                        }
                        throw new InvalidOperationException("never reached");
                    label46:
;
                        goto label56;
                    }
                    if ((temp169 == 1)) {
                        this.Manager.Comment("reaching state \'S111\'");
                        bool temp143;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(867,out _)\'");
                        this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(867, out temp143);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp143);
                        this.Manager.Comment("reaching state \'S135\'");
                        int temp168 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite1CheckRequirementEnabledChecker17)), new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite1CheckRequirementEnabledChecker24)));
                        if ((temp168 == 0)) {
                            this.Manager.Comment("reaching state \'S180\'");
                            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp144;
                            this.Manager.Comment("executing step \'call RopQueryRows(Advance,True)\'");
                            temp144 = this.IMS_OXCTABLAdapterInstance.RopQueryRows(((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), true);
                            this.Manager.Checkpoint("MS-OXCTABL_R837");
                            this.Manager.Comment("reaching state \'S228\'");
                            this.Manager.Comment("checking step \'return RopQueryRows/success\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp144, "return of RopQueryRows, state S228");
                            this.Manager.Comment("reaching state \'S276\'");
                            bool temp145;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(610,out _)\'");
                            this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(610, out temp145);
                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp145);
                            this.Manager.Comment("reaching state \'S324\'");
                            int temp155 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite1CheckRequirementEnabledChecker18)), new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite1CheckRequirementEnabledChecker21)));
                            if ((temp155 == 0)) {
                                this.Manager.Comment("reaching state \'S414\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite1RopQueryRowsResponseChecker4))) != -1)) {
                                    this.Manager.Comment("reaching state \'S510\'");
                                    bool temp146;
                                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(748,out _)\'");
                                    this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(748, out temp146);
                                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp146);
                                    this.Manager.Comment("reaching state \'S606\'");
                                    int temp150 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite1CheckRequirementEnabledChecker19)), new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite1CheckRequirementEnabledChecker20)));
                                    if ((temp150 == 0)) {
                                        this.Manager.Comment("reaching state \'S722\'");
                                        Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp147;
                                        this.Manager.Comment("executing step \'call RopExpandRow(False,False,False)\'");
                                        temp147 = this.IMS_OXCTABLAdapterInstance.RopExpandRow(false, false, false);
                                        this.Manager.Checkpoint("MS-OXCTABL_R568");
                                        this.Manager.Checkpoint("MS-OXCTABL_R567");
                                        this.Manager.Comment("reaching state \'S818\'");
                                        this.Manager.Comment("checking step \'return RopExpandRow/success\'");
                                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp147, "return of RopExpandRow, state S818");
                                        this.Manager.Comment("reaching state \'S898\'");
                                        int temp148 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopExpandRowResponseInfo, null, new RopExpandRowResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite1RopExpandRowResponseChecker3)), new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopExpandRowResponseInfo, null, new RopExpandRowResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite1RopExpandRowResponseChecker4)));
                                        if ((temp148 == 0)) {
                                            S04_ExpandRowRops_CollapseorExpandRow_TestSuiteS930();
                                            goto label47;
                                        }
                                        if ((temp148 == 1)) {
                                            S04_ExpandRowRops_CollapseorExpandRow_TestSuiteS930();
                                            goto label47;
                                        }
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopExpandRowResponseInfo, null, new RopExpandRowResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite1RopExpandRowResponseChecker3)), new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopExpandRowResponseInfo, null, new RopExpandRowResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite1RopExpandRowResponseChecker4)));
                                    label47:
;
                                        goto label48;
                                    }
                                    if ((temp150 == 1)) {
                                        this.Manager.Comment("reaching state \'S723\'");
                                        Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp149;
                                        this.Manager.Comment("executing step \'call RopExpandRow(False,False,False)\'");
                                        temp149 = this.IMS_OXCTABLAdapterInstance.RopExpandRow(false, false, false);
                                        this.Manager.Checkpoint("MS-OXCTABL_R568");
                                        this.Manager.Checkpoint("MS-OXCTABL_R567");
                                        this.Manager.Comment("reaching state \'S819\'");
                                        this.Manager.Comment("checking step \'return RopExpandRow/success\'");
                                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp149, "return of RopExpandRow, state S819");
                                        this.Manager.Comment("reaching state \'S899\'");
                                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopExpandRowResponseInfo, null, new RopExpandRowResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite1RopExpandRowResponseChecker5))) != -1)) {
                                            this.Manager.Comment("reaching state \'S931\'");
                                        }
                                        else {
                                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopExpandRowResponseInfo, null, new RopExpandRowResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite1RopExpandRowResponseChecker5)));
                                        }
                                        goto label48;
                                    }
                                    throw new InvalidOperationException("never reached");
                                label48:
;
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite1RopQueryRowsResponseChecker4)));
                                }
                                goto label50;
                            }
                            if ((temp155 == 1)) {
                                this.Manager.Comment("reaching state \'S415\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite1RopQueryRowsResponseChecker5))) != -1)) {
                                    this.Manager.Comment("reaching state \'S511\'");
                                    bool temp151;
                                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(748,out _)\'");
                                    this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(748, out temp151);
                                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp151);
                                    this.Manager.Comment("reaching state \'S607\'");
                                    int temp154 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite1CheckRequirementEnabledChecker22)), new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite1CheckRequirementEnabledChecker23)));
                                    if ((temp154 == 0)) {
                                        this.Manager.Comment("reaching state \'S724\'");
                                        Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp152;
                                        this.Manager.Comment("executing step \'call RopExpandRow(False,True,False)\'");
                                        temp152 = this.IMS_OXCTABLAdapterInstance.RopExpandRow(false, true, false);
                                        this.Manager.Checkpoint("MS-OXCTABL_R568");
                                        this.Manager.Checkpoint("MS-OXCTABL_R571");
                                        this.Manager.Comment("reaching state \'S820\'");
                                        this.Manager.Comment("checking step \'return RopExpandRow/ecNotCollapsed\'");
                                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues.ecNotCollapsed, temp152, "return of RopExpandRow, state S820");
                                        S04_ExpandRowRops_CollapseorExpandRow_TestSuiteS858();
                                        goto label49;
                                    }
                                    if ((temp154 == 1)) {
                                        this.Manager.Comment("reaching state \'S725\'");
                                        Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp153;
                                        this.Manager.Comment("executing step \'call RopExpandRow(False,True,False)\'");
                                        temp153 = this.IMS_OXCTABLAdapterInstance.RopExpandRow(false, true, false);
                                        this.Manager.Checkpoint("MS-OXCTABL_R568");
                                        this.Manager.Checkpoint("MS-OXCTABL_R571");
                                        this.Manager.Comment("reaching state \'S821\'");
                                        this.Manager.Comment("checking step \'return RopExpandRow/ecNotCollapsed\'");
                                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues.ecNotCollapsed, temp153, "return of RopExpandRow, state S821");
                                        S04_ExpandRowRops_CollapseorExpandRow_TestSuiteS859();
                                        goto label49;
                                    }
                                    throw new InvalidOperationException("never reached");
                                label49:
;
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite1RopQueryRowsResponseChecker5)));
                                }
                                goto label50;
                            }
                            throw new InvalidOperationException("never reached");
                        label50:
;
                            goto label55;
                        }
                        if ((temp168 == 1)) {
                            this.Manager.Comment("reaching state \'S181\'");
                            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp156;
                            this.Manager.Comment("executing step \'call RopQueryRows(Advance,True)\'");
                            temp156 = this.IMS_OXCTABLAdapterInstance.RopQueryRows(((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), true);
                            this.Manager.Checkpoint("MS-OXCTABL_R837");
                            this.Manager.Comment("reaching state \'S229\'");
                            this.Manager.Comment("checking step \'return RopQueryRows/success\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp156, "return of RopQueryRows, state S229");
                            this.Manager.Comment("reaching state \'S277\'");
                            bool temp157;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(610,out _)\'");
                            this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(610, out temp157);
                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp157);
                            this.Manager.Comment("reaching state \'S325\'");
                            int temp167 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite1CheckRequirementEnabledChecker25)), new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite1CheckRequirementEnabledChecker28)));
                            if ((temp167 == 0)) {
                                this.Manager.Comment("reaching state \'S416\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite1RopQueryRowsResponseChecker6))) != -1)) {
                                    this.Manager.Comment("reaching state \'S512\'");
                                    bool temp158;
                                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(748,out _)\'");
                                    this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(748, out temp158);
                                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp158);
                                    this.Manager.Comment("reaching state \'S608\'");
                                    int temp162 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite1CheckRequirementEnabledChecker26)), new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite1CheckRequirementEnabledChecker27)));
                                    if ((temp162 == 0)) {
                                        this.Manager.Comment("reaching state \'S726\'");
                                        Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp159;
                                        this.Manager.Comment("executing step \'call RopExpandRow(False,False,False)\'");
                                        temp159 = this.IMS_OXCTABLAdapterInstance.RopExpandRow(false, false, false);
                                        this.Manager.Checkpoint("MS-OXCTABL_R568");
                                        this.Manager.Checkpoint("MS-OXCTABL_R567");
                                        this.Manager.Comment("reaching state \'S822\'");
                                        this.Manager.Comment("checking step \'return RopExpandRow/success\'");
                                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp159, "return of RopExpandRow, state S822");
                                        this.Manager.Comment("reaching state \'S900\'");
                                        int temp160 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopExpandRowResponseInfo, null, new RopExpandRowResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite1RopExpandRowResponseChecker6)), new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopExpandRowResponseInfo, null, new RopExpandRowResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite1RopExpandRowResponseChecker7)));
                                        if ((temp160 == 0)) {
                                            S04_ExpandRowRops_CollapseorExpandRow_TestSuiteS932();
                                            goto label51;
                                        }
                                        if ((temp160 == 1)) {
                                            S04_ExpandRowRops_CollapseorExpandRow_TestSuiteS932();
                                            goto label51;
                                        }
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopExpandRowResponseInfo, null, new RopExpandRowResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite1RopExpandRowResponseChecker6)), new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopExpandRowResponseInfo, null, new RopExpandRowResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite1RopExpandRowResponseChecker7)));
                                    label51:
;
                                        goto label52;
                                    }
                                    if ((temp162 == 1)) {
                                        this.Manager.Comment("reaching state \'S727\'");
                                        Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp161;
                                        this.Manager.Comment("executing step \'call RopExpandRow(False,False,False)\'");
                                        temp161 = this.IMS_OXCTABLAdapterInstance.RopExpandRow(false, false, false);
                                        this.Manager.Checkpoint("MS-OXCTABL_R568");
                                        this.Manager.Checkpoint("MS-OXCTABL_R567");
                                        this.Manager.Comment("reaching state \'S823\'");
                                        this.Manager.Comment("checking step \'return RopExpandRow/success\'");
                                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp161, "return of RopExpandRow, state S823");
                                        this.Manager.Comment("reaching state \'S901\'");
                                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopExpandRowResponseInfo, null, new RopExpandRowResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite1RopExpandRowResponseChecker8))) != -1)) {
                                            this.Manager.Comment("reaching state \'S933\'");
                                        }
                                        else {
                                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopExpandRowResponseInfo, null, new RopExpandRowResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite1RopExpandRowResponseChecker8)));
                                        }
                                        goto label52;
                                    }
                                    throw new InvalidOperationException("never reached");
                                label52:
;
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite1RopQueryRowsResponseChecker6)));
                                }
                                goto label54;
                            }
                            if ((temp167 == 1)) {
                                this.Manager.Comment("reaching state \'S417\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite1RopQueryRowsResponseChecker7))) != -1)) {
                                    this.Manager.Comment("reaching state \'S513\'");
                                    bool temp163;
                                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(748,out _)\'");
                                    this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(748, out temp163);
                                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp163);
                                    this.Manager.Comment("reaching state \'S609\'");
                                    int temp166 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite1CheckRequirementEnabledChecker29)), new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite1CheckRequirementEnabledChecker30)));
                                    if ((temp166 == 0)) {
                                        this.Manager.Comment("reaching state \'S728\'");
                                        Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp164;
                                        this.Manager.Comment("executing step \'call RopExpandRow(True,False,False)\'");
                                        temp164 = this.IMS_OXCTABLAdapterInstance.RopExpandRow(true, false, false);
                                        this.Manager.Checkpoint("MS-OXCTABL_R568");
                                        this.Manager.Checkpoint("MS-OXCTABL_R570");
                                        this.Manager.Comment("reaching state \'S824\'");
                                        this.Manager.Comment("checking step \'return RopExpandRow/ecNotFound\'");
                                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues.ecNotFound, temp164, "return of RopExpandRow, state S824");
                                        S04_ExpandRowRops_CollapseorExpandRow_TestSuiteS876();
                                        goto label53;
                                    }
                                    if ((temp166 == 1)) {
                                        this.Manager.Comment("reaching state \'S729\'");
                                        Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp165;
                                        this.Manager.Comment("executing step \'call RopExpandRow(True,False,False)\'");
                                        temp165 = this.IMS_OXCTABLAdapterInstance.RopExpandRow(true, false, false);
                                        this.Manager.Checkpoint("MS-OXCTABL_R568");
                                        this.Manager.Checkpoint("MS-OXCTABL_R570");
                                        this.Manager.Comment("reaching state \'S825\'");
                                        this.Manager.Comment("checking step \'return RopExpandRow/ecNotFound\'");
                                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues.ecNotFound, temp165, "return of RopExpandRow, state S825");
                                        S04_ExpandRowRops_CollapseorExpandRow_TestSuiteS877();
                                        goto label53;
                                    }
                                    throw new InvalidOperationException("never reached");
                                label53:
;
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite1RopQueryRowsResponseChecker7)));
                                }
                                goto label54;
                            }
                            throw new InvalidOperationException("never reached");
                        label54:
;
                            goto label55;
                        }
                        throw new InvalidOperationException("never reached");
                    label55:
;
                        goto label56;
                    }
                    throw new InvalidOperationException("never reached");
                label56:
;
                    goto label74;
                }
                if ((temp222 == 1)) {
                    this.Manager.Comment("reaching state \'S77\'");
                    bool temp170;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(866,out _)\'");
                    this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(866, out temp170);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp170);
                    this.Manager.Comment("reaching state \'S89\'");
                    int temp221 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite1CheckRequirementEnabledChecker32)), new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite1CheckRequirementEnabledChecker47)));
                    if ((temp221 == 0)) {
                        this.Manager.Comment("reaching state \'S112\'");
                        bool temp171;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(867,out _)\'");
                        this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(867, out temp171);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp171);
                        this.Manager.Comment("reaching state \'S136\'");
                        int temp194 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite1CheckRequirementEnabledChecker33)), new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite1CheckRequirementEnabledChecker40)));
                        if ((temp194 == 0)) {
                            this.Manager.Comment("reaching state \'S182\'");
                            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp172;
                            this.Manager.Comment("executing step \'call RopQueryRows(Advance,True)\'");
                            temp172 = this.IMS_OXCTABLAdapterInstance.RopQueryRows(((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), true);
                            this.Manager.Checkpoint("MS-OXCTABL_R837");
                            this.Manager.Comment("reaching state \'S230\'");
                            this.Manager.Comment("checking step \'return RopQueryRows/success\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp172, "return of RopQueryRows, state S230");
                            this.Manager.Comment("reaching state \'S278\'");
                            bool temp173;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(610,out _)\'");
                            this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(610, out temp173);
                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp173);
                            this.Manager.Comment("reaching state \'S326\'");
                            int temp182 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite1CheckRequirementEnabledChecker34)), new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite1CheckRequirementEnabledChecker37)));
                            if ((temp182 == 0)) {
                                this.Manager.Comment("reaching state \'S418\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite1RopQueryRowsResponseChecker8))) != -1)) {
                                    this.Manager.Comment("reaching state \'S514\'");
                                    bool temp174;
                                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(748,out _)\'");
                                    this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(748, out temp174);
                                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp174);
                                    this.Manager.Comment("reaching state \'S610\'");
                                    int temp177 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite1CheckRequirementEnabledChecker35)), new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite1CheckRequirementEnabledChecker36)));
                                    if ((temp177 == 0)) {
                                        this.Manager.Comment("reaching state \'S730\'");
                                        Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp175;
                                        this.Manager.Comment("executing step \'call RopExpandRow(False,True,False)\'");
                                        temp175 = this.IMS_OXCTABLAdapterInstance.RopExpandRow(false, true, false);
                                        this.Manager.Checkpoint("MS-OXCTABL_R568");
                                        this.Manager.Checkpoint("MS-OXCTABL_R571");
                                        this.Manager.Comment("reaching state \'S826\'");
                                        this.Manager.Comment("checking step \'return RopExpandRow/ecNotCollapsed\'");
                                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues.ecNotCollapsed, temp175, "return of RopExpandRow, state S826");
                                        S04_ExpandRowRops_CollapseorExpandRow_TestSuiteS849();
                                        goto label57;
                                    }
                                    if ((temp177 == 1)) {
                                        this.Manager.Comment("reaching state \'S731\'");
                                        Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp176;
                                        this.Manager.Comment("executing step \'call RopExpandRow(False,True,False)\'");
                                        temp176 = this.IMS_OXCTABLAdapterInstance.RopExpandRow(false, true, false);
                                        this.Manager.Checkpoint("MS-OXCTABL_R568");
                                        this.Manager.Checkpoint("MS-OXCTABL_R571");
                                        this.Manager.Comment("reaching state \'S827\'");
                                        this.Manager.Comment("checking step \'return RopExpandRow/ecNotCollapsed\'");
                                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues.ecNotCollapsed, temp176, "return of RopExpandRow, state S827");
                                        S04_ExpandRowRops_CollapseorExpandRow_TestSuiteS848();
                                        goto label57;
                                    }
                                    throw new InvalidOperationException("never reached");
                                label57:
;
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite1RopQueryRowsResponseChecker8)));
                                }
                                goto label59;
                            }
                            if ((temp182 == 1)) {
                                this.Manager.Comment("reaching state \'S419\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite1RopQueryRowsResponseChecker9))) != -1)) {
                                    this.Manager.Comment("reaching state \'S515\'");
                                    bool temp178;
                                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(748,out _)\'");
                                    this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(748, out temp178);
                                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp178);
                                    this.Manager.Comment("reaching state \'S611\'");
                                    int temp181 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite1CheckRequirementEnabledChecker38)), new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite1CheckRequirementEnabledChecker39)));
                                    if ((temp181 == 0)) {
                                        this.Manager.Comment("reaching state \'S732\'");
                                        Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp179;
                                        this.Manager.Comment("executing step \'call RopExpandRow(True,False,False)\'");
                                        temp179 = this.IMS_OXCTABLAdapterInstance.RopExpandRow(true, false, false);
                                        this.Manager.Checkpoint("MS-OXCTABL_R568");
                                        this.Manager.Checkpoint("MS-OXCTABL_R570");
                                        this.Manager.Comment("reaching state \'S828\'");
                                        this.Manager.Comment("checking step \'return RopExpandRow/ecNotFound\'");
                                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues.ecNotFound, temp179, "return of RopExpandRow, state S828");
                                        S04_ExpandRowRops_CollapseorExpandRow_TestSuiteS890();
                                        goto label58;
                                    }
                                    if ((temp181 == 1)) {
                                        this.Manager.Comment("reaching state \'S733\'");
                                        Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp180;
                                        this.Manager.Comment("executing step \'call RopExpandRow(True,False,False)\'");
                                        temp180 = this.IMS_OXCTABLAdapterInstance.RopExpandRow(true, false, false);
                                        this.Manager.Checkpoint("MS-OXCTABL_R568");
                                        this.Manager.Checkpoint("MS-OXCTABL_R570");
                                        this.Manager.Comment("reaching state \'S829\'");
                                        this.Manager.Comment("checking step \'return RopExpandRow/ecNotFound\'");
                                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues.ecNotFound, temp180, "return of RopExpandRow, state S829");
                                        S04_ExpandRowRops_CollapseorExpandRow_TestSuiteS891();
                                        goto label58;
                                    }
                                    throw new InvalidOperationException("never reached");
                                label58:
;
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite1RopQueryRowsResponseChecker9)));
                                }
                                goto label59;
                            }
                            throw new InvalidOperationException("never reached");
                        label59:
;
                            goto label63;
                        }
                        if ((temp194 == 1)) {
                            this.Manager.Comment("reaching state \'S183\'");
                            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp183;
                            this.Manager.Comment("executing step \'call RopQueryRows(Advance,True)\'");
                            temp183 = this.IMS_OXCTABLAdapterInstance.RopQueryRows(((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), true);
                            this.Manager.Checkpoint("MS-OXCTABL_R837");
                            this.Manager.Comment("reaching state \'S231\'");
                            this.Manager.Comment("checking step \'return RopQueryRows/success\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp183, "return of RopQueryRows, state S231");
                            this.Manager.Comment("reaching state \'S279\'");
                            bool temp184;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(610,out _)\'");
                            this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(610, out temp184);
                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp184);
                            this.Manager.Comment("reaching state \'S327\'");
                            int temp193 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite1CheckRequirementEnabledChecker41)), new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite1CheckRequirementEnabledChecker44)));
                            if ((temp193 == 0)) {
                                this.Manager.Comment("reaching state \'S420\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite1RopQueryRowsResponseChecker10))) != -1)) {
                                    this.Manager.Comment("reaching state \'S516\'");
                                    bool temp185;
                                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(748,out _)\'");
                                    this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(748, out temp185);
                                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp185);
                                    this.Manager.Comment("reaching state \'S612\'");
                                    int temp188 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite1CheckRequirementEnabledChecker42)), new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite1CheckRequirementEnabledChecker43)));
                                    if ((temp188 == 0)) {
                                        this.Manager.Comment("reaching state \'S734\'");
                                        Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp186;
                                        this.Manager.Comment("executing step \'call RopExpandRow(True,False,False)\'");
                                        temp186 = this.IMS_OXCTABLAdapterInstance.RopExpandRow(true, false, false);
                                        this.Manager.Checkpoint("MS-OXCTABL_R568");
                                        this.Manager.Checkpoint("MS-OXCTABL_R570");
                                        this.Manager.Comment("reaching state \'S830\'");
                                        this.Manager.Comment("checking step \'return RopExpandRow/ecNotFound\'");
                                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues.ecNotFound, temp186, "return of RopExpandRow, state S830");
                                        S04_ExpandRowRops_CollapseorExpandRow_TestSuiteS893();
                                        goto label60;
                                    }
                                    if ((temp188 == 1)) {
                                        this.Manager.Comment("reaching state \'S735\'");
                                        Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp187;
                                        this.Manager.Comment("executing step \'call RopExpandRow(True,False,False)\'");
                                        temp187 = this.IMS_OXCTABLAdapterInstance.RopExpandRow(true, false, false);
                                        this.Manager.Checkpoint("MS-OXCTABL_R568");
                                        this.Manager.Checkpoint("MS-OXCTABL_R570");
                                        this.Manager.Comment("reaching state \'S831\'");
                                        this.Manager.Comment("checking step \'return RopExpandRow/ecNotFound\'");
                                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues.ecNotFound, temp187, "return of RopExpandRow, state S831");
                                        S04_ExpandRowRops_CollapseorExpandRow_TestSuiteS892();
                                        goto label60;
                                    }
                                    throw new InvalidOperationException("never reached");
                                label60:
;
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite1RopQueryRowsResponseChecker10)));
                                }
                                goto label62;
                            }
                            if ((temp193 == 1)) {
                                this.Manager.Comment("reaching state \'S421\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite1RopQueryRowsResponseChecker11))) != -1)) {
                                    this.Manager.Comment("reaching state \'S517\'");
                                    bool temp189;
                                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(748,out _)\'");
                                    this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(748, out temp189);
                                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp189);
                                    this.Manager.Comment("reaching state \'S613\'");
                                    int temp192 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite1CheckRequirementEnabledChecker45)), new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite1CheckRequirementEnabledChecker46)));
                                    if ((temp192 == 0)) {
                                        this.Manager.Comment("reaching state \'S736\'");
                                        Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp190;
                                        this.Manager.Comment("executing step \'call RopExpandRow(True,False,False)\'");
                                        temp190 = this.IMS_OXCTABLAdapterInstance.RopExpandRow(true, false, false);
                                        this.Manager.Checkpoint("MS-OXCTABL_R568");
                                        this.Manager.Checkpoint("MS-OXCTABL_R570");
                                        this.Manager.Comment("reaching state \'S832\'");
                                        this.Manager.Comment("checking step \'return RopExpandRow/ecNotFound\'");
                                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues.ecNotFound, temp190, "return of RopExpandRow, state S832");
                                        S04_ExpandRowRops_CollapseorExpandRow_TestSuiteS878();
                                        goto label61;
                                    }
                                    if ((temp192 == 1)) {
                                        this.Manager.Comment("reaching state \'S737\'");
                                        Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp191;
                                        this.Manager.Comment("executing step \'call RopExpandRow(True,False,False)\'");
                                        temp191 = this.IMS_OXCTABLAdapterInstance.RopExpandRow(true, false, false);
                                        this.Manager.Checkpoint("MS-OXCTABL_R568");
                                        this.Manager.Checkpoint("MS-OXCTABL_R570");
                                        this.Manager.Comment("reaching state \'S833\'");
                                        this.Manager.Comment("checking step \'return RopExpandRow/ecNotFound\'");
                                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues.ecNotFound, temp191, "return of RopExpandRow, state S833");
                                        S04_ExpandRowRops_CollapseorExpandRow_TestSuiteS879();
                                        goto label61;
                                    }
                                    throw new InvalidOperationException("never reached");
                                label61:
;
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite1RopQueryRowsResponseChecker11)));
                                }
                                goto label62;
                            }
                            throw new InvalidOperationException("never reached");
                        label62:
;
                            goto label63;
                        }
                        throw new InvalidOperationException("never reached");
                    label63:
;
                        goto label73;
                    }
                    if ((temp221 == 1)) {
                        this.Manager.Comment("reaching state \'S113\'");
                        bool temp195;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(867,out _)\'");
                        this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(867, out temp195);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp195);
                        this.Manager.Comment("reaching state \'S137\'");
                        int temp220 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite1CheckRequirementEnabledChecker48)), new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite1CheckRequirementEnabledChecker55)));
                        if ((temp220 == 0)) {
                            this.Manager.Comment("reaching state \'S184\'");
                            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp196;
                            this.Manager.Comment("executing step \'call RopQueryRows(Advance,True)\'");
                            temp196 = this.IMS_OXCTABLAdapterInstance.RopQueryRows(((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), true);
                            this.Manager.Checkpoint("MS-OXCTABL_R837");
                            this.Manager.Comment("reaching state \'S232\'");
                            this.Manager.Comment("checking step \'return RopQueryRows/success\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp196, "return of RopQueryRows, state S232");
                            this.Manager.Comment("reaching state \'S280\'");
                            bool temp197;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(610,out _)\'");
                            this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(610, out temp197);
                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp197);
                            this.Manager.Comment("reaching state \'S328\'");
                            int temp207 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite1CheckRequirementEnabledChecker49)), new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite1CheckRequirementEnabledChecker52)));
                            if ((temp207 == 0)) {
                                this.Manager.Comment("reaching state \'S422\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite1RopQueryRowsResponseChecker12))) != -1)) {
                                    this.Manager.Comment("reaching state \'S518\'");
                                    bool temp198;
                                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(748,out _)\'");
                                    this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(748, out temp198);
                                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp198);
                                    this.Manager.Comment("reaching state \'S614\'");
                                    int temp202 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite1CheckRequirementEnabledChecker50)), new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite1CheckRequirementEnabledChecker51)));
                                    if ((temp202 == 0)) {
                                        this.Manager.Comment("reaching state \'S738\'");
                                        Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp199;
                                        this.Manager.Comment("executing step \'call RopExpandRow(False,False,False)\'");
                                        temp199 = this.IMS_OXCTABLAdapterInstance.RopExpandRow(false, false, false);
                                        this.Manager.Checkpoint("MS-OXCTABL_R568");
                                        this.Manager.Checkpoint("MS-OXCTABL_R567");
                                        this.Manager.Comment("reaching state \'S834\'");
                                        this.Manager.Comment("checking step \'return RopExpandRow/success\'");
                                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp199, "return of RopExpandRow, state S834");
                                        this.Manager.Comment("reaching state \'S902\'");
                                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopExpandRowResponseInfo, null, new RopExpandRowResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite1RopExpandRowResponseChecker9))) != -1)) {
                                            this.Manager.Comment("reaching state \'S934\'");
                                        }
                                        else {
                                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopExpandRowResponseInfo, null, new RopExpandRowResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite1RopExpandRowResponseChecker9)));
                                        }
                                        goto label65;
                                    }
                                    if ((temp202 == 1)) {
                                        this.Manager.Comment("reaching state \'S739\'");
                                        Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp200;
                                        this.Manager.Comment("executing step \'call RopExpandRow(False,False,False)\'");
                                        temp200 = this.IMS_OXCTABLAdapterInstance.RopExpandRow(false, false, false);
                                        this.Manager.Checkpoint("MS-OXCTABL_R568");
                                        this.Manager.Checkpoint("MS-OXCTABL_R567");
                                        this.Manager.Comment("reaching state \'S835\'");
                                        this.Manager.Comment("checking step \'return RopExpandRow/success\'");
                                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp200, "return of RopExpandRow, state S835");
                                        this.Manager.Comment("reaching state \'S903\'");
                                        int temp201 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopExpandRowResponseInfo, null, new RopExpandRowResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite1RopExpandRowResponseChecker10)), new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopExpandRowResponseInfo, null, new RopExpandRowResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite1RopExpandRowResponseChecker11)));
                                        if ((temp201 == 0)) {
                                            S04_ExpandRowRops_CollapseorExpandRow_TestSuiteS935();
                                            goto label64;
                                        }
                                        if ((temp201 == 1)) {
                                            S04_ExpandRowRops_CollapseorExpandRow_TestSuiteS935();
                                            goto label64;
                                        }
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopExpandRowResponseInfo, null, new RopExpandRowResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite1RopExpandRowResponseChecker10)), new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopExpandRowResponseInfo, null, new RopExpandRowResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite1RopExpandRowResponseChecker11)));
                                    label64:
;
                                        goto label65;
                                    }
                                    throw new InvalidOperationException("never reached");
                                label65:
;
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite1RopQueryRowsResponseChecker12)));
                                }
                                goto label67;
                            }
                            if ((temp207 == 1)) {
                                this.Manager.Comment("reaching state \'S423\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite1RopQueryRowsResponseChecker13))) != -1)) {
                                    this.Manager.Comment("reaching state \'S519\'");
                                    bool temp203;
                                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(748,out _)\'");
                                    this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(748, out temp203);
                                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp203);
                                    this.Manager.Comment("reaching state \'S615\'");
                                    int temp206 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite1CheckRequirementEnabledChecker53)), new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite1CheckRequirementEnabledChecker54)));
                                    if ((temp206 == 0)) {
                                        this.Manager.Comment("reaching state \'S740\'");
                                        Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp204;
                                        this.Manager.Comment("executing step \'call RopExpandRow(True,False,False)\'");
                                        temp204 = this.IMS_OXCTABLAdapterInstance.RopExpandRow(true, false, false);
                                        this.Manager.Checkpoint("MS-OXCTABL_R568");
                                        this.Manager.Checkpoint("MS-OXCTABL_R570");
                                        this.Manager.Comment("reaching state \'S836\'");
                                        this.Manager.Comment("checking step \'return RopExpandRow/ecNotFound\'");
                                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues.ecNotFound, temp204, "return of RopExpandRow, state S836");
                                        S04_ExpandRowRops_CollapseorExpandRow_TestSuiteS874();
                                        goto label66;
                                    }
                                    if ((temp206 == 1)) {
                                        this.Manager.Comment("reaching state \'S741\'");
                                        Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp205;
                                        this.Manager.Comment("executing step \'call RopExpandRow(True,False,False)\'");
                                        temp205 = this.IMS_OXCTABLAdapterInstance.RopExpandRow(true, false, false);
                                        this.Manager.Checkpoint("MS-OXCTABL_R568");
                                        this.Manager.Checkpoint("MS-OXCTABL_R570");
                                        this.Manager.Comment("reaching state \'S837\'");
                                        this.Manager.Comment("checking step \'return RopExpandRow/ecNotFound\'");
                                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues.ecNotFound, temp205, "return of RopExpandRow, state S837");
                                        S04_ExpandRowRops_CollapseorExpandRow_TestSuiteS875();
                                        goto label66;
                                    }
                                    throw new InvalidOperationException("never reached");
                                label66:
;
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite1RopQueryRowsResponseChecker13)));
                                }
                                goto label67;
                            }
                            throw new InvalidOperationException("never reached");
                        label67:
;
                            goto label72;
                        }
                        if ((temp220 == 1)) {
                            this.Manager.Comment("reaching state \'S185\'");
                            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp208;
                            this.Manager.Comment("executing step \'call RopQueryRows(Advance,True)\'");
                            temp208 = this.IMS_OXCTABLAdapterInstance.RopQueryRows(((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), true);
                            this.Manager.Checkpoint("MS-OXCTABL_R837");
                            this.Manager.Comment("reaching state \'S233\'");
                            this.Manager.Comment("checking step \'return RopQueryRows/success\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp208, "return of RopQueryRows, state S233");
                            this.Manager.Comment("reaching state \'S281\'");
                            bool temp209;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(610,out _)\'");
                            this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(610, out temp209);
                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp209);
                            this.Manager.Comment("reaching state \'S329\'");
                            int temp219 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite1CheckRequirementEnabledChecker56)), new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite1CheckRequirementEnabledChecker59)));
                            if ((temp219 == 0)) {
                                this.Manager.Comment("reaching state \'S424\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite1RopQueryRowsResponseChecker14))) != -1)) {
                                    this.Manager.Comment("reaching state \'S520\'");
                                    bool temp210;
                                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(748,out _)\'");
                                    this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(748, out temp210);
                                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp210);
                                    this.Manager.Comment("reaching state \'S616\'");
                                    int temp214 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite1CheckRequirementEnabledChecker57)), new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite1CheckRequirementEnabledChecker58)));
                                    if ((temp214 == 0)) {
                                        this.Manager.Comment("reaching state \'S742\'");
                                        Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp211;
                                        this.Manager.Comment("executing step \'call RopExpandRow(False,False,False)\'");
                                        temp211 = this.IMS_OXCTABLAdapterInstance.RopExpandRow(false, false, false);
                                        this.Manager.Checkpoint("MS-OXCTABL_R568");
                                        this.Manager.Checkpoint("MS-OXCTABL_R567");
                                        this.Manager.Comment("reaching state \'S838\'");
                                        this.Manager.Comment("checking step \'return RopExpandRow/success\'");
                                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp211, "return of RopExpandRow, state S838");
                                        this.Manager.Comment("reaching state \'S904\'");
                                        int temp212 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopExpandRowResponseInfo, null, new RopExpandRowResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite1RopExpandRowResponseChecker12)), new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopExpandRowResponseInfo, null, new RopExpandRowResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite1RopExpandRowResponseChecker13)));
                                        if ((temp212 == 0)) {
                                            S04_ExpandRowRops_CollapseorExpandRow_TestSuiteS936();
                                            goto label68;
                                        }
                                        if ((temp212 == 1)) {
                                            S04_ExpandRowRops_CollapseorExpandRow_TestSuiteS936();
                                            goto label68;
                                        }
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopExpandRowResponseInfo, null, new RopExpandRowResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite1RopExpandRowResponseChecker12)), new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopExpandRowResponseInfo, null, new RopExpandRowResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite1RopExpandRowResponseChecker13)));
                                    label68:
;
                                        goto label69;
                                    }
                                    if ((temp214 == 1)) {
                                        this.Manager.Comment("reaching state \'S743\'");
                                        Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp213;
                                        this.Manager.Comment("executing step \'call RopExpandRow(False,False,False)\'");
                                        temp213 = this.IMS_OXCTABLAdapterInstance.RopExpandRow(false, false, false);
                                        this.Manager.Checkpoint("MS-OXCTABL_R568");
                                        this.Manager.Checkpoint("MS-OXCTABL_R567");
                                        this.Manager.Comment("reaching state \'S839\'");
                                        this.Manager.Comment("checking step \'return RopExpandRow/success\'");
                                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp213, "return of RopExpandRow, state S839");
                                        this.Manager.Comment("reaching state \'S905\'");
                                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopExpandRowResponseInfo, null, new RopExpandRowResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite1RopExpandRowResponseChecker14))) != -1)) {
                                            this.Manager.Comment("reaching state \'S937\'");
                                        }
                                        else {
                                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopExpandRowResponseInfo, null, new RopExpandRowResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite1RopExpandRowResponseChecker14)));
                                        }
                                        goto label69;
                                    }
                                    throw new InvalidOperationException("never reached");
                                label69:
;
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite1RopQueryRowsResponseChecker14)));
                                }
                                goto label71;
                            }
                            if ((temp219 == 1)) {
                                this.Manager.Comment("reaching state \'S425\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite1RopQueryRowsResponseChecker15))) != -1)) {
                                    this.Manager.Comment("reaching state \'S521\'");
                                    bool temp215;
                                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(748,out _)\'");
                                    this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(748, out temp215);
                                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp215);
                                    this.Manager.Comment("reaching state \'S617\'");
                                    int temp218 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite1CheckRequirementEnabledChecker60)), new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite1CheckRequirementEnabledChecker61)));
                                    if ((temp218 == 0)) {
                                        this.Manager.Comment("reaching state \'S744\'");
                                        Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp216;
                                        this.Manager.Comment("executing step \'call RopExpandRow(True,False,False)\'");
                                        temp216 = this.IMS_OXCTABLAdapterInstance.RopExpandRow(true, false, false);
                                        this.Manager.Checkpoint("MS-OXCTABL_R568");
                                        this.Manager.Checkpoint("MS-OXCTABL_R570");
                                        this.Manager.Comment("reaching state \'S840\'");
                                        this.Manager.Comment("checking step \'return RopExpandRow/ecNotFound\'");
                                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues.ecNotFound, temp216, "return of RopExpandRow, state S840");
                                        S04_ExpandRowRops_CollapseorExpandRow_TestSuiteS894();
                                        goto label70;
                                    }
                                    if ((temp218 == 1)) {
                                        this.Manager.Comment("reaching state \'S745\'");
                                        Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp217;
                                        this.Manager.Comment("executing step \'call RopExpandRow(True,False,False)\'");
                                        temp217 = this.IMS_OXCTABLAdapterInstance.RopExpandRow(true, false, false);
                                        this.Manager.Checkpoint("MS-OXCTABL_R568");
                                        this.Manager.Checkpoint("MS-OXCTABL_R570");
                                        this.Manager.Comment("reaching state \'S841\'");
                                        this.Manager.Comment("checking step \'return RopExpandRow/ecNotFound\'");
                                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues.ecNotFound, temp217, "return of RopExpandRow, state S841");
                                        S04_ExpandRowRops_CollapseorExpandRow_TestSuiteS895();
                                        goto label70;
                                    }
                                    throw new InvalidOperationException("never reached");
                                label70:
;
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite1RopQueryRowsResponseChecker15)));
                                }
                                goto label71;
                            }
                            throw new InvalidOperationException("never reached");
                        label71:
;
                            goto label72;
                        }
                        throw new InvalidOperationException("never reached");
                    label72:
;
                        goto label73;
                    }
                    throw new InvalidOperationException("never reached");
                label73:
;
                    goto label74;
                }
                throw new InvalidOperationException("never reached");
            label74:
;
                goto label75;
            }
            if ((temp223 == 1)) {
                this.Manager.Comment("reaching state \'S23\'");
                goto label75;
            }
            throw new InvalidOperationException("never reached");
        label75:
;
            this.Manager.EndTest();
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite1CheckMAPIHTTPTransportSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S11");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite1CheckRequirementEnabledChecker(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S65");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite1CheckRequirementEnabledChecker1(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S88");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite1CheckRequirementEnabledChecker2(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S134");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite1CheckRequirementEnabledChecker3(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S322");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite1RopQueryRowsResponseChecker(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SETCOLUMNS,True,True" +
                    ",True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S410");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S410");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S410");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S410");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S410");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S410");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S410");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S410");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S410");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S410");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R472, MS-OXCTABL_R427, MS-OXCTABL_R42" +
                        "6, MS-OXCTABL_R116");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R472");
            this.Manager.Checkpoint("MS-OXCTABL_R427");
            this.Manager.Checkpoint("MS-OXCTABL_R426");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite1CheckRequirementEnabledChecker4(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S602");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite1CheckRequirementEnabledChecker5(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S602");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite1CheckRequirementEnabledChecker6(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S322");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite1RopQueryRowsResponseChecker1(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SETCOLUMNS,True,True" +
                    ",True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S411");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S411");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S411");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S411");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S411");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S411");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S411");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S411");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S411");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S411");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R472, MS-OXCTABL_R427, MS-OXCTABL_R42" +
                        "6, MS-OXCTABL_R116, MS-OXCTABL_R610");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R472");
            this.Manager.Checkpoint("MS-OXCTABL_R427");
            this.Manager.Checkpoint("MS-OXCTABL_R426");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R610");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite1CheckRequirementEnabledChecker7(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S603");
        }
        
        private void S04_ExpandRowRops_CollapseorExpandRow_TestSuiteS883() {
            this.Manager.Comment("reaching state \'S883\'");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite1CheckRequirementEnabledChecker8(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S603");
        }
        
        private void S04_ExpandRowRops_CollapseorExpandRow_TestSuiteS882() {
            this.Manager.Comment("reaching state \'S882\'");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite1CheckRequirementEnabledChecker9(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S134");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite1CheckRequirementEnabledChecker10(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S323");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite1RopQueryRowsResponseChecker2(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SETCOLUMNS,True,True" +
                    ",True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S412");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S412");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S412");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S412");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S412");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S412");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S412");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S412");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S412");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S412");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R472, MS-OXCTABL_R427, MS-OXCTABL_R42" +
                        "6, MS-OXCTABL_R116");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R472");
            this.Manager.Checkpoint("MS-OXCTABL_R427");
            this.Manager.Checkpoint("MS-OXCTABL_R426");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite1CheckRequirementEnabledChecker11(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S604");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite1RopExpandRowResponseChecker(bool isLastSetColumnData) {
            this.Manager.Comment("checking step \'event RopExpandRowResponse(True)\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isLastSetColumnData, "isLastSetColumnData of RopExpandRowResponse, state S896");
        }
        
        private void S04_ExpandRowRops_CollapseorExpandRow_TestSuiteS928() {
            this.Manager.Comment("reaching state \'S928\'");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite1RopExpandRowResponseChecker1(bool isLastSetColumnData) {
            this.Manager.Comment("checking step \'event RopExpandRowResponse(False)\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isLastSetColumnData, "isLastSetColumnData of RopExpandRowResponse, state S896");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite1CheckRequirementEnabledChecker12(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S604");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite1RopExpandRowResponseChecker2(bool isLastSetColumnData) {
            this.Manager.Comment("checking step \'event RopExpandRowResponse(True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isLastSetColumnData, "isLastSetColumnData of RopExpandRowResponse, state S897");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R814, MS-OXCTABL_R825");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R814");
            this.Manager.Checkpoint("MS-OXCTABL_R825");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite1CheckRequirementEnabledChecker13(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S323");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite1RopQueryRowsResponseChecker3(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SETCOLUMNS,True,True" +
                    ",True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S413");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S413");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S413");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S413");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S413");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S413");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S413");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S413");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S413");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S413");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R472, MS-OXCTABL_R427, MS-OXCTABL_R42" +
                        "6, MS-OXCTABL_R116, MS-OXCTABL_R610");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R472");
            this.Manager.Checkpoint("MS-OXCTABL_R427");
            this.Manager.Checkpoint("MS-OXCTABL_R426");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R610");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite1CheckRequirementEnabledChecker14(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S605");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite1CheckRequirementEnabledChecker15(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S605");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite1CheckRequirementEnabledChecker16(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S88");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite1CheckRequirementEnabledChecker17(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S135");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite1CheckRequirementEnabledChecker18(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S324");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite1RopQueryRowsResponseChecker4(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SETCOLUMNS,True,True" +
                    ",True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S414");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S414");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S414");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S414");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S414");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S414");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S414");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S414");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S414");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S414");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R472, MS-OXCTABL_R427, MS-OXCTABL_R42" +
                        "6, MS-OXCTABL_R116, MS-OXCTABL_R610");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R472");
            this.Manager.Checkpoint("MS-OXCTABL_R427");
            this.Manager.Checkpoint("MS-OXCTABL_R426");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R610");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite1CheckRequirementEnabledChecker19(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S606");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite1RopExpandRowResponseChecker3(bool isLastSetColumnData) {
            this.Manager.Comment("checking step \'event RopExpandRowResponse(True)\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isLastSetColumnData, "isLastSetColumnData of RopExpandRowResponse, state S898");
        }
        
        private void S04_ExpandRowRops_CollapseorExpandRow_TestSuiteS930() {
            this.Manager.Comment("reaching state \'S930\'");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite1RopExpandRowResponseChecker4(bool isLastSetColumnData) {
            this.Manager.Comment("checking step \'event RopExpandRowResponse(False)\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isLastSetColumnData, "isLastSetColumnData of RopExpandRowResponse, state S898");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite1CheckRequirementEnabledChecker20(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S606");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite1RopExpandRowResponseChecker5(bool isLastSetColumnData) {
            this.Manager.Comment("checking step \'event RopExpandRowResponse(True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isLastSetColumnData, "isLastSetColumnData of RopExpandRowResponse, state S899");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R814, MS-OXCTABL_R825");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R814");
            this.Manager.Checkpoint("MS-OXCTABL_R825");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite1CheckRequirementEnabledChecker21(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S324");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite1RopQueryRowsResponseChecker5(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SETCOLUMNS,True,True" +
                    ",True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S415");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S415");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S415");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S415");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S415");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S415");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S415");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S415");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S415");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S415");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R472, MS-OXCTABL_R427, MS-OXCTABL_R42" +
                        "6, MS-OXCTABL_R116");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R472");
            this.Manager.Checkpoint("MS-OXCTABL_R427");
            this.Manager.Checkpoint("MS-OXCTABL_R426");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite1CheckRequirementEnabledChecker22(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S607");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite1CheckRequirementEnabledChecker23(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S607");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite1CheckRequirementEnabledChecker24(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S135");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite1CheckRequirementEnabledChecker25(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S325");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite1RopQueryRowsResponseChecker6(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SETCOLUMNS,True,True" +
                    ",True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S416");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S416");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S416");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S416");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S416");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S416");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S416");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S416");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S416");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S416");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R472, MS-OXCTABL_R427, MS-OXCTABL_R42" +
                        "6, MS-OXCTABL_R116, MS-OXCTABL_R610");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R472");
            this.Manager.Checkpoint("MS-OXCTABL_R427");
            this.Manager.Checkpoint("MS-OXCTABL_R426");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R610");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite1CheckRequirementEnabledChecker26(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S608");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite1RopExpandRowResponseChecker6(bool isLastSetColumnData) {
            this.Manager.Comment("checking step \'event RopExpandRowResponse(True)\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isLastSetColumnData, "isLastSetColumnData of RopExpandRowResponse, state S900");
        }
        
        private void S04_ExpandRowRops_CollapseorExpandRow_TestSuiteS932() {
            this.Manager.Comment("reaching state \'S932\'");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite1RopExpandRowResponseChecker7(bool isLastSetColumnData) {
            this.Manager.Comment("checking step \'event RopExpandRowResponse(False)\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isLastSetColumnData, "isLastSetColumnData of RopExpandRowResponse, state S900");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite1CheckRequirementEnabledChecker27(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S608");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite1RopExpandRowResponseChecker8(bool isLastSetColumnData) {
            this.Manager.Comment("checking step \'event RopExpandRowResponse(True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isLastSetColumnData, "isLastSetColumnData of RopExpandRowResponse, state S901");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R814, MS-OXCTABL_R825");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R814");
            this.Manager.Checkpoint("MS-OXCTABL_R825");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite1CheckRequirementEnabledChecker28(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S325");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite1RopQueryRowsResponseChecker7(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SETCOLUMNS,True,True" +
                    ",True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S417");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S417");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S417");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S417");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S417");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S417");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S417");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S417");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S417");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S417");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R472, MS-OXCTABL_R427, MS-OXCTABL_R42" +
                        "6, MS-OXCTABL_R116");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R472");
            this.Manager.Checkpoint("MS-OXCTABL_R427");
            this.Manager.Checkpoint("MS-OXCTABL_R426");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite1CheckRequirementEnabledChecker29(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S609");
        }
        
        private void S04_ExpandRowRops_CollapseorExpandRow_TestSuiteS876() {
            this.Manager.Comment("reaching state \'S876\'");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite1CheckRequirementEnabledChecker30(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S609");
        }
        
        private void S04_ExpandRowRops_CollapseorExpandRow_TestSuiteS877() {
            this.Manager.Comment("reaching state \'S877\'");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite1CheckRequirementEnabledChecker31(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S65");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite1CheckRequirementEnabledChecker32(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S89");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite1CheckRequirementEnabledChecker33(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S136");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite1CheckRequirementEnabledChecker34(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S326");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite1RopQueryRowsResponseChecker8(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SETCOLUMNS,True,True" +
                    ",True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S418");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S418");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S418");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S418");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S418");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S418");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S418");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S418");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S418");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S418");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R472, MS-OXCTABL_R427, MS-OXCTABL_R42" +
                        "6, MS-OXCTABL_R116");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R472");
            this.Manager.Checkpoint("MS-OXCTABL_R427");
            this.Manager.Checkpoint("MS-OXCTABL_R426");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite1CheckRequirementEnabledChecker35(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S610");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite1CheckRequirementEnabledChecker36(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S610");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite1CheckRequirementEnabledChecker37(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S326");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite1RopQueryRowsResponseChecker9(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SETCOLUMNS,True,True" +
                    ",True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S419");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S419");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S419");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S419");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S419");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S419");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S419");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S419");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S419");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S419");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R472, MS-OXCTABL_R427, MS-OXCTABL_R42" +
                        "6, MS-OXCTABL_R116, MS-OXCTABL_R610");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R472");
            this.Manager.Checkpoint("MS-OXCTABL_R427");
            this.Manager.Checkpoint("MS-OXCTABL_R426");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R610");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite1CheckRequirementEnabledChecker38(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S611");
        }
        
        private void S04_ExpandRowRops_CollapseorExpandRow_TestSuiteS890() {
            this.Manager.Comment("reaching state \'S890\'");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite1CheckRequirementEnabledChecker39(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S611");
        }
        
        private void S04_ExpandRowRops_CollapseorExpandRow_TestSuiteS891() {
            this.Manager.Comment("reaching state \'S891\'");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite1CheckRequirementEnabledChecker40(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S136");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite1CheckRequirementEnabledChecker41(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S327");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite1RopQueryRowsResponseChecker10(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SETCOLUMNS,True,True" +
                    ",True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S420");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S420");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S420");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S420");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S420");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S420");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S420");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S420");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S420");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S420");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R472, MS-OXCTABL_R427, MS-OXCTABL_R42" +
                        "6, MS-OXCTABL_R116");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R472");
            this.Manager.Checkpoint("MS-OXCTABL_R427");
            this.Manager.Checkpoint("MS-OXCTABL_R426");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite1CheckRequirementEnabledChecker42(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S612");
        }
        
        private void S04_ExpandRowRops_CollapseorExpandRow_TestSuiteS893() {
            this.Manager.Comment("reaching state \'S893\'");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite1CheckRequirementEnabledChecker43(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S612");
        }
        
        private void S04_ExpandRowRops_CollapseorExpandRow_TestSuiteS892() {
            this.Manager.Comment("reaching state \'S892\'");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite1CheckRequirementEnabledChecker44(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S327");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite1RopQueryRowsResponseChecker11(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SETCOLUMNS,True,True" +
                    ",True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S421");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S421");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S421");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S421");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S421");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S421");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S421");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S421");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S421");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S421");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R472, MS-OXCTABL_R427, MS-OXCTABL_R42" +
                        "6, MS-OXCTABL_R116, MS-OXCTABL_R610");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R472");
            this.Manager.Checkpoint("MS-OXCTABL_R427");
            this.Manager.Checkpoint("MS-OXCTABL_R426");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R610");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite1CheckRequirementEnabledChecker45(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S613");
        }
        
        private void S04_ExpandRowRops_CollapseorExpandRow_TestSuiteS878() {
            this.Manager.Comment("reaching state \'S878\'");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite1CheckRequirementEnabledChecker46(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S613");
        }
        
        private void S04_ExpandRowRops_CollapseorExpandRow_TestSuiteS879() {
            this.Manager.Comment("reaching state \'S879\'");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite1CheckRequirementEnabledChecker47(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S89");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite1CheckRequirementEnabledChecker48(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S137");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite1CheckRequirementEnabledChecker49(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S328");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite1RopQueryRowsResponseChecker12(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SETCOLUMNS,True,True" +
                    ",True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S422");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S422");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S422");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S422");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S422");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S422");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S422");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S422");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S422");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S422");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R472, MS-OXCTABL_R427, MS-OXCTABL_R42" +
                        "6, MS-OXCTABL_R116, MS-OXCTABL_R610");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R472");
            this.Manager.Checkpoint("MS-OXCTABL_R427");
            this.Manager.Checkpoint("MS-OXCTABL_R426");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R610");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite1CheckRequirementEnabledChecker50(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S614");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite1RopExpandRowResponseChecker9(bool isLastSetColumnData) {
            this.Manager.Comment("checking step \'event RopExpandRowResponse(True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isLastSetColumnData, "isLastSetColumnData of RopExpandRowResponse, state S902");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R814, MS-OXCTABL_R825");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R814");
            this.Manager.Checkpoint("MS-OXCTABL_R825");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite1CheckRequirementEnabledChecker51(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S614");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite1RopExpandRowResponseChecker10(bool isLastSetColumnData) {
            this.Manager.Comment("checking step \'event RopExpandRowResponse(True)\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isLastSetColumnData, "isLastSetColumnData of RopExpandRowResponse, state S903");
        }
        
        private void S04_ExpandRowRops_CollapseorExpandRow_TestSuiteS935() {
            this.Manager.Comment("reaching state \'S935\'");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite1RopExpandRowResponseChecker11(bool isLastSetColumnData) {
            this.Manager.Comment("checking step \'event RopExpandRowResponse(False)\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isLastSetColumnData, "isLastSetColumnData of RopExpandRowResponse, state S903");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite1CheckRequirementEnabledChecker52(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S328");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite1RopQueryRowsResponseChecker13(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SETCOLUMNS,True,True" +
                    ",True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S423");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S423");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S423");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S423");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S423");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S423");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S423");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S423");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S423");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S423");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R472, MS-OXCTABL_R427, MS-OXCTABL_R42" +
                        "6, MS-OXCTABL_R116");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R472");
            this.Manager.Checkpoint("MS-OXCTABL_R427");
            this.Manager.Checkpoint("MS-OXCTABL_R426");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite1CheckRequirementEnabledChecker53(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S615");
        }
        
        private void S04_ExpandRowRops_CollapseorExpandRow_TestSuiteS874() {
            this.Manager.Comment("reaching state \'S874\'");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite1CheckRequirementEnabledChecker54(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S615");
        }
        
        private void S04_ExpandRowRops_CollapseorExpandRow_TestSuiteS875() {
            this.Manager.Comment("reaching state \'S875\'");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite1CheckRequirementEnabledChecker55(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S137");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite1CheckRequirementEnabledChecker56(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S329");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite1RopQueryRowsResponseChecker14(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SETCOLUMNS,True,True" +
                    ",True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S424");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S424");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S424");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S424");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S424");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S424");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S424");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S424");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S424");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S424");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R472, MS-OXCTABL_R427, MS-OXCTABL_R42" +
                        "6, MS-OXCTABL_R116, MS-OXCTABL_R610");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R472");
            this.Manager.Checkpoint("MS-OXCTABL_R427");
            this.Manager.Checkpoint("MS-OXCTABL_R426");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R610");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite1CheckRequirementEnabledChecker57(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S616");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite1RopExpandRowResponseChecker12(bool isLastSetColumnData) {
            this.Manager.Comment("checking step \'event RopExpandRowResponse(True)\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isLastSetColumnData, "isLastSetColumnData of RopExpandRowResponse, state S904");
        }
        
        private void S04_ExpandRowRops_CollapseorExpandRow_TestSuiteS936() {
            this.Manager.Comment("reaching state \'S936\'");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite1RopExpandRowResponseChecker13(bool isLastSetColumnData) {
            this.Manager.Comment("checking step \'event RopExpandRowResponse(False)\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isLastSetColumnData, "isLastSetColumnData of RopExpandRowResponse, state S904");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite1CheckRequirementEnabledChecker58(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S616");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite1RopExpandRowResponseChecker14(bool isLastSetColumnData) {
            this.Manager.Comment("checking step \'event RopExpandRowResponse(True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isLastSetColumnData, "isLastSetColumnData of RopExpandRowResponse, state S905");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R814, MS-OXCTABL_R825");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R814");
            this.Manager.Checkpoint("MS-OXCTABL_R825");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite1CheckRequirementEnabledChecker59(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S329");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite1RopQueryRowsResponseChecker15(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SETCOLUMNS,True,True" +
                    ",True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S425");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S425");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S425");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S425");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S425");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S425");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S425");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S425");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S425");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S425");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R472, MS-OXCTABL_R427, MS-OXCTABL_R42" +
                        "6, MS-OXCTABL_R116");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R472");
            this.Manager.Checkpoint("MS-OXCTABL_R427");
            this.Manager.Checkpoint("MS-OXCTABL_R426");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite1CheckRequirementEnabledChecker60(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S617");
        }
        
        private void S04_ExpandRowRops_CollapseorExpandRow_TestSuiteS894() {
            this.Manager.Comment("reaching state \'S894\'");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite1CheckRequirementEnabledChecker61(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S617");
        }
        
        private void S04_ExpandRowRops_CollapseorExpandRow_TestSuiteS895() {
            this.Manager.Comment("reaching state \'S895\'");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite1CheckMAPIHTTPTransportSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S11");
        }
        #endregion
        
        #region Test Starting in S2
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite2() {
            this.Manager.BeginTest("MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite2");
            this.Manager.Comment("reaching state \'S2\'");
            bool temp224;
            this.Manager.Comment("executing step \'call CheckMAPIHTTPTransportSupported(out _)\'");
            this.IMS_OXCTABLAdapterInstance.CheckMAPIHTTPTransportSupported(out temp224);
            this.Manager.AddReturn(CheckMAPIHTTPTransportSupportedInfo, null, temp224);
            this.Manager.Comment("reaching state \'S3\'");
            int temp284 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite2CheckMAPIHTTPTransportSupportedChecker)), new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite2CheckMAPIHTTPTransportSupportedChecker1)));
            if ((temp284 == 0)) {
                this.Manager.Comment("reaching state \'S14\'");
                this.Manager.Comment("executing step \'call InitializeTable(CONTENT_TABLE)\'");
                this.IMS_OXCTABLAdapterInstance.InitializeTable(((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableType)(0)));
                this.Manager.Comment("reaching state \'S25\'");
                this.Manager.Comment("checking step \'return InitializeTable\'");
                this.Manager.Comment("reaching state \'S31\'");
                Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp225;
                this.Manager.Comment("executing step \'call RopSortTable(1,True,False,True,True,True,False,False)\'");
                temp225 = this.IMS_OXCTABLAdapterInstance.RopSortTable(1u, true, false, true, true, true, false, false);
                this.Manager.Checkpoint("MS-OXCTABL_R447");
                this.Manager.Comment("reaching state \'S37\'");
                this.Manager.Comment("checking step \'return RopSortTable/success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp225, "return of RopSortTable, state S37");
                this.Manager.Comment("reaching state \'S43\'");
                Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp226;
                this.Manager.Comment("executing step \'call RopSetColumns(1,False,False,False)\'");
                temp226 = this.IMS_OXCTABLAdapterInstance.RopSetColumns(1u, false, false, false);
                this.Manager.Checkpoint("MS-OXCTABL_R831");
                this.Manager.Checkpoint("MS-OXCTABL_R45");
                this.Manager.Comment("reaching state \'S49\'");
                this.Manager.Comment("checking step \'return RopSetColumns/success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp226, "return of RopSetColumns, state S49");
                this.Manager.Comment("reaching state \'S55\'");
                bool temp227;
                this.Manager.Comment("executing step \'call CheckRequirementEnabled(768,out _)\'");
                this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(768, out temp227);
                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp227);
                this.Manager.Comment("reaching state \'S61\'");
                int temp283 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite2CheckRequirementEnabledChecker)), new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite2CheckRequirementEnabledChecker15)));
                if ((temp283 == 0)) {
                    this.Manager.Comment("reaching state \'S68\'");
                    bool temp228;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(866,out _)\'");
                    this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(866, out temp228);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp228);
                    this.Manager.Comment("reaching state \'S80\'");
                    int temp253 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite2CheckRequirementEnabledChecker1)), new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite2CheckRequirementEnabledChecker8)));
                    if ((temp253 == 0)) {
                        this.Manager.Comment("reaching state \'S94\'");
                        bool temp229;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(867,out _)\'");
                        this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(867, out temp229);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp229);
                        this.Manager.Comment("reaching state \'S118\'");
                        int temp240 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite2CheckRequirementEnabledChecker2)), new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite2CheckRequirementEnabledChecker5)));
                        if ((temp240 == 0)) {
                            this.Manager.Comment("reaching state \'S146\'");
                            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp230;
                            this.Manager.Comment("executing step \'call RopQueryRows(Advance,True)\'");
                            temp230 = this.IMS_OXCTABLAdapterInstance.RopQueryRows(((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), true);
                            this.Manager.Checkpoint("MS-OXCTABL_R837");
                            this.Manager.Comment("reaching state \'S194\'");
                            this.Manager.Comment("checking step \'return RopQueryRows/success\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp230, "return of RopQueryRows, state S194");
                            this.Manager.Comment("reaching state \'S242\'");
                            bool temp231;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(610,out _)\'");
                            this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(610, out temp231);
                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp231);
                            this.Manager.Comment("reaching state \'S290\'");
                            int temp234 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite2CheckRequirementEnabledChecker3)), new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite2CheckRequirementEnabledChecker4)));
                            if ((temp234 == 0)) {
                                this.Manager.Comment("reaching state \'S346\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite2RopQueryRowsResponseChecker))) != -1)) {
                                    this.Manager.Comment("reaching state \'S442\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp232;
                                    this.Manager.Comment("executing step \'call RopCollapseRow(False,False)\'");
                                    temp232 = this.IMS_OXCTABLAdapterInstance.RopCollapseRow(false, false);
                                    this.Manager.Checkpoint("MS-OXCTABL_R574");
                                    this.Manager.Comment("reaching state \'S538\'");
                                    this.Manager.Comment("checking step \'return RopCollapseRow/success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp232, "return of RopCollapseRow, state S538");
                                    this.Manager.Comment("reaching state \'S650\'");
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite2RopQueryRowsResponseChecker)));
                                }
                                goto label76;
                            }
                            if ((temp234 == 1)) {
                                this.Manager.Comment("reaching state \'S347\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite2RopQueryRowsResponseChecker1))) != -1)) {
                                    this.Manager.Comment("reaching state \'S443\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp233;
                                    this.Manager.Comment("executing step \'call RopCollapseRow(False,True)\'");
                                    temp233 = this.IMS_OXCTABLAdapterInstance.RopCollapseRow(false, true);
                                    this.Manager.Checkpoint("MS-OXCTABL_R574");
                                    this.Manager.Checkpoint("MS-OXCTABL_R577");
                                    this.Manager.Checkpoint("MS-OXCTABL_R573");
                                    this.Manager.Comment("reaching state \'S539\'");
                                    this.Manager.Comment("checking step \'return RopCollapseRow/ecNotExpanded\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues.ecNotExpanded, temp233, "return of RopCollapseRow, state S539");
                                    S04_ExpandRowRops_CollapseorExpandRow_TestSuiteS651();
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite2RopQueryRowsResponseChecker1)));
                                }
                                goto label76;
                            }
                            throw new InvalidOperationException("never reached");
                        label76:
;
                            goto label78;
                        }
                        if ((temp240 == 1)) {
                            this.Manager.Comment("reaching state \'S147\'");
                            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp235;
                            this.Manager.Comment("executing step \'call RopQueryRows(Advance,True)\'");
                            temp235 = this.IMS_OXCTABLAdapterInstance.RopQueryRows(((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), true);
                            this.Manager.Checkpoint("MS-OXCTABL_R837");
                            this.Manager.Comment("reaching state \'S195\'");
                            this.Manager.Comment("checking step \'return RopQueryRows/success\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp235, "return of RopQueryRows, state S195");
                            this.Manager.Comment("reaching state \'S243\'");
                            bool temp236;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(610,out _)\'");
                            this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(610, out temp236);
                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp236);
                            this.Manager.Comment("reaching state \'S291\'");
                            int temp239 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite2CheckRequirementEnabledChecker6)), new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite2CheckRequirementEnabledChecker7)));
                            if ((temp239 == 0)) {
                                this.Manager.Comment("reaching state \'S348\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite2RopQueryRowsResponseChecker2))) != -1)) {
                                    this.Manager.Comment("reaching state \'S444\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp237;
                                    this.Manager.Comment("executing step \'call RopCollapseRow(False,False)\'");
                                    temp237 = this.IMS_OXCTABLAdapterInstance.RopCollapseRow(false, false);
                                    this.Manager.Checkpoint("MS-OXCTABL_R574");
                                    this.Manager.Comment("reaching state \'S540\'");
                                    this.Manager.Comment("checking step \'return RopCollapseRow/success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp237, "return of RopCollapseRow, state S540");
                                    this.Manager.Comment("reaching state \'S652\'");
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite2RopQueryRowsResponseChecker2)));
                                }
                                goto label77;
                            }
                            if ((temp239 == 1)) {
                                this.Manager.Comment("reaching state \'S349\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite2RopQueryRowsResponseChecker3))) != -1)) {
                                    this.Manager.Comment("reaching state \'S445\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp238;
                                    this.Manager.Comment("executing step \'call RopCollapseRow(False,False)\'");
                                    temp238 = this.IMS_OXCTABLAdapterInstance.RopCollapseRow(false, false);
                                    this.Manager.Checkpoint("MS-OXCTABL_R574");
                                    this.Manager.Comment("reaching state \'S541\'");
                                    this.Manager.Comment("checking step \'return RopCollapseRow/success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp238, "return of RopCollapseRow, state S541");
                                    this.Manager.Comment("reaching state \'S653\'");
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite2RopQueryRowsResponseChecker3)));
                                }
                                goto label77;
                            }
                            throw new InvalidOperationException("never reached");
                        label77:
;
                            goto label78;
                        }
                        throw new InvalidOperationException("never reached");
                    label78:
;
                        goto label82;
                    }
                    if ((temp253 == 1)) {
                        this.Manager.Comment("reaching state \'S95\'");
                        bool temp241;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(867,out _)\'");
                        this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(867, out temp241);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp241);
                        this.Manager.Comment("reaching state \'S119\'");
                        int temp252 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite2CheckRequirementEnabledChecker9)), new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite2CheckRequirementEnabledChecker12)));
                        if ((temp252 == 0)) {
                            this.Manager.Comment("reaching state \'S148\'");
                            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp242;
                            this.Manager.Comment("executing step \'call RopQueryRows(Advance,True)\'");
                            temp242 = this.IMS_OXCTABLAdapterInstance.RopQueryRows(((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), true);
                            this.Manager.Checkpoint("MS-OXCTABL_R837");
                            this.Manager.Comment("reaching state \'S196\'");
                            this.Manager.Comment("checking step \'return RopQueryRows/success\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp242, "return of RopQueryRows, state S196");
                            this.Manager.Comment("reaching state \'S244\'");
                            bool temp243;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(610,out _)\'");
                            this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(610, out temp243);
                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp243);
                            this.Manager.Comment("reaching state \'S292\'");
                            int temp246 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite2CheckRequirementEnabledChecker10)), new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite2CheckRequirementEnabledChecker11)));
                            if ((temp246 == 0)) {
                                this.Manager.Comment("reaching state \'S350\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite2RopQueryRowsResponseChecker4))) != -1)) {
                                    this.Manager.Comment("reaching state \'S446\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp244;
                                    this.Manager.Comment("executing step \'call RopCollapseRow(False,False)\'");
                                    temp244 = this.IMS_OXCTABLAdapterInstance.RopCollapseRow(false, false);
                                    this.Manager.Checkpoint("MS-OXCTABL_R574");
                                    this.Manager.Comment("reaching state \'S542\'");
                                    this.Manager.Comment("checking step \'return RopCollapseRow/success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp244, "return of RopCollapseRow, state S542");
                                    this.Manager.Comment("reaching state \'S654\'");
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite2RopQueryRowsResponseChecker4)));
                                }
                                goto label79;
                            }
                            if ((temp246 == 1)) {
                                this.Manager.Comment("reaching state \'S351\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite2RopQueryRowsResponseChecker5))) != -1)) {
                                    this.Manager.Comment("reaching state \'S447\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp245;
                                    this.Manager.Comment("executing step \'call RopCollapseRow(False,True)\'");
                                    temp245 = this.IMS_OXCTABLAdapterInstance.RopCollapseRow(false, true);
                                    this.Manager.Checkpoint("MS-OXCTABL_R574");
                                    this.Manager.Checkpoint("MS-OXCTABL_R577");
                                    this.Manager.Checkpoint("MS-OXCTABL_R573");
                                    this.Manager.Comment("reaching state \'S543\'");
                                    this.Manager.Comment("checking step \'return RopCollapseRow/ecNotExpanded\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues.ecNotExpanded, temp245, "return of RopCollapseRow, state S543");
                                    S04_ExpandRowRops_CollapseorExpandRow_TestSuiteS655();
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite2RopQueryRowsResponseChecker5)));
                                }
                                goto label79;
                            }
                            throw new InvalidOperationException("never reached");
                        label79:
;
                            goto label81;
                        }
                        if ((temp252 == 1)) {
                            this.Manager.Comment("reaching state \'S149\'");
                            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp247;
                            this.Manager.Comment("executing step \'call RopQueryRows(Advance,True)\'");
                            temp247 = this.IMS_OXCTABLAdapterInstance.RopQueryRows(((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), true);
                            this.Manager.Checkpoint("MS-OXCTABL_R837");
                            this.Manager.Comment("reaching state \'S197\'");
                            this.Manager.Comment("checking step \'return RopQueryRows/success\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp247, "return of RopQueryRows, state S197");
                            this.Manager.Comment("reaching state \'S245\'");
                            bool temp248;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(610,out _)\'");
                            this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(610, out temp248);
                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp248);
                            this.Manager.Comment("reaching state \'S293\'");
                            int temp251 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite2CheckRequirementEnabledChecker13)), new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite2CheckRequirementEnabledChecker14)));
                            if ((temp251 == 0)) {
                                this.Manager.Comment("reaching state \'S352\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite2RopQueryRowsResponseChecker6))) != -1)) {
                                    this.Manager.Comment("reaching state \'S448\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp249;
                                    this.Manager.Comment("executing step \'call RopCollapseRow(False,True)\'");
                                    temp249 = this.IMS_OXCTABLAdapterInstance.RopCollapseRow(false, true);
                                    this.Manager.Checkpoint("MS-OXCTABL_R574");
                                    this.Manager.Checkpoint("MS-OXCTABL_R577");
                                    this.Manager.Checkpoint("MS-OXCTABL_R573");
                                    this.Manager.Comment("reaching state \'S544\'");
                                    this.Manager.Comment("checking step \'return RopCollapseRow/ecNotExpanded\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues.ecNotExpanded, temp249, "return of RopCollapseRow, state S544");
                                    S04_ExpandRowRops_CollapseorExpandRow_TestSuiteS656();
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite2RopQueryRowsResponseChecker6)));
                                }
                                goto label80;
                            }
                            if ((temp251 == 1)) {
                                this.Manager.Comment("reaching state \'S353\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite2RopQueryRowsResponseChecker7))) != -1)) {
                                    this.Manager.Comment("reaching state \'S449\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp250;
                                    this.Manager.Comment("executing step \'call RopCollapseRow(False,False)\'");
                                    temp250 = this.IMS_OXCTABLAdapterInstance.RopCollapseRow(false, false);
                                    this.Manager.Checkpoint("MS-OXCTABL_R574");
                                    this.Manager.Comment("reaching state \'S545\'");
                                    this.Manager.Comment("checking step \'return RopCollapseRow/success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp250, "return of RopCollapseRow, state S545");
                                    this.Manager.Comment("reaching state \'S657\'");
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite2RopQueryRowsResponseChecker7)));
                                }
                                goto label80;
                            }
                            throw new InvalidOperationException("never reached");
                        label80:
;
                            goto label81;
                        }
                        throw new InvalidOperationException("never reached");
                    label81:
;
                        goto label82;
                    }
                    throw new InvalidOperationException("never reached");
                label82:
;
                    goto label91;
                }
                if ((temp283 == 1)) {
                    this.Manager.Comment("reaching state \'S69\'");
                    bool temp254;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(866,out _)\'");
                    this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(866, out temp254);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp254);
                    this.Manager.Comment("reaching state \'S81\'");
                    int temp282 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite2CheckRequirementEnabledChecker16)), new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite2CheckRequirementEnabledChecker23)));
                    if ((temp282 == 0)) {
                        this.Manager.Comment("reaching state \'S96\'");
                        bool temp255;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(867,out _)\'");
                        this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(867, out temp255);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp255);
                        this.Manager.Comment("reaching state \'S120\'");
                        int temp266 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite2CheckRequirementEnabledChecker17)), new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite2CheckRequirementEnabledChecker20)));
                        if ((temp266 == 0)) {
                            this.Manager.Comment("reaching state \'S150\'");
                            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp256;
                            this.Manager.Comment("executing step \'call RopQueryRows(Advance,True)\'");
                            temp256 = this.IMS_OXCTABLAdapterInstance.RopQueryRows(((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), true);
                            this.Manager.Checkpoint("MS-OXCTABL_R837");
                            this.Manager.Comment("reaching state \'S198\'");
                            this.Manager.Comment("checking step \'return RopQueryRows/success\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp256, "return of RopQueryRows, state S198");
                            this.Manager.Comment("reaching state \'S246\'");
                            bool temp257;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(610,out _)\'");
                            this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(610, out temp257);
                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp257);
                            this.Manager.Comment("reaching state \'S294\'");
                            int temp260 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite2CheckRequirementEnabledChecker18)), new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite2CheckRequirementEnabledChecker19)));
                            if ((temp260 == 0)) {
                                this.Manager.Comment("reaching state \'S354\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite2RopQueryRowsResponseChecker8))) != -1)) {
                                    this.Manager.Comment("reaching state \'S450\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp258;
                                    this.Manager.Comment("executing step \'call RopCollapseRow(False,True)\'");
                                    temp258 = this.IMS_OXCTABLAdapterInstance.RopCollapseRow(false, true);
                                    this.Manager.Checkpoint("MS-OXCTABL_R574");
                                    this.Manager.Checkpoint("MS-OXCTABL_R577");
                                    this.Manager.Checkpoint("MS-OXCTABL_R573");
                                    this.Manager.Comment("reaching state \'S546\'");
                                    this.Manager.Comment("checking step \'return RopCollapseRow/ecNotExpanded\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues.ecNotExpanded, temp258, "return of RopCollapseRow, state S546");
                                    S04_ExpandRowRops_CollapseorExpandRow_TestSuiteS658();
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite2RopQueryRowsResponseChecker8)));
                                }
                                goto label83;
                            }
                            if ((temp260 == 1)) {
                                this.Manager.Comment("reaching state \'S355\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite2RopQueryRowsResponseChecker9))) != -1)) {
                                    this.Manager.Comment("reaching state \'S451\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp259;
                                    this.Manager.Comment("executing step \'call RopCollapseRow(False,False)\'");
                                    temp259 = this.IMS_OXCTABLAdapterInstance.RopCollapseRow(false, false);
                                    this.Manager.Checkpoint("MS-OXCTABL_R574");
                                    this.Manager.Comment("reaching state \'S547\'");
                                    this.Manager.Comment("checking step \'return RopCollapseRow/success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp259, "return of RopCollapseRow, state S547");
                                    this.Manager.Comment("reaching state \'S659\'");
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite2RopQueryRowsResponseChecker9)));
                                }
                                goto label83;
                            }
                            throw new InvalidOperationException("never reached");
                        label83:
;
                            goto label85;
                        }
                        if ((temp266 == 1)) {
                            this.Manager.Comment("reaching state \'S151\'");
                            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp261;
                            this.Manager.Comment("executing step \'call RopQueryRows(Advance,True)\'");
                            temp261 = this.IMS_OXCTABLAdapterInstance.RopQueryRows(((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), true);
                            this.Manager.Checkpoint("MS-OXCTABL_R837");
                            this.Manager.Comment("reaching state \'S199\'");
                            this.Manager.Comment("checking step \'return RopQueryRows/success\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp261, "return of RopQueryRows, state S199");
                            this.Manager.Comment("reaching state \'S247\'");
                            bool temp262;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(610,out _)\'");
                            this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(610, out temp262);
                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp262);
                            this.Manager.Comment("reaching state \'S295\'");
                            int temp265 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite2CheckRequirementEnabledChecker21)), new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite2CheckRequirementEnabledChecker22)));
                            if ((temp265 == 0)) {
                                this.Manager.Comment("reaching state \'S356\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite2RopQueryRowsResponseChecker10))) != -1)) {
                                    this.Manager.Comment("reaching state \'S452\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp263;
                                    this.Manager.Comment("executing step \'call RopCollapseRow(False,False)\'");
                                    temp263 = this.IMS_OXCTABLAdapterInstance.RopCollapseRow(false, false);
                                    this.Manager.Checkpoint("MS-OXCTABL_R574");
                                    this.Manager.Comment("reaching state \'S548\'");
                                    this.Manager.Comment("checking step \'return RopCollapseRow/success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp263, "return of RopCollapseRow, state S548");
                                    this.Manager.Comment("reaching state \'S660\'");
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite2RopQueryRowsResponseChecker10)));
                                }
                                goto label84;
                            }
                            if ((temp265 == 1)) {
                                this.Manager.Comment("reaching state \'S357\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite2RopQueryRowsResponseChecker11))) != -1)) {
                                    this.Manager.Comment("reaching state \'S453\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp264;
                                    this.Manager.Comment("executing step \'call RopCollapseRow(False,False)\'");
                                    temp264 = this.IMS_OXCTABLAdapterInstance.RopCollapseRow(false, false);
                                    this.Manager.Checkpoint("MS-OXCTABL_R574");
                                    this.Manager.Comment("reaching state \'S549\'");
                                    this.Manager.Comment("checking step \'return RopCollapseRow/success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp264, "return of RopCollapseRow, state S549");
                                    this.Manager.Comment("reaching state \'S661\'");
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite2RopQueryRowsResponseChecker11)));
                                }
                                goto label84;
                            }
                            throw new InvalidOperationException("never reached");
                        label84:
;
                            goto label85;
                        }
                        throw new InvalidOperationException("never reached");
                    label85:
;
                        goto label90;
                    }
                    if ((temp282 == 1)) {
                        this.Manager.Comment("reaching state \'S97\'");
                        bool temp267;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(867,out _)\'");
                        this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(867, out temp267);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp267);
                        this.Manager.Comment("reaching state \'S121\'");
                        int temp281 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite2CheckRequirementEnabledChecker24)), new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite2CheckRequirementEnabledChecker29)));
                        if ((temp281 == 0)) {
                            this.Manager.Comment("reaching state \'S152\'");
                            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp268;
                            this.Manager.Comment("executing step \'call RopQueryRows(Advance,True)\'");
                            temp268 = this.IMS_OXCTABLAdapterInstance.RopQueryRows(((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), true);
                            this.Manager.Checkpoint("MS-OXCTABL_R837");
                            this.Manager.Comment("reaching state \'S200\'");
                            this.Manager.Comment("checking step \'return RopQueryRows/success\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp268, "return of RopQueryRows, state S200");
                            this.Manager.Comment("reaching state \'S248\'");
                            bool temp269;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(610,out _)\'");
                            this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(610, out temp269);
                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp269);
                            this.Manager.Comment("reaching state \'S296\'");
                            int temp275 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite2CheckRequirementEnabledChecker25)), new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite2CheckRequirementEnabledChecker26)));
                            if ((temp275 == 0)) {
                                this.Manager.Comment("reaching state \'S358\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite2RopQueryRowsResponseChecker12))) != -1)) {
                                    this.Manager.Comment("reaching state \'S454\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp270;
                                    this.Manager.Comment("executing step \'call RopCollapseRow(False,False)\'");
                                    temp270 = this.IMS_OXCTABLAdapterInstance.RopCollapseRow(false, false);
                                    this.Manager.Checkpoint("MS-OXCTABL_R574");
                                    this.Manager.Comment("reaching state \'S550\'");
                                    this.Manager.Comment("checking step \'return RopCollapseRow/success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp270, "return of RopCollapseRow, state S550");
                                    this.Manager.Comment("reaching state \'S662\'");
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite2RopQueryRowsResponseChecker12)));
                                }
                                goto label87;
                            }
                            if ((temp275 == 1)) {
                                this.Manager.Comment("reaching state \'S359\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite2RopQueryRowsResponseChecker13))) != -1)) {
                                    this.Manager.Comment("reaching state \'S455\'");
                                    bool temp271;
                                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(748,out _)\'");
                                    this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(748, out temp271);
                                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp271);
                                    this.Manager.Comment("reaching state \'S551\'");
                                    int temp274 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite2CheckRequirementEnabledChecker27)), new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite2CheckRequirementEnabledChecker28)));
                                    if ((temp274 == 0)) {
                                        this.Manager.Comment("reaching state \'S663\'");
                                        Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp272;
                                        this.Manager.Comment("executing step \'call RopExpandRow(False,True,False)\'");
                                        temp272 = this.IMS_OXCTABLAdapterInstance.RopExpandRow(false, true, false);
                                        this.Manager.Checkpoint("MS-OXCTABL_R568");
                                        this.Manager.Checkpoint("MS-OXCTABL_R571");
                                        this.Manager.Comment("reaching state \'S778\'");
                                        this.Manager.Comment("checking step \'return RopExpandRow/ecNotCollapsed\'");
                                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues.ecNotCollapsed, temp272, "return of RopExpandRow, state S778");
                                        S04_ExpandRowRops_CollapseorExpandRow_TestSuiteS874();
                                        goto label86;
                                    }
                                    if ((temp274 == 1)) {
                                        this.Manager.Comment("reaching state \'S664\'");
                                        Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp273;
                                        this.Manager.Comment("executing step \'call RopExpandRow(False,True,False)\'");
                                        temp273 = this.IMS_OXCTABLAdapterInstance.RopExpandRow(false, true, false);
                                        this.Manager.Checkpoint("MS-OXCTABL_R568");
                                        this.Manager.Checkpoint("MS-OXCTABL_R571");
                                        this.Manager.Comment("reaching state \'S779\'");
                                        this.Manager.Comment("checking step \'return RopExpandRow/ecNotCollapsed\'");
                                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues.ecNotCollapsed, temp273, "return of RopExpandRow, state S779");
                                        S04_ExpandRowRops_CollapseorExpandRow_TestSuiteS875();
                                        goto label86;
                                    }
                                    throw new InvalidOperationException("never reached");
                                label86:
;
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite2RopQueryRowsResponseChecker13)));
                                }
                                goto label87;
                            }
                            throw new InvalidOperationException("never reached");
                        label87:
;
                            goto label89;
                        }
                        if ((temp281 == 1)) {
                            this.Manager.Comment("reaching state \'S153\'");
                            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp276;
                            this.Manager.Comment("executing step \'call RopQueryRows(Advance,True)\'");
                            temp276 = this.IMS_OXCTABLAdapterInstance.RopQueryRows(((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), true);
                            this.Manager.Checkpoint("MS-OXCTABL_R837");
                            this.Manager.Comment("reaching state \'S201\'");
                            this.Manager.Comment("checking step \'return RopQueryRows/success\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp276, "return of RopQueryRows, state S201");
                            this.Manager.Comment("reaching state \'S249\'");
                            bool temp277;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(610,out _)\'");
                            this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(610, out temp277);
                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp277);
                            this.Manager.Comment("reaching state \'S297\'");
                            int temp280 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite2CheckRequirementEnabledChecker30)), new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite2CheckRequirementEnabledChecker31)));
                            if ((temp280 == 0)) {
                                this.Manager.Comment("reaching state \'S360\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite2RopQueryRowsResponseChecker14))) != -1)) {
                                    this.Manager.Comment("reaching state \'S456\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp278;
                                    this.Manager.Comment("executing step \'call RopCollapseRow(False,False)\'");
                                    temp278 = this.IMS_OXCTABLAdapterInstance.RopCollapseRow(false, false);
                                    this.Manager.Checkpoint("MS-OXCTABL_R574");
                                    this.Manager.Comment("reaching state \'S552\'");
                                    this.Manager.Comment("checking step \'return RopCollapseRow/success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp278, "return of RopCollapseRow, state S552");
                                    this.Manager.Comment("reaching state \'S665\'");
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite2RopQueryRowsResponseChecker14)));
                                }
                                goto label88;
                            }
                            if ((temp280 == 1)) {
                                this.Manager.Comment("reaching state \'S361\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite2RopQueryRowsResponseChecker15))) != -1)) {
                                    this.Manager.Comment("reaching state \'S457\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp279;
                                    this.Manager.Comment("executing step \'call RopCollapseRow(False,True)\'");
                                    temp279 = this.IMS_OXCTABLAdapterInstance.RopCollapseRow(false, true);
                                    this.Manager.Checkpoint("MS-OXCTABL_R574");
                                    this.Manager.Checkpoint("MS-OXCTABL_R577");
                                    this.Manager.Checkpoint("MS-OXCTABL_R573");
                                    this.Manager.Comment("reaching state \'S553\'");
                                    this.Manager.Comment("checking step \'return RopCollapseRow/ecNotExpanded\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues.ecNotExpanded, temp279, "return of RopCollapseRow, state S553");
                                    S04_ExpandRowRops_CollapseorExpandRow_TestSuiteS666();
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite2RopQueryRowsResponseChecker15)));
                                }
                                goto label88;
                            }
                            throw new InvalidOperationException("never reached");
                        label88:
;
                            goto label89;
                        }
                        throw new InvalidOperationException("never reached");
                    label89:
;
                        goto label90;
                    }
                    throw new InvalidOperationException("never reached");
                label90:
;
                    goto label91;
                }
                throw new InvalidOperationException("never reached");
            label91:
;
                goto label92;
            }
            if ((temp284 == 1)) {
                this.Manager.Comment("reaching state \'S15\'");
                goto label92;
            }
            throw new InvalidOperationException("never reached");
        label92:
;
            this.Manager.EndTest();
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite2CheckMAPIHTTPTransportSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S3");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite2CheckRequirementEnabledChecker(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S61");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite2CheckRequirementEnabledChecker1(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S80");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite2CheckRequirementEnabledChecker2(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S118");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite2CheckRequirementEnabledChecker3(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S290");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite2RopQueryRowsResponseChecker(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SETCOLUMNS,True,True" +
                    ",True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S346");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S346");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S346");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S346");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S346");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S346");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S346");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S346");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S346");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S346");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R472, MS-OXCTABL_R427, MS-OXCTABL_R42" +
                        "6, MS-OXCTABL_R116");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R472");
            this.Manager.Checkpoint("MS-OXCTABL_R427");
            this.Manager.Checkpoint("MS-OXCTABL_R426");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite2CheckRequirementEnabledChecker4(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S290");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite2RopQueryRowsResponseChecker1(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SETCOLUMNS,True,True" +
                    ",True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S347");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S347");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S347");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S347");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S347");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S347");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S347");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S347");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S347");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S347");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R472, MS-OXCTABL_R427, MS-OXCTABL_R42" +
                        "6, MS-OXCTABL_R116, MS-OXCTABL_R610");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R472");
            this.Manager.Checkpoint("MS-OXCTABL_R427");
            this.Manager.Checkpoint("MS-OXCTABL_R426");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R610");
        }
        
        private void S04_ExpandRowRops_CollapseorExpandRow_TestSuiteS651() {
            this.Manager.Comment("reaching state \'S651\'");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite2CheckRequirementEnabledChecker5(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S118");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite2CheckRequirementEnabledChecker6(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S291");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite2RopQueryRowsResponseChecker2(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SETCOLUMNS,True,True" +
                    ",True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S348");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S348");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S348");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S348");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S348");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S348");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S348");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S348");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S348");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S348");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R472, MS-OXCTABL_R427, MS-OXCTABL_R42" +
                        "6, MS-OXCTABL_R116");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R472");
            this.Manager.Checkpoint("MS-OXCTABL_R427");
            this.Manager.Checkpoint("MS-OXCTABL_R426");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite2CheckRequirementEnabledChecker7(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S291");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite2RopQueryRowsResponseChecker3(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SETCOLUMNS,True,True" +
                    ",True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S349");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S349");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S349");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S349");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S349");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S349");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S349");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S349");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S349");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S349");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R472, MS-OXCTABL_R427, MS-OXCTABL_R42" +
                        "6, MS-OXCTABL_R116, MS-OXCTABL_R610");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R472");
            this.Manager.Checkpoint("MS-OXCTABL_R427");
            this.Manager.Checkpoint("MS-OXCTABL_R426");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R610");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite2CheckRequirementEnabledChecker8(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S80");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite2CheckRequirementEnabledChecker9(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S119");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite2CheckRequirementEnabledChecker10(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S292");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite2RopQueryRowsResponseChecker4(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SETCOLUMNS,True,True" +
                    ",True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S350");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S350");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S350");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S350");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S350");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S350");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S350");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S350");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S350");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S350");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R472, MS-OXCTABL_R427, MS-OXCTABL_R42" +
                        "6, MS-OXCTABL_R116, MS-OXCTABL_R610");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R472");
            this.Manager.Checkpoint("MS-OXCTABL_R427");
            this.Manager.Checkpoint("MS-OXCTABL_R426");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R610");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite2CheckRequirementEnabledChecker11(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S292");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite2RopQueryRowsResponseChecker5(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SETCOLUMNS,True,True" +
                    ",True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S351");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S351");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S351");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S351");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S351");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S351");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S351");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S351");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S351");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S351");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R472, MS-OXCTABL_R427, MS-OXCTABL_R42" +
                        "6, MS-OXCTABL_R116");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R472");
            this.Manager.Checkpoint("MS-OXCTABL_R427");
            this.Manager.Checkpoint("MS-OXCTABL_R426");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
        }
        
        private void S04_ExpandRowRops_CollapseorExpandRow_TestSuiteS655() {
            this.Manager.Comment("reaching state \'S655\'");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite2CheckRequirementEnabledChecker12(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S119");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite2CheckRequirementEnabledChecker13(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S293");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite2RopQueryRowsResponseChecker6(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SETCOLUMNS,True,True" +
                    ",True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S352");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S352");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S352");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S352");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S352");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S352");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S352");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S352");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S352");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S352");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R472, MS-OXCTABL_R427, MS-OXCTABL_R42" +
                        "6, MS-OXCTABL_R116, MS-OXCTABL_R610");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R472");
            this.Manager.Checkpoint("MS-OXCTABL_R427");
            this.Manager.Checkpoint("MS-OXCTABL_R426");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R610");
        }
        
        private void S04_ExpandRowRops_CollapseorExpandRow_TestSuiteS656() {
            this.Manager.Comment("reaching state \'S656\'");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite2CheckRequirementEnabledChecker14(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S293");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite2RopQueryRowsResponseChecker7(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SETCOLUMNS,True,True" +
                    ",True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S353");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S353");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S353");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S353");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S353");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S353");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S353");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S353");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S353");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S353");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R472, MS-OXCTABL_R427, MS-OXCTABL_R42" +
                        "6, MS-OXCTABL_R116");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R472");
            this.Manager.Checkpoint("MS-OXCTABL_R427");
            this.Manager.Checkpoint("MS-OXCTABL_R426");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite2CheckRequirementEnabledChecker15(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S61");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite2CheckRequirementEnabledChecker16(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S81");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite2CheckRequirementEnabledChecker17(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S120");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite2CheckRequirementEnabledChecker18(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S294");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite2RopQueryRowsResponseChecker8(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SETCOLUMNS,True,True" +
                    ",True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S354");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S354");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S354");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S354");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S354");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S354");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S354");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S354");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S354");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S354");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R472, MS-OXCTABL_R427, MS-OXCTABL_R42" +
                        "6, MS-OXCTABL_R116");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R472");
            this.Manager.Checkpoint("MS-OXCTABL_R427");
            this.Manager.Checkpoint("MS-OXCTABL_R426");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
        }
        
        private void S04_ExpandRowRops_CollapseorExpandRow_TestSuiteS658() {
            this.Manager.Comment("reaching state \'S658\'");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite2CheckRequirementEnabledChecker19(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S294");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite2RopQueryRowsResponseChecker9(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SETCOLUMNS,True,True" +
                    ",True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S355");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S355");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S355");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S355");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S355");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S355");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S355");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S355");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S355");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S355");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R472, MS-OXCTABL_R427, MS-OXCTABL_R42" +
                        "6, MS-OXCTABL_R116, MS-OXCTABL_R610");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R472");
            this.Manager.Checkpoint("MS-OXCTABL_R427");
            this.Manager.Checkpoint("MS-OXCTABL_R426");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R610");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite2CheckRequirementEnabledChecker20(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S120");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite2CheckRequirementEnabledChecker21(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S295");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite2RopQueryRowsResponseChecker10(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SETCOLUMNS,True,True" +
                    ",True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S356");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S356");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S356");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S356");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S356");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S356");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S356");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S356");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S356");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S356");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R472, MS-OXCTABL_R427, MS-OXCTABL_R42" +
                        "6, MS-OXCTABL_R116");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R472");
            this.Manager.Checkpoint("MS-OXCTABL_R427");
            this.Manager.Checkpoint("MS-OXCTABL_R426");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite2CheckRequirementEnabledChecker22(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S295");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite2RopQueryRowsResponseChecker11(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SETCOLUMNS,True,True" +
                    ",True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S357");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S357");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S357");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S357");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S357");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S357");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S357");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S357");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S357");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S357");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R472, MS-OXCTABL_R427, MS-OXCTABL_R42" +
                        "6, MS-OXCTABL_R116, MS-OXCTABL_R610");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R472");
            this.Manager.Checkpoint("MS-OXCTABL_R427");
            this.Manager.Checkpoint("MS-OXCTABL_R426");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R610");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite2CheckRequirementEnabledChecker23(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S81");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite2CheckRequirementEnabledChecker24(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S121");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite2CheckRequirementEnabledChecker25(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S296");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite2RopQueryRowsResponseChecker12(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SETCOLUMNS,True,True" +
                    ",True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S358");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S358");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S358");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S358");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S358");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S358");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S358");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S358");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S358");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S358");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R472, MS-OXCTABL_R427, MS-OXCTABL_R42" +
                        "6, MS-OXCTABL_R116, MS-OXCTABL_R610");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R472");
            this.Manager.Checkpoint("MS-OXCTABL_R427");
            this.Manager.Checkpoint("MS-OXCTABL_R426");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R610");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite2CheckRequirementEnabledChecker26(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S296");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite2RopQueryRowsResponseChecker13(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SETCOLUMNS,True,True" +
                    ",True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S359");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S359");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S359");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S359");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S359");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S359");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S359");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S359");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S359");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S359");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R472, MS-OXCTABL_R427, MS-OXCTABL_R42" +
                        "6, MS-OXCTABL_R116");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R472");
            this.Manager.Checkpoint("MS-OXCTABL_R427");
            this.Manager.Checkpoint("MS-OXCTABL_R426");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite2CheckRequirementEnabledChecker27(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S551");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite2CheckRequirementEnabledChecker28(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S551");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite2CheckRequirementEnabledChecker29(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S121");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite2CheckRequirementEnabledChecker30(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S297");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite2RopQueryRowsResponseChecker14(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SETCOLUMNS,True,True" +
                    ",True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S360");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S360");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S360");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S360");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S360");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S360");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S360");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S360");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S360");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S360");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R472, MS-OXCTABL_R427, MS-OXCTABL_R42" +
                        "6, MS-OXCTABL_R116, MS-OXCTABL_R610");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R472");
            this.Manager.Checkpoint("MS-OXCTABL_R427");
            this.Manager.Checkpoint("MS-OXCTABL_R426");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R610");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite2CheckRequirementEnabledChecker31(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S297");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite2RopQueryRowsResponseChecker15(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SETCOLUMNS,True,True" +
                    ",True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S361");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S361");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S361");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S361");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S361");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S361");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S361");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S361");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S361");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S361");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R472, MS-OXCTABL_R427, MS-OXCTABL_R42" +
                        "6, MS-OXCTABL_R116");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R472");
            this.Manager.Checkpoint("MS-OXCTABL_R427");
            this.Manager.Checkpoint("MS-OXCTABL_R426");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
        }
        
        private void S04_ExpandRowRops_CollapseorExpandRow_TestSuiteS666() {
            this.Manager.Comment("reaching state \'S666\'");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite2CheckMAPIHTTPTransportSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S3");
        }
        #endregion
        
        #region Test Starting in S4
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite3() {
            this.Manager.BeginTest("MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite3");
            this.Manager.Comment("reaching state \'S4\'");
            bool temp285;
            this.Manager.Comment("executing step \'call CheckMAPIHTTPTransportSupported(out _)\'");
            this.IMS_OXCTABLAdapterInstance.CheckMAPIHTTPTransportSupported(out temp285);
            this.Manager.AddReturn(CheckMAPIHTTPTransportSupportedInfo, null, temp285);
            this.Manager.Comment("reaching state \'S5\'");
            int temp345 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite3CheckMAPIHTTPTransportSupportedChecker)), new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite3CheckMAPIHTTPTransportSupportedChecker1)));
            if ((temp345 == 0)) {
                this.Manager.Comment("reaching state \'S16\'");
                this.Manager.Comment("executing step \'call InitializeTable(CONTENT_TABLE)\'");
                this.IMS_OXCTABLAdapterInstance.InitializeTable(((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableType)(0)));
                this.Manager.Comment("reaching state \'S26\'");
                this.Manager.Comment("checking step \'return InitializeTable\'");
                this.Manager.Comment("reaching state \'S32\'");
                Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp286;
                this.Manager.Comment("executing step \'call RopSortTable(1,True,False,True,True,True,False,False)\'");
                temp286 = this.IMS_OXCTABLAdapterInstance.RopSortTable(1u, true, false, true, true, true, false, false);
                this.Manager.Checkpoint("MS-OXCTABL_R447");
                this.Manager.Comment("reaching state \'S38\'");
                this.Manager.Comment("checking step \'return RopSortTable/success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp286, "return of RopSortTable, state S38");
                this.Manager.Comment("reaching state \'S44\'");
                Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp287;
                this.Manager.Comment("executing step \'call RopSetColumns(1,False,False,False)\'");
                temp287 = this.IMS_OXCTABLAdapterInstance.RopSetColumns(1u, false, false, false);
                this.Manager.Checkpoint("MS-OXCTABL_R831");
                this.Manager.Checkpoint("MS-OXCTABL_R45");
                this.Manager.Comment("reaching state \'S50\'");
                this.Manager.Comment("checking step \'return RopSetColumns/success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp287, "return of RopSetColumns, state S50");
                this.Manager.Comment("reaching state \'S56\'");
                bool temp288;
                this.Manager.Comment("executing step \'call CheckRequirementEnabled(768,out _)\'");
                this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(768, out temp288);
                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp288);
                this.Manager.Comment("reaching state \'S62\'");
                int temp344 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite3CheckRequirementEnabledChecker)), new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite3CheckRequirementEnabledChecker17)));
                if ((temp344 == 0)) {
                    this.Manager.Comment("reaching state \'S70\'");
                    bool temp289;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(866,out _)\'");
                    this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(866, out temp289);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp289);
                    this.Manager.Comment("reaching state \'S82\'");
                    int temp317 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite3CheckRequirementEnabledChecker1)), new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite3CheckRequirementEnabledChecker8)));
                    if ((temp317 == 0)) {
                        this.Manager.Comment("reaching state \'S98\'");
                        bool temp290;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(867,out _)\'");
                        this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(867, out temp290);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp290);
                        this.Manager.Comment("reaching state \'S122\'");
                        int temp301 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite3CheckRequirementEnabledChecker2)), new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite3CheckRequirementEnabledChecker5)));
                        if ((temp301 == 0)) {
                            this.Manager.Comment("reaching state \'S154\'");
                            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp291;
                            this.Manager.Comment("executing step \'call RopQueryRows(Advance,True)\'");
                            temp291 = this.IMS_OXCTABLAdapterInstance.RopQueryRows(((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), true);
                            this.Manager.Checkpoint("MS-OXCTABL_R837");
                            this.Manager.Comment("reaching state \'S202\'");
                            this.Manager.Comment("checking step \'return RopQueryRows/success\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp291, "return of RopQueryRows, state S202");
                            this.Manager.Comment("reaching state \'S250\'");
                            bool temp292;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(610,out _)\'");
                            this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(610, out temp292);
                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp292);
                            this.Manager.Comment("reaching state \'S298\'");
                            int temp295 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite3CheckRequirementEnabledChecker3)), new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite3CheckRequirementEnabledChecker4)));
                            if ((temp295 == 0)) {
                                this.Manager.Comment("reaching state \'S362\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite3RopQueryRowsResponseChecker))) != -1)) {
                                    this.Manager.Comment("reaching state \'S458\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp293;
                                    this.Manager.Comment("executing step \'call RopCollapseRow(False,True)\'");
                                    temp293 = this.IMS_OXCTABLAdapterInstance.RopCollapseRow(false, true);
                                    this.Manager.Checkpoint("MS-OXCTABL_R574");
                                    this.Manager.Checkpoint("MS-OXCTABL_R577");
                                    this.Manager.Checkpoint("MS-OXCTABL_R573");
                                    this.Manager.Comment("reaching state \'S554\'");
                                    this.Manager.Comment("checking step \'return RopCollapseRow/ecNotExpanded\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues.ecNotExpanded, temp293, "return of RopCollapseRow, state S554");
                                    S04_ExpandRowRops_CollapseorExpandRow_TestSuiteS667();
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite3RopQueryRowsResponseChecker)));
                                }
                                goto label93;
                            }
                            if ((temp295 == 1)) {
                                this.Manager.Comment("reaching state \'S363\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite3RopQueryRowsResponseChecker1))) != -1)) {
                                    this.Manager.Comment("reaching state \'S459\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp294;
                                    this.Manager.Comment("executing step \'call RopCollapseRow(False,False)\'");
                                    temp294 = this.IMS_OXCTABLAdapterInstance.RopCollapseRow(false, false);
                                    this.Manager.Checkpoint("MS-OXCTABL_R574");
                                    this.Manager.Comment("reaching state \'S555\'");
                                    this.Manager.Comment("checking step \'return RopCollapseRow/success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp294, "return of RopCollapseRow, state S555");
                                    this.Manager.Comment("reaching state \'S668\'");
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite3RopQueryRowsResponseChecker1)));
                                }
                                goto label93;
                            }
                            throw new InvalidOperationException("never reached");
                        label93:
;
                            goto label95;
                        }
                        if ((temp301 == 1)) {
                            this.Manager.Comment("reaching state \'S155\'");
                            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp296;
                            this.Manager.Comment("executing step \'call RopQueryRows(Advance,True)\'");
                            temp296 = this.IMS_OXCTABLAdapterInstance.RopQueryRows(((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), true);
                            this.Manager.Checkpoint("MS-OXCTABL_R837");
                            this.Manager.Comment("reaching state \'S203\'");
                            this.Manager.Comment("checking step \'return RopQueryRows/success\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp296, "return of RopQueryRows, state S203");
                            this.Manager.Comment("reaching state \'S251\'");
                            bool temp297;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(610,out _)\'");
                            this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(610, out temp297);
                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp297);
                            this.Manager.Comment("reaching state \'S299\'");
                            int temp300 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite3CheckRequirementEnabledChecker6)), new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite3CheckRequirementEnabledChecker7)));
                            if ((temp300 == 0)) {
                                this.Manager.Comment("reaching state \'S364\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite3RopQueryRowsResponseChecker2))) != -1)) {
                                    this.Manager.Comment("reaching state \'S460\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp298;
                                    this.Manager.Comment("executing step \'call RopCollapseRow(False,True)\'");
                                    temp298 = this.IMS_OXCTABLAdapterInstance.RopCollapseRow(false, true);
                                    this.Manager.Checkpoint("MS-OXCTABL_R574");
                                    this.Manager.Checkpoint("MS-OXCTABL_R577");
                                    this.Manager.Checkpoint("MS-OXCTABL_R573");
                                    this.Manager.Comment("reaching state \'S556\'");
                                    this.Manager.Comment("checking step \'return RopCollapseRow/ecNotExpanded\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues.ecNotExpanded, temp298, "return of RopCollapseRow, state S556");
                                    S04_ExpandRowRops_CollapseorExpandRow_TestSuiteS669();
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite3RopQueryRowsResponseChecker2)));
                                }
                                goto label94;
                            }
                            if ((temp300 == 1)) {
                                this.Manager.Comment("reaching state \'S365\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite3RopQueryRowsResponseChecker3))) != -1)) {
                                    this.Manager.Comment("reaching state \'S461\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp299;
                                    this.Manager.Comment("executing step \'call RopCollapseRow(False,True)\'");
                                    temp299 = this.IMS_OXCTABLAdapterInstance.RopCollapseRow(false, true);
                                    this.Manager.Checkpoint("MS-OXCTABL_R574");
                                    this.Manager.Checkpoint("MS-OXCTABL_R577");
                                    this.Manager.Checkpoint("MS-OXCTABL_R573");
                                    this.Manager.Comment("reaching state \'S557\'");
                                    this.Manager.Comment("checking step \'return RopCollapseRow/ecNotExpanded\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues.ecNotExpanded, temp299, "return of RopCollapseRow, state S557");
                                    S04_ExpandRowRops_CollapseorExpandRow_TestSuiteS670();
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite3RopQueryRowsResponseChecker3)));
                                }
                                goto label94;
                            }
                            throw new InvalidOperationException("never reached");
                        label94:
;
                            goto label95;
                        }
                        throw new InvalidOperationException("never reached");
                    label95:
;
                        goto label100;
                    }
                    if ((temp317 == 1)) {
                        this.Manager.Comment("reaching state \'S99\'");
                        bool temp302;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(867,out _)\'");
                        this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(867, out temp302);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp302);
                        this.Manager.Comment("reaching state \'S123\'");
                        int temp316 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite3CheckRequirementEnabledChecker9)), new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite3CheckRequirementEnabledChecker12)));
                        if ((temp316 == 0)) {
                            this.Manager.Comment("reaching state \'S156\'");
                            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp303;
                            this.Manager.Comment("executing step \'call RopQueryRows(Advance,True)\'");
                            temp303 = this.IMS_OXCTABLAdapterInstance.RopQueryRows(((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), true);
                            this.Manager.Checkpoint("MS-OXCTABL_R837");
                            this.Manager.Comment("reaching state \'S204\'");
                            this.Manager.Comment("checking step \'return RopQueryRows/success\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp303, "return of RopQueryRows, state S204");
                            this.Manager.Comment("reaching state \'S252\'");
                            bool temp304;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(610,out _)\'");
                            this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(610, out temp304);
                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp304);
                            this.Manager.Comment("reaching state \'S300\'");
                            int temp307 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite3CheckRequirementEnabledChecker10)), new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite3CheckRequirementEnabledChecker11)));
                            if ((temp307 == 0)) {
                                this.Manager.Comment("reaching state \'S366\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite3RopQueryRowsResponseChecker4))) != -1)) {
                                    this.Manager.Comment("reaching state \'S462\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp305;
                                    this.Manager.Comment("executing step \'call RopCollapseRow(False,True)\'");
                                    temp305 = this.IMS_OXCTABLAdapterInstance.RopCollapseRow(false, true);
                                    this.Manager.Checkpoint("MS-OXCTABL_R574");
                                    this.Manager.Checkpoint("MS-OXCTABL_R577");
                                    this.Manager.Checkpoint("MS-OXCTABL_R573");
                                    this.Manager.Comment("reaching state \'S558\'");
                                    this.Manager.Comment("checking step \'return RopCollapseRow/ecNotExpanded\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues.ecNotExpanded, temp305, "return of RopCollapseRow, state S558");
                                    S04_ExpandRowRops_CollapseorExpandRow_TestSuiteS671();
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite3RopQueryRowsResponseChecker4)));
                                }
                                goto label96;
                            }
                            if ((temp307 == 1)) {
                                this.Manager.Comment("reaching state \'S367\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite3RopQueryRowsResponseChecker5))) != -1)) {
                                    this.Manager.Comment("reaching state \'S463\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp306;
                                    this.Manager.Comment("executing step \'call RopCollapseRow(False,False)\'");
                                    temp306 = this.IMS_OXCTABLAdapterInstance.RopCollapseRow(false, false);
                                    this.Manager.Checkpoint("MS-OXCTABL_R574");
                                    this.Manager.Comment("reaching state \'S559\'");
                                    this.Manager.Comment("checking step \'return RopCollapseRow/success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp306, "return of RopCollapseRow, state S559");
                                    this.Manager.Comment("reaching state \'S672\'");
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite3RopQueryRowsResponseChecker5)));
                                }
                                goto label96;
                            }
                            throw new InvalidOperationException("never reached");
                        label96:
;
                            goto label99;
                        }
                        if ((temp316 == 1)) {
                            this.Manager.Comment("reaching state \'S157\'");
                            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp308;
                            this.Manager.Comment("executing step \'call RopQueryRows(Advance,True)\'");
                            temp308 = this.IMS_OXCTABLAdapterInstance.RopQueryRows(((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), true);
                            this.Manager.Checkpoint("MS-OXCTABL_R837");
                            this.Manager.Comment("reaching state \'S205\'");
                            this.Manager.Comment("checking step \'return RopQueryRows/success\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp308, "return of RopQueryRows, state S205");
                            this.Manager.Comment("reaching state \'S253\'");
                            bool temp309;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(610,out _)\'");
                            this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(610, out temp309);
                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp309);
                            this.Manager.Comment("reaching state \'S301\'");
                            int temp315 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite3CheckRequirementEnabledChecker13)), new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite3CheckRequirementEnabledChecker14)));
                            if ((temp315 == 0)) {
                                this.Manager.Comment("reaching state \'S368\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite3RopQueryRowsResponseChecker6))) != -1)) {
                                    this.Manager.Comment("reaching state \'S464\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp310;
                                    this.Manager.Comment("executing step \'call RopCollapseRow(False,False)\'");
                                    temp310 = this.IMS_OXCTABLAdapterInstance.RopCollapseRow(false, false);
                                    this.Manager.Checkpoint("MS-OXCTABL_R574");
                                    this.Manager.Comment("reaching state \'S560\'");
                                    this.Manager.Comment("checking step \'return RopCollapseRow/success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp310, "return of RopCollapseRow, state S560");
                                    this.Manager.Comment("reaching state \'S673\'");
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite3RopQueryRowsResponseChecker6)));
                                }
                                goto label98;
                            }
                            if ((temp315 == 1)) {
                                this.Manager.Comment("reaching state \'S369\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite3RopQueryRowsResponseChecker7))) != -1)) {
                                    this.Manager.Comment("reaching state \'S465\'");
                                    bool temp311;
                                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(748,out _)\'");
                                    this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(748, out temp311);
                                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp311);
                                    this.Manager.Comment("reaching state \'S561\'");
                                    int temp314 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite3CheckRequirementEnabledChecker15)), new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite3CheckRequirementEnabledChecker16)));
                                    if ((temp314 == 0)) {
                                        this.Manager.Comment("reaching state \'S674\'");
                                        Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp312;
                                        this.Manager.Comment("executing step \'call RopExpandRow(False,True,False)\'");
                                        temp312 = this.IMS_OXCTABLAdapterInstance.RopExpandRow(false, true, false);
                                        this.Manager.Checkpoint("MS-OXCTABL_R568");
                                        this.Manager.Checkpoint("MS-OXCTABL_R571");
                                        this.Manager.Comment("reaching state \'S780\'");
                                        this.Manager.Comment("checking step \'return RopExpandRow/ecNotCollapsed\'");
                                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues.ecNotCollapsed, temp312, "return of RopExpandRow, state S780");
                                        S04_ExpandRowRops_CollapseorExpandRow_TestSuiteS876();
                                        goto label97;
                                    }
                                    if ((temp314 == 1)) {
                                        this.Manager.Comment("reaching state \'S675\'");
                                        Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp313;
                                        this.Manager.Comment("executing step \'call RopExpandRow(False,True,False)\'");
                                        temp313 = this.IMS_OXCTABLAdapterInstance.RopExpandRow(false, true, false);
                                        this.Manager.Checkpoint("MS-OXCTABL_R568");
                                        this.Manager.Checkpoint("MS-OXCTABL_R571");
                                        this.Manager.Comment("reaching state \'S781\'");
                                        this.Manager.Comment("checking step \'return RopExpandRow/ecNotCollapsed\'");
                                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues.ecNotCollapsed, temp313, "return of RopExpandRow, state S781");
                                        S04_ExpandRowRops_CollapseorExpandRow_TestSuiteS877();
                                        goto label97;
                                    }
                                    throw new InvalidOperationException("never reached");
                                label97:
;
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite3RopQueryRowsResponseChecker7)));
                                }
                                goto label98;
                            }
                            throw new InvalidOperationException("never reached");
                        label98:
;
                            goto label99;
                        }
                        throw new InvalidOperationException("never reached");
                    label99:
;
                        goto label100;
                    }
                    throw new InvalidOperationException("never reached");
                label100:
;
                    goto label108;
                }
                if ((temp344 == 1)) {
                    this.Manager.Comment("reaching state \'S71\'");
                    bool temp318;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(866,out _)\'");
                    this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(866, out temp318);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp318);
                    this.Manager.Comment("reaching state \'S83\'");
                    int temp343 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite3CheckRequirementEnabledChecker18)), new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite3CheckRequirementEnabledChecker25)));
                    if ((temp343 == 0)) {
                        this.Manager.Comment("reaching state \'S100\'");
                        bool temp319;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(867,out _)\'");
                        this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(867, out temp319);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp319);
                        this.Manager.Comment("reaching state \'S124\'");
                        int temp330 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite3CheckRequirementEnabledChecker19)), new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite3CheckRequirementEnabledChecker22)));
                        if ((temp330 == 0)) {
                            this.Manager.Comment("reaching state \'S158\'");
                            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp320;
                            this.Manager.Comment("executing step \'call RopQueryRows(Advance,True)\'");
                            temp320 = this.IMS_OXCTABLAdapterInstance.RopQueryRows(((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), true);
                            this.Manager.Checkpoint("MS-OXCTABL_R837");
                            this.Manager.Comment("reaching state \'S206\'");
                            this.Manager.Comment("checking step \'return RopQueryRows/success\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp320, "return of RopQueryRows, state S206");
                            this.Manager.Comment("reaching state \'S254\'");
                            bool temp321;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(610,out _)\'");
                            this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(610, out temp321);
                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp321);
                            this.Manager.Comment("reaching state \'S302\'");
                            int temp324 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite3CheckRequirementEnabledChecker20)), new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite3CheckRequirementEnabledChecker21)));
                            if ((temp324 == 0)) {
                                this.Manager.Comment("reaching state \'S370\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite3RopQueryRowsResponseChecker8))) != -1)) {
                                    this.Manager.Comment("reaching state \'S466\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp322;
                                    this.Manager.Comment("executing step \'call RopCollapseRow(False,False)\'");
                                    temp322 = this.IMS_OXCTABLAdapterInstance.RopCollapseRow(false, false);
                                    this.Manager.Checkpoint("MS-OXCTABL_R574");
                                    this.Manager.Comment("reaching state \'S562\'");
                                    this.Manager.Comment("checking step \'return RopCollapseRow/success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp322, "return of RopCollapseRow, state S562");
                                    this.Manager.Comment("reaching state \'S676\'");
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite3RopQueryRowsResponseChecker8)));
                                }
                                goto label101;
                            }
                            if ((temp324 == 1)) {
                                this.Manager.Comment("reaching state \'S371\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite3RopQueryRowsResponseChecker9))) != -1)) {
                                    this.Manager.Comment("reaching state \'S467\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp323;
                                    this.Manager.Comment("executing step \'call RopCollapseRow(False,True)\'");
                                    temp323 = this.IMS_OXCTABLAdapterInstance.RopCollapseRow(false, true);
                                    this.Manager.Checkpoint("MS-OXCTABL_R574");
                                    this.Manager.Checkpoint("MS-OXCTABL_R577");
                                    this.Manager.Checkpoint("MS-OXCTABL_R573");
                                    this.Manager.Comment("reaching state \'S563\'");
                                    this.Manager.Comment("checking step \'return RopCollapseRow/ecNotExpanded\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues.ecNotExpanded, temp323, "return of RopCollapseRow, state S563");
                                    S04_ExpandRowRops_CollapseorExpandRow_TestSuiteS677();
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite3RopQueryRowsResponseChecker9)));
                                }
                                goto label101;
                            }
                            throw new InvalidOperationException("never reached");
                        label101:
;
                            goto label103;
                        }
                        if ((temp330 == 1)) {
                            this.Manager.Comment("reaching state \'S159\'");
                            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp325;
                            this.Manager.Comment("executing step \'call RopQueryRows(Advance,True)\'");
                            temp325 = this.IMS_OXCTABLAdapterInstance.RopQueryRows(((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), true);
                            this.Manager.Checkpoint("MS-OXCTABL_R837");
                            this.Manager.Comment("reaching state \'S207\'");
                            this.Manager.Comment("checking step \'return RopQueryRows/success\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp325, "return of RopQueryRows, state S207");
                            this.Manager.Comment("reaching state \'S255\'");
                            bool temp326;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(610,out _)\'");
                            this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(610, out temp326);
                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp326);
                            this.Manager.Comment("reaching state \'S303\'");
                            int temp329 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite3CheckRequirementEnabledChecker23)), new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite3CheckRequirementEnabledChecker24)));
                            if ((temp329 == 0)) {
                                this.Manager.Comment("reaching state \'S372\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite3RopQueryRowsResponseChecker10))) != -1)) {
                                    this.Manager.Comment("reaching state \'S468\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp327;
                                    this.Manager.Comment("executing step \'call RopCollapseRow(False,True)\'");
                                    temp327 = this.IMS_OXCTABLAdapterInstance.RopCollapseRow(false, true);
                                    this.Manager.Checkpoint("MS-OXCTABL_R574");
                                    this.Manager.Checkpoint("MS-OXCTABL_R577");
                                    this.Manager.Checkpoint("MS-OXCTABL_R573");
                                    this.Manager.Comment("reaching state \'S564\'");
                                    this.Manager.Comment("checking step \'return RopCollapseRow/ecNotExpanded\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues.ecNotExpanded, temp327, "return of RopCollapseRow, state S564");
                                    S04_ExpandRowRops_CollapseorExpandRow_TestSuiteS678();
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite3RopQueryRowsResponseChecker10)));
                                }
                                goto label102;
                            }
                            if ((temp329 == 1)) {
                                this.Manager.Comment("reaching state \'S373\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite3RopQueryRowsResponseChecker11))) != -1)) {
                                    this.Manager.Comment("reaching state \'S469\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp328;
                                    this.Manager.Comment("executing step \'call RopCollapseRow(False,True)\'");
                                    temp328 = this.IMS_OXCTABLAdapterInstance.RopCollapseRow(false, true);
                                    this.Manager.Checkpoint("MS-OXCTABL_R574");
                                    this.Manager.Checkpoint("MS-OXCTABL_R577");
                                    this.Manager.Checkpoint("MS-OXCTABL_R573");
                                    this.Manager.Comment("reaching state \'S565\'");
                                    this.Manager.Comment("checking step \'return RopCollapseRow/ecNotExpanded\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues.ecNotExpanded, temp328, "return of RopCollapseRow, state S565");
                                    S04_ExpandRowRops_CollapseorExpandRow_TestSuiteS679();
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite3RopQueryRowsResponseChecker11)));
                                }
                                goto label102;
                            }
                            throw new InvalidOperationException("never reached");
                        label102:
;
                            goto label103;
                        }
                        throw new InvalidOperationException("never reached");
                    label103:
;
                        goto label107;
                    }
                    if ((temp343 == 1)) {
                        this.Manager.Comment("reaching state \'S101\'");
                        bool temp331;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(867,out _)\'");
                        this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(867, out temp331);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp331);
                        this.Manager.Comment("reaching state \'S125\'");
                        int temp342 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite3CheckRequirementEnabledChecker26)), new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite3CheckRequirementEnabledChecker29)));
                        if ((temp342 == 0)) {
                            this.Manager.Comment("reaching state \'S160\'");
                            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp332;
                            this.Manager.Comment("executing step \'call RopQueryRows(Advance,True)\'");
                            temp332 = this.IMS_OXCTABLAdapterInstance.RopQueryRows(((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), true);
                            this.Manager.Checkpoint("MS-OXCTABL_R837");
                            this.Manager.Comment("reaching state \'S208\'");
                            this.Manager.Comment("checking step \'return RopQueryRows/success\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp332, "return of RopQueryRows, state S208");
                            this.Manager.Comment("reaching state \'S256\'");
                            bool temp333;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(610,out _)\'");
                            this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(610, out temp333);
                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp333);
                            this.Manager.Comment("reaching state \'S304\'");
                            int temp336 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite3CheckRequirementEnabledChecker27)), new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite3CheckRequirementEnabledChecker28)));
                            if ((temp336 == 0)) {
                                this.Manager.Comment("reaching state \'S374\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite3RopQueryRowsResponseChecker12))) != -1)) {
                                    this.Manager.Comment("reaching state \'S470\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp334;
                                    this.Manager.Comment("executing step \'call RopCollapseRow(False,True)\'");
                                    temp334 = this.IMS_OXCTABLAdapterInstance.RopCollapseRow(false, true);
                                    this.Manager.Checkpoint("MS-OXCTABL_R574");
                                    this.Manager.Checkpoint("MS-OXCTABL_R577");
                                    this.Manager.Checkpoint("MS-OXCTABL_R573");
                                    this.Manager.Comment("reaching state \'S566\'");
                                    this.Manager.Comment("checking step \'return RopCollapseRow/ecNotExpanded\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues.ecNotExpanded, temp334, "return of RopCollapseRow, state S566");
                                    S04_ExpandRowRops_CollapseorExpandRow_TestSuiteS680();
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite3RopQueryRowsResponseChecker12)));
                                }
                                goto label104;
                            }
                            if ((temp336 == 1)) {
                                this.Manager.Comment("reaching state \'S375\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite3RopQueryRowsResponseChecker13))) != -1)) {
                                    this.Manager.Comment("reaching state \'S471\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp335;
                                    this.Manager.Comment("executing step \'call RopCollapseRow(False,False)\'");
                                    temp335 = this.IMS_OXCTABLAdapterInstance.RopCollapseRow(false, false);
                                    this.Manager.Checkpoint("MS-OXCTABL_R574");
                                    this.Manager.Comment("reaching state \'S567\'");
                                    this.Manager.Comment("checking step \'return RopCollapseRow/success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp335, "return of RopCollapseRow, state S567");
                                    this.Manager.Comment("reaching state \'S681\'");
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite3RopQueryRowsResponseChecker13)));
                                }
                                goto label104;
                            }
                            throw new InvalidOperationException("never reached");
                        label104:
;
                            goto label106;
                        }
                        if ((temp342 == 1)) {
                            this.Manager.Comment("reaching state \'S161\'");
                            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp337;
                            this.Manager.Comment("executing step \'call RopQueryRows(Advance,True)\'");
                            temp337 = this.IMS_OXCTABLAdapterInstance.RopQueryRows(((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), true);
                            this.Manager.Checkpoint("MS-OXCTABL_R837");
                            this.Manager.Comment("reaching state \'S209\'");
                            this.Manager.Comment("checking step \'return RopQueryRows/success\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp337, "return of RopQueryRows, state S209");
                            this.Manager.Comment("reaching state \'S257\'");
                            bool temp338;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(610,out _)\'");
                            this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(610, out temp338);
                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp338);
                            this.Manager.Comment("reaching state \'S305\'");
                            int temp341 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite3CheckRequirementEnabledChecker30)), new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite3CheckRequirementEnabledChecker31)));
                            if ((temp341 == 0)) {
                                this.Manager.Comment("reaching state \'S376\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite3RopQueryRowsResponseChecker14))) != -1)) {
                                    this.Manager.Comment("reaching state \'S472\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp339;
                                    this.Manager.Comment("executing step \'call RopCollapseRow(False,True)\'");
                                    temp339 = this.IMS_OXCTABLAdapterInstance.RopCollapseRow(false, true);
                                    this.Manager.Checkpoint("MS-OXCTABL_R574");
                                    this.Manager.Checkpoint("MS-OXCTABL_R577");
                                    this.Manager.Checkpoint("MS-OXCTABL_R573");
                                    this.Manager.Comment("reaching state \'S568\'");
                                    this.Manager.Comment("checking step \'return RopCollapseRow/ecNotExpanded\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues.ecNotExpanded, temp339, "return of RopCollapseRow, state S568");
                                    S04_ExpandRowRops_CollapseorExpandRow_TestSuiteS682();
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite3RopQueryRowsResponseChecker14)));
                                }
                                goto label105;
                            }
                            if ((temp341 == 1)) {
                                this.Manager.Comment("reaching state \'S377\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite3RopQueryRowsResponseChecker15))) != -1)) {
                                    this.Manager.Comment("reaching state \'S473\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp340;
                                    this.Manager.Comment("executing step \'call RopCollapseRow(False,False)\'");
                                    temp340 = this.IMS_OXCTABLAdapterInstance.RopCollapseRow(false, false);
                                    this.Manager.Checkpoint("MS-OXCTABL_R574");
                                    this.Manager.Comment("reaching state \'S569\'");
                                    this.Manager.Comment("checking step \'return RopCollapseRow/success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp340, "return of RopCollapseRow, state S569");
                                    this.Manager.Comment("reaching state \'S683\'");
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite3RopQueryRowsResponseChecker15)));
                                }
                                goto label105;
                            }
                            throw new InvalidOperationException("never reached");
                        label105:
;
                            goto label106;
                        }
                        throw new InvalidOperationException("never reached");
                    label106:
;
                        goto label107;
                    }
                    throw new InvalidOperationException("never reached");
                label107:
;
                    goto label108;
                }
                throw new InvalidOperationException("never reached");
            label108:
;
                goto label109;
            }
            if ((temp345 == 1)) {
                this.Manager.Comment("reaching state \'S17\'");
                goto label109;
            }
            throw new InvalidOperationException("never reached");
        label109:
;
            this.Manager.EndTest();
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite3CheckMAPIHTTPTransportSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S5");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite3CheckRequirementEnabledChecker(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S62");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite3CheckRequirementEnabledChecker1(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S82");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite3CheckRequirementEnabledChecker2(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S122");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite3CheckRequirementEnabledChecker3(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S298");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite3RopQueryRowsResponseChecker(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SETCOLUMNS,True,True" +
                    ",True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S362");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S362");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S362");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S362");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S362");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S362");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S362");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S362");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S362");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S362");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R472, MS-OXCTABL_R427, MS-OXCTABL_R42" +
                        "6, MS-OXCTABL_R116");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R472");
            this.Manager.Checkpoint("MS-OXCTABL_R427");
            this.Manager.Checkpoint("MS-OXCTABL_R426");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
        }
        
        private void S04_ExpandRowRops_CollapseorExpandRow_TestSuiteS667() {
            this.Manager.Comment("reaching state \'S667\'");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite3CheckRequirementEnabledChecker4(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S298");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite3RopQueryRowsResponseChecker1(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SETCOLUMNS,True,True" +
                    ",True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S363");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S363");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S363");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S363");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S363");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S363");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S363");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S363");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S363");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S363");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R472, MS-OXCTABL_R427, MS-OXCTABL_R42" +
                        "6, MS-OXCTABL_R116, MS-OXCTABL_R610");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R472");
            this.Manager.Checkpoint("MS-OXCTABL_R427");
            this.Manager.Checkpoint("MS-OXCTABL_R426");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R610");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite3CheckRequirementEnabledChecker5(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S122");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite3CheckRequirementEnabledChecker6(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S299");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite3RopQueryRowsResponseChecker2(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SETCOLUMNS,True,True" +
                    ",True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S364");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S364");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S364");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S364");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S364");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S364");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S364");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S364");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S364");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S364");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R472, MS-OXCTABL_R427, MS-OXCTABL_R42" +
                        "6, MS-OXCTABL_R116");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R472");
            this.Manager.Checkpoint("MS-OXCTABL_R427");
            this.Manager.Checkpoint("MS-OXCTABL_R426");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
        }
        
        private void S04_ExpandRowRops_CollapseorExpandRow_TestSuiteS669() {
            this.Manager.Comment("reaching state \'S669\'");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite3CheckRequirementEnabledChecker7(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S299");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite3RopQueryRowsResponseChecker3(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SETCOLUMNS,True,True" +
                    ",True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S365");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S365");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S365");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S365");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S365");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S365");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S365");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S365");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S365");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S365");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R472, MS-OXCTABL_R427, MS-OXCTABL_R42" +
                        "6, MS-OXCTABL_R116, MS-OXCTABL_R610");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R472");
            this.Manager.Checkpoint("MS-OXCTABL_R427");
            this.Manager.Checkpoint("MS-OXCTABL_R426");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R610");
        }
        
        private void S04_ExpandRowRops_CollapseorExpandRow_TestSuiteS670() {
            this.Manager.Comment("reaching state \'S670\'");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite3CheckRequirementEnabledChecker8(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S82");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite3CheckRequirementEnabledChecker9(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S123");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite3CheckRequirementEnabledChecker10(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S300");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite3RopQueryRowsResponseChecker4(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SETCOLUMNS,True,True" +
                    ",True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S366");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S366");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S366");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S366");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S366");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S366");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S366");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S366");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S366");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S366");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R472, MS-OXCTABL_R427, MS-OXCTABL_R42" +
                        "6, MS-OXCTABL_R116, MS-OXCTABL_R610");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R472");
            this.Manager.Checkpoint("MS-OXCTABL_R427");
            this.Manager.Checkpoint("MS-OXCTABL_R426");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R610");
        }
        
        private void S04_ExpandRowRops_CollapseorExpandRow_TestSuiteS671() {
            this.Manager.Comment("reaching state \'S671\'");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite3CheckRequirementEnabledChecker11(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S300");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite3RopQueryRowsResponseChecker5(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SETCOLUMNS,True,True" +
                    ",True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S367");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S367");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S367");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S367");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S367");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S367");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S367");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S367");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S367");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S367");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R472, MS-OXCTABL_R427, MS-OXCTABL_R42" +
                        "6, MS-OXCTABL_R116");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R472");
            this.Manager.Checkpoint("MS-OXCTABL_R427");
            this.Manager.Checkpoint("MS-OXCTABL_R426");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite3CheckRequirementEnabledChecker12(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S123");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite3CheckRequirementEnabledChecker13(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S301");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite3RopQueryRowsResponseChecker6(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SETCOLUMNS,True,True" +
                    ",True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S368");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S368");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S368");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S368");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S368");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S368");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S368");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S368");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S368");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S368");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R472, MS-OXCTABL_R427, MS-OXCTABL_R42" +
                        "6, MS-OXCTABL_R116, MS-OXCTABL_R610");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R472");
            this.Manager.Checkpoint("MS-OXCTABL_R427");
            this.Manager.Checkpoint("MS-OXCTABL_R426");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R610");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite3CheckRequirementEnabledChecker14(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S301");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite3RopQueryRowsResponseChecker7(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SETCOLUMNS,True,True" +
                    ",True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S369");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S369");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S369");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S369");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S369");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S369");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S369");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S369");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S369");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S369");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R472, MS-OXCTABL_R427, MS-OXCTABL_R42" +
                        "6, MS-OXCTABL_R116");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R472");
            this.Manager.Checkpoint("MS-OXCTABL_R427");
            this.Manager.Checkpoint("MS-OXCTABL_R426");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite3CheckRequirementEnabledChecker15(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S561");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite3CheckRequirementEnabledChecker16(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S561");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite3CheckRequirementEnabledChecker17(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S62");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite3CheckRequirementEnabledChecker18(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S83");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite3CheckRequirementEnabledChecker19(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S124");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite3CheckRequirementEnabledChecker20(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S302");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite3RopQueryRowsResponseChecker8(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SETCOLUMNS,True,True" +
                    ",True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S370");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S370");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S370");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S370");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S370");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S370");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S370");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S370");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S370");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S370");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R472, MS-OXCTABL_R427, MS-OXCTABL_R42" +
                        "6, MS-OXCTABL_R116");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R472");
            this.Manager.Checkpoint("MS-OXCTABL_R427");
            this.Manager.Checkpoint("MS-OXCTABL_R426");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite3CheckRequirementEnabledChecker21(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S302");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite3RopQueryRowsResponseChecker9(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SETCOLUMNS,True,True" +
                    ",True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S371");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S371");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S371");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S371");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S371");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S371");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S371");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S371");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S371");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S371");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R472, MS-OXCTABL_R427, MS-OXCTABL_R42" +
                        "6, MS-OXCTABL_R116, MS-OXCTABL_R610");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R472");
            this.Manager.Checkpoint("MS-OXCTABL_R427");
            this.Manager.Checkpoint("MS-OXCTABL_R426");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R610");
        }
        
        private void S04_ExpandRowRops_CollapseorExpandRow_TestSuiteS677() {
            this.Manager.Comment("reaching state \'S677\'");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite3CheckRequirementEnabledChecker22(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S124");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite3CheckRequirementEnabledChecker23(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S303");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite3RopQueryRowsResponseChecker10(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SETCOLUMNS,True,True" +
                    ",True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S372");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S372");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S372");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S372");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S372");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S372");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S372");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S372");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S372");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S372");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R472, MS-OXCTABL_R427, MS-OXCTABL_R42" +
                        "6, MS-OXCTABL_R116");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R472");
            this.Manager.Checkpoint("MS-OXCTABL_R427");
            this.Manager.Checkpoint("MS-OXCTABL_R426");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
        }
        
        private void S04_ExpandRowRops_CollapseorExpandRow_TestSuiteS678() {
            this.Manager.Comment("reaching state \'S678\'");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite3CheckRequirementEnabledChecker24(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S303");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite3RopQueryRowsResponseChecker11(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SETCOLUMNS,True,True" +
                    ",True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S373");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S373");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S373");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S373");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S373");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S373");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S373");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S373");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S373");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S373");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R472, MS-OXCTABL_R427, MS-OXCTABL_R42" +
                        "6, MS-OXCTABL_R116, MS-OXCTABL_R610");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R472");
            this.Manager.Checkpoint("MS-OXCTABL_R427");
            this.Manager.Checkpoint("MS-OXCTABL_R426");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R610");
        }
        
        private void S04_ExpandRowRops_CollapseorExpandRow_TestSuiteS679() {
            this.Manager.Comment("reaching state \'S679\'");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite3CheckRequirementEnabledChecker25(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S83");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite3CheckRequirementEnabledChecker26(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S125");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite3CheckRequirementEnabledChecker27(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S304");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite3RopQueryRowsResponseChecker12(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SETCOLUMNS,True,True" +
                    ",True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S374");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S374");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S374");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S374");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S374");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S374");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S374");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S374");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S374");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S374");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R472, MS-OXCTABL_R427, MS-OXCTABL_R42" +
                        "6, MS-OXCTABL_R116, MS-OXCTABL_R610");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R472");
            this.Manager.Checkpoint("MS-OXCTABL_R427");
            this.Manager.Checkpoint("MS-OXCTABL_R426");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R610");
        }
        
        private void S04_ExpandRowRops_CollapseorExpandRow_TestSuiteS680() {
            this.Manager.Comment("reaching state \'S680\'");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite3CheckRequirementEnabledChecker28(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S304");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite3RopQueryRowsResponseChecker13(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SETCOLUMNS,True,True" +
                    ",True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S375");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S375");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S375");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S375");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S375");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S375");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S375");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S375");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S375");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S375");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R472, MS-OXCTABL_R427, MS-OXCTABL_R42" +
                        "6, MS-OXCTABL_R116");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R472");
            this.Manager.Checkpoint("MS-OXCTABL_R427");
            this.Manager.Checkpoint("MS-OXCTABL_R426");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite3CheckRequirementEnabledChecker29(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S125");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite3CheckRequirementEnabledChecker30(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S305");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite3RopQueryRowsResponseChecker14(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SETCOLUMNS,True,True" +
                    ",True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S376");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S376");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S376");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S376");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S376");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S376");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S376");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S376");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S376");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S376");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R472, MS-OXCTABL_R427, MS-OXCTABL_R42" +
                        "6, MS-OXCTABL_R116, MS-OXCTABL_R610");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R472");
            this.Manager.Checkpoint("MS-OXCTABL_R427");
            this.Manager.Checkpoint("MS-OXCTABL_R426");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R610");
        }
        
        private void S04_ExpandRowRops_CollapseorExpandRow_TestSuiteS682() {
            this.Manager.Comment("reaching state \'S682\'");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite3CheckRequirementEnabledChecker31(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S305");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite3RopQueryRowsResponseChecker15(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SETCOLUMNS,True,True" +
                    ",True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S377");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S377");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S377");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S377");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S377");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S377");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S377");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S377");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S377");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S377");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R472, MS-OXCTABL_R427, MS-OXCTABL_R42" +
                        "6, MS-OXCTABL_R116");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R472");
            this.Manager.Checkpoint("MS-OXCTABL_R427");
            this.Manager.Checkpoint("MS-OXCTABL_R426");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite3CheckMAPIHTTPTransportSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S5");
        }
        #endregion
        
        #region Test Starting in S6
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite4() {
            this.Manager.BeginTest("MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite4");
            this.Manager.Comment("reaching state \'S6\'");
            bool temp346;
            this.Manager.Comment("executing step \'call CheckMAPIHTTPTransportSupported(out _)\'");
            this.IMS_OXCTABLAdapterInstance.CheckMAPIHTTPTransportSupported(out temp346);
            this.Manager.AddReturn(CheckMAPIHTTPTransportSupportedInfo, null, temp346);
            this.Manager.Comment("reaching state \'S7\'");
            int temp409 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite4CheckMAPIHTTPTransportSupportedChecker)), new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite4CheckMAPIHTTPTransportSupportedChecker1)));
            if ((temp409 == 0)) {
                this.Manager.Comment("reaching state \'S18\'");
                this.Manager.Comment("executing step \'call InitializeTable(CONTENT_TABLE)\'");
                this.IMS_OXCTABLAdapterInstance.InitializeTable(((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableType)(0)));
                this.Manager.Comment("reaching state \'S27\'");
                this.Manager.Comment("checking step \'return InitializeTable\'");
                this.Manager.Comment("reaching state \'S33\'");
                Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp347;
                this.Manager.Comment("executing step \'call RopSortTable(1,True,False,True,True,True,False,False)\'");
                temp347 = this.IMS_OXCTABLAdapterInstance.RopSortTable(1u, true, false, true, true, true, false, false);
                this.Manager.Checkpoint("MS-OXCTABL_R447");
                this.Manager.Comment("reaching state \'S39\'");
                this.Manager.Comment("checking step \'return RopSortTable/success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp347, "return of RopSortTable, state S39");
                this.Manager.Comment("reaching state \'S45\'");
                Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp348;
                this.Manager.Comment("executing step \'call RopSetColumns(1,False,False,False)\'");
                temp348 = this.IMS_OXCTABLAdapterInstance.RopSetColumns(1u, false, false, false);
                this.Manager.Checkpoint("MS-OXCTABL_R831");
                this.Manager.Checkpoint("MS-OXCTABL_R45");
                this.Manager.Comment("reaching state \'S51\'");
                this.Manager.Comment("checking step \'return RopSetColumns/success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp348, "return of RopSetColumns, state S51");
                this.Manager.Comment("reaching state \'S57\'");
                bool temp349;
                this.Manager.Comment("executing step \'call CheckRequirementEnabled(768,out _)\'");
                this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(768, out temp349);
                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp349);
                this.Manager.Comment("reaching state \'S63\'");
                int temp408 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite4CheckRequirementEnabledChecker)), new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite4CheckRequirementEnabledChecker15)));
                if ((temp408 == 0)) {
                    this.Manager.Comment("reaching state \'S72\'");
                    bool temp350;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(866,out _)\'");
                    this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(866, out temp350);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp350);
                    this.Manager.Comment("reaching state \'S84\'");
                    int temp375 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite4CheckRequirementEnabledChecker1)), new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite4CheckRequirementEnabledChecker8)));
                    if ((temp375 == 0)) {
                        this.Manager.Comment("reaching state \'S102\'");
                        bool temp351;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(867,out _)\'");
                        this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(867, out temp351);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp351);
                        this.Manager.Comment("reaching state \'S126\'");
                        int temp362 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite4CheckRequirementEnabledChecker2)), new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite4CheckRequirementEnabledChecker5)));
                        if ((temp362 == 0)) {
                            this.Manager.Comment("reaching state \'S162\'");
                            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp352;
                            this.Manager.Comment("executing step \'call RopQueryRows(Advance,True)\'");
                            temp352 = this.IMS_OXCTABLAdapterInstance.RopQueryRows(((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), true);
                            this.Manager.Checkpoint("MS-OXCTABL_R837");
                            this.Manager.Comment("reaching state \'S210\'");
                            this.Manager.Comment("checking step \'return RopQueryRows/success\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp352, "return of RopQueryRows, state S210");
                            this.Manager.Comment("reaching state \'S258\'");
                            bool temp353;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(610,out _)\'");
                            this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(610, out temp353);
                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp353);
                            this.Manager.Comment("reaching state \'S306\'");
                            int temp356 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite4CheckRequirementEnabledChecker3)), new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite4CheckRequirementEnabledChecker4)));
                            if ((temp356 == 0)) {
                                this.Manager.Comment("reaching state \'S378\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite4RopQueryRowsResponseChecker))) != -1)) {
                                    this.Manager.Comment("reaching state \'S474\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp354;
                                    this.Manager.Comment("executing step \'call RopCollapseRow(True,False)\'");
                                    temp354 = this.IMS_OXCTABLAdapterInstance.RopCollapseRow(true, false);
                                    this.Manager.Checkpoint("MS-OXCTABL_R574");
                                    this.Manager.Checkpoint("MS-OXCTABL_R576");
                                    this.Manager.Comment("reaching state \'S570\'");
                                    this.Manager.Comment("checking step \'return RopCollapseRow/ecNotFound\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues.ecNotFound, temp354, "return of RopCollapseRow, state S570");
                                    S04_ExpandRowRops_CollapseorExpandRow_TestSuiteS667();
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite4RopQueryRowsResponseChecker)));
                                }
                                goto label110;
                            }
                            if ((temp356 == 1)) {
                                this.Manager.Comment("reaching state \'S379\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite4RopQueryRowsResponseChecker1))) != -1)) {
                                    this.Manager.Comment("reaching state \'S475\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp355;
                                    this.Manager.Comment("executing step \'call RopCollapseRow(True,False)\'");
                                    temp355 = this.IMS_OXCTABLAdapterInstance.RopCollapseRow(true, false);
                                    this.Manager.Checkpoint("MS-OXCTABL_R574");
                                    this.Manager.Checkpoint("MS-OXCTABL_R576");
                                    this.Manager.Comment("reaching state \'S571\'");
                                    this.Manager.Comment("checking step \'return RopCollapseRow/ecNotFound\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues.ecNotFound, temp355, "return of RopCollapseRow, state S571");
                                    S04_ExpandRowRops_CollapseorExpandRow_TestSuiteS651();
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite4RopQueryRowsResponseChecker1)));
                                }
                                goto label110;
                            }
                            throw new InvalidOperationException("never reached");
                        label110:
;
                            goto label112;
                        }
                        if ((temp362 == 1)) {
                            this.Manager.Comment("reaching state \'S163\'");
                            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp357;
                            this.Manager.Comment("executing step \'call RopQueryRows(Advance,True)\'");
                            temp357 = this.IMS_OXCTABLAdapterInstance.RopQueryRows(((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), true);
                            this.Manager.Checkpoint("MS-OXCTABL_R837");
                            this.Manager.Comment("reaching state \'S211\'");
                            this.Manager.Comment("checking step \'return RopQueryRows/success\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp357, "return of RopQueryRows, state S211");
                            this.Manager.Comment("reaching state \'S259\'");
                            bool temp358;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(610,out _)\'");
                            this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(610, out temp358);
                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp358);
                            this.Manager.Comment("reaching state \'S307\'");
                            int temp361 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite4CheckRequirementEnabledChecker6)), new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite4CheckRequirementEnabledChecker7)));
                            if ((temp361 == 0)) {
                                this.Manager.Comment("reaching state \'S380\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite4RopQueryRowsResponseChecker2))) != -1)) {
                                    this.Manager.Comment("reaching state \'S476\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp359;
                                    this.Manager.Comment("executing step \'call RopCollapseRow(True,False)\'");
                                    temp359 = this.IMS_OXCTABLAdapterInstance.RopCollapseRow(true, false);
                                    this.Manager.Checkpoint("MS-OXCTABL_R574");
                                    this.Manager.Checkpoint("MS-OXCTABL_R576");
                                    this.Manager.Comment("reaching state \'S572\'");
                                    this.Manager.Comment("checking step \'return RopCollapseRow/ecNotFound\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues.ecNotFound, temp359, "return of RopCollapseRow, state S572");
                                    S04_ExpandRowRops_CollapseorExpandRow_TestSuiteS669();
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite4RopQueryRowsResponseChecker2)));
                                }
                                goto label111;
                            }
                            if ((temp361 == 1)) {
                                this.Manager.Comment("reaching state \'S381\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite4RopQueryRowsResponseChecker3))) != -1)) {
                                    this.Manager.Comment("reaching state \'S477\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp360;
                                    this.Manager.Comment("executing step \'call RopCollapseRow(True,False)\'");
                                    temp360 = this.IMS_OXCTABLAdapterInstance.RopCollapseRow(true, false);
                                    this.Manager.Checkpoint("MS-OXCTABL_R574");
                                    this.Manager.Checkpoint("MS-OXCTABL_R576");
                                    this.Manager.Comment("reaching state \'S573\'");
                                    this.Manager.Comment("checking step \'return RopCollapseRow/ecNotFound\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues.ecNotFound, temp360, "return of RopCollapseRow, state S573");
                                    S04_ExpandRowRops_CollapseorExpandRow_TestSuiteS670();
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite4RopQueryRowsResponseChecker3)));
                                }
                                goto label111;
                            }
                            throw new InvalidOperationException("never reached");
                        label111:
;
                            goto label112;
                        }
                        throw new InvalidOperationException("never reached");
                    label112:
;
                        goto label116;
                    }
                    if ((temp375 == 1)) {
                        this.Manager.Comment("reaching state \'S103\'");
                        bool temp363;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(867,out _)\'");
                        this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(867, out temp363);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp363);
                        this.Manager.Comment("reaching state \'S127\'");
                        int temp374 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite4CheckRequirementEnabledChecker9)), new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite4CheckRequirementEnabledChecker12)));
                        if ((temp374 == 0)) {
                            this.Manager.Comment("reaching state \'S164\'");
                            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp364;
                            this.Manager.Comment("executing step \'call RopQueryRows(Advance,True)\'");
                            temp364 = this.IMS_OXCTABLAdapterInstance.RopQueryRows(((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), true);
                            this.Manager.Checkpoint("MS-OXCTABL_R837");
                            this.Manager.Comment("reaching state \'S212\'");
                            this.Manager.Comment("checking step \'return RopQueryRows/success\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp364, "return of RopQueryRows, state S212");
                            this.Manager.Comment("reaching state \'S260\'");
                            bool temp365;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(610,out _)\'");
                            this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(610, out temp365);
                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp365);
                            this.Manager.Comment("reaching state \'S308\'");
                            int temp368 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite4CheckRequirementEnabledChecker10)), new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite4CheckRequirementEnabledChecker11)));
                            if ((temp368 == 0)) {
                                this.Manager.Comment("reaching state \'S382\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite4RopQueryRowsResponseChecker4))) != -1)) {
                                    this.Manager.Comment("reaching state \'S478\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp366;
                                    this.Manager.Comment("executing step \'call RopCollapseRow(True,False)\'");
                                    temp366 = this.IMS_OXCTABLAdapterInstance.RopCollapseRow(true, false);
                                    this.Manager.Checkpoint("MS-OXCTABL_R574");
                                    this.Manager.Checkpoint("MS-OXCTABL_R576");
                                    this.Manager.Comment("reaching state \'S574\'");
                                    this.Manager.Comment("checking step \'return RopCollapseRow/ecNotFound\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues.ecNotFound, temp366, "return of RopCollapseRow, state S574");
                                    S04_ExpandRowRops_CollapseorExpandRow_TestSuiteS671();
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite4RopQueryRowsResponseChecker4)));
                                }
                                goto label113;
                            }
                            if ((temp368 == 1)) {
                                this.Manager.Comment("reaching state \'S383\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite4RopQueryRowsResponseChecker5))) != -1)) {
                                    this.Manager.Comment("reaching state \'S479\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp367;
                                    this.Manager.Comment("executing step \'call RopCollapseRow(True,False)\'");
                                    temp367 = this.IMS_OXCTABLAdapterInstance.RopCollapseRow(true, false);
                                    this.Manager.Checkpoint("MS-OXCTABL_R574");
                                    this.Manager.Checkpoint("MS-OXCTABL_R576");
                                    this.Manager.Comment("reaching state \'S575\'");
                                    this.Manager.Comment("checking step \'return RopCollapseRow/ecNotFound\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues.ecNotFound, temp367, "return of RopCollapseRow, state S575");
                                    S04_ExpandRowRops_CollapseorExpandRow_TestSuiteS655();
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite4RopQueryRowsResponseChecker5)));
                                }
                                goto label113;
                            }
                            throw new InvalidOperationException("never reached");
                        label113:
;
                            goto label115;
                        }
                        if ((temp374 == 1)) {
                            this.Manager.Comment("reaching state \'S165\'");
                            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp369;
                            this.Manager.Comment("executing step \'call RopQueryRows(Advance,True)\'");
                            temp369 = this.IMS_OXCTABLAdapterInstance.RopQueryRows(((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), true);
                            this.Manager.Checkpoint("MS-OXCTABL_R837");
                            this.Manager.Comment("reaching state \'S213\'");
                            this.Manager.Comment("checking step \'return RopQueryRows/success\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp369, "return of RopQueryRows, state S213");
                            this.Manager.Comment("reaching state \'S261\'");
                            bool temp370;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(610,out _)\'");
                            this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(610, out temp370);
                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp370);
                            this.Manager.Comment("reaching state \'S309\'");
                            int temp373 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite4CheckRequirementEnabledChecker13)), new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite4CheckRequirementEnabledChecker14)));
                            if ((temp373 == 0)) {
                                this.Manager.Comment("reaching state \'S384\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite4RopQueryRowsResponseChecker6))) != -1)) {
                                    this.Manager.Comment("reaching state \'S480\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp371;
                                    this.Manager.Comment("executing step \'call RopCollapseRow(True,False)\'");
                                    temp371 = this.IMS_OXCTABLAdapterInstance.RopCollapseRow(true, false);
                                    this.Manager.Checkpoint("MS-OXCTABL_R574");
                                    this.Manager.Checkpoint("MS-OXCTABL_R576");
                                    this.Manager.Comment("reaching state \'S576\'");
                                    this.Manager.Comment("checking step \'return RopCollapseRow/ecNotFound\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues.ecNotFound, temp371, "return of RopCollapseRow, state S576");
                                    S04_ExpandRowRops_CollapseorExpandRow_TestSuiteS656();
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite4RopQueryRowsResponseChecker6)));
                                }
                                goto label114;
                            }
                            if ((temp373 == 1)) {
                                this.Manager.Comment("reaching state \'S385\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite4RopQueryRowsResponseChecker7))) != -1)) {
                                    this.Manager.Comment("reaching state \'S481\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp372;
                                    this.Manager.Comment("executing step \'call RopCollapseRow(False,True)\'");
                                    temp372 = this.IMS_OXCTABLAdapterInstance.RopCollapseRow(false, true);
                                    this.Manager.Checkpoint("MS-OXCTABL_R574");
                                    this.Manager.Checkpoint("MS-OXCTABL_R577");
                                    this.Manager.Checkpoint("MS-OXCTABL_R573");
                                    this.Manager.Comment("reaching state \'S577\'");
                                    this.Manager.Comment("checking step \'return RopCollapseRow/ecNotExpanded\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues.ecNotExpanded, temp372, "return of RopCollapseRow, state S577");
                                    S04_ExpandRowRops_CollapseorExpandRow_TestSuiteS684();
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite4RopQueryRowsResponseChecker7)));
                                }
                                goto label114;
                            }
                            throw new InvalidOperationException("never reached");
                        label114:
;
                            goto label115;
                        }
                        throw new InvalidOperationException("never reached");
                    label115:
;
                        goto label116;
                    }
                    throw new InvalidOperationException("never reached");
                label116:
;
                    goto label126;
                }
                if ((temp408 == 1)) {
                    this.Manager.Comment("reaching state \'S73\'");
                    bool temp376;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(866,out _)\'");
                    this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(866, out temp376);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp376);
                    this.Manager.Comment("reaching state \'S85\'");
                    int temp407 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite4CheckRequirementEnabledChecker16)), new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite4CheckRequirementEnabledChecker25)));
                    if ((temp407 == 0)) {
                        this.Manager.Comment("reaching state \'S104\'");
                        bool temp377;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(867,out _)\'");
                        this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(867, out temp377);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp377);
                        this.Manager.Comment("reaching state \'S128\'");
                        int temp391 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite4CheckRequirementEnabledChecker17)), new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite4CheckRequirementEnabledChecker20)));
                        if ((temp391 == 0)) {
                            this.Manager.Comment("reaching state \'S166\'");
                            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp378;
                            this.Manager.Comment("executing step \'call RopQueryRows(Advance,True)\'");
                            temp378 = this.IMS_OXCTABLAdapterInstance.RopQueryRows(((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), true);
                            this.Manager.Checkpoint("MS-OXCTABL_R837");
                            this.Manager.Comment("reaching state \'S214\'");
                            this.Manager.Comment("checking step \'return RopQueryRows/success\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp378, "return of RopQueryRows, state S214");
                            this.Manager.Comment("reaching state \'S262\'");
                            bool temp379;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(610,out _)\'");
                            this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(610, out temp379);
                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp379);
                            this.Manager.Comment("reaching state \'S310\'");
                            int temp382 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite4CheckRequirementEnabledChecker18)), new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite4CheckRequirementEnabledChecker19)));
                            if ((temp382 == 0)) {
                                this.Manager.Comment("reaching state \'S386\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite4RopQueryRowsResponseChecker8))) != -1)) {
                                    this.Manager.Comment("reaching state \'S482\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp380;
                                    this.Manager.Comment("executing step \'call RopCollapseRow(True,False)\'");
                                    temp380 = this.IMS_OXCTABLAdapterInstance.RopCollapseRow(true, false);
                                    this.Manager.Checkpoint("MS-OXCTABL_R574");
                                    this.Manager.Checkpoint("MS-OXCTABL_R576");
                                    this.Manager.Comment("reaching state \'S578\'");
                                    this.Manager.Comment("checking step \'return RopCollapseRow/ecNotFound\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues.ecNotFound, temp380, "return of RopCollapseRow, state S578");
                                    S04_ExpandRowRops_CollapseorExpandRow_TestSuiteS658();
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite4RopQueryRowsResponseChecker8)));
                                }
                                goto label117;
                            }
                            if ((temp382 == 1)) {
                                this.Manager.Comment("reaching state \'S387\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite4RopQueryRowsResponseChecker9))) != -1)) {
                                    this.Manager.Comment("reaching state \'S483\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp381;
                                    this.Manager.Comment("executing step \'call RopCollapseRow(True,False)\'");
                                    temp381 = this.IMS_OXCTABLAdapterInstance.RopCollapseRow(true, false);
                                    this.Manager.Checkpoint("MS-OXCTABL_R574");
                                    this.Manager.Checkpoint("MS-OXCTABL_R576");
                                    this.Manager.Comment("reaching state \'S579\'");
                                    this.Manager.Comment("checking step \'return RopCollapseRow/ecNotFound\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues.ecNotFound, temp381, "return of RopCollapseRow, state S579");
                                    S04_ExpandRowRops_CollapseorExpandRow_TestSuiteS677();
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite4RopQueryRowsResponseChecker9)));
                                }
                                goto label117;
                            }
                            throw new InvalidOperationException("never reached");
                        label117:
;
                            goto label120;
                        }
                        if ((temp391 == 1)) {
                            this.Manager.Comment("reaching state \'S167\'");
                            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp383;
                            this.Manager.Comment("executing step \'call RopQueryRows(Advance,True)\'");
                            temp383 = this.IMS_OXCTABLAdapterInstance.RopQueryRows(((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), true);
                            this.Manager.Checkpoint("MS-OXCTABL_R837");
                            this.Manager.Comment("reaching state \'S215\'");
                            this.Manager.Comment("checking step \'return RopQueryRows/success\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp383, "return of RopQueryRows, state S215");
                            this.Manager.Comment("reaching state \'S263\'");
                            bool temp384;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(610,out _)\'");
                            this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(610, out temp384);
                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp384);
                            this.Manager.Comment("reaching state \'S311\'");
                            int temp390 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite4CheckRequirementEnabledChecker21)), new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite4CheckRequirementEnabledChecker22)));
                            if ((temp390 == 0)) {
                                this.Manager.Comment("reaching state \'S388\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite4RopQueryRowsResponseChecker10))) != -1)) {
                                    this.Manager.Comment("reaching state \'S484\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp385;
                                    this.Manager.Comment("executing step \'call RopCollapseRow(True,False)\'");
                                    temp385 = this.IMS_OXCTABLAdapterInstance.RopCollapseRow(true, false);
                                    this.Manager.Checkpoint("MS-OXCTABL_R574");
                                    this.Manager.Checkpoint("MS-OXCTABL_R576");
                                    this.Manager.Comment("reaching state \'S580\'");
                                    this.Manager.Comment("checking step \'return RopCollapseRow/ecNotFound\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues.ecNotFound, temp385, "return of RopCollapseRow, state S580");
                                    S04_ExpandRowRops_CollapseorExpandRow_TestSuiteS678();
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite4RopQueryRowsResponseChecker10)));
                                }
                                goto label119;
                            }
                            if ((temp390 == 1)) {
                                this.Manager.Comment("reaching state \'S389\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite4RopQueryRowsResponseChecker11))) != -1)) {
                                    this.Manager.Comment("reaching state \'S485\'");
                                    bool temp386;
                                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(748,out _)\'");
                                    this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(748, out temp386);
                                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp386);
                                    this.Manager.Comment("reaching state \'S581\'");
                                    int temp389 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite4CheckRequirementEnabledChecker23)), new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite4CheckRequirementEnabledChecker24)));
                                    if ((temp389 == 0)) {
                                        this.Manager.Comment("reaching state \'S685\'");
                                        Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp387;
                                        this.Manager.Comment("executing step \'call RopExpandRow(False,True,False)\'");
                                        temp387 = this.IMS_OXCTABLAdapterInstance.RopExpandRow(false, true, false);
                                        this.Manager.Checkpoint("MS-OXCTABL_R568");
                                        this.Manager.Checkpoint("MS-OXCTABL_R571");
                                        this.Manager.Comment("reaching state \'S782\'");
                                        this.Manager.Comment("checking step \'return RopExpandRow/ecNotCollapsed\'");
                                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues.ecNotCollapsed, temp387, "return of RopExpandRow, state S782");
                                        S04_ExpandRowRops_CollapseorExpandRow_TestSuiteS878();
                                        goto label118;
                                    }
                                    if ((temp389 == 1)) {
                                        this.Manager.Comment("reaching state \'S686\'");
                                        Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp388;
                                        this.Manager.Comment("executing step \'call RopExpandRow(False,True,False)\'");
                                        temp388 = this.IMS_OXCTABLAdapterInstance.RopExpandRow(false, true, false);
                                        this.Manager.Checkpoint("MS-OXCTABL_R568");
                                        this.Manager.Checkpoint("MS-OXCTABL_R571");
                                        this.Manager.Comment("reaching state \'S783\'");
                                        this.Manager.Comment("checking step \'return RopExpandRow/ecNotCollapsed\'");
                                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues.ecNotCollapsed, temp388, "return of RopExpandRow, state S783");
                                        S04_ExpandRowRops_CollapseorExpandRow_TestSuiteS879();
                                        goto label118;
                                    }
                                    throw new InvalidOperationException("never reached");
                                label118:
;
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite4RopQueryRowsResponseChecker11)));
                                }
                                goto label119;
                            }
                            throw new InvalidOperationException("never reached");
                        label119:
;
                            goto label120;
                        }
                        throw new InvalidOperationException("never reached");
                    label120:
;
                        goto label125;
                    }
                    if ((temp407 == 1)) {
                        this.Manager.Comment("reaching state \'S105\'");
                        bool temp392;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(867,out _)\'");
                        this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(867, out temp392);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp392);
                        this.Manager.Comment("reaching state \'S129\'");
                        int temp406 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite4CheckRequirementEnabledChecker26)), new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite4CheckRequirementEnabledChecker31)));
                        if ((temp406 == 0)) {
                            this.Manager.Comment("reaching state \'S168\'");
                            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp393;
                            this.Manager.Comment("executing step \'call RopQueryRows(Advance,True)\'");
                            temp393 = this.IMS_OXCTABLAdapterInstance.RopQueryRows(((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), true);
                            this.Manager.Checkpoint("MS-OXCTABL_R837");
                            this.Manager.Comment("reaching state \'S216\'");
                            this.Manager.Comment("checking step \'return RopQueryRows/success\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp393, "return of RopQueryRows, state S216");
                            this.Manager.Comment("reaching state \'S264\'");
                            bool temp394;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(610,out _)\'");
                            this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(610, out temp394);
                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp394);
                            this.Manager.Comment("reaching state \'S312\'");
                            int temp400 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite4CheckRequirementEnabledChecker27)), new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite4CheckRequirementEnabledChecker30)));
                            if ((temp400 == 0)) {
                                this.Manager.Comment("reaching state \'S390\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite4RopQueryRowsResponseChecker12))) != -1)) {
                                    this.Manager.Comment("reaching state \'S486\'");
                                    bool temp395;
                                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(748,out _)\'");
                                    this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(748, out temp395);
                                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp395);
                                    this.Manager.Comment("reaching state \'S582\'");
                                    int temp398 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite4CheckRequirementEnabledChecker28)), new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite4CheckRequirementEnabledChecker29)));
                                    if ((temp398 == 0)) {
                                        this.Manager.Comment("reaching state \'S687\'");
                                        Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp396;
                                        this.Manager.Comment("executing step \'call RopExpandRow(False,True,False)\'");
                                        temp396 = this.IMS_OXCTABLAdapterInstance.RopExpandRow(false, true, false);
                                        this.Manager.Checkpoint("MS-OXCTABL_R568");
                                        this.Manager.Checkpoint("MS-OXCTABL_R571");
                                        this.Manager.Comment("reaching state \'S784\'");
                                        this.Manager.Comment("checking step \'return RopExpandRow/ecNotCollapsed\'");
                                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues.ecNotCollapsed, temp396, "return of RopExpandRow, state S784");
                                        S04_ExpandRowRops_CollapseorExpandRow_TestSuiteS857();
                                        goto label121;
                                    }
                                    if ((temp398 == 1)) {
                                        this.Manager.Comment("reaching state \'S688\'");
                                        Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp397;
                                        this.Manager.Comment("executing step \'call RopExpandRow(False,True,False)\'");
                                        temp397 = this.IMS_OXCTABLAdapterInstance.RopExpandRow(false, true, false);
                                        this.Manager.Checkpoint("MS-OXCTABL_R568");
                                        this.Manager.Checkpoint("MS-OXCTABL_R571");
                                        this.Manager.Comment("reaching state \'S785\'");
                                        this.Manager.Comment("checking step \'return RopExpandRow/ecNotCollapsed\'");
                                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues.ecNotCollapsed, temp397, "return of RopExpandRow, state S785");
                                        S04_ExpandRowRops_CollapseorExpandRow_TestSuiteS856();
                                        goto label121;
                                    }
                                    throw new InvalidOperationException("never reached");
                                label121:
;
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite4RopQueryRowsResponseChecker12)));
                                }
                                goto label122;
                            }
                            if ((temp400 == 1)) {
                                this.Manager.Comment("reaching state \'S391\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite4RopQueryRowsResponseChecker13))) != -1)) {
                                    this.Manager.Comment("reaching state \'S487\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp399;
                                    this.Manager.Comment("executing step \'call RopCollapseRow(False,True)\'");
                                    temp399 = this.IMS_OXCTABLAdapterInstance.RopCollapseRow(false, true);
                                    this.Manager.Checkpoint("MS-OXCTABL_R574");
                                    this.Manager.Checkpoint("MS-OXCTABL_R577");
                                    this.Manager.Checkpoint("MS-OXCTABL_R573");
                                    this.Manager.Comment("reaching state \'S583\'");
                                    this.Manager.Comment("checking step \'return RopCollapseRow/ecNotExpanded\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues.ecNotExpanded, temp399, "return of RopCollapseRow, state S583");
                                    S04_ExpandRowRops_CollapseorExpandRow_TestSuiteS689();
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite4RopQueryRowsResponseChecker13)));
                                }
                                goto label122;
                            }
                            throw new InvalidOperationException("never reached");
                        label122:
;
                            goto label124;
                        }
                        if ((temp406 == 1)) {
                            this.Manager.Comment("reaching state \'S169\'");
                            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp401;
                            this.Manager.Comment("executing step \'call RopQueryRows(Advance,True)\'");
                            temp401 = this.IMS_OXCTABLAdapterInstance.RopQueryRows(((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), true);
                            this.Manager.Checkpoint("MS-OXCTABL_R837");
                            this.Manager.Comment("reaching state \'S217\'");
                            this.Manager.Comment("checking step \'return RopQueryRows/success\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp401, "return of RopQueryRows, state S217");
                            this.Manager.Comment("reaching state \'S265\'");
                            bool temp402;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(610,out _)\'");
                            this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(610, out temp402);
                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp402);
                            this.Manager.Comment("reaching state \'S313\'");
                            int temp405 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite4CheckRequirementEnabledChecker32)), new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite4CheckRequirementEnabledChecker33)));
                            if ((temp405 == 0)) {
                                this.Manager.Comment("reaching state \'S392\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite4RopQueryRowsResponseChecker14))) != -1)) {
                                    this.Manager.Comment("reaching state \'S488\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp403;
                                    this.Manager.Comment("executing step \'call RopCollapseRow(True,False)\'");
                                    temp403 = this.IMS_OXCTABLAdapterInstance.RopCollapseRow(true, false);
                                    this.Manager.Checkpoint("MS-OXCTABL_R574");
                                    this.Manager.Checkpoint("MS-OXCTABL_R576");
                                    this.Manager.Comment("reaching state \'S584\'");
                                    this.Manager.Comment("checking step \'return RopCollapseRow/ecNotFound\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues.ecNotFound, temp403, "return of RopCollapseRow, state S584");
                                    S04_ExpandRowRops_CollapseorExpandRow_TestSuiteS682();
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite4RopQueryRowsResponseChecker14)));
                                }
                                goto label123;
                            }
                            if ((temp405 == 1)) {
                                this.Manager.Comment("reaching state \'S393\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite4RopQueryRowsResponseChecker15))) != -1)) {
                                    this.Manager.Comment("reaching state \'S489\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp404;
                                    this.Manager.Comment("executing step \'call RopCollapseRow(True,False)\'");
                                    temp404 = this.IMS_OXCTABLAdapterInstance.RopCollapseRow(true, false);
                                    this.Manager.Checkpoint("MS-OXCTABL_R574");
                                    this.Manager.Checkpoint("MS-OXCTABL_R576");
                                    this.Manager.Comment("reaching state \'S585\'");
                                    this.Manager.Comment("checking step \'return RopCollapseRow/ecNotFound\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues.ecNotFound, temp404, "return of RopCollapseRow, state S585");
                                    S04_ExpandRowRops_CollapseorExpandRow_TestSuiteS666();
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite4RopQueryRowsResponseChecker15)));
                                }
                                goto label123;
                            }
                            throw new InvalidOperationException("never reached");
                        label123:
;
                            goto label124;
                        }
                        throw new InvalidOperationException("never reached");
                    label124:
;
                        goto label125;
                    }
                    throw new InvalidOperationException("never reached");
                label125:
;
                    goto label126;
                }
                throw new InvalidOperationException("never reached");
            label126:
;
                goto label127;
            }
            if ((temp409 == 1)) {
                this.Manager.Comment("reaching state \'S19\'");
                goto label127;
            }
            throw new InvalidOperationException("never reached");
        label127:
;
            this.Manager.EndTest();
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite4CheckMAPIHTTPTransportSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S7");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite4CheckRequirementEnabledChecker(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S63");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite4CheckRequirementEnabledChecker1(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S84");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite4CheckRequirementEnabledChecker2(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S126");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite4CheckRequirementEnabledChecker3(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S306");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite4RopQueryRowsResponseChecker(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SETCOLUMNS,True,True" +
                    ",True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S378");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S378");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S378");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S378");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S378");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S378");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S378");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S378");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S378");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S378");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R472, MS-OXCTABL_R427, MS-OXCTABL_R42" +
                        "6, MS-OXCTABL_R116");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R472");
            this.Manager.Checkpoint("MS-OXCTABL_R427");
            this.Manager.Checkpoint("MS-OXCTABL_R426");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite4CheckRequirementEnabledChecker4(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S306");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite4RopQueryRowsResponseChecker1(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SETCOLUMNS,True,True" +
                    ",True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S379");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S379");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S379");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S379");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S379");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S379");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S379");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S379");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S379");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S379");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R472, MS-OXCTABL_R427, MS-OXCTABL_R42" +
                        "6, MS-OXCTABL_R116, MS-OXCTABL_R610");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R472");
            this.Manager.Checkpoint("MS-OXCTABL_R427");
            this.Manager.Checkpoint("MS-OXCTABL_R426");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R610");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite4CheckRequirementEnabledChecker5(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S126");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite4CheckRequirementEnabledChecker6(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S307");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite4RopQueryRowsResponseChecker2(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SETCOLUMNS,True,True" +
                    ",True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S380");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S380");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S380");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S380");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S380");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S380");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S380");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S380");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S380");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S380");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R472, MS-OXCTABL_R427, MS-OXCTABL_R42" +
                        "6, MS-OXCTABL_R116");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R472");
            this.Manager.Checkpoint("MS-OXCTABL_R427");
            this.Manager.Checkpoint("MS-OXCTABL_R426");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite4CheckRequirementEnabledChecker7(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S307");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite4RopQueryRowsResponseChecker3(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SETCOLUMNS,True,True" +
                    ",True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S381");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S381");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S381");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S381");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S381");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S381");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S381");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S381");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S381");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S381");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R472, MS-OXCTABL_R427, MS-OXCTABL_R42" +
                        "6, MS-OXCTABL_R116, MS-OXCTABL_R610");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R472");
            this.Manager.Checkpoint("MS-OXCTABL_R427");
            this.Manager.Checkpoint("MS-OXCTABL_R426");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R610");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite4CheckRequirementEnabledChecker8(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S84");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite4CheckRequirementEnabledChecker9(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S127");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite4CheckRequirementEnabledChecker10(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S308");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite4RopQueryRowsResponseChecker4(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SETCOLUMNS,True,True" +
                    ",True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S382");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S382");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S382");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S382");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S382");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S382");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S382");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S382");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S382");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S382");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R472, MS-OXCTABL_R427, MS-OXCTABL_R42" +
                        "6, MS-OXCTABL_R116, MS-OXCTABL_R610");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R472");
            this.Manager.Checkpoint("MS-OXCTABL_R427");
            this.Manager.Checkpoint("MS-OXCTABL_R426");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R610");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite4CheckRequirementEnabledChecker11(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S308");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite4RopQueryRowsResponseChecker5(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SETCOLUMNS,True,True" +
                    ",True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S383");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S383");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S383");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S383");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S383");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S383");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S383");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S383");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S383");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S383");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R472, MS-OXCTABL_R427, MS-OXCTABL_R42" +
                        "6, MS-OXCTABL_R116");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R472");
            this.Manager.Checkpoint("MS-OXCTABL_R427");
            this.Manager.Checkpoint("MS-OXCTABL_R426");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite4CheckRequirementEnabledChecker12(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S127");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite4CheckRequirementEnabledChecker13(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S309");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite4RopQueryRowsResponseChecker6(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SETCOLUMNS,True,True" +
                    ",True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S384");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S384");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S384");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S384");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S384");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S384");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S384");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S384");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S384");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S384");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R472, MS-OXCTABL_R427, MS-OXCTABL_R42" +
                        "6, MS-OXCTABL_R116, MS-OXCTABL_R610");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R472");
            this.Manager.Checkpoint("MS-OXCTABL_R427");
            this.Manager.Checkpoint("MS-OXCTABL_R426");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R610");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite4CheckRequirementEnabledChecker14(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S309");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite4RopQueryRowsResponseChecker7(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SETCOLUMNS,True,True" +
                    ",True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S385");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S385");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S385");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S385");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S385");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S385");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S385");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S385");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S385");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S385");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R472, MS-OXCTABL_R427, MS-OXCTABL_R42" +
                        "6, MS-OXCTABL_R116");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R472");
            this.Manager.Checkpoint("MS-OXCTABL_R427");
            this.Manager.Checkpoint("MS-OXCTABL_R426");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
        }
        
        private void S04_ExpandRowRops_CollapseorExpandRow_TestSuiteS684() {
            this.Manager.Comment("reaching state \'S684\'");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite4CheckRequirementEnabledChecker15(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S63");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite4CheckRequirementEnabledChecker16(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S85");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite4CheckRequirementEnabledChecker17(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S128");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite4CheckRequirementEnabledChecker18(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S310");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite4RopQueryRowsResponseChecker8(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SETCOLUMNS,True,True" +
                    ",True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S386");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S386");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S386");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S386");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S386");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S386");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S386");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S386");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S386");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S386");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R472, MS-OXCTABL_R427, MS-OXCTABL_R42" +
                        "6, MS-OXCTABL_R116");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R472");
            this.Manager.Checkpoint("MS-OXCTABL_R427");
            this.Manager.Checkpoint("MS-OXCTABL_R426");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite4CheckRequirementEnabledChecker19(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S310");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite4RopQueryRowsResponseChecker9(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SETCOLUMNS,True,True" +
                    ",True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S387");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S387");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S387");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S387");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S387");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S387");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S387");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S387");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S387");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S387");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R472, MS-OXCTABL_R427, MS-OXCTABL_R42" +
                        "6, MS-OXCTABL_R116, MS-OXCTABL_R610");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R472");
            this.Manager.Checkpoint("MS-OXCTABL_R427");
            this.Manager.Checkpoint("MS-OXCTABL_R426");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R610");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite4CheckRequirementEnabledChecker20(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S128");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite4CheckRequirementEnabledChecker21(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S311");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite4RopQueryRowsResponseChecker10(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SETCOLUMNS,True,True" +
                    ",True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S388");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S388");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S388");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S388");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S388");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S388");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S388");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S388");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S388");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S388");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R472, MS-OXCTABL_R427, MS-OXCTABL_R42" +
                        "6, MS-OXCTABL_R116");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R472");
            this.Manager.Checkpoint("MS-OXCTABL_R427");
            this.Manager.Checkpoint("MS-OXCTABL_R426");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite4CheckRequirementEnabledChecker22(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S311");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite4RopQueryRowsResponseChecker11(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SETCOLUMNS,True,True" +
                    ",True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S389");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S389");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S389");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S389");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S389");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S389");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S389");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S389");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S389");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S389");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R472, MS-OXCTABL_R427, MS-OXCTABL_R42" +
                        "6, MS-OXCTABL_R116, MS-OXCTABL_R610");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R472");
            this.Manager.Checkpoint("MS-OXCTABL_R427");
            this.Manager.Checkpoint("MS-OXCTABL_R426");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R610");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite4CheckRequirementEnabledChecker23(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S581");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite4CheckRequirementEnabledChecker24(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S581");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite4CheckRequirementEnabledChecker25(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S85");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite4CheckRequirementEnabledChecker26(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S129");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite4CheckRequirementEnabledChecker27(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S312");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite4RopQueryRowsResponseChecker12(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SETCOLUMNS,True,True" +
                    ",True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S390");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S390");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S390");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S390");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S390");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S390");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S390");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S390");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S390");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S390");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R472, MS-OXCTABL_R427, MS-OXCTABL_R42" +
                        "6, MS-OXCTABL_R116, MS-OXCTABL_R610");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R472");
            this.Manager.Checkpoint("MS-OXCTABL_R427");
            this.Manager.Checkpoint("MS-OXCTABL_R426");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R610");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite4CheckRequirementEnabledChecker28(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S582");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite4CheckRequirementEnabledChecker29(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S582");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite4CheckRequirementEnabledChecker30(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S312");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite4RopQueryRowsResponseChecker13(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SETCOLUMNS,True,True" +
                    ",True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S391");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S391");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S391");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S391");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S391");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S391");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S391");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S391");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S391");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S391");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R472, MS-OXCTABL_R427, MS-OXCTABL_R42" +
                        "6, MS-OXCTABL_R116");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R472");
            this.Manager.Checkpoint("MS-OXCTABL_R427");
            this.Manager.Checkpoint("MS-OXCTABL_R426");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
        }
        
        private void S04_ExpandRowRops_CollapseorExpandRow_TestSuiteS689() {
            this.Manager.Comment("reaching state \'S689\'");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite4CheckRequirementEnabledChecker31(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S129");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite4CheckRequirementEnabledChecker32(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S313");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite4RopQueryRowsResponseChecker14(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SETCOLUMNS,True,True" +
                    ",True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S392");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S392");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S392");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S392");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S392");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S392");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S392");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S392");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S392");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S392");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R472, MS-OXCTABL_R427, MS-OXCTABL_R42" +
                        "6, MS-OXCTABL_R116, MS-OXCTABL_R610");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R472");
            this.Manager.Checkpoint("MS-OXCTABL_R427");
            this.Manager.Checkpoint("MS-OXCTABL_R426");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R610");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite4CheckRequirementEnabledChecker33(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S313");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite4RopQueryRowsResponseChecker15(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SETCOLUMNS,True,True" +
                    ",True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S393");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S393");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S393");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S393");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S393");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S393");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S393");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S393");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S393");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S393");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R472, MS-OXCTABL_R427, MS-OXCTABL_R42" +
                        "6, MS-OXCTABL_R116");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R472");
            this.Manager.Checkpoint("MS-OXCTABL_R427");
            this.Manager.Checkpoint("MS-OXCTABL_R426");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite4CheckMAPIHTTPTransportSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S7");
        }
        #endregion
        
        #region Test Starting in S8
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite5() {
            this.Manager.BeginTest("MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite5");
            this.Manager.Comment("reaching state \'S8\'");
            bool temp410;
            this.Manager.Comment("executing step \'call CheckMAPIHTTPTransportSupported(out _)\'");
            this.IMS_OXCTABLAdapterInstance.CheckMAPIHTTPTransportSupported(out temp410);
            this.Manager.AddReturn(CheckMAPIHTTPTransportSupportedInfo, null, temp410);
            this.Manager.Comment("reaching state \'S9\'");
            int temp507 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite5CheckMAPIHTTPTransportSupportedChecker)), new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite5CheckMAPIHTTPTransportSupportedChecker1)));
            if ((temp507 == 0)) {
                this.Manager.Comment("reaching state \'S20\'");
                this.Manager.Comment("executing step \'call InitializeTable(CONTENT_TABLE)\'");
                this.IMS_OXCTABLAdapterInstance.InitializeTable(((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableType)(0)));
                this.Manager.Comment("reaching state \'S28\'");
                this.Manager.Comment("checking step \'return InitializeTable\'");
                this.Manager.Comment("reaching state \'S34\'");
                Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp411;
                this.Manager.Comment("executing step \'call RopSortTable(1,True,False,True,True,True,False,False)\'");
                temp411 = this.IMS_OXCTABLAdapterInstance.RopSortTable(1u, true, false, true, true, true, false, false);
                this.Manager.Checkpoint("MS-OXCTABL_R447");
                this.Manager.Comment("reaching state \'S40\'");
                this.Manager.Comment("checking step \'return RopSortTable/success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp411, "return of RopSortTable, state S40");
                this.Manager.Comment("reaching state \'S46\'");
                Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp412;
                this.Manager.Comment("executing step \'call RopSetColumns(1,False,False,False)\'");
                temp412 = this.IMS_OXCTABLAdapterInstance.RopSetColumns(1u, false, false, false);
                this.Manager.Checkpoint("MS-OXCTABL_R831");
                this.Manager.Checkpoint("MS-OXCTABL_R45");
                this.Manager.Comment("reaching state \'S52\'");
                this.Manager.Comment("checking step \'return RopSetColumns/success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp412, "return of RopSetColumns, state S52");
                this.Manager.Comment("reaching state \'S58\'");
                bool temp413;
                this.Manager.Comment("executing step \'call CheckRequirementEnabled(768,out _)\'");
                this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(768, out temp413);
                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp413);
                this.Manager.Comment("reaching state \'S64\'");
                int temp506 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite5CheckRequirementEnabledChecker)), new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite5CheckRequirementEnabledChecker29)));
                if ((temp506 == 0)) {
                    this.Manager.Comment("reaching state \'S74\'");
                    bool temp414;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(866,out _)\'");
                    this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(866, out temp414);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp414);
                    this.Manager.Comment("reaching state \'S86\'");
                    int temp463 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite5CheckRequirementEnabledChecker1)), new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite5CheckRequirementEnabledChecker16)));
                    if ((temp463 == 0)) {
                        this.Manager.Comment("reaching state \'S106\'");
                        bool temp415;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(867,out _)\'");
                        this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(867, out temp415);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp415);
                        this.Manager.Comment("reaching state \'S130\'");
                        int temp440 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite5CheckRequirementEnabledChecker2)), new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite5CheckRequirementEnabledChecker9)));
                        if ((temp440 == 0)) {
                            this.Manager.Comment("reaching state \'S170\'");
                            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp416;
                            this.Manager.Comment("executing step \'call RopQueryRows(Advance,True)\'");
                            temp416 = this.IMS_OXCTABLAdapterInstance.RopQueryRows(((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), true);
                            this.Manager.Checkpoint("MS-OXCTABL_R837");
                            this.Manager.Comment("reaching state \'S218\'");
                            this.Manager.Comment("checking step \'return RopQueryRows/success\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp416, "return of RopQueryRows, state S218");
                            this.Manager.Comment("reaching state \'S266\'");
                            bool temp417;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(610,out _)\'");
                            this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(610, out temp417);
                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp417);
                            this.Manager.Comment("reaching state \'S314\'");
                            int temp427 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite5CheckRequirementEnabledChecker3)), new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite5CheckRequirementEnabledChecker6)));
                            if ((temp427 == 0)) {
                                this.Manager.Comment("reaching state \'S394\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite5RopQueryRowsResponseChecker))) != -1)) {
                                    this.Manager.Comment("reaching state \'S490\'");
                                    bool temp418;
                                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(748,out _)\'");
                                    this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(748, out temp418);
                                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp418);
                                    this.Manager.Comment("reaching state \'S586\'");
                                    int temp422 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite5CheckRequirementEnabledChecker4)), new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite5CheckRequirementEnabledChecker5)));
                                    if ((temp422 == 0)) {
                                        this.Manager.Comment("reaching state \'S690\'");
                                        Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp419;
                                        this.Manager.Comment("executing step \'call RopExpandRow(False,False,False)\'");
                                        temp419 = this.IMS_OXCTABLAdapterInstance.RopExpandRow(false, false, false);
                                        this.Manager.Checkpoint("MS-OXCTABL_R568");
                                        this.Manager.Checkpoint("MS-OXCTABL_R567");
                                        this.Manager.Comment("reaching state \'S786\'");
                                        this.Manager.Comment("checking step \'return RopExpandRow/success\'");
                                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp419, "return of RopExpandRow, state S786");
                                        this.Manager.Comment("reaching state \'S880\'");
                                        int temp420 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopExpandRowResponseInfo, null, new RopExpandRowResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite5RopExpandRowResponseChecker)), new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopExpandRowResponseInfo, null, new RopExpandRowResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite5RopExpandRowResponseChecker1)));
                                        if ((temp420 == 0)) {
                                            S04_ExpandRowRops_CollapseorExpandRow_TestSuiteS920();
                                            goto label128;
                                        }
                                        if ((temp420 == 1)) {
                                            S04_ExpandRowRops_CollapseorExpandRow_TestSuiteS920();
                                            goto label128;
                                        }
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopExpandRowResponseInfo, null, new RopExpandRowResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite5RopExpandRowResponseChecker)), new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopExpandRowResponseInfo, null, new RopExpandRowResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite5RopExpandRowResponseChecker1)));
                                    label128:
;
                                        goto label129;
                                    }
                                    if ((temp422 == 1)) {
                                        this.Manager.Comment("reaching state \'S691\'");
                                        Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp421;
                                        this.Manager.Comment("executing step \'call RopExpandRow(False,False,False)\'");
                                        temp421 = this.IMS_OXCTABLAdapterInstance.RopExpandRow(false, false, false);
                                        this.Manager.Checkpoint("MS-OXCTABL_R568");
                                        this.Manager.Checkpoint("MS-OXCTABL_R567");
                                        this.Manager.Comment("reaching state \'S787\'");
                                        this.Manager.Comment("checking step \'return RopExpandRow/success\'");
                                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp421, "return of RopExpandRow, state S787");
                                        this.Manager.Comment("reaching state \'S881\'");
                                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopExpandRowResponseInfo, null, new RopExpandRowResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite5RopExpandRowResponseChecker2))) != -1)) {
                                            this.Manager.Comment("reaching state \'S921\'");
                                        }
                                        else {
                                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopExpandRowResponseInfo, null, new RopExpandRowResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite5RopExpandRowResponseChecker2)));
                                        }
                                        goto label129;
                                    }
                                    throw new InvalidOperationException("never reached");
                                label129:
;
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite5RopQueryRowsResponseChecker)));
                                }
                                goto label131;
                            }
                            if ((temp427 == 1)) {
                                this.Manager.Comment("reaching state \'S395\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite5RopQueryRowsResponseChecker1))) != -1)) {
                                    this.Manager.Comment("reaching state \'S491\'");
                                    bool temp423;
                                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(748,out _)\'");
                                    this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(748, out temp423);
                                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp423);
                                    this.Manager.Comment("reaching state \'S587\'");
                                    int temp426 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite5CheckRequirementEnabledChecker7)), new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite5CheckRequirementEnabledChecker8)));
                                    if ((temp426 == 0)) {
                                        this.Manager.Comment("reaching state \'S692\'");
                                        Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp424;
                                        this.Manager.Comment("executing step \'call RopExpandRow(False,True,False)\'");
                                        temp424 = this.IMS_OXCTABLAdapterInstance.RopExpandRow(false, true, false);
                                        this.Manager.Checkpoint("MS-OXCTABL_R568");
                                        this.Manager.Checkpoint("MS-OXCTABL_R571");
                                        this.Manager.Comment("reaching state \'S788\'");
                                        this.Manager.Comment("checking step \'return RopExpandRow/ecNotCollapsed\'");
                                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues.ecNotCollapsed, temp424, "return of RopExpandRow, state S788");
                                        S04_ExpandRowRops_CollapseorExpandRow_TestSuiteS882();
                                        goto label130;
                                    }
                                    if ((temp426 == 1)) {
                                        this.Manager.Comment("reaching state \'S693\'");
                                        Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp425;
                                        this.Manager.Comment("executing step \'call RopExpandRow(False,True,False)\'");
                                        temp425 = this.IMS_OXCTABLAdapterInstance.RopExpandRow(false, true, false);
                                        this.Manager.Checkpoint("MS-OXCTABL_R568");
                                        this.Manager.Checkpoint("MS-OXCTABL_R571");
                                        this.Manager.Comment("reaching state \'S789\'");
                                        this.Manager.Comment("checking step \'return RopExpandRow/ecNotCollapsed\'");
                                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues.ecNotCollapsed, temp425, "return of RopExpandRow, state S789");
                                        S04_ExpandRowRops_CollapseorExpandRow_TestSuiteS883();
                                        goto label130;
                                    }
                                    throw new InvalidOperationException("never reached");
                                label130:
;
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite5RopQueryRowsResponseChecker1)));
                                }
                                goto label131;
                            }
                            throw new InvalidOperationException("never reached");
                        label131:
;
                            goto label136;
                        }
                        if ((temp440 == 1)) {
                            this.Manager.Comment("reaching state \'S171\'");
                            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp428;
                            this.Manager.Comment("executing step \'call RopQueryRows(Advance,True)\'");
                            temp428 = this.IMS_OXCTABLAdapterInstance.RopQueryRows(((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), true);
                            this.Manager.Checkpoint("MS-OXCTABL_R837");
                            this.Manager.Comment("reaching state \'S219\'");
                            this.Manager.Comment("checking step \'return RopQueryRows/success\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp428, "return of RopQueryRows, state S219");
                            this.Manager.Comment("reaching state \'S267\'");
                            bool temp429;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(610,out _)\'");
                            this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(610, out temp429);
                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp429);
                            this.Manager.Comment("reaching state \'S315\'");
                            int temp439 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite5CheckRequirementEnabledChecker10)), new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite5CheckRequirementEnabledChecker13)));
                            if ((temp439 == 0)) {
                                this.Manager.Comment("reaching state \'S396\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite5RopQueryRowsResponseChecker2))) != -1)) {
                                    this.Manager.Comment("reaching state \'S492\'");
                                    bool temp430;
                                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(748,out _)\'");
                                    this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(748, out temp430);
                                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp430);
                                    this.Manager.Comment("reaching state \'S588\'");
                                    int temp433 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite5CheckRequirementEnabledChecker11)), new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite5CheckRequirementEnabledChecker12)));
                                    if ((temp433 == 0)) {
                                        this.Manager.Comment("reaching state \'S694\'");
                                        Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp431;
                                        this.Manager.Comment("executing step \'call RopExpandRow(False,True,False)\'");
                                        temp431 = this.IMS_OXCTABLAdapterInstance.RopExpandRow(false, true, false);
                                        this.Manager.Checkpoint("MS-OXCTABL_R568");
                                        this.Manager.Checkpoint("MS-OXCTABL_R571");
                                        this.Manager.Comment("reaching state \'S790\'");
                                        this.Manager.Comment("checking step \'return RopExpandRow/ecNotCollapsed\'");
                                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues.ecNotCollapsed, temp431, "return of RopExpandRow, state S790");
                                        S04_ExpandRowRops_CollapseorExpandRow_TestSuiteS872();
                                        goto label132;
                                    }
                                    if ((temp433 == 1)) {
                                        this.Manager.Comment("reaching state \'S695\'");
                                        Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp432;
                                        this.Manager.Comment("executing step \'call RopExpandRow(False,True,False)\'");
                                        temp432 = this.IMS_OXCTABLAdapterInstance.RopExpandRow(false, true, false);
                                        this.Manager.Checkpoint("MS-OXCTABL_R568");
                                        this.Manager.Checkpoint("MS-OXCTABL_R571");
                                        this.Manager.Comment("reaching state \'S791\'");
                                        this.Manager.Comment("checking step \'return RopExpandRow/ecNotCollapsed\'");
                                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues.ecNotCollapsed, temp432, "return of RopExpandRow, state S791");
                                        S04_ExpandRowRops_CollapseorExpandRow_TestSuiteS873();
                                        goto label132;
                                    }
                                    throw new InvalidOperationException("never reached");
                                label132:
;
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite5RopQueryRowsResponseChecker2)));
                                }
                                goto label135;
                            }
                            if ((temp439 == 1)) {
                                this.Manager.Comment("reaching state \'S397\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite5RopQueryRowsResponseChecker3))) != -1)) {
                                    this.Manager.Comment("reaching state \'S493\'");
                                    bool temp434;
                                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(748,out _)\'");
                                    this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(748, out temp434);
                                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp434);
                                    this.Manager.Comment("reaching state \'S589\'");
                                    int temp438 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite5CheckRequirementEnabledChecker14)), new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite5CheckRequirementEnabledChecker15)));
                                    if ((temp438 == 0)) {
                                        this.Manager.Comment("reaching state \'S696\'");
                                        Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp435;
                                        this.Manager.Comment("executing step \'call RopExpandRow(False,False,False)\'");
                                        temp435 = this.IMS_OXCTABLAdapterInstance.RopExpandRow(false, false, false);
                                        this.Manager.Checkpoint("MS-OXCTABL_R568");
                                        this.Manager.Checkpoint("MS-OXCTABL_R567");
                                        this.Manager.Comment("reaching state \'S792\'");
                                        this.Manager.Comment("checking step \'return RopExpandRow/success\'");
                                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp435, "return of RopExpandRow, state S792");
                                        this.Manager.Comment("reaching state \'S884\'");
                                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopExpandRowResponseInfo, null, new RopExpandRowResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite5RopExpandRowResponseChecker3))) != -1)) {
                                            this.Manager.Comment("reaching state \'S922\'");
                                        }
                                        else {
                                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopExpandRowResponseInfo, null, new RopExpandRowResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite5RopExpandRowResponseChecker3)));
                                        }
                                        goto label134;
                                    }
                                    if ((temp438 == 1)) {
                                        this.Manager.Comment("reaching state \'S697\'");
                                        Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp436;
                                        this.Manager.Comment("executing step \'call RopExpandRow(False,False,False)\'");
                                        temp436 = this.IMS_OXCTABLAdapterInstance.RopExpandRow(false, false, false);
                                        this.Manager.Checkpoint("MS-OXCTABL_R568");
                                        this.Manager.Checkpoint("MS-OXCTABL_R567");
                                        this.Manager.Comment("reaching state \'S793\'");
                                        this.Manager.Comment("checking step \'return RopExpandRow/success\'");
                                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp436, "return of RopExpandRow, state S793");
                                        this.Manager.Comment("reaching state \'S885\'");
                                        int temp437 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopExpandRowResponseInfo, null, new RopExpandRowResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite5RopExpandRowResponseChecker4)), new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopExpandRowResponseInfo, null, new RopExpandRowResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite5RopExpandRowResponseChecker5)));
                                        if ((temp437 == 0)) {
                                            S04_ExpandRowRops_CollapseorExpandRow_TestSuiteS923();
                                            goto label133;
                                        }
                                        if ((temp437 == 1)) {
                                            S04_ExpandRowRops_CollapseorExpandRow_TestSuiteS923();
                                            goto label133;
                                        }
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopExpandRowResponseInfo, null, new RopExpandRowResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite5RopExpandRowResponseChecker4)), new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopExpandRowResponseInfo, null, new RopExpandRowResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite5RopExpandRowResponseChecker5)));
                                    label133:
;
                                        goto label134;
                                    }
                                    throw new InvalidOperationException("never reached");
                                label134:
;
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite5RopQueryRowsResponseChecker3)));
                                }
                                goto label135;
                            }
                            throw new InvalidOperationException("never reached");
                        label135:
;
                            goto label136;
                        }
                        throw new InvalidOperationException("never reached");
                    label136:
;
                        goto label144;
                    }
                    if ((temp463 == 1)) {
                        this.Manager.Comment("reaching state \'S107\'");
                        bool temp441;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(867,out _)\'");
                        this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(867, out temp441);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp441);
                        this.Manager.Comment("reaching state \'S131\'");
                        int temp462 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite5CheckRequirementEnabledChecker17)), new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite5CheckRequirementEnabledChecker24)));
                        if ((temp462 == 0)) {
                            this.Manager.Comment("reaching state \'S172\'");
                            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp442;
                            this.Manager.Comment("executing step \'call RopQueryRows(Advance,True)\'");
                            temp442 = this.IMS_OXCTABLAdapterInstance.RopQueryRows(((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), true);
                            this.Manager.Checkpoint("MS-OXCTABL_R837");
                            this.Manager.Comment("reaching state \'S220\'");
                            this.Manager.Comment("checking step \'return RopQueryRows/success\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp442, "return of RopQueryRows, state S220");
                            this.Manager.Comment("reaching state \'S268\'");
                            bool temp443;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(610,out _)\'");
                            this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(610, out temp443);
                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp443);
                            this.Manager.Comment("reaching state \'S316\'");
                            int temp453 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite5CheckRequirementEnabledChecker18)), new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite5CheckRequirementEnabledChecker21)));
                            if ((temp453 == 0)) {
                                this.Manager.Comment("reaching state \'S398\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite5RopQueryRowsResponseChecker4))) != -1)) {
                                    this.Manager.Comment("reaching state \'S494\'");
                                    bool temp444;
                                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(748,out _)\'");
                                    this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(748, out temp444);
                                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp444);
                                    this.Manager.Comment("reaching state \'S590\'");
                                    int temp447 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite5CheckRequirementEnabledChecker19)), new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite5CheckRequirementEnabledChecker20)));
                                    if ((temp447 == 0)) {
                                        this.Manager.Comment("reaching state \'S698\'");
                                        Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp445;
                                        this.Manager.Comment("executing step \'call RopExpandRow(False,True,False)\'");
                                        temp445 = this.IMS_OXCTABLAdapterInstance.RopExpandRow(false, true, false);
                                        this.Manager.Checkpoint("MS-OXCTABL_R568");
                                        this.Manager.Checkpoint("MS-OXCTABL_R571");
                                        this.Manager.Comment("reaching state \'S794\'");
                                        this.Manager.Comment("checking step \'return RopExpandRow/ecNotCollapsed\'");
                                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues.ecNotCollapsed, temp445, "return of RopExpandRow, state S794");
                                        S04_ExpandRowRops_CollapseorExpandRow_TestSuiteS860();
                                        goto label137;
                                    }
                                    if ((temp447 == 1)) {
                                        this.Manager.Comment("reaching state \'S699\'");
                                        Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp446;
                                        this.Manager.Comment("executing step \'call RopExpandRow(False,True,False)\'");
                                        temp446 = this.IMS_OXCTABLAdapterInstance.RopExpandRow(false, true, false);
                                        this.Manager.Checkpoint("MS-OXCTABL_R568");
                                        this.Manager.Checkpoint("MS-OXCTABL_R571");
                                        this.Manager.Comment("reaching state \'S795\'");
                                        this.Manager.Comment("checking step \'return RopExpandRow/ecNotCollapsed\'");
                                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues.ecNotCollapsed, temp446, "return of RopExpandRow, state S795");
                                        S04_ExpandRowRops_CollapseorExpandRow_TestSuiteS861();
                                        goto label137;
                                    }
                                    throw new InvalidOperationException("never reached");
                                label137:
;
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite5RopQueryRowsResponseChecker4)));
                                }
                                goto label140;
                            }
                            if ((temp453 == 1)) {
                                this.Manager.Comment("reaching state \'S399\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite5RopQueryRowsResponseChecker5))) != -1)) {
                                    this.Manager.Comment("reaching state \'S495\'");
                                    bool temp448;
                                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(748,out _)\'");
                                    this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(748, out temp448);
                                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp448);
                                    this.Manager.Comment("reaching state \'S591\'");
                                    int temp452 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite5CheckRequirementEnabledChecker22)), new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite5CheckRequirementEnabledChecker23)));
                                    if ((temp452 == 0)) {
                                        this.Manager.Comment("reaching state \'S700\'");
                                        Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp449;
                                        this.Manager.Comment("executing step \'call RopExpandRow(False,False,False)\'");
                                        temp449 = this.IMS_OXCTABLAdapterInstance.RopExpandRow(false, false, false);
                                        this.Manager.Checkpoint("MS-OXCTABL_R568");
                                        this.Manager.Checkpoint("MS-OXCTABL_R567");
                                        this.Manager.Comment("reaching state \'S796\'");
                                        this.Manager.Comment("checking step \'return RopExpandRow/success\'");
                                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp449, "return of RopExpandRow, state S796");
                                        this.Manager.Comment("reaching state \'S886\'");
                                        int temp450 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopExpandRowResponseInfo, null, new RopExpandRowResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite5RopExpandRowResponseChecker6)), new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopExpandRowResponseInfo, null, new RopExpandRowResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite5RopExpandRowResponseChecker7)));
                                        if ((temp450 == 0)) {
                                            S04_ExpandRowRops_CollapseorExpandRow_TestSuiteS924();
                                            goto label138;
                                        }
                                        if ((temp450 == 1)) {
                                            S04_ExpandRowRops_CollapseorExpandRow_TestSuiteS924();
                                            goto label138;
                                        }
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopExpandRowResponseInfo, null, new RopExpandRowResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite5RopExpandRowResponseChecker6)), new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopExpandRowResponseInfo, null, new RopExpandRowResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite5RopExpandRowResponseChecker7)));
                                    label138:
;
                                        goto label139;
                                    }
                                    if ((temp452 == 1)) {
                                        this.Manager.Comment("reaching state \'S701\'");
                                        Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp451;
                                        this.Manager.Comment("executing step \'call RopExpandRow(False,False,False)\'");
                                        temp451 = this.IMS_OXCTABLAdapterInstance.RopExpandRow(false, false, false);
                                        this.Manager.Checkpoint("MS-OXCTABL_R568");
                                        this.Manager.Checkpoint("MS-OXCTABL_R567");
                                        this.Manager.Comment("reaching state \'S797\'");
                                        this.Manager.Comment("checking step \'return RopExpandRow/success\'");
                                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp451, "return of RopExpandRow, state S797");
                                        this.Manager.Comment("reaching state \'S887\'");
                                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopExpandRowResponseInfo, null, new RopExpandRowResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite5RopExpandRowResponseChecker8))) != -1)) {
                                            this.Manager.Comment("reaching state \'S925\'");
                                        }
                                        else {
                                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopExpandRowResponseInfo, null, new RopExpandRowResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite5RopExpandRowResponseChecker8)));
                                        }
                                        goto label139;
                                    }
                                    throw new InvalidOperationException("never reached");
                                label139:
;
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite5RopQueryRowsResponseChecker5)));
                                }
                                goto label140;
                            }
                            throw new InvalidOperationException("never reached");
                        label140:
;
                            goto label143;
                        }
                        if ((temp462 == 1)) {
                            this.Manager.Comment("reaching state \'S173\'");
                            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp454;
                            this.Manager.Comment("executing step \'call RopQueryRows(Advance,True)\'");
                            temp454 = this.IMS_OXCTABLAdapterInstance.RopQueryRows(((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), true);
                            this.Manager.Checkpoint("MS-OXCTABL_R837");
                            this.Manager.Comment("reaching state \'S221\'");
                            this.Manager.Comment("checking step \'return RopQueryRows/success\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp454, "return of RopQueryRows, state S221");
                            this.Manager.Comment("reaching state \'S269\'");
                            bool temp455;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(610,out _)\'");
                            this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(610, out temp455);
                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp455);
                            this.Manager.Comment("reaching state \'S317\'");
                            int temp461 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite5CheckRequirementEnabledChecker25)), new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite5CheckRequirementEnabledChecker28)));
                            if ((temp461 == 0)) {
                                this.Manager.Comment("reaching state \'S400\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite5RopQueryRowsResponseChecker6))) != -1)) {
                                    this.Manager.Comment("reaching state \'S496\'");
                                    bool temp456;
                                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(748,out _)\'");
                                    this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(748, out temp456);
                                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp456);
                                    this.Manager.Comment("reaching state \'S592\'");
                                    int temp459 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite5CheckRequirementEnabledChecker26)), new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite5CheckRequirementEnabledChecker27)));
                                    if ((temp459 == 0)) {
                                        this.Manager.Comment("reaching state \'S702\'");
                                        Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp457;
                                        this.Manager.Comment("executing step \'call RopExpandRow(False,True,False)\'");
                                        temp457 = this.IMS_OXCTABLAdapterInstance.RopExpandRow(false, true, false);
                                        this.Manager.Checkpoint("MS-OXCTABL_R568");
                                        this.Manager.Checkpoint("MS-OXCTABL_R571");
                                        this.Manager.Comment("reaching state \'S798\'");
                                        this.Manager.Comment("checking step \'return RopExpandRow/ecNotCollapsed\'");
                                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues.ecNotCollapsed, temp457, "return of RopExpandRow, state S798");
                                        S04_ExpandRowRops_CollapseorExpandRow_TestSuiteS864();
                                        goto label141;
                                    }
                                    if ((temp459 == 1)) {
                                        this.Manager.Comment("reaching state \'S703\'");
                                        Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp458;
                                        this.Manager.Comment("executing step \'call RopExpandRow(False,True,False)\'");
                                        temp458 = this.IMS_OXCTABLAdapterInstance.RopExpandRow(false, true, false);
                                        this.Manager.Checkpoint("MS-OXCTABL_R568");
                                        this.Manager.Checkpoint("MS-OXCTABL_R571");
                                        this.Manager.Comment("reaching state \'S799\'");
                                        this.Manager.Comment("checking step \'return RopExpandRow/ecNotCollapsed\'");
                                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues.ecNotCollapsed, temp458, "return of RopExpandRow, state S799");
                                        S04_ExpandRowRops_CollapseorExpandRow_TestSuiteS865();
                                        goto label141;
                                    }
                                    throw new InvalidOperationException("never reached");
                                label141:
;
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite5RopQueryRowsResponseChecker6)));
                                }
                                goto label142;
                            }
                            if ((temp461 == 1)) {
                                this.Manager.Comment("reaching state \'S401\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite5RopQueryRowsResponseChecker7))) != -1)) {
                                    this.Manager.Comment("reaching state \'S497\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp460;
                                    this.Manager.Comment("executing step \'call RopCollapseRow(True,False)\'");
                                    temp460 = this.IMS_OXCTABLAdapterInstance.RopCollapseRow(true, false);
                                    this.Manager.Checkpoint("MS-OXCTABL_R574");
                                    this.Manager.Checkpoint("MS-OXCTABL_R576");
                                    this.Manager.Comment("reaching state \'S593\'");
                                    this.Manager.Comment("checking step \'return RopCollapseRow/ecNotFound\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues.ecNotFound, temp460, "return of RopCollapseRow, state S593");
                                    S04_ExpandRowRops_CollapseorExpandRow_TestSuiteS684();
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite5RopQueryRowsResponseChecker7)));
                                }
                                goto label142;
                            }
                            throw new InvalidOperationException("never reached");
                        label142:
;
                            goto label143;
                        }
                        throw new InvalidOperationException("never reached");
                    label143:
;
                        goto label144;
                    }
                    throw new InvalidOperationException("never reached");
                label144:
;
                    goto label158;
                }
                if ((temp506 == 1)) {
                    this.Manager.Comment("reaching state \'S75\'");
                    bool temp464;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(866,out _)\'");
                    this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(866, out temp464);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp464);
                    this.Manager.Comment("reaching state \'S87\'");
                    int temp505 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite5CheckRequirementEnabledChecker30)), new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite5CheckRequirementEnabledChecker43)));
                    if ((temp505 == 0)) {
                        this.Manager.Comment("reaching state \'S108\'");
                        bool temp465;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(867,out _)\'");
                        this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(867, out temp465);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp465);
                        this.Manager.Comment("reaching state \'S132\'");
                        int temp486 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite5CheckRequirementEnabledChecker31)), new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite5CheckRequirementEnabledChecker38)));
                        if ((temp486 == 0)) {
                            this.Manager.Comment("reaching state \'S174\'");
                            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp466;
                            this.Manager.Comment("executing step \'call RopQueryRows(Advance,True)\'");
                            temp466 = this.IMS_OXCTABLAdapterInstance.RopQueryRows(((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), true);
                            this.Manager.Checkpoint("MS-OXCTABL_R837");
                            this.Manager.Comment("reaching state \'S222\'");
                            this.Manager.Comment("checking step \'return RopQueryRows/success\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp466, "return of RopQueryRows, state S222");
                            this.Manager.Comment("reaching state \'S270\'");
                            bool temp467;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(610,out _)\'");
                            this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(610, out temp467);
                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp467);
                            this.Manager.Comment("reaching state \'S318\'");
                            int temp477 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite5CheckRequirementEnabledChecker32)), new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite5CheckRequirementEnabledChecker35)));
                            if ((temp477 == 0)) {
                                this.Manager.Comment("reaching state \'S402\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite5RopQueryRowsResponseChecker8))) != -1)) {
                                    this.Manager.Comment("reaching state \'S498\'");
                                    bool temp468;
                                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(748,out _)\'");
                                    this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(748, out temp468);
                                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp468);
                                    this.Manager.Comment("reaching state \'S594\'");
                                    int temp472 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite5CheckRequirementEnabledChecker33)), new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite5CheckRequirementEnabledChecker34)));
                                    if ((temp472 == 0)) {
                                        this.Manager.Comment("reaching state \'S704\'");
                                        Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp469;
                                        this.Manager.Comment("executing step \'call RopExpandRow(False,False,False)\'");
                                        temp469 = this.IMS_OXCTABLAdapterInstance.RopExpandRow(false, false, false);
                                        this.Manager.Checkpoint("MS-OXCTABL_R568");
                                        this.Manager.Checkpoint("MS-OXCTABL_R567");
                                        this.Manager.Comment("reaching state \'S800\'");
                                        this.Manager.Comment("checking step \'return RopExpandRow/success\'");
                                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp469, "return of RopExpandRow, state S800");
                                        this.Manager.Comment("reaching state \'S888\'");
                                        int temp470 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopExpandRowResponseInfo, null, new RopExpandRowResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite5RopExpandRowResponseChecker9)), new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopExpandRowResponseInfo, null, new RopExpandRowResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite5RopExpandRowResponseChecker10)));
                                        if ((temp470 == 0)) {
                                            S04_ExpandRowRops_CollapseorExpandRow_TestSuiteS926();
                                            goto label145;
                                        }
                                        if ((temp470 == 1)) {
                                            S04_ExpandRowRops_CollapseorExpandRow_TestSuiteS926();
                                            goto label145;
                                        }
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopExpandRowResponseInfo, null, new RopExpandRowResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite5RopExpandRowResponseChecker9)), new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopExpandRowResponseInfo, null, new RopExpandRowResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite5RopExpandRowResponseChecker10)));
                                    label145:
;
                                        goto label146;
                                    }
                                    if ((temp472 == 1)) {
                                        this.Manager.Comment("reaching state \'S705\'");
                                        Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp471;
                                        this.Manager.Comment("executing step \'call RopExpandRow(False,False,False)\'");
                                        temp471 = this.IMS_OXCTABLAdapterInstance.RopExpandRow(false, false, false);
                                        this.Manager.Checkpoint("MS-OXCTABL_R568");
                                        this.Manager.Checkpoint("MS-OXCTABL_R567");
                                        this.Manager.Comment("reaching state \'S801\'");
                                        this.Manager.Comment("checking step \'return RopExpandRow/success\'");
                                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp471, "return of RopExpandRow, state S801");
                                        this.Manager.Comment("reaching state \'S889\'");
                                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopExpandRowResponseInfo, null, new RopExpandRowResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite5RopExpandRowResponseChecker11))) != -1)) {
                                            this.Manager.Comment("reaching state \'S927\'");
                                        }
                                        else {
                                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopExpandRowResponseInfo, null, new RopExpandRowResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite5RopExpandRowResponseChecker11)));
                                        }
                                        goto label146;
                                    }
                                    throw new InvalidOperationException("never reached");
                                label146:
;
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite5RopQueryRowsResponseChecker8)));
                                }
                                goto label148;
                            }
                            if ((temp477 == 1)) {
                                this.Manager.Comment("reaching state \'S403\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite5RopQueryRowsResponseChecker9))) != -1)) {
                                    this.Manager.Comment("reaching state \'S499\'");
                                    bool temp473;
                                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(748,out _)\'");
                                    this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(748, out temp473);
                                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp473);
                                    this.Manager.Comment("reaching state \'S595\'");
                                    int temp476 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite5CheckRequirementEnabledChecker36)), new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite5CheckRequirementEnabledChecker37)));
                                    if ((temp476 == 0)) {
                                        this.Manager.Comment("reaching state \'S706\'");
                                        Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp474;
                                        this.Manager.Comment("executing step \'call RopExpandRow(False,True,False)\'");
                                        temp474 = this.IMS_OXCTABLAdapterInstance.RopExpandRow(false, true, false);
                                        this.Manager.Checkpoint("MS-OXCTABL_R568");
                                        this.Manager.Checkpoint("MS-OXCTABL_R571");
                                        this.Manager.Comment("reaching state \'S802\'");
                                        this.Manager.Comment("checking step \'return RopExpandRow/ecNotCollapsed\'");
                                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues.ecNotCollapsed, temp474, "return of RopExpandRow, state S802");
                                        S04_ExpandRowRops_CollapseorExpandRow_TestSuiteS890();
                                        goto label147;
                                    }
                                    if ((temp476 == 1)) {
                                        this.Manager.Comment("reaching state \'S707\'");
                                        Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp475;
                                        this.Manager.Comment("executing step \'call RopExpandRow(False,True,False)\'");
                                        temp475 = this.IMS_OXCTABLAdapterInstance.RopExpandRow(false, true, false);
                                        this.Manager.Checkpoint("MS-OXCTABL_R568");
                                        this.Manager.Checkpoint("MS-OXCTABL_R571");
                                        this.Manager.Comment("reaching state \'S803\'");
                                        this.Manager.Comment("checking step \'return RopExpandRow/ecNotCollapsed\'");
                                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues.ecNotCollapsed, temp475, "return of RopExpandRow, state S803");
                                        S04_ExpandRowRops_CollapseorExpandRow_TestSuiteS891();
                                        goto label147;
                                    }
                                    throw new InvalidOperationException("never reached");
                                label147:
;
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite5RopQueryRowsResponseChecker9)));
                                }
                                goto label148;
                            }
                            throw new InvalidOperationException("never reached");
                        label148:
;
                            goto label151;
                        }
                        if ((temp486 == 1)) {
                            this.Manager.Comment("reaching state \'S175\'");
                            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp478;
                            this.Manager.Comment("executing step \'call RopQueryRows(Advance,True)\'");
                            temp478 = this.IMS_OXCTABLAdapterInstance.RopQueryRows(((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), true);
                            this.Manager.Checkpoint("MS-OXCTABL_R837");
                            this.Manager.Comment("reaching state \'S223\'");
                            this.Manager.Comment("checking step \'return RopQueryRows/success\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp478, "return of RopQueryRows, state S223");
                            this.Manager.Comment("reaching state \'S271\'");
                            bool temp479;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(610,out _)\'");
                            this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(610, out temp479);
                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp479);
                            this.Manager.Comment("reaching state \'S319\'");
                            int temp485 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite5CheckRequirementEnabledChecker39)), new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite5CheckRequirementEnabledChecker42)));
                            if ((temp485 == 0)) {
                                this.Manager.Comment("reaching state \'S404\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite5RopQueryRowsResponseChecker10))) != -1)) {
                                    this.Manager.Comment("reaching state \'S500\'");
                                    bool temp480;
                                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(748,out _)\'");
                                    this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(748, out temp480);
                                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp480);
                                    this.Manager.Comment("reaching state \'S596\'");
                                    int temp483 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite5CheckRequirementEnabledChecker40)), new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite5CheckRequirementEnabledChecker41)));
                                    if ((temp483 == 0)) {
                                        this.Manager.Comment("reaching state \'S708\'");
                                        Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp481;
                                        this.Manager.Comment("executing step \'call RopExpandRow(False,True,False)\'");
                                        temp481 = this.IMS_OXCTABLAdapterInstance.RopExpandRow(false, true, false);
                                        this.Manager.Checkpoint("MS-OXCTABL_R568");
                                        this.Manager.Checkpoint("MS-OXCTABL_R571");
                                        this.Manager.Comment("reaching state \'S804\'");
                                        this.Manager.Comment("checking step \'return RopExpandRow/ecNotCollapsed\'");
                                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues.ecNotCollapsed, temp481, "return of RopExpandRow, state S804");
                                        S04_ExpandRowRops_CollapseorExpandRow_TestSuiteS892();
                                        goto label149;
                                    }
                                    if ((temp483 == 1)) {
                                        this.Manager.Comment("reaching state \'S709\'");
                                        Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp482;
                                        this.Manager.Comment("executing step \'call RopExpandRow(False,True,False)\'");
                                        temp482 = this.IMS_OXCTABLAdapterInstance.RopExpandRow(false, true, false);
                                        this.Manager.Checkpoint("MS-OXCTABL_R568");
                                        this.Manager.Checkpoint("MS-OXCTABL_R571");
                                        this.Manager.Comment("reaching state \'S805\'");
                                        this.Manager.Comment("checking step \'return RopExpandRow/ecNotCollapsed\'");
                                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues.ecNotCollapsed, temp482, "return of RopExpandRow, state S805");
                                        S04_ExpandRowRops_CollapseorExpandRow_TestSuiteS893();
                                        goto label149;
                                    }
                                    throw new InvalidOperationException("never reached");
                                label149:
;
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite5RopQueryRowsResponseChecker10)));
                                }
                                goto label150;
                            }
                            if ((temp485 == 1)) {
                                this.Manager.Comment("reaching state \'S405\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite5RopQueryRowsResponseChecker11))) != -1)) {
                                    this.Manager.Comment("reaching state \'S501\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp484;
                                    this.Manager.Comment("executing step \'call RopCollapseRow(True,False)\'");
                                    temp484 = this.IMS_OXCTABLAdapterInstance.RopCollapseRow(true, false);
                                    this.Manager.Checkpoint("MS-OXCTABL_R574");
                                    this.Manager.Checkpoint("MS-OXCTABL_R576");
                                    this.Manager.Comment("reaching state \'S597\'");
                                    this.Manager.Comment("checking step \'return RopCollapseRow/ecNotFound\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues.ecNotFound, temp484, "return of RopCollapseRow, state S597");
                                    S04_ExpandRowRops_CollapseorExpandRow_TestSuiteS679();
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite5RopQueryRowsResponseChecker11)));
                                }
                                goto label150;
                            }
                            throw new InvalidOperationException("never reached");
                        label150:
;
                            goto label151;
                        }
                        throw new InvalidOperationException("never reached");
                    label151:
;
                        goto label157;
                    }
                    if ((temp505 == 1)) {
                        this.Manager.Comment("reaching state \'S109\'");
                        bool temp487;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(867,out _)\'");
                        this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(867, out temp487);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp487);
                        this.Manager.Comment("reaching state \'S133\'");
                        int temp504 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite5CheckRequirementEnabledChecker44)), new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite5CheckRequirementEnabledChecker47)));
                        if ((temp504 == 0)) {
                            this.Manager.Comment("reaching state \'S176\'");
                            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp488;
                            this.Manager.Comment("executing step \'call RopQueryRows(Advance,True)\'");
                            temp488 = this.IMS_OXCTABLAdapterInstance.RopQueryRows(((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), true);
                            this.Manager.Checkpoint("MS-OXCTABL_R837");
                            this.Manager.Comment("reaching state \'S224\'");
                            this.Manager.Comment("checking step \'return RopQueryRows/success\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp488, "return of RopQueryRows, state S224");
                            this.Manager.Comment("reaching state \'S272\'");
                            bool temp489;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(610,out _)\'");
                            this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(610, out temp489);
                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp489);
                            this.Manager.Comment("reaching state \'S320\'");
                            int temp492 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite5CheckRequirementEnabledChecker45)), new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite5CheckRequirementEnabledChecker46)));
                            if ((temp492 == 0)) {
                                this.Manager.Comment("reaching state \'S406\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite5RopQueryRowsResponseChecker12))) != -1)) {
                                    this.Manager.Comment("reaching state \'S502\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp490;
                                    this.Manager.Comment("executing step \'call RopCollapseRow(True,False)\'");
                                    temp490 = this.IMS_OXCTABLAdapterInstance.RopCollapseRow(true, false);
                                    this.Manager.Checkpoint("MS-OXCTABL_R574");
                                    this.Manager.Checkpoint("MS-OXCTABL_R576");
                                    this.Manager.Comment("reaching state \'S598\'");
                                    this.Manager.Comment("checking step \'return RopCollapseRow/ecNotFound\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues.ecNotFound, temp490, "return of RopCollapseRow, state S598");
                                    S04_ExpandRowRops_CollapseorExpandRow_TestSuiteS680();
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite5RopQueryRowsResponseChecker12)));
                                }
                                goto label152;
                            }
                            if ((temp492 == 1)) {
                                this.Manager.Comment("reaching state \'S407\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite5RopQueryRowsResponseChecker13))) != -1)) {
                                    this.Manager.Comment("reaching state \'S503\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp491;
                                    this.Manager.Comment("executing step \'call RopCollapseRow(True,False)\'");
                                    temp491 = this.IMS_OXCTABLAdapterInstance.RopCollapseRow(true, false);
                                    this.Manager.Checkpoint("MS-OXCTABL_R574");
                                    this.Manager.Checkpoint("MS-OXCTABL_R576");
                                    this.Manager.Comment("reaching state \'S599\'");
                                    this.Manager.Comment("checking step \'return RopCollapseRow/ecNotFound\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues.ecNotFound, temp491, "return of RopCollapseRow, state S599");
                                    S04_ExpandRowRops_CollapseorExpandRow_TestSuiteS689();
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite5RopQueryRowsResponseChecker13)));
                                }
                                goto label152;
                            }
                            throw new InvalidOperationException("never reached");
                        label152:
;
                            goto label156;
                        }
                        if ((temp504 == 1)) {
                            this.Manager.Comment("reaching state \'S177\'");
                            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp493;
                            this.Manager.Comment("executing step \'call RopQueryRows(Advance,True)\'");
                            temp493 = this.IMS_OXCTABLAdapterInstance.RopQueryRows(((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), true);
                            this.Manager.Checkpoint("MS-OXCTABL_R837");
                            this.Manager.Comment("reaching state \'S225\'");
                            this.Manager.Comment("checking step \'return RopQueryRows/success\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp493, "return of RopQueryRows, state S225");
                            this.Manager.Comment("reaching state \'S273\'");
                            bool temp494;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(610,out _)\'");
                            this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(610, out temp494);
                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp494);
                            this.Manager.Comment("reaching state \'S321\'");
                            int temp503 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite5CheckRequirementEnabledChecker48)), new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite5CheckRequirementEnabledChecker51)));
                            if ((temp503 == 0)) {
                                this.Manager.Comment("reaching state \'S408\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite5RopQueryRowsResponseChecker14))) != -1)) {
                                    this.Manager.Comment("reaching state \'S504\'");
                                    bool temp495;
                                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(748,out _)\'");
                                    this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(748, out temp495);
                                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp495);
                                    this.Manager.Comment("reaching state \'S600\'");
                                    int temp498 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite5CheckRequirementEnabledChecker49)), new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite5CheckRequirementEnabledChecker50)));
                                    if ((temp498 == 0)) {
                                        this.Manager.Comment("reaching state \'S710\'");
                                        Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp496;
                                        this.Manager.Comment("executing step \'call RopExpandRow(False,True,False)\'");
                                        temp496 = this.IMS_OXCTABLAdapterInstance.RopExpandRow(false, true, false);
                                        this.Manager.Checkpoint("MS-OXCTABL_R568");
                                        this.Manager.Checkpoint("MS-OXCTABL_R571");
                                        this.Manager.Comment("reaching state \'S806\'");
                                        this.Manager.Comment("checking step \'return RopExpandRow/ecNotCollapsed\'");
                                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues.ecNotCollapsed, temp496, "return of RopExpandRow, state S806");
                                        S04_ExpandRowRops_CollapseorExpandRow_TestSuiteS852();
                                        goto label153;
                                    }
                                    if ((temp498 == 1)) {
                                        this.Manager.Comment("reaching state \'S711\'");
                                        Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp497;
                                        this.Manager.Comment("executing step \'call RopExpandRow(False,True,False)\'");
                                        temp497 = this.IMS_OXCTABLAdapterInstance.RopExpandRow(false, true, false);
                                        this.Manager.Checkpoint("MS-OXCTABL_R568");
                                        this.Manager.Checkpoint("MS-OXCTABL_R571");
                                        this.Manager.Comment("reaching state \'S807\'");
                                        this.Manager.Comment("checking step \'return RopExpandRow/ecNotCollapsed\'");
                                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues.ecNotCollapsed, temp497, "return of RopExpandRow, state S807");
                                        S04_ExpandRowRops_CollapseorExpandRow_TestSuiteS853();
                                        goto label153;
                                    }
                                    throw new InvalidOperationException("never reached");
                                label153:
;
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite5RopQueryRowsResponseChecker14)));
                                }
                                goto label155;
                            }
                            if ((temp503 == 1)) {
                                this.Manager.Comment("reaching state \'S409\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite5RopQueryRowsResponseChecker15))) != -1)) {
                                    this.Manager.Comment("reaching state \'S505\'");
                                    bool temp499;
                                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(748,out _)\'");
                                    this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(748, out temp499);
                                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp499);
                                    this.Manager.Comment("reaching state \'S601\'");
                                    int temp502 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite5CheckRequirementEnabledChecker52)), new ExpectedReturn(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite5CheckRequirementEnabledChecker53)));
                                    if ((temp502 == 0)) {
                                        this.Manager.Comment("reaching state \'S712\'");
                                        Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp500;
                                        this.Manager.Comment("executing step \'call RopExpandRow(False,True,False)\'");
                                        temp500 = this.IMS_OXCTABLAdapterInstance.RopExpandRow(false, true, false);
                                        this.Manager.Checkpoint("MS-OXCTABL_R568");
                                        this.Manager.Checkpoint("MS-OXCTABL_R571");
                                        this.Manager.Comment("reaching state \'S808\'");
                                        this.Manager.Comment("checking step \'return RopExpandRow/ecNotCollapsed\'");
                                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues.ecNotCollapsed, temp500, "return of RopExpandRow, state S808");
                                        S04_ExpandRowRops_CollapseorExpandRow_TestSuiteS894();
                                        goto label154;
                                    }
                                    if ((temp502 == 1)) {
                                        this.Manager.Comment("reaching state \'S713\'");
                                        Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp501;
                                        this.Manager.Comment("executing step \'call RopExpandRow(False,True,False)\'");
                                        temp501 = this.IMS_OXCTABLAdapterInstance.RopExpandRow(false, true, false);
                                        this.Manager.Checkpoint("MS-OXCTABL_R568");
                                        this.Manager.Checkpoint("MS-OXCTABL_R571");
                                        this.Manager.Comment("reaching state \'S809\'");
                                        this.Manager.Comment("checking step \'return RopExpandRow/ecNotCollapsed\'");
                                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues.ecNotCollapsed, temp501, "return of RopExpandRow, state S809");
                                        S04_ExpandRowRops_CollapseorExpandRow_TestSuiteS895();
                                        goto label154;
                                    }
                                    throw new InvalidOperationException("never reached");
                                label154:
;
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S04_ExpandRowRops_CollapseorExpandRow_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite5RopQueryRowsResponseChecker15)));
                                }
                                goto label155;
                            }
                            throw new InvalidOperationException("never reached");
                        label155:
;
                            goto label156;
                        }
                        throw new InvalidOperationException("never reached");
                    label156:
;
                        goto label157;
                    }
                    throw new InvalidOperationException("never reached");
                label157:
;
                    goto label158;
                }
                throw new InvalidOperationException("never reached");
            label158:
;
                goto label159;
            }
            if ((temp507 == 1)) {
                this.Manager.Comment("reaching state \'S21\'");
                goto label159;
            }
            throw new InvalidOperationException("never reached");
        label159:
;
            this.Manager.EndTest();
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite5CheckMAPIHTTPTransportSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S9");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite5CheckRequirementEnabledChecker(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S64");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite5CheckRequirementEnabledChecker1(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S86");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite5CheckRequirementEnabledChecker2(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S130");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite5CheckRequirementEnabledChecker3(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S314");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite5RopQueryRowsResponseChecker(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SETCOLUMNS,True,True" +
                    ",True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S394");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S394");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S394");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S394");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S394");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S394");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S394");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S394");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S394");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S394");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R472, MS-OXCTABL_R427, MS-OXCTABL_R42" +
                        "6, MS-OXCTABL_R116");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R472");
            this.Manager.Checkpoint("MS-OXCTABL_R427");
            this.Manager.Checkpoint("MS-OXCTABL_R426");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite5CheckRequirementEnabledChecker4(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S586");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite5RopExpandRowResponseChecker(bool isLastSetColumnData) {
            this.Manager.Comment("checking step \'event RopExpandRowResponse(True)\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isLastSetColumnData, "isLastSetColumnData of RopExpandRowResponse, state S880");
        }
        
        private void S04_ExpandRowRops_CollapseorExpandRow_TestSuiteS920() {
            this.Manager.Comment("reaching state \'S920\'");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite5RopExpandRowResponseChecker1(bool isLastSetColumnData) {
            this.Manager.Comment("checking step \'event RopExpandRowResponse(False)\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isLastSetColumnData, "isLastSetColumnData of RopExpandRowResponse, state S880");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite5CheckRequirementEnabledChecker5(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S586");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite5RopExpandRowResponseChecker2(bool isLastSetColumnData) {
            this.Manager.Comment("checking step \'event RopExpandRowResponse(True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isLastSetColumnData, "isLastSetColumnData of RopExpandRowResponse, state S881");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R814, MS-OXCTABL_R825");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R814");
            this.Manager.Checkpoint("MS-OXCTABL_R825");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite5CheckRequirementEnabledChecker6(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S314");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite5RopQueryRowsResponseChecker1(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SETCOLUMNS,True,True" +
                    ",True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S395");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S395");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S395");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S395");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S395");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S395");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S395");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S395");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S395");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S395");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R472, MS-OXCTABL_R427, MS-OXCTABL_R42" +
                        "6, MS-OXCTABL_R116, MS-OXCTABL_R610");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R472");
            this.Manager.Checkpoint("MS-OXCTABL_R427");
            this.Manager.Checkpoint("MS-OXCTABL_R426");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R610");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite5CheckRequirementEnabledChecker7(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S587");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite5CheckRequirementEnabledChecker8(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S587");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite5CheckRequirementEnabledChecker9(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S130");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite5CheckRequirementEnabledChecker10(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S315");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite5RopQueryRowsResponseChecker2(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SETCOLUMNS,True,True" +
                    ",True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S396");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S396");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S396");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S396");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S396");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S396");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S396");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S396");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S396");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S396");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R472, MS-OXCTABL_R427, MS-OXCTABL_R42" +
                        "6, MS-OXCTABL_R116");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R472");
            this.Manager.Checkpoint("MS-OXCTABL_R427");
            this.Manager.Checkpoint("MS-OXCTABL_R426");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite5CheckRequirementEnabledChecker11(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S588");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite5CheckRequirementEnabledChecker12(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S588");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite5CheckRequirementEnabledChecker13(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S315");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite5RopQueryRowsResponseChecker3(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SETCOLUMNS,True,True" +
                    ",True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S397");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S397");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S397");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S397");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S397");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S397");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S397");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S397");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S397");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S397");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R472, MS-OXCTABL_R427, MS-OXCTABL_R42" +
                        "6, MS-OXCTABL_R116, MS-OXCTABL_R610");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R472");
            this.Manager.Checkpoint("MS-OXCTABL_R427");
            this.Manager.Checkpoint("MS-OXCTABL_R426");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R610");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite5CheckRequirementEnabledChecker14(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S589");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite5RopExpandRowResponseChecker3(bool isLastSetColumnData) {
            this.Manager.Comment("checking step \'event RopExpandRowResponse(True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isLastSetColumnData, "isLastSetColumnData of RopExpandRowResponse, state S884");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R814, MS-OXCTABL_R825");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R814");
            this.Manager.Checkpoint("MS-OXCTABL_R825");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite5CheckRequirementEnabledChecker15(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S589");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite5RopExpandRowResponseChecker4(bool isLastSetColumnData) {
            this.Manager.Comment("checking step \'event RopExpandRowResponse(True)\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isLastSetColumnData, "isLastSetColumnData of RopExpandRowResponse, state S885");
        }
        
        private void S04_ExpandRowRops_CollapseorExpandRow_TestSuiteS923() {
            this.Manager.Comment("reaching state \'S923\'");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite5RopExpandRowResponseChecker5(bool isLastSetColumnData) {
            this.Manager.Comment("checking step \'event RopExpandRowResponse(False)\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isLastSetColumnData, "isLastSetColumnData of RopExpandRowResponse, state S885");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite5CheckRequirementEnabledChecker16(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S86");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite5CheckRequirementEnabledChecker17(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S131");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite5CheckRequirementEnabledChecker18(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S316");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite5RopQueryRowsResponseChecker4(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SETCOLUMNS,True,True" +
                    ",True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S398");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S398");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S398");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S398");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S398");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S398");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S398");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S398");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S398");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S398");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R472, MS-OXCTABL_R427, MS-OXCTABL_R42" +
                        "6, MS-OXCTABL_R116, MS-OXCTABL_R610");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R472");
            this.Manager.Checkpoint("MS-OXCTABL_R427");
            this.Manager.Checkpoint("MS-OXCTABL_R426");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R610");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite5CheckRequirementEnabledChecker19(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S590");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite5CheckRequirementEnabledChecker20(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S590");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite5CheckRequirementEnabledChecker21(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S316");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite5RopQueryRowsResponseChecker5(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SETCOLUMNS,True,True" +
                    ",True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S399");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S399");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S399");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S399");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S399");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S399");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S399");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S399");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S399");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S399");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R472, MS-OXCTABL_R427, MS-OXCTABL_R42" +
                        "6, MS-OXCTABL_R116");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R472");
            this.Manager.Checkpoint("MS-OXCTABL_R427");
            this.Manager.Checkpoint("MS-OXCTABL_R426");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite5CheckRequirementEnabledChecker22(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S591");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite5RopExpandRowResponseChecker6(bool isLastSetColumnData) {
            this.Manager.Comment("checking step \'event RopExpandRowResponse(True)\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isLastSetColumnData, "isLastSetColumnData of RopExpandRowResponse, state S886");
        }
        
        private void S04_ExpandRowRops_CollapseorExpandRow_TestSuiteS924() {
            this.Manager.Comment("reaching state \'S924\'");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite5RopExpandRowResponseChecker7(bool isLastSetColumnData) {
            this.Manager.Comment("checking step \'event RopExpandRowResponse(False)\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isLastSetColumnData, "isLastSetColumnData of RopExpandRowResponse, state S886");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite5CheckRequirementEnabledChecker23(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S591");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite5RopExpandRowResponseChecker8(bool isLastSetColumnData) {
            this.Manager.Comment("checking step \'event RopExpandRowResponse(True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isLastSetColumnData, "isLastSetColumnData of RopExpandRowResponse, state S887");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R814, MS-OXCTABL_R825");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R814");
            this.Manager.Checkpoint("MS-OXCTABL_R825");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite5CheckRequirementEnabledChecker24(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S131");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite5CheckRequirementEnabledChecker25(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S317");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite5RopQueryRowsResponseChecker6(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SETCOLUMNS,True,True" +
                    ",True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S400");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S400");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S400");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S400");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S400");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S400");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S400");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S400");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S400");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S400");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R472, MS-OXCTABL_R427, MS-OXCTABL_R42" +
                        "6, MS-OXCTABL_R116, MS-OXCTABL_R610");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R472");
            this.Manager.Checkpoint("MS-OXCTABL_R427");
            this.Manager.Checkpoint("MS-OXCTABL_R426");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R610");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite5CheckRequirementEnabledChecker26(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S592");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite5CheckRequirementEnabledChecker27(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S592");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite5CheckRequirementEnabledChecker28(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S317");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite5RopQueryRowsResponseChecker7(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SETCOLUMNS,True,True" +
                    ",True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S401");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S401");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S401");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S401");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S401");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S401");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S401");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S401");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S401");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S401");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R472, MS-OXCTABL_R427, MS-OXCTABL_R42" +
                        "6, MS-OXCTABL_R116");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R472");
            this.Manager.Checkpoint("MS-OXCTABL_R427");
            this.Manager.Checkpoint("MS-OXCTABL_R426");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite5CheckRequirementEnabledChecker29(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S64");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite5CheckRequirementEnabledChecker30(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S87");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite5CheckRequirementEnabledChecker31(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S132");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite5CheckRequirementEnabledChecker32(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S318");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite5RopQueryRowsResponseChecker8(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SETCOLUMNS,True,True" +
                    ",True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S402");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S402");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S402");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S402");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S402");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S402");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S402");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S402");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S402");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S402");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R472, MS-OXCTABL_R427, MS-OXCTABL_R42" +
                        "6, MS-OXCTABL_R116");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R472");
            this.Manager.Checkpoint("MS-OXCTABL_R427");
            this.Manager.Checkpoint("MS-OXCTABL_R426");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite5CheckRequirementEnabledChecker33(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S594");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite5RopExpandRowResponseChecker9(bool isLastSetColumnData) {
            this.Manager.Comment("checking step \'event RopExpandRowResponse(True)\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isLastSetColumnData, "isLastSetColumnData of RopExpandRowResponse, state S888");
        }
        
        private void S04_ExpandRowRops_CollapseorExpandRow_TestSuiteS926() {
            this.Manager.Comment("reaching state \'S926\'");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite5RopExpandRowResponseChecker10(bool isLastSetColumnData) {
            this.Manager.Comment("checking step \'event RopExpandRowResponse(False)\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isLastSetColumnData, "isLastSetColumnData of RopExpandRowResponse, state S888");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite5CheckRequirementEnabledChecker34(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S594");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite5RopExpandRowResponseChecker11(bool isLastSetColumnData) {
            this.Manager.Comment("checking step \'event RopExpandRowResponse(True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isLastSetColumnData, "isLastSetColumnData of RopExpandRowResponse, state S889");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R814, MS-OXCTABL_R825");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R814");
            this.Manager.Checkpoint("MS-OXCTABL_R825");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite5CheckRequirementEnabledChecker35(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S318");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite5RopQueryRowsResponseChecker9(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SETCOLUMNS,True,True" +
                    ",True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S403");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S403");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S403");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S403");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S403");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S403");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S403");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S403");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S403");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S403");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R472, MS-OXCTABL_R427, MS-OXCTABL_R42" +
                        "6, MS-OXCTABL_R116, MS-OXCTABL_R610");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R472");
            this.Manager.Checkpoint("MS-OXCTABL_R427");
            this.Manager.Checkpoint("MS-OXCTABL_R426");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R610");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite5CheckRequirementEnabledChecker36(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S595");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite5CheckRequirementEnabledChecker37(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S595");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite5CheckRequirementEnabledChecker38(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S132");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite5CheckRequirementEnabledChecker39(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S319");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite5RopQueryRowsResponseChecker10(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SETCOLUMNS,True,True" +
                    ",True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S404");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S404");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S404");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S404");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S404");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S404");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S404");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S404");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S404");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S404");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R472, MS-OXCTABL_R427, MS-OXCTABL_R42" +
                        "6, MS-OXCTABL_R116");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R472");
            this.Manager.Checkpoint("MS-OXCTABL_R427");
            this.Manager.Checkpoint("MS-OXCTABL_R426");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite5CheckRequirementEnabledChecker40(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S596");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite5CheckRequirementEnabledChecker41(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S596");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite5CheckRequirementEnabledChecker42(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S319");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite5RopQueryRowsResponseChecker11(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SETCOLUMNS,True,True" +
                    ",True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S405");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S405");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S405");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S405");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S405");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S405");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S405");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S405");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S405");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S405");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R472, MS-OXCTABL_R427, MS-OXCTABL_R42" +
                        "6, MS-OXCTABL_R116, MS-OXCTABL_R610");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R472");
            this.Manager.Checkpoint("MS-OXCTABL_R427");
            this.Manager.Checkpoint("MS-OXCTABL_R426");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R610");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite5CheckRequirementEnabledChecker43(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S87");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite5CheckRequirementEnabledChecker44(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S133");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite5CheckRequirementEnabledChecker45(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S320");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite5RopQueryRowsResponseChecker12(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SETCOLUMNS,True,True" +
                    ",True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S406");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S406");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S406");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S406");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S406");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S406");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S406");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S406");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S406");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S406");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R472, MS-OXCTABL_R427, MS-OXCTABL_R42" +
                        "6, MS-OXCTABL_R116, MS-OXCTABL_R610");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R472");
            this.Manager.Checkpoint("MS-OXCTABL_R427");
            this.Manager.Checkpoint("MS-OXCTABL_R426");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R610");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite5CheckRequirementEnabledChecker46(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S320");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite5RopQueryRowsResponseChecker13(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SETCOLUMNS,True,True" +
                    ",True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S407");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S407");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S407");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S407");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S407");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S407");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S407");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S407");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S407");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S407");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R472, MS-OXCTABL_R427, MS-OXCTABL_R42" +
                        "6, MS-OXCTABL_R116");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R472");
            this.Manager.Checkpoint("MS-OXCTABL_R427");
            this.Manager.Checkpoint("MS-OXCTABL_R426");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite5CheckRequirementEnabledChecker47(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S133");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite5CheckRequirementEnabledChecker48(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S321");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite5RopQueryRowsResponseChecker14(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SETCOLUMNS,True,True" +
                    ",True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S408");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S408");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S408");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S408");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S408");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S408");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S408");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S408");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S408");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S408");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R472, MS-OXCTABL_R427, MS-OXCTABL_R42" +
                        "6, MS-OXCTABL_R116, MS-OXCTABL_R610");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R472");
            this.Manager.Checkpoint("MS-OXCTABL_R427");
            this.Manager.Checkpoint("MS-OXCTABL_R426");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R610");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite5CheckRequirementEnabledChecker49(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S600");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite5CheckRequirementEnabledChecker50(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S600");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite5CheckRequirementEnabledChecker51(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S321");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite5RopQueryRowsResponseChecker15(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SETCOLUMNS,True,True" +
                    ",True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S409");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S409");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S409");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S409");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S409");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S409");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S409");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S409");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S409");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S409");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R472, MS-OXCTABL_R427, MS-OXCTABL_R42" +
                        "6, MS-OXCTABL_R116");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R472");
            this.Manager.Checkpoint("MS-OXCTABL_R427");
            this.Manager.Checkpoint("MS-OXCTABL_R426");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite5CheckRequirementEnabledChecker52(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S601");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite5CheckRequirementEnabledChecker53(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S601");
        }
        
        private void MSOXCTABL_S04_ExpandRowRops_CollapseorExpandRow_TestSuite5CheckMAPIHTTPTransportSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S9");
        }
        #endregion
    }
}
