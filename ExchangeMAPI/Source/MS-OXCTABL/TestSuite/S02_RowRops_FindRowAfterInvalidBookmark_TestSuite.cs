//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18449
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Microsoft.Protocols.TestSuites.MS_OXCTABL {
    using System;
    using System.Collections.Generic;
    using System.Text;
    using System.Reflection;
    using Microsoft.SpecExplorer.Runtime.Testing;
    using Microsoft.Protocols.TestTools;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Spec Explorer", "3.5.3130.0")]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class S02_RowRops_FindRowAfterInvalidBookmark_TestSuite : PtfTestClassBase {
        
        public S02_RowRops_FindRowAfterInvalidBookmark_TestSuite() {
            this.SetSwitch("ProceedControlTimeout", "100");
            this.SetSwitch("QuiescenceTimeout", "2000000");
        }
        
        #region Expect Delegates
        public delegate void CheckMAPIHTTPTransportSupportedDelegate1(bool isSupported);
        
        public delegate void CheckRequirementEnabledDelegate1(bool enabled);
        #endregion
        
        #region Event Metadata
        static System.Reflection.MethodBase CheckMAPIHTTPTransportSupportedInfo = TestManagerHelpers.GetMethodInfo(typeof(Microsoft.Protocols.TestSuites.MS_OXCTABL.IMS_OXCTABLAdapter), "CheckMAPIHTTPTransportSupported", typeof(bool).MakeByRefType());
        
        static System.Reflection.MethodBase CheckRequirementEnabledInfo = TestManagerHelpers.GetMethodInfo(typeof(Microsoft.Protocols.TestSuites.MS_OXCTABL.IMS_OXCTABLAdapter), "CheckRequirementEnabled", typeof(int), typeof(bool).MakeByRefType());
        #endregion
        
        #region Adapter Instances
        private Microsoft.Protocols.TestSuites.MS_OXCTABL.IMS_OXCTABLAdapter IMS_OXCTABLAdapterInstance;
        #endregion
        
        #region Class Initialization and Cleanup
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void ClassInitialize(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext context) {
            PtfTestClassBase.Initialize(context);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void ClassCleanup() {
            PtfTestClassBase.Cleanup();
        }
        #endregion
        
        #region Test Initialization and Cleanup
        protected override void TestInitialize() {
            this.InitializeTestManager();
            this.IMS_OXCTABLAdapterInstance = ((Microsoft.Protocols.TestSuites.MS_OXCTABL.IMS_OXCTABLAdapter)(this.Manager.GetAdapter(typeof(Microsoft.Protocols.TestSuites.MS_OXCTABL.IMS_OXCTABLAdapter))));
        }
        
        protected override void TestCleanup() {
            base.TestCleanup();
            this.CleanupTestManager();
        }
        #endregion
        
        #region Test Starting in S0
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void MSOXCTABL_S02_RowRops_FindRowAfterInvalidBookmark_TestSuite() {
            this.Manager.BeginTest("MSOXCTABL_S02_RowRops_FindRowAfterInvalidBookmark_TestSuite");
            this.Manager.Comment("reaching state \'S0\'");
            bool temp0;
            this.Manager.Comment("executing step \'call CheckMAPIHTTPTransportSupported(out _)\'");
            this.IMS_OXCTABLAdapterInstance.CheckMAPIHTTPTransportSupported(out temp0);
            this.Manager.AddReturn(CheckMAPIHTTPTransportSupportedInfo, null, temp0);
            this.Manager.Comment("reaching state \'S1\'");
            int temp23 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_FindRowAfterInvalidBookmark_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCTABL_S02_RowRops_FindRowAfterInvalidBookmark_TestSuiteCheckMAPIHTTPTransportSupportedChecker)), new ExpectedReturn(S02_RowRops_FindRowAfterInvalidBookmark_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCTABL_S02_RowRops_FindRowAfterInvalidBookmark_TestSuiteCheckMAPIHTTPTransportSupportedChecker1)));
            if ((temp23 == 0)) {
                this.Manager.Comment("reaching state \'S6\'");
                goto label7;
            }
            if ((temp23 == 1)) {
                this.Manager.Comment("reaching state \'S7\'");
                this.Manager.Comment("executing step \'call InitializeTable(CONTENT_TABLE)\'");
                this.IMS_OXCTABLAdapterInstance.InitializeTable(((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableType)(0)));
                this.Manager.Comment("reaching state \'S12\'");
                this.Manager.Comment("checking step \'return InitializeTable\'");
                this.Manager.Comment("reaching state \'S15\'");
                Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp1;
                this.Manager.Comment("executing step \'call RopSetColumns(1,False,False,False)\'");
                temp1 = this.IMS_OXCTABLAdapterInstance.RopSetColumns(1u, false, false, false);
                this.Manager.Checkpoint("MS-OXCTABL_R831");
                this.Manager.Checkpoint("MS-OXCTABL_R45");
                this.Manager.Comment("reaching state \'S18\'");
                this.Manager.Comment("checking step \'return RopSetColumns/success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp1, "return of RopSetColumns, state S18");
                this.Manager.Comment("reaching state \'S21\'");
                Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp2;
                this.Manager.Comment("executing step \'call RopCreateBookmark()\'");
                temp2 = this.IMS_OXCTABLAdapterInstance.RopCreateBookmark();
                this.Manager.Checkpoint("MS-OXCTABL_R526");
                this.Manager.Comment("reaching state \'S24\'");
                this.Manager.Comment("checking step \'return RopCreateBookmark/success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp2, "return of RopCreateBookmark, state S24");
                this.Manager.Comment("reaching state \'S27\'");
                Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp3;
                this.Manager.Comment("executing step \'call RopResetTable()\'");
                temp3 = this.IMS_OXCTABLAdapterInstance.RopResetTable();
                this.Manager.Checkpoint("MS-OXCTABL_R564");
                this.Manager.Comment("reaching state \'S30\'");
                this.Manager.Comment("checking step \'return RopResetTable/success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp3, "return of RopResetTable, state S30");
                this.Manager.Comment("reaching state \'S33\'");
                Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp4;
                this.Manager.Comment("executing step \'call RopSetColumns(1,False,False,False)\'");
                temp4 = this.IMS_OXCTABLAdapterInstance.RopSetColumns(1u, false, false, false);
                this.Manager.Checkpoint("MS-OXCTABL_R831");
                this.Manager.Checkpoint("MS-OXCTABL_R45");
                this.Manager.Comment("reaching state \'S36\'");
                this.Manager.Comment("checking step \'return RopSetColumns/success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp4, "return of RopSetColumns, state S36");
                this.Manager.Comment("reaching state \'S39\'");
                bool temp5;
                this.Manager.Comment("executing step \'call CheckRequirementEnabled(902,out _)\'");
                this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(902, out temp5);
                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp5);
                this.Manager.Comment("reaching state \'S44\'");
                int temp22 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_FindRowAfterInvalidBookmark_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowAfterInvalidBookmark_TestSuiteCheckRequirementEnabledChecker)), new ExpectedReturn(S02_RowRops_FindRowAfterInvalidBookmark_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowAfterInvalidBookmark_TestSuiteCheckRequirementEnabledChecker7)));
                if ((temp22 == 0)) {
                    this.Manager.Comment("reaching state \'S48\'");
                    bool temp6;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(903,out _)\'");
                    this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(903, out temp6);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp6);
                    this.Manager.Comment("reaching state \'S56\'");
                    int temp13 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_FindRowAfterInvalidBookmark_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowAfterInvalidBookmark_TestSuiteCheckRequirementEnabledChecker1)), new ExpectedReturn(S02_RowRops_FindRowAfterInvalidBookmark_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowAfterInvalidBookmark_TestSuiteCheckRequirementEnabledChecker4)));
                    if ((temp13 == 0)) {
                        this.Manager.Comment("reaching state \'S64\'");
                        bool temp7;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(827,out _)\'");
                        this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(827, out temp7);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp7);
                        this.Manager.Comment("reaching state \'S78\'");
                        int temp8 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_FindRowAfterInvalidBookmark_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowAfterInvalidBookmark_TestSuiteCheckRequirementEnabledChecker2)), new ExpectedReturn(S02_RowRops_FindRowAfterInvalidBookmark_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowAfterInvalidBookmark_TestSuiteCheckRequirementEnabledChecker3)));
                        if ((temp8 == 0)) {
                            this.Manager.Comment("reaching state \'S86\'");
                            this.Manager.Assert(false, "reached non-accepting end state \'S86\'.");
                            goto label0;
                        }
                        if ((temp8 == 1)) {
                            this.Manager.Comment("reaching state \'S87\'");
                            this.Manager.Assert(false, "reached non-accepting end state \'S87\'.");
                            goto label0;
                        }
                        throw new InvalidOperationException("never reached");
                    label0:
;
                        goto label2;
                    }
                    if ((temp13 == 1)) {
                        this.Manager.Comment("reaching state \'S65\'");
                        bool temp9;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(827,out _)\'");
                        this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(827, out temp9);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp9);
                        this.Manager.Comment("reaching state \'S79\'");
                        int temp12 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_FindRowAfterInvalidBookmark_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowAfterInvalidBookmark_TestSuiteCheckRequirementEnabledChecker5)), new ExpectedReturn(S02_RowRops_FindRowAfterInvalidBookmark_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowAfterInvalidBookmark_TestSuiteCheckRequirementEnabledChecker6)));
                        if ((temp12 == 0)) {
                            this.Manager.Comment("reaching state \'S88\'");
                            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp10;
                            this.Manager.Comment("executing step \'call RopFindRow(Forwards,BOOKMARK_CUSTOM,True)\'");
                            temp10 = this.IMS_OXCTABLAdapterInstance.RopFindRow(((Microsoft.Protocols.TestSuites.Common.FindRowFlags)(0)), Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_CUSTOM, true);
                            this.Manager.Checkpoint("MS-OXCTABL_R859");
                            this.Manager.Checkpoint("MS-OXCTABL_R903");
                            this.Manager.Comment("reaching state \'S98\'");
                            this.Manager.Comment("checking step \'return RopFindRow/success\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp10, "return of RopFindRow, state S98");
                            this.Manager.Comment("reaching state \'S102\'");
                            goto label1;
                        }
                        if ((temp12 == 1)) {
                            this.Manager.Comment("reaching state \'S89\'");
                            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp11;
                            this.Manager.Comment("executing step \'call RopFindRow(Forwards,BOOKMARK_CUSTOM,True)\'");
                            temp11 = this.IMS_OXCTABLAdapterInstance.RopFindRow(((Microsoft.Protocols.TestSuites.Common.FindRowFlags)(0)), Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_CUSTOM, true);
                            this.Manager.Checkpoint("MS-OXCTABL_R859");
                            this.Manager.Checkpoint("MS-OXCTABL_R903");
                            this.Manager.Comment("reaching state \'S99\'");
                            this.Manager.Comment("checking step \'return RopFindRow/success\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp11, "return of RopFindRow, state S99");
                            this.Manager.Comment("reaching state \'S103\'");
                            goto label1;
                        }
                        throw new InvalidOperationException("never reached");
                    label1:
;
                        goto label2;
                    }
                    throw new InvalidOperationException("never reached");
                label2:
;
                    goto label6;
                }
                if ((temp22 == 1)) {
                    this.Manager.Comment("reaching state \'S49\'");
                    bool temp14;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(903,out _)\'");
                    this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(903, out temp14);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp14);
                    this.Manager.Comment("reaching state \'S57\'");
                    int temp21 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_FindRowAfterInvalidBookmark_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowAfterInvalidBookmark_TestSuiteCheckRequirementEnabledChecker8)), new ExpectedReturn(S02_RowRops_FindRowAfterInvalidBookmark_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowAfterInvalidBookmark_TestSuiteCheckRequirementEnabledChecker11)));
                    if ((temp21 == 0)) {
                        this.Manager.Comment("reaching state \'S66\'");
                        bool temp15;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(827,out _)\'");
                        this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(827, out temp15);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp15);
                        this.Manager.Comment("reaching state \'S80\'");
                        int temp18 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_FindRowAfterInvalidBookmark_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowAfterInvalidBookmark_TestSuiteCheckRequirementEnabledChecker9)), new ExpectedReturn(S02_RowRops_FindRowAfterInvalidBookmark_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowAfterInvalidBookmark_TestSuiteCheckRequirementEnabledChecker10)));
                        if ((temp18 == 0)) {
                            this.Manager.Comment("reaching state \'S90\'");
                            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp16;
                            this.Manager.Comment("executing step \'call RopFindRow(Forwards,BOOKMARK_CUSTOM,True)\'");
                            temp16 = this.IMS_OXCTABLAdapterInstance.RopFindRow(((Microsoft.Protocols.TestSuites.Common.FindRowFlags)(0)), Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_CUSTOM, true);
                            this.Manager.Checkpoint("MS-OXCTABL_R859");
                            this.Manager.Checkpoint("MS-OXCTABL_R902");
                            this.Manager.Comment("reaching state \'S100\'");
                            this.Manager.Comment("checking step \'return RopFindRow/ecInvalidBookmark\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues.ecInvalidBookmark, temp16, "return of RopFindRow, state S100");
                            this.Manager.Comment("reaching state \'S104\'");
                            goto label3;
                        }
                        if ((temp18 == 1)) {
                            this.Manager.Comment("reaching state \'S91\'");
                            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp17;
                            this.Manager.Comment("executing step \'call RopFindRow(Forwards,BOOKMARK_CUSTOM,True)\'");
                            temp17 = this.IMS_OXCTABLAdapterInstance.RopFindRow(((Microsoft.Protocols.TestSuites.Common.FindRowFlags)(0)), Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_CUSTOM, true);
                            this.Manager.Checkpoint("MS-OXCTABL_R859");
                            this.Manager.Checkpoint("MS-OXCTABL_R902");
                            this.Manager.Comment("reaching state \'S101\'");
                            this.Manager.Comment("checking step \'return RopFindRow/ecInvalidBookmark\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues.ecInvalidBookmark, temp17, "return of RopFindRow, state S101");
                            this.Manager.Comment("reaching state \'S105\'");
                            goto label3;
                        }
                        throw new InvalidOperationException("never reached");
                    label3:
;
                        goto label5;
                    }
                    if ((temp21 == 1)) {
                        this.Manager.Comment("reaching state \'S67\'");
                        bool temp19;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(827,out _)\'");
                        this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(827, out temp19);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp19);
                        this.Manager.Comment("reaching state \'S81\'");
                        int temp20 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_FindRowAfterInvalidBookmark_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowAfterInvalidBookmark_TestSuiteCheckRequirementEnabledChecker12)), new ExpectedReturn(S02_RowRops_FindRowAfterInvalidBookmark_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowAfterInvalidBookmark_TestSuiteCheckRequirementEnabledChecker13)));
                        if ((temp20 == 0)) {
                            this.Manager.Comment("reaching state \'S92\'");
                            this.Manager.Assert(false, "reached non-accepting end state \'S92\'.");
                            goto label4;
                        }
                        if ((temp20 == 1)) {
                            this.Manager.Comment("reaching state \'S93\'");
                            this.Manager.Assert(false, "reached non-accepting end state \'S93\'.");
                            goto label4;
                        }
                        throw new InvalidOperationException("never reached");
                    label4:
;
                        goto label5;
                    }
                    throw new InvalidOperationException("never reached");
                label5:
;
                    goto label6;
                }
                throw new InvalidOperationException("never reached");
            label6:
;
                goto label7;
            }
            throw new InvalidOperationException("never reached");
        label7:
;
            this.Manager.EndTest();
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowAfterInvalidBookmark_TestSuiteCheckMAPIHTTPTransportSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S1");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowAfterInvalidBookmark_TestSuiteCheckMAPIHTTPTransportSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S1");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowAfterInvalidBookmark_TestSuiteCheckRequirementEnabledChecker(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S44");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowAfterInvalidBookmark_TestSuiteCheckRequirementEnabledChecker1(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S56");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowAfterInvalidBookmark_TestSuiteCheckRequirementEnabledChecker2(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S78");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowAfterInvalidBookmark_TestSuiteCheckRequirementEnabledChecker3(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S78");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowAfterInvalidBookmark_TestSuiteCheckRequirementEnabledChecker4(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S56");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowAfterInvalidBookmark_TestSuiteCheckRequirementEnabledChecker5(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S79");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowAfterInvalidBookmark_TestSuiteCheckRequirementEnabledChecker6(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S79");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowAfterInvalidBookmark_TestSuiteCheckRequirementEnabledChecker7(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S44");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowAfterInvalidBookmark_TestSuiteCheckRequirementEnabledChecker8(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S57");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowAfterInvalidBookmark_TestSuiteCheckRequirementEnabledChecker9(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S80");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowAfterInvalidBookmark_TestSuiteCheckRequirementEnabledChecker10(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S80");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowAfterInvalidBookmark_TestSuiteCheckRequirementEnabledChecker11(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S57");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowAfterInvalidBookmark_TestSuiteCheckRequirementEnabledChecker12(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S81");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowAfterInvalidBookmark_TestSuiteCheckRequirementEnabledChecker13(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S81");
        }
        #endregion
        
        #region Test Starting in S2
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void MSOXCTABL_S02_RowRops_FindRowAfterInvalidBookmark_TestSuite1() {
            this.Manager.BeginTest("MSOXCTABL_S02_RowRops_FindRowAfterInvalidBookmark_TestSuite1");
            this.Manager.Comment("reaching state \'S2\'");
            bool temp24;
            this.Manager.Comment("executing step \'call CheckMAPIHTTPTransportSupported(out _)\'");
            this.IMS_OXCTABLAdapterInstance.CheckMAPIHTTPTransportSupported(out temp24);
            this.Manager.AddReturn(CheckMAPIHTTPTransportSupportedInfo, null, temp24);
            this.Manager.Comment("reaching state \'S3\'");
            int temp34 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_FindRowAfterInvalidBookmark_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCTABL_S02_RowRops_FindRowAfterInvalidBookmark_TestSuite1CheckMAPIHTTPTransportSupportedChecker)), new ExpectedReturn(S02_RowRops_FindRowAfterInvalidBookmark_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCTABL_S02_RowRops_FindRowAfterInvalidBookmark_TestSuite1CheckMAPIHTTPTransportSupportedChecker1)));
            if ((temp34 == 0)) {
                this.Manager.Comment("reaching state \'S8\'");
                goto label10;
            }
            if ((temp34 == 1)) {
                this.Manager.Comment("reaching state \'S9\'");
                this.Manager.Comment("executing step \'call InitializeTable(CONTENT_TABLE)\'");
                this.IMS_OXCTABLAdapterInstance.InitializeTable(((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableType)(0)));
                this.Manager.Comment("reaching state \'S13\'");
                this.Manager.Comment("checking step \'return InitializeTable\'");
                this.Manager.Comment("reaching state \'S16\'");
                Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp25;
                this.Manager.Comment("executing step \'call RopSetColumns(1,False,False,False)\'");
                temp25 = this.IMS_OXCTABLAdapterInstance.RopSetColumns(1u, false, false, false);
                this.Manager.Checkpoint("MS-OXCTABL_R831");
                this.Manager.Checkpoint("MS-OXCTABL_R45");
                this.Manager.Comment("reaching state \'S19\'");
                this.Manager.Comment("checking step \'return RopSetColumns/success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp25, "return of RopSetColumns, state S19");
                this.Manager.Comment("reaching state \'S22\'");
                Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp26;
                this.Manager.Comment("executing step \'call RopCreateBookmark()\'");
                temp26 = this.IMS_OXCTABLAdapterInstance.RopCreateBookmark();
                this.Manager.Checkpoint("MS-OXCTABL_R526");
                this.Manager.Comment("reaching state \'S25\'");
                this.Manager.Comment("checking step \'return RopCreateBookmark/success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp26, "return of RopCreateBookmark, state S25");
                this.Manager.Comment("reaching state \'S28\'");
                Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp27;
                this.Manager.Comment("executing step \'call RopRestrict(1,True,False,False)\'");
                temp27 = this.IMS_OXCTABLAdapterInstance.RopRestrict(1u, true, false, false);
                this.Manager.Checkpoint("MS-OXCTABL_R834");
                this.Manager.Comment("reaching state \'S31\'");
                this.Manager.Comment("checking step \'return RopRestrict/success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp27, "return of RopRestrict, state S31");
                this.Manager.Comment("reaching state \'S34\'");
                bool temp28;
                this.Manager.Comment("executing step \'call CheckRequirementEnabled(900,out _)\'");
                this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(900, out temp28);
                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp28);
                this.Manager.Comment("reaching state \'S37\'");
                int temp33 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_FindRowAfterInvalidBookmark_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowAfterInvalidBookmark_TestSuite1CheckRequirementEnabledChecker)), new ExpectedReturn(S02_RowRops_FindRowAfterInvalidBookmark_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowAfterInvalidBookmark_TestSuite1CheckRequirementEnabledChecker3)));
                if ((temp33 == 0)) {
                    this.Manager.Comment("reaching state \'S40\'");
                    bool temp29;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(827,out _)\'");
                    this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(827, out temp29);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp29);
                    this.Manager.Comment("reaching state \'S45\'");
                    int temp32 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_FindRowAfterInvalidBookmark_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowAfterInvalidBookmark_TestSuite1CheckRequirementEnabledChecker1)), new ExpectedReturn(S02_RowRops_FindRowAfterInvalidBookmark_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowAfterInvalidBookmark_TestSuite1CheckRequirementEnabledChecker2)));
                    if ((temp32 == 0)) {
                        this.Manager.Comment("reaching state \'S50\'");
                        Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp30;
                        this.Manager.Comment("executing step \'call RopFindRow(Forwards,BOOKMARK_CUSTOM,True)\'");
                        temp30 = this.IMS_OXCTABLAdapterInstance.RopFindRow(((Microsoft.Protocols.TestSuites.Common.FindRowFlags)(0)), Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_CUSTOM, true);
                        this.Manager.Checkpoint("MS-OXCTABL_R859");
                        this.Manager.Checkpoint("MS-OXCTABL_R900");
                        this.Manager.Comment("reaching state \'S58\'");
                        this.Manager.Comment("checking step \'return RopFindRow/ecInvalidBookmark\'");
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues.ecInvalidBookmark, temp30, "return of RopFindRow, state S58");
                        this.Manager.Comment("reaching state \'S68\'");
                        goto label8;
                    }
                    if ((temp32 == 1)) {
                        this.Manager.Comment("reaching state \'S51\'");
                        Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp31;
                        this.Manager.Comment("executing step \'call RopFindRow(Forwards,BOOKMARK_CUSTOM,True)\'");
                        temp31 = this.IMS_OXCTABLAdapterInstance.RopFindRow(((Microsoft.Protocols.TestSuites.Common.FindRowFlags)(0)), Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_CUSTOM, true);
                        this.Manager.Checkpoint("MS-OXCTABL_R859");
                        this.Manager.Checkpoint("MS-OXCTABL_R900");
                        this.Manager.Comment("reaching state \'S59\'");
                        this.Manager.Comment("checking step \'return RopFindRow/ecInvalidBookmark\'");
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues.ecInvalidBookmark, temp31, "return of RopFindRow, state S59");
                        this.Manager.Comment("reaching state \'S69\'");
                        goto label8;
                    }
                    throw new InvalidOperationException("never reached");
                label8:
;
                    goto label9;
                }
                if ((temp33 == 1)) {
                    this.Manager.Comment("reaching state \'S41\'");
                    goto label9;
                }
                throw new InvalidOperationException("never reached");
            label9:
;
                goto label10;
            }
            throw new InvalidOperationException("never reached");
        label10:
;
            this.Manager.EndTest();
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowAfterInvalidBookmark_TestSuite1CheckMAPIHTTPTransportSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S3");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowAfterInvalidBookmark_TestSuite1CheckMAPIHTTPTransportSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S3");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowAfterInvalidBookmark_TestSuite1CheckRequirementEnabledChecker(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S37");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowAfterInvalidBookmark_TestSuite1CheckRequirementEnabledChecker1(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S45");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowAfterInvalidBookmark_TestSuite1CheckRequirementEnabledChecker2(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S45");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowAfterInvalidBookmark_TestSuite1CheckRequirementEnabledChecker3(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S37");
        }
        #endregion
        
        #region Test Starting in S4
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void MSOXCTABL_S02_RowRops_FindRowAfterInvalidBookmark_TestSuite2() {
            this.Manager.BeginTest("MSOXCTABL_S02_RowRops_FindRowAfterInvalidBookmark_TestSuite2");
            this.Manager.Comment("reaching state \'S4\'");
            bool temp35;
            this.Manager.Comment("executing step \'call CheckMAPIHTTPTransportSupported(out _)\'");
            this.IMS_OXCTABLAdapterInstance.CheckMAPIHTTPTransportSupported(out temp35);
            this.Manager.AddReturn(CheckMAPIHTTPTransportSupportedInfo, null, temp35);
            this.Manager.Comment("reaching state \'S5\'");
            int temp57 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_FindRowAfterInvalidBookmark_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCTABL_S02_RowRops_FindRowAfterInvalidBookmark_TestSuite2CheckMAPIHTTPTransportSupportedChecker)), new ExpectedReturn(S02_RowRops_FindRowAfterInvalidBookmark_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCTABL_S02_RowRops_FindRowAfterInvalidBookmark_TestSuite2CheckMAPIHTTPTransportSupportedChecker1)));
            if ((temp57 == 0)) {
                this.Manager.Comment("reaching state \'S10\'");
                goto label18;
            }
            if ((temp57 == 1)) {
                this.Manager.Comment("reaching state \'S11\'");
                this.Manager.Comment("executing step \'call InitializeTable(CONTENT_TABLE)\'");
                this.IMS_OXCTABLAdapterInstance.InitializeTable(((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableType)(0)));
                this.Manager.Comment("reaching state \'S14\'");
                this.Manager.Comment("checking step \'return InitializeTable\'");
                this.Manager.Comment("reaching state \'S17\'");
                Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp36;
                this.Manager.Comment("executing step \'call RopSetColumns(1,False,False,False)\'");
                temp36 = this.IMS_OXCTABLAdapterInstance.RopSetColumns(1u, false, false, false);
                this.Manager.Checkpoint("MS-OXCTABL_R831");
                this.Manager.Checkpoint("MS-OXCTABL_R45");
                this.Manager.Comment("reaching state \'S20\'");
                this.Manager.Comment("checking step \'return RopSetColumns/success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp36, "return of RopSetColumns, state S20");
                this.Manager.Comment("reaching state \'S23\'");
                Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp37;
                this.Manager.Comment("executing step \'call RopCreateBookmark()\'");
                temp37 = this.IMS_OXCTABLAdapterInstance.RopCreateBookmark();
                this.Manager.Checkpoint("MS-OXCTABL_R526");
                this.Manager.Comment("reaching state \'S26\'");
                this.Manager.Comment("checking step \'return RopCreateBookmark/success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp37, "return of RopCreateBookmark, state S26");
                this.Manager.Comment("reaching state \'S29\'");
                Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp38;
                this.Manager.Comment("executing step \'call RopSortTable(1,True,False,True,True,True,False,False)\'");
                temp38 = this.IMS_OXCTABLAdapterInstance.RopSortTable(1u, true, false, true, true, true, false, false);
                this.Manager.Checkpoint("MS-OXCTABL_R447");
                this.Manager.Comment("reaching state \'S32\'");
                this.Manager.Comment("checking step \'return RopSortTable/success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp38, "return of RopSortTable, state S32");
                this.Manager.Comment("reaching state \'S35\'");
                bool temp39;
                this.Manager.Comment("executing step \'call CheckRequirementEnabled(898,out _)\'");
                this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(898, out temp39);
                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp39);
                this.Manager.Comment("reaching state \'S38\'");
                int temp56 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_FindRowAfterInvalidBookmark_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowAfterInvalidBookmark_TestSuite2CheckRequirementEnabledChecker)), new ExpectedReturn(S02_RowRops_FindRowAfterInvalidBookmark_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowAfterInvalidBookmark_TestSuite2CheckRequirementEnabledChecker7)));
                if ((temp56 == 0)) {
                    this.Manager.Comment("reaching state \'S42\'");
                    bool temp40;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(899,out _)\'");
                    this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(899, out temp40);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp40);
                    this.Manager.Comment("reaching state \'S46\'");
                    int temp47 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_FindRowAfterInvalidBookmark_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowAfterInvalidBookmark_TestSuite2CheckRequirementEnabledChecker1)), new ExpectedReturn(S02_RowRops_FindRowAfterInvalidBookmark_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowAfterInvalidBookmark_TestSuite2CheckRequirementEnabledChecker4)));
                    if ((temp47 == 0)) {
                        this.Manager.Comment("reaching state \'S52\'");
                        bool temp41;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(827,out _)\'");
                        this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(827, out temp41);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp41);
                        this.Manager.Comment("reaching state \'S60\'");
                        int temp42 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_FindRowAfterInvalidBookmark_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowAfterInvalidBookmark_TestSuite2CheckRequirementEnabledChecker2)), new ExpectedReturn(S02_RowRops_FindRowAfterInvalidBookmark_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowAfterInvalidBookmark_TestSuite2CheckRequirementEnabledChecker3)));
                        if ((temp42 == 0)) {
                            this.Manager.Comment("reaching state \'S70\'");
                            this.Manager.Assert(false, "reached non-accepting end state \'S70\'.");
                            goto label11;
                        }
                        if ((temp42 == 1)) {
                            this.Manager.Comment("reaching state \'S71\'");
                            this.Manager.Assert(false, "reached non-accepting end state \'S71\'.");
                            goto label11;
                        }
                        throw new InvalidOperationException("never reached");
                    label11:
;
                        goto label13;
                    }
                    if ((temp47 == 1)) {
                        this.Manager.Comment("reaching state \'S53\'");
                        bool temp43;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(827,out _)\'");
                        this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(827, out temp43);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp43);
                        this.Manager.Comment("reaching state \'S61\'");
                        int temp46 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_FindRowAfterInvalidBookmark_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowAfterInvalidBookmark_TestSuite2CheckRequirementEnabledChecker5)), new ExpectedReturn(S02_RowRops_FindRowAfterInvalidBookmark_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowAfterInvalidBookmark_TestSuite2CheckRequirementEnabledChecker6)));
                        if ((temp46 == 0)) {
                            this.Manager.Comment("reaching state \'S72\'");
                            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp44;
                            this.Manager.Comment("executing step \'call RopFindRow(Forwards,BOOKMARK_CUSTOM,True)\'");
                            temp44 = this.IMS_OXCTABLAdapterInstance.RopFindRow(((Microsoft.Protocols.TestSuites.Common.FindRowFlags)(0)), Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_CUSTOM, true);
                            this.Manager.Checkpoint("MS-OXCTABL_R859");
                            this.Manager.Checkpoint("MS-OXCTABL_R899");
                            this.Manager.Comment("reaching state \'S82\'");
                            this.Manager.Comment("checking step \'return RopFindRow/success\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp44, "return of RopFindRow, state S82");
                            this.Manager.Comment("reaching state \'S94\'");
                            goto label12;
                        }
                        if ((temp46 == 1)) {
                            this.Manager.Comment("reaching state \'S73\'");
                            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp45;
                            this.Manager.Comment("executing step \'call RopFindRow(Forwards,BOOKMARK_CUSTOM,True)\'");
                            temp45 = this.IMS_OXCTABLAdapterInstance.RopFindRow(((Microsoft.Protocols.TestSuites.Common.FindRowFlags)(0)), Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_CUSTOM, true);
                            this.Manager.Checkpoint("MS-OXCTABL_R859");
                            this.Manager.Checkpoint("MS-OXCTABL_R899");
                            this.Manager.Comment("reaching state \'S83\'");
                            this.Manager.Comment("checking step \'return RopFindRow/success\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp45, "return of RopFindRow, state S83");
                            this.Manager.Comment("reaching state \'S95\'");
                            goto label12;
                        }
                        throw new InvalidOperationException("never reached");
                    label12:
;
                        goto label13;
                    }
                    throw new InvalidOperationException("never reached");
                label13:
;
                    goto label17;
                }
                if ((temp56 == 1)) {
                    this.Manager.Comment("reaching state \'S43\'");
                    bool temp48;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(899,out _)\'");
                    this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(899, out temp48);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp48);
                    this.Manager.Comment("reaching state \'S47\'");
                    int temp55 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_FindRowAfterInvalidBookmark_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowAfterInvalidBookmark_TestSuite2CheckRequirementEnabledChecker8)), new ExpectedReturn(S02_RowRops_FindRowAfterInvalidBookmark_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowAfterInvalidBookmark_TestSuite2CheckRequirementEnabledChecker11)));
                    if ((temp55 == 0)) {
                        this.Manager.Comment("reaching state \'S54\'");
                        bool temp49;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(827,out _)\'");
                        this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(827, out temp49);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp49);
                        this.Manager.Comment("reaching state \'S62\'");
                        int temp52 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_FindRowAfterInvalidBookmark_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowAfterInvalidBookmark_TestSuite2CheckRequirementEnabledChecker9)), new ExpectedReturn(S02_RowRops_FindRowAfterInvalidBookmark_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowAfterInvalidBookmark_TestSuite2CheckRequirementEnabledChecker10)));
                        if ((temp52 == 0)) {
                            this.Manager.Comment("reaching state \'S74\'");
                            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp50;
                            this.Manager.Comment("executing step \'call RopFindRow(Forwards,BOOKMARK_CUSTOM,True)\'");
                            temp50 = this.IMS_OXCTABLAdapterInstance.RopFindRow(((Microsoft.Protocols.TestSuites.Common.FindRowFlags)(0)), Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_CUSTOM, true);
                            this.Manager.Checkpoint("MS-OXCTABL_R859");
                            this.Manager.Checkpoint("MS-OXCTABL_R898");
                            this.Manager.Comment("reaching state \'S84\'");
                            this.Manager.Comment("checking step \'return RopFindRow/ecInvalidBookmark\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues.ecInvalidBookmark, temp50, "return of RopFindRow, state S84");
                            this.Manager.Comment("reaching state \'S96\'");
                            goto label14;
                        }
                        if ((temp52 == 1)) {
                            this.Manager.Comment("reaching state \'S75\'");
                            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp51;
                            this.Manager.Comment("executing step \'call RopFindRow(Forwards,BOOKMARK_CUSTOM,True)\'");
                            temp51 = this.IMS_OXCTABLAdapterInstance.RopFindRow(((Microsoft.Protocols.TestSuites.Common.FindRowFlags)(0)), Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_CUSTOM, true);
                            this.Manager.Checkpoint("MS-OXCTABL_R859");
                            this.Manager.Checkpoint("MS-OXCTABL_R898");
                            this.Manager.Comment("reaching state \'S85\'");
                            this.Manager.Comment("checking step \'return RopFindRow/ecInvalidBookmark\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues.ecInvalidBookmark, temp51, "return of RopFindRow, state S85");
                            this.Manager.Comment("reaching state \'S97\'");
                            goto label14;
                        }
                        throw new InvalidOperationException("never reached");
                    label14:
;
                        goto label16;
                    }
                    if ((temp55 == 1)) {
                        this.Manager.Comment("reaching state \'S55\'");
                        bool temp53;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(827,out _)\'");
                        this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(827, out temp53);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp53);
                        this.Manager.Comment("reaching state \'S63\'");
                        int temp54 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_FindRowAfterInvalidBookmark_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowAfterInvalidBookmark_TestSuite2CheckRequirementEnabledChecker12)), new ExpectedReturn(S02_RowRops_FindRowAfterInvalidBookmark_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowAfterInvalidBookmark_TestSuite2CheckRequirementEnabledChecker13)));
                        if ((temp54 == 0)) {
                            this.Manager.Comment("reaching state \'S76\'");
                            this.Manager.Assert(false, "reached non-accepting end state \'S76\'.");
                            goto label15;
                        }
                        if ((temp54 == 1)) {
                            this.Manager.Comment("reaching state \'S77\'");
                            this.Manager.Assert(false, "reached non-accepting end state \'S77\'.");
                            goto label15;
                        }
                        throw new InvalidOperationException("never reached");
                    label15:
;
                        goto label16;
                    }
                    throw new InvalidOperationException("never reached");
                label16:
;
                    goto label17;
                }
                throw new InvalidOperationException("never reached");
            label17:
;
                goto label18;
            }
            throw new InvalidOperationException("never reached");
        label18:
;
            this.Manager.EndTest();
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowAfterInvalidBookmark_TestSuite2CheckMAPIHTTPTransportSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S5");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowAfterInvalidBookmark_TestSuite2CheckMAPIHTTPTransportSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S5");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowAfterInvalidBookmark_TestSuite2CheckRequirementEnabledChecker(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S38");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowAfterInvalidBookmark_TestSuite2CheckRequirementEnabledChecker1(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S46");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowAfterInvalidBookmark_TestSuite2CheckRequirementEnabledChecker2(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S60");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowAfterInvalidBookmark_TestSuite2CheckRequirementEnabledChecker3(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S60");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowAfterInvalidBookmark_TestSuite2CheckRequirementEnabledChecker4(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S46");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowAfterInvalidBookmark_TestSuite2CheckRequirementEnabledChecker5(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S61");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowAfterInvalidBookmark_TestSuite2CheckRequirementEnabledChecker6(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S61");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowAfterInvalidBookmark_TestSuite2CheckRequirementEnabledChecker7(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S38");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowAfterInvalidBookmark_TestSuite2CheckRequirementEnabledChecker8(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S47");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowAfterInvalidBookmark_TestSuite2CheckRequirementEnabledChecker9(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S62");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowAfterInvalidBookmark_TestSuite2CheckRequirementEnabledChecker10(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S62");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowAfterInvalidBookmark_TestSuite2CheckRequirementEnabledChecker11(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S47");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowAfterInvalidBookmark_TestSuite2CheckRequirementEnabledChecker12(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S63");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowAfterInvalidBookmark_TestSuite2CheckRequirementEnabledChecker13(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S63");
        }
        #endregion
    }
}
