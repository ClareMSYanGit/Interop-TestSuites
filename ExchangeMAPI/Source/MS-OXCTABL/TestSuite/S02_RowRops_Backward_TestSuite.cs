//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18449
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Microsoft.Protocols.TestSuites.MS_OXCTABL {
    using System;
    using System.Collections.Generic;
    using System.Text;
    using System.Reflection;
    using Microsoft.SpecExplorer.Runtime.Testing;
    using Microsoft.Protocols.TestTools;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Spec Explorer", "3.5.3130.0")]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class S02_RowRops_Backward_TestSuite : PtfTestClassBase {
        
        public S02_RowRops_Backward_TestSuite() {
            this.SetSwitch("ProceedControlTimeout", "100");
            this.SetSwitch("QuiescenceTimeout", "2000000");
        }
        
        #region Expect Delegates
        public delegate void CheckMAPIHTTPTransportSupportedDelegate1(bool isSupported);
        
        public delegate void CheckRequirementEnabledDelegate1(bool enabled);
        
        public delegate void RopQueryRowsResponseDelegate1(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger);
        
        public delegate void RopFindRowResponseDelegate1(Microsoft.Protocols.TestSuites.Common.FindRowFlags findRowFlags, bool isValidRestriction, bool HasRowData, bool isCorrectRowData, bool rowNoLongerVisible, bool isLastSetColumnData);
        #endregion
        
        #region Event Metadata
        static System.Reflection.MethodBase CheckMAPIHTTPTransportSupportedInfo = TestManagerHelpers.GetMethodInfo(typeof(Microsoft.Protocols.TestSuites.MS_OXCTABL.IMS_OXCTABLAdapter), "CheckMAPIHTTPTransportSupported", typeof(bool).MakeByRefType());
        
        static System.Reflection.MethodBase CheckRequirementEnabledInfo = TestManagerHelpers.GetMethodInfo(typeof(Microsoft.Protocols.TestSuites.MS_OXCTABL.IMS_OXCTABLAdapter), "CheckRequirementEnabled", typeof(int), typeof(bool).MakeByRefType());
        
        static System.Reflection.EventInfo RopQueryRowsResponseInfo = TestManagerHelpers.GetEventInfo(typeof(Microsoft.Protocols.TestSuites.MS_OXCTABL.IMS_OXCTABLAdapter), "RopQueryRowsResponse");
        
        static System.Reflection.EventInfo RopFindRowResponseInfo = TestManagerHelpers.GetEventInfo(typeof(Microsoft.Protocols.TestSuites.MS_OXCTABL.IMS_OXCTABLAdapter), "RopFindRowResponse");
        #endregion
        
        #region Adapter Instances
        private Microsoft.Protocols.TestSuites.MS_OXCTABL.IMS_OXCTABLAdapter IMS_OXCTABLAdapterInstance;
        #endregion
        
        #region Class Initialization and Cleanup
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void ClassInitialize(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext context) {
            PtfTestClassBase.Initialize(context);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void ClassCleanup() {
            PtfTestClassBase.Cleanup();
        }
        #endregion
        
        #region Test Initialization and Cleanup
        protected override void TestInitialize() {
            this.InitializeTestManager();
            this.IMS_OXCTABLAdapterInstance = ((Microsoft.Protocols.TestSuites.MS_OXCTABL.IMS_OXCTABLAdapter)(this.Manager.GetAdapter(typeof(Microsoft.Protocols.TestSuites.MS_OXCTABL.IMS_OXCTABLAdapter))));
            this.Manager.Subscribe(RopFindRowResponseInfo, this.IMS_OXCTABLAdapterInstance);
            this.Manager.Subscribe(RopQueryRowsResponseInfo, this.IMS_OXCTABLAdapterInstance);
        }
        
        protected override void TestCleanup() {
            base.TestCleanup();
            this.CleanupTestManager();
        }
        #endregion
        
        #region Test Starting in S0
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void MSOXCTABL_S02_RowRops_Backward_TestSuite() {
            this.Manager.BeginTest("MSOXCTABL_S02_RowRops_Backward_TestSuite");
            this.Manager.Comment("reaching state \'S0\'");
            bool temp0;
            this.Manager.Comment("executing step \'call CheckMAPIHTTPTransportSupported(out _)\'");
            this.IMS_OXCTABLAdapterInstance.CheckMAPIHTTPTransportSupported(out temp0);
            this.Manager.AddReturn(CheckMAPIHTTPTransportSupportedInfo, null, temp0);
            this.Manager.Comment("reaching state \'S1\'");
            int temp21 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_Backward_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCTABL_S02_RowRops_Backward_TestSuiteCheckMAPIHTTPTransportSupportedChecker)), new ExpectedReturn(S02_RowRops_Backward_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCTABL_S02_RowRops_Backward_TestSuiteCheckMAPIHTTPTransportSupportedChecker1)));
            if ((temp21 == 0)) {
                this.Manager.Comment("reaching state \'S4\'");
                goto label5;
            }
            if ((temp21 == 1)) {
                this.Manager.Comment("reaching state \'S5\'");
                this.Manager.Comment("executing step \'call InitializeTable(HIERARCHY_TABLE)\'");
                this.IMS_OXCTABLAdapterInstance.InitializeTable(((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableType)(1)));
                this.Manager.Comment("reaching state \'S8\'");
                this.Manager.Comment("checking step \'return InitializeTable\'");
                this.Manager.Comment("reaching state \'S10\'");
                Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp1;
                this.Manager.Comment("executing step \'call RopSetColumns(1,False,False,False)\'");
                temp1 = this.IMS_OXCTABLAdapterInstance.RopSetColumns(1u, false, false, false);
                this.Manager.Checkpoint("MS-OXCTABL_R829");
                this.Manager.Checkpoint("MS-OXCTABL_R45");
                this.Manager.Comment("reaching state \'S12\'");
                this.Manager.Comment("checking step \'return RopSetColumns/success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp1, "return of RopSetColumns, state S12");
                this.Manager.Comment("reaching state \'S14\'");
                Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp2;
                this.Manager.Comment("executing step \'call RopQueryRows(Advance,False)\'");
                temp2 = this.IMS_OXCTABLAdapterInstance.RopQueryRows(((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), false);
                this.Manager.Checkpoint("MS-OXCTABL_R835");
                this.Manager.Comment("reaching state \'S16\'");
                this.Manager.Comment("checking step \'return RopQueryRows/success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp2, "return of RopQueryRows, state S16");
                this.Manager.Comment("reaching state \'S18\'");
                bool temp3;
                this.Manager.Comment("executing step \'call CheckRequirementEnabled(896,out _)\'");
                this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(896, out temp3);
                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp3);
                this.Manager.Comment("reaching state \'S21\'");
                int temp20 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_Backward_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_Backward_TestSuiteCheckRequirementEnabledChecker)), new ExpectedReturn(S02_RowRops_Backward_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_Backward_TestSuiteCheckRequirementEnabledChecker5)));
                if ((temp20 == 0)) {
                    this.Manager.Comment("reaching state \'S24\'");
                    bool temp4;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(897,out _)\'");
                    this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(897, out temp4);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp4);
                    this.Manager.Comment("reaching state \'S28\'");
                    int temp11 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_Backward_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_Backward_TestSuiteCheckRequirementEnabledChecker1)), new ExpectedReturn(S02_RowRops_Backward_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_Backward_TestSuiteCheckRequirementEnabledChecker4)));
                    if ((temp11 == 0)) {
                        this.Manager.Comment("reaching state \'S32\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_Backward_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_Backward_TestSuiteRopQueryRowsResponseChecker))) != -1)) {
                            this.Manager.Comment("reaching state \'S40\'");
                            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp5;
                            this.Manager.Comment("executing step \'call RopRestrict(1,True,False,False)\'");
                            temp5 = this.IMS_OXCTABLAdapterInstance.RopRestrict(1u, true, false, false);
                            this.Manager.Checkpoint("MS-OXCTABL_R833");
                            this.Manager.Comment("reaching state \'S46\'");
                            this.Manager.Comment("checking step \'return RopRestrict/success\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp5, "return of RopRestrict, state S46");
                            this.Manager.Comment("reaching state \'S48\'");
                            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp6;
                            this.Manager.Comment("executing step \'call RopQueryRows(Advance,True)\'");
                            temp6 = this.IMS_OXCTABLAdapterInstance.RopQueryRows(((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), true);
                            this.Manager.Checkpoint("MS-OXCTABL_R835");
                            this.Manager.Comment("reaching state \'S50\'");
                            this.Manager.Comment("checking step \'return RopQueryRows/success\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp6, "return of RopQueryRows, state S50");
                            this.Manager.Comment("reaching state \'S52\'");
                            bool temp7;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(456,out _)\'");
                            this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(456, out temp7);
                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp7);
                            this.Manager.Comment("reaching state \'S54\'");
                            int temp10 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_Backward_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_Backward_TestSuiteCheckRequirementEnabledChecker2)), new ExpectedReturn(S02_RowRops_Backward_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_Backward_TestSuiteCheckRequirementEnabledChecker3)));
                            if ((temp10 == 0)) {
                                this.Manager.Comment("reaching state \'S56\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_Backward_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_Backward_TestSuiteRopQueryRowsResponseChecker1))) != -1)) {
                                    this.Manager.Comment("reaching state \'S60\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp8;
                                    this.Manager.Comment("executing step \'call RopQueryRows(Advance,False)\'");
                                    temp8 = this.IMS_OXCTABLAdapterInstance.RopQueryRows(((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), false);
                                    this.Manager.Checkpoint("MS-OXCTABL_R835");
                                    this.Manager.Comment("reaching state \'S64\'");
                                    this.Manager.Comment("checking step \'return RopQueryRows/success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp8, "return of RopQueryRows, state S64");
                                    this.Manager.Comment("reaching state \'S68\'");
                                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_Backward_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_Backward_TestSuiteRopQueryRowsResponseChecker2))) != -1)) {
                                        this.Manager.Comment("reaching state \'S72\'");
                                    }
                                    else {
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_Backward_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_Backward_TestSuiteRopQueryRowsResponseChecker2)));
                                    }
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_Backward_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_Backward_TestSuiteRopQueryRowsResponseChecker1)));
                                }
                                goto label0;
                            }
                            if ((temp10 == 1)) {
                                this.Manager.Comment("reaching state \'S57\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_Backward_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_Backward_TestSuiteRopQueryRowsResponseChecker3))) != -1)) {
                                    this.Manager.Comment("reaching state \'S61\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp9;
                                    this.Manager.Comment("executing step \'call RopQueryRows(Advance,False)\'");
                                    temp9 = this.IMS_OXCTABLAdapterInstance.RopQueryRows(((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), false);
                                    this.Manager.Checkpoint("MS-OXCTABL_R835");
                                    this.Manager.Comment("reaching state \'S65\'");
                                    this.Manager.Comment("checking step \'return RopQueryRows/success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp9, "return of RopQueryRows, state S65");
                                    this.Manager.Comment("reaching state \'S69\'");
                                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_Backward_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_Backward_TestSuiteRopQueryRowsResponseChecker4))) != -1)) {
                                        this.Manager.Comment("reaching state \'S73\'");
                                    }
                                    else {
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_Backward_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_Backward_TestSuiteRopQueryRowsResponseChecker4)));
                                    }
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_Backward_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_Backward_TestSuiteRopQueryRowsResponseChecker3)));
                                }
                                goto label0;
                            }
                            throw new InvalidOperationException("never reached");
                        label0:
;
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_Backward_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_Backward_TestSuiteRopQueryRowsResponseChecker)));
                        }
                        goto label1;
                    }
                    if ((temp11 == 1)) {
                        this.Manager.Comment("reaching state \'S33\'");
                        this.Manager.Assert(false, "reached non-accepting end state \'S33\'.");
                        goto label1;
                    }
                    throw new InvalidOperationException("never reached");
                label1:
;
                    goto label4;
                }
                if ((temp20 == 1)) {
                    this.Manager.Comment("reaching state \'S25\'");
                    bool temp12;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(897,out _)\'");
                    this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(897, out temp12);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp12);
                    this.Manager.Comment("reaching state \'S29\'");
                    int temp19 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_Backward_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_Backward_TestSuiteCheckRequirementEnabledChecker6)), new ExpectedReturn(S02_RowRops_Backward_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_Backward_TestSuiteCheckRequirementEnabledChecker9)));
                    if ((temp19 == 0)) {
                        this.Manager.Comment("reaching state \'S34\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_Backward_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_Backward_TestSuiteRopQueryRowsResponseChecker5))) != -1)) {
                            this.Manager.Comment("reaching state \'S41\'");
                            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp13;
                            this.Manager.Comment("executing step \'call RopRestrict(1,True,False,False)\'");
                            temp13 = this.IMS_OXCTABLAdapterInstance.RopRestrict(1u, true, false, false);
                            this.Manager.Checkpoint("MS-OXCTABL_R833");
                            this.Manager.Comment("reaching state \'S47\'");
                            this.Manager.Comment("checking step \'return RopRestrict/success\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp13, "return of RopRestrict, state S47");
                            this.Manager.Comment("reaching state \'S49\'");
                            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp14;
                            this.Manager.Comment("executing step \'call RopQueryRows(Advance,True)\'");
                            temp14 = this.IMS_OXCTABLAdapterInstance.RopQueryRows(((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), true);
                            this.Manager.Checkpoint("MS-OXCTABL_R835");
                            this.Manager.Comment("reaching state \'S51\'");
                            this.Manager.Comment("checking step \'return RopQueryRows/success\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp14, "return of RopQueryRows, state S51");
                            this.Manager.Comment("reaching state \'S53\'");
                            bool temp15;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(456,out _)\'");
                            this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(456, out temp15);
                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp15);
                            this.Manager.Comment("reaching state \'S55\'");
                            int temp18 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_Backward_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_Backward_TestSuiteCheckRequirementEnabledChecker7)), new ExpectedReturn(S02_RowRops_Backward_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_Backward_TestSuiteCheckRequirementEnabledChecker8)));
                            if ((temp18 == 0)) {
                                this.Manager.Comment("reaching state \'S58\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_Backward_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_Backward_TestSuiteRopQueryRowsResponseChecker6))) != -1)) {
                                    this.Manager.Comment("reaching state \'S62\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp16;
                                    this.Manager.Comment("executing step \'call RopQueryRows(Advance,False)\'");
                                    temp16 = this.IMS_OXCTABLAdapterInstance.RopQueryRows(((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), false);
                                    this.Manager.Checkpoint("MS-OXCTABL_R835");
                                    this.Manager.Comment("reaching state \'S66\'");
                                    this.Manager.Comment("checking step \'return RopQueryRows/success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp16, "return of RopQueryRows, state S66");
                                    this.Manager.Comment("reaching state \'S70\'");
                                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_Backward_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_Backward_TestSuiteRopQueryRowsResponseChecker7))) != -1)) {
                                        this.Manager.Comment("reaching state \'S74\'");
                                    }
                                    else {
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_Backward_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_Backward_TestSuiteRopQueryRowsResponseChecker7)));
                                    }
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_Backward_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_Backward_TestSuiteRopQueryRowsResponseChecker6)));
                                }
                                goto label2;
                            }
                            if ((temp18 == 1)) {
                                this.Manager.Comment("reaching state \'S59\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_Backward_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_Backward_TestSuiteRopQueryRowsResponseChecker8))) != -1)) {
                                    this.Manager.Comment("reaching state \'S63\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp17;
                                    this.Manager.Comment("executing step \'call RopQueryRows(Advance,False)\'");
                                    temp17 = this.IMS_OXCTABLAdapterInstance.RopQueryRows(((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), false);
                                    this.Manager.Checkpoint("MS-OXCTABL_R835");
                                    this.Manager.Comment("reaching state \'S67\'");
                                    this.Manager.Comment("checking step \'return RopQueryRows/success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp17, "return of RopQueryRows, state S67");
                                    this.Manager.Comment("reaching state \'S71\'");
                                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_Backward_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_Backward_TestSuiteRopQueryRowsResponseChecker9))) != -1)) {
                                        this.Manager.Comment("reaching state \'S75\'");
                                    }
                                    else {
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_Backward_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_Backward_TestSuiteRopQueryRowsResponseChecker9)));
                                    }
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_Backward_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_Backward_TestSuiteRopQueryRowsResponseChecker8)));
                                }
                                goto label2;
                            }
                            throw new InvalidOperationException("never reached");
                        label2:
;
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_Backward_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_Backward_TestSuiteRopQueryRowsResponseChecker5)));
                        }
                        goto label3;
                    }
                    if ((temp19 == 1)) {
                        this.Manager.Comment("reaching state \'S35\'");
                        this.Manager.Assert(false, "reached non-accepting end state \'S35\'.");
                        goto label3;
                    }
                    throw new InvalidOperationException("never reached");
                label3:
;
                    goto label4;
                }
                throw new InvalidOperationException("never reached");
            label4:
;
                goto label5;
            }
            throw new InvalidOperationException("never reached");
        label5:
;
            this.Manager.EndTest();
        }
        
        private void MSOXCTABL_S02_RowRops_Backward_TestSuiteCheckMAPIHTTPTransportSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S1");
        }
        
        private void MSOXCTABL_S02_RowRops_Backward_TestSuiteCheckMAPIHTTPTransportSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S1");
        }
        
        private void MSOXCTABL_S02_RowRops_Backward_TestSuiteCheckRequirementEnabledChecker(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S21");
        }
        
        private void MSOXCTABL_S02_RowRops_Backward_TestSuiteCheckRequirementEnabledChecker1(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S28");
        }
        
        private void MSOXCTABL_S02_RowRops_Backward_TestSuiteRopQueryRowsResponseChecker(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,False,True,SETCOLUMNS,True,Fals" +
                    "e,False,False,BOOKMARK_BEGINNING,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S32");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S32");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S32");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S32");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S32");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S32");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S32");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S32");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(0)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S32");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S32");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R896, MS-OXCTABL_R469, MS-OXCTABL_R118, M" +
                        "S-OXCTABL_R467, MS-OXCTABL_R462");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R896");
            this.Manager.Checkpoint("MS-OXCTABL_R469");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R467");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
        }
        
        private void MSOXCTABL_S02_RowRops_Backward_TestSuiteCheckRequirementEnabledChecker2(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S54");
        }
        
        private void MSOXCTABL_S02_RowRops_Backward_TestSuiteRopQueryRowsResponseChecker1(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,RESTRICT,True,True,T" +
                    "rue,True,BOOKMARK_END,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S56");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S56");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S56");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType.RESTRICT, ropType, "ropType of RopQueryRowsResponse, state S56");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S56");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S56");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S56");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S56");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_END, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S56");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S56");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R462, MS-OXCTABL_R29, MS" +
                        "-OXCTABL_R725, MS-OXCTABL_R451, MS-OXCTABL_R452, MS-OXCTABL_R117");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R29");
            this.Manager.Checkpoint("MS-OXCTABL_R725");
            this.Manager.Checkpoint("MS-OXCTABL_R451");
            this.Manager.Checkpoint("MS-OXCTABL_R452");
            this.Manager.Checkpoint("MS-OXCTABL_R117");
        }
        
        private void MSOXCTABL_S02_RowRops_Backward_TestSuiteRopQueryRowsResponseChecker2(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,False,False,RESTRICT,True,True," +
                    "True,True,BOOKMARK_BEGINNING,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S68");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S68");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S68");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType.RESTRICT, ropType, "ropType of RopQueryRowsResponse, state S68");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S68");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S68");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S68");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S68");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(0)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S68");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S68");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R896, MS-OXCTABL_R469, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R451, MS-OXCTABL_R452, MS-OXCTABL_R117");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R896");
            this.Manager.Checkpoint("MS-OXCTABL_R469");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R451");
            this.Manager.Checkpoint("MS-OXCTABL_R452");
            this.Manager.Checkpoint("MS-OXCTABL_R117");
        }
        
        private void MSOXCTABL_S02_RowRops_Backward_TestSuiteCheckRequirementEnabledChecker3(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S54");
        }
        
        private void MSOXCTABL_S02_RowRops_Backward_TestSuiteRopQueryRowsResponseChecker3(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,RESTRICT,True,True,T" +
                    "rue,True,BOOKMARK_END,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S57");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S57");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S57");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType.RESTRICT, ropType, "ropType of RopQueryRowsResponse, state S57");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S57");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S57");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S57");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S57");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_END, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S57");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S57");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R462, MS-OXCTABL_R29, MS" +
                        "-OXCTABL_R725, MS-OXCTABL_R451, MS-OXCTABL_R452, MS-OXCTABL_R117, MS-OXCTABL_R45" +
                        "6");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R29");
            this.Manager.Checkpoint("MS-OXCTABL_R725");
            this.Manager.Checkpoint("MS-OXCTABL_R451");
            this.Manager.Checkpoint("MS-OXCTABL_R452");
            this.Manager.Checkpoint("MS-OXCTABL_R117");
            this.Manager.Checkpoint("MS-OXCTABL_R456");
        }
        
        private void MSOXCTABL_S02_RowRops_Backward_TestSuiteRopQueryRowsResponseChecker4(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,False,False,RESTRICT,True,True," +
                    "True,True,BOOKMARK_BEGINNING,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S69");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S69");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S69");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType.RESTRICT, ropType, "ropType of RopQueryRowsResponse, state S69");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S69");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S69");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S69");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S69");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(0)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S69");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S69");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R896, MS-OXCTABL_R469, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R451, MS-OXCTABL_R452, MS-OXCTABL_R117, MS-OXCTABL_R456");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R896");
            this.Manager.Checkpoint("MS-OXCTABL_R469");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R451");
            this.Manager.Checkpoint("MS-OXCTABL_R452");
            this.Manager.Checkpoint("MS-OXCTABL_R117");
            this.Manager.Checkpoint("MS-OXCTABL_R456");
        }
        
        private void MSOXCTABL_S02_RowRops_Backward_TestSuiteCheckRequirementEnabledChecker4(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S28");
        }
        
        private void MSOXCTABL_S02_RowRops_Backward_TestSuiteCheckRequirementEnabledChecker5(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S21");
        }
        
        private void MSOXCTABL_S02_RowRops_Backward_TestSuiteCheckRequirementEnabledChecker6(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S29");
        }
        
        private void MSOXCTABL_S02_RowRops_Backward_TestSuiteRopQueryRowsResponseChecker5(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,False,True,SETCOLUMNS,True,Fals" +
                    "e,False,False,BOOKMARK_END,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S34");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S34");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S34");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S34");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S34");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S34");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S34");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S34");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_END, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S34");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S34");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R897, MS-OXCTABL_R469, MS-OXCTABL_R118, M" +
                        "S-OXCTABL_R467, MS-OXCTABL_R462");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R897");
            this.Manager.Checkpoint("MS-OXCTABL_R469");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R467");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
        }
        
        private void MSOXCTABL_S02_RowRops_Backward_TestSuiteCheckRequirementEnabledChecker7(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S55");
        }
        
        private void MSOXCTABL_S02_RowRops_Backward_TestSuiteRopQueryRowsResponseChecker6(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,RESTRICT,True,True,T" +
                    "rue,True,BOOKMARK_END,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S58");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S58");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S58");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType.RESTRICT, ropType, "ropType of RopQueryRowsResponse, state S58");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S58");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S58");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S58");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S58");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_END, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S58");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S58");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R462, MS-OXCTABL_R29, MS" +
                        "-OXCTABL_R725, MS-OXCTABL_R451, MS-OXCTABL_R452, MS-OXCTABL_R117, MS-OXCTABL_R45" +
                        "6");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R29");
            this.Manager.Checkpoint("MS-OXCTABL_R725");
            this.Manager.Checkpoint("MS-OXCTABL_R451");
            this.Manager.Checkpoint("MS-OXCTABL_R452");
            this.Manager.Checkpoint("MS-OXCTABL_R117");
            this.Manager.Checkpoint("MS-OXCTABL_R456");
        }
        
        private void MSOXCTABL_S02_RowRops_Backward_TestSuiteRopQueryRowsResponseChecker7(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,False,False,RESTRICT,True,True," +
                    "True,True,BOOKMARK_END,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S70");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S70");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S70");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType.RESTRICT, ropType, "ropType of RopQueryRowsResponse, state S70");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S70");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S70");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S70");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S70");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_END, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S70");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S70");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R897, MS-OXCTABL_R469, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R451, MS-OXCTABL_R452, MS-OXCTABL_R117, MS-OXCTABL_R456");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R897");
            this.Manager.Checkpoint("MS-OXCTABL_R469");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R451");
            this.Manager.Checkpoint("MS-OXCTABL_R452");
            this.Manager.Checkpoint("MS-OXCTABL_R117");
            this.Manager.Checkpoint("MS-OXCTABL_R456");
        }
        
        private void MSOXCTABL_S02_RowRops_Backward_TestSuiteCheckRequirementEnabledChecker8(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S55");
        }
        
        private void MSOXCTABL_S02_RowRops_Backward_TestSuiteRopQueryRowsResponseChecker8(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,RESTRICT,True,True,T" +
                    "rue,True,BOOKMARK_END,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S59");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S59");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S59");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType.RESTRICT, ropType, "ropType of RopQueryRowsResponse, state S59");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S59");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S59");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S59");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S59");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_END, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S59");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S59");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R462, MS-OXCTABL_R29, MS" +
                        "-OXCTABL_R725, MS-OXCTABL_R451, MS-OXCTABL_R452, MS-OXCTABL_R117");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R29");
            this.Manager.Checkpoint("MS-OXCTABL_R725");
            this.Manager.Checkpoint("MS-OXCTABL_R451");
            this.Manager.Checkpoint("MS-OXCTABL_R452");
            this.Manager.Checkpoint("MS-OXCTABL_R117");
        }
        
        private void MSOXCTABL_S02_RowRops_Backward_TestSuiteRopQueryRowsResponseChecker9(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,False,False,RESTRICT,True,True," +
                    "True,True,BOOKMARK_END,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S71");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S71");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S71");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType.RESTRICT, ropType, "ropType of RopQueryRowsResponse, state S71");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S71");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S71");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S71");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S71");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_END, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S71");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S71");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R897, MS-OXCTABL_R469, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R451, MS-OXCTABL_R452, MS-OXCTABL_R117");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R897");
            this.Manager.Checkpoint("MS-OXCTABL_R469");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R451");
            this.Manager.Checkpoint("MS-OXCTABL_R452");
            this.Manager.Checkpoint("MS-OXCTABL_R117");
        }
        
        private void MSOXCTABL_S02_RowRops_Backward_TestSuiteCheckRequirementEnabledChecker9(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S29");
        }
        #endregion
        
        #region Test Starting in S2
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void MSOXCTABL_S02_RowRops_Backward_TestSuite1() {
            this.Manager.BeginTest("MSOXCTABL_S02_RowRops_Backward_TestSuite1");
            this.Manager.Comment("reaching state \'S2\'");
            bool temp22;
            this.Manager.Comment("executing step \'call CheckMAPIHTTPTransportSupported(out _)\'");
            this.IMS_OXCTABLAdapterInstance.CheckMAPIHTTPTransportSupported(out temp22);
            this.Manager.AddReturn(CheckMAPIHTTPTransportSupportedInfo, null, temp22);
            this.Manager.Comment("reaching state \'S3\'");
            int temp32 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_Backward_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCTABL_S02_RowRops_Backward_TestSuite1CheckMAPIHTTPTransportSupportedChecker)), new ExpectedReturn(S02_RowRops_Backward_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCTABL_S02_RowRops_Backward_TestSuite1CheckMAPIHTTPTransportSupportedChecker1)));
            if ((temp32 == 0)) {
                this.Manager.Comment("reaching state \'S6\'");
                this.Manager.Comment("executing step \'call InitializeTable(HIERARCHY_TABLE)\'");
                this.IMS_OXCTABLAdapterInstance.InitializeTable(((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableType)(1)));
                this.Manager.Comment("reaching state \'S9\'");
                this.Manager.Comment("checking step \'return InitializeTable\'");
                this.Manager.Comment("reaching state \'S11\'");
                Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp23;
                this.Manager.Comment("executing step \'call RopSetColumns(1,False,False,False)\'");
                temp23 = this.IMS_OXCTABLAdapterInstance.RopSetColumns(1u, false, false, false);
                this.Manager.Checkpoint("MS-OXCTABL_R829");
                this.Manager.Checkpoint("MS-OXCTABL_R45");
                this.Manager.Comment("reaching state \'S13\'");
                this.Manager.Comment("checking step \'return RopSetColumns/success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp23, "return of RopSetColumns, state S13");
                this.Manager.Comment("reaching state \'S15\'");
                bool temp24;
                this.Manager.Comment("executing step \'call CheckRequirementEnabled(827,out _)\'");
                this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(827, out temp24);
                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp24);
                this.Manager.Comment("reaching state \'S17\'");
                int temp31 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_Backward_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_Backward_TestSuite1CheckRequirementEnabledChecker)), new ExpectedReturn(S02_RowRops_Backward_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_Backward_TestSuite1CheckRequirementEnabledChecker3)));
                if ((temp31 == 0)) {
                    this.Manager.Comment("reaching state \'S19\'");
                    Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp25;
                    this.Manager.Comment("executing step \'call RopFindRow(Backwards,BOOKMARK_END,True)\'");
                    temp25 = this.IMS_OXCTABLAdapterInstance.RopFindRow(((Microsoft.Protocols.TestSuites.Common.FindRowFlags)(1)), Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_END, true);
                    this.Manager.Checkpoint("MS-OXCTABL_R858");
                    this.Manager.Comment("reaching state \'S22\'");
                    this.Manager.Comment("checking step \'return RopFindRow/success\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp25, "return of RopFindRow, state S22");
                    this.Manager.Comment("reaching state \'S26\'");
                    bool temp26;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(608,out _)\'");
                    this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(608, out temp26);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp26);
                    this.Manager.Comment("reaching state \'S30\'");
                    int temp27 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_Backward_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_Backward_TestSuite1CheckRequirementEnabledChecker1)), new ExpectedReturn(S02_RowRops_Backward_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_Backward_TestSuite1CheckRequirementEnabledChecker2)));
                    if ((temp27 == 0)) {
                        this.Manager.Comment("reaching state \'S36\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_Backward_TestSuite.RopFindRowResponseInfo, null, new RopFindRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_Backward_TestSuite1RopFindRowResponseChecker))) != -1)) {
                            this.Manager.Comment("reaching state \'S42\'");
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_Backward_TestSuite.RopFindRowResponseInfo, null, new RopFindRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_Backward_TestSuite1RopFindRowResponseChecker)));
                        }
                        goto label6;
                    }
                    if ((temp27 == 1)) {
                        this.Manager.Comment("reaching state \'S37\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_Backward_TestSuite.RopFindRowResponseInfo, null, new RopFindRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_Backward_TestSuite1RopFindRowResponseChecker1))) != -1)) {
                            this.Manager.Comment("reaching state \'S43\'");
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_Backward_TestSuite.RopFindRowResponseInfo, null, new RopFindRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_Backward_TestSuite1RopFindRowResponseChecker1)));
                        }
                        goto label6;
                    }
                    throw new InvalidOperationException("never reached");
                label6:
;
                    goto label8;
                }
                if ((temp31 == 1)) {
                    this.Manager.Comment("reaching state \'S20\'");
                    Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp28;
                    this.Manager.Comment("executing step \'call RopFindRow(Backwards,BOOKMARK_END,True)\'");
                    temp28 = this.IMS_OXCTABLAdapterInstance.RopFindRow(((Microsoft.Protocols.TestSuites.Common.FindRowFlags)(1)), Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_END, true);
                    this.Manager.Checkpoint("MS-OXCTABL_R858");
                    this.Manager.Comment("reaching state \'S23\'");
                    this.Manager.Comment("checking step \'return RopFindRow/success\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp28, "return of RopFindRow, state S23");
                    this.Manager.Comment("reaching state \'S27\'");
                    bool temp29;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(608,out _)\'");
                    this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(608, out temp29);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp29);
                    this.Manager.Comment("reaching state \'S31\'");
                    int temp30 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_Backward_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_Backward_TestSuite1CheckRequirementEnabledChecker4)), new ExpectedReturn(S02_RowRops_Backward_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_Backward_TestSuite1CheckRequirementEnabledChecker5)));
                    if ((temp30 == 0)) {
                        this.Manager.Comment("reaching state \'S38\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_Backward_TestSuite.RopFindRowResponseInfo, null, new RopFindRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_Backward_TestSuite1RopFindRowResponseChecker2))) != -1)) {
                            this.Manager.Comment("reaching state \'S44\'");
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_Backward_TestSuite.RopFindRowResponseInfo, null, new RopFindRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_Backward_TestSuite1RopFindRowResponseChecker2)));
                        }
                        goto label7;
                    }
                    if ((temp30 == 1)) {
                        this.Manager.Comment("reaching state \'S39\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_Backward_TestSuite.RopFindRowResponseInfo, null, new RopFindRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_Backward_TestSuite1RopFindRowResponseChecker3))) != -1)) {
                            this.Manager.Comment("reaching state \'S45\'");
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_Backward_TestSuite.RopFindRowResponseInfo, null, new RopFindRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_Backward_TestSuite1RopFindRowResponseChecker3)));
                        }
                        goto label7;
                    }
                    throw new InvalidOperationException("never reached");
                label7:
;
                    goto label8;
                }
                throw new InvalidOperationException("never reached");
            label8:
;
                goto label9;
            }
            if ((temp32 == 1)) {
                this.Manager.Comment("reaching state \'S7\'");
                goto label9;
            }
            throw new InvalidOperationException("never reached");
        label9:
;
            this.Manager.EndTest();
        }
        
        private void MSOXCTABL_S02_RowRops_Backward_TestSuite1CheckMAPIHTTPTransportSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S3");
        }
        
        private void MSOXCTABL_S02_RowRops_Backward_TestSuite1CheckRequirementEnabledChecker(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S17");
        }
        
        private void MSOXCTABL_S02_RowRops_Backward_TestSuite1CheckRequirementEnabledChecker1(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S30");
        }
        
        private void MSOXCTABL_S02_RowRops_Backward_TestSuite1RopFindRowResponseChecker(Microsoft.Protocols.TestSuites.Common.FindRowFlags findRowFlags, bool isValidRestriction, bool HasRowData, bool isCorrectRowData, bool rowNoLongerVisible, bool isLastSetColumnData) {
            this.Manager.Comment("checking step \'event RopFindRowResponse(Backwards,True,True,True,False,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.FindRowFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.FindRowFlags)(1)), findRowFlags, "findRowFlags of RopFindRowResponse, state S36");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isValidRestriction, "isValidRestriction of RopFindRowResponse, state S36");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, HasRowData, "HasRowData of RopFindRowResponse, state S36");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isCorrectRowData, "isCorrectRowData of RopFindRowResponse, state S36");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, rowNoLongerVisible, "rowNoLongerVisible of RopFindRowResponse, state S36");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isLastSetColumnData, "isLastSetColumnData of RopFindRowResponse, state S36");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R608, MS-OXCTABL_R534, MS-OXCTABL_R243, M" +
                        "S-OXCTABL_R540, MS-OXCTABL_R539, MS-OXCTABL_R813, MS-OXCTABL_R824, MS-OXCTABL_R2" +
                        "26");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R608");
            this.Manager.Checkpoint("MS-OXCTABL_R534");
            this.Manager.Checkpoint("MS-OXCTABL_R243");
            this.Manager.Checkpoint("MS-OXCTABL_R540");
            this.Manager.Checkpoint("MS-OXCTABL_R539");
            this.Manager.Checkpoint("MS-OXCTABL_R813");
            this.Manager.Checkpoint("MS-OXCTABL_R824");
            this.Manager.Checkpoint("MS-OXCTABL_R226");
        }
        
        private void MSOXCTABL_S02_RowRops_Backward_TestSuite1CheckRequirementEnabledChecker2(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S30");
        }
        
        private void MSOXCTABL_S02_RowRops_Backward_TestSuite1RopFindRowResponseChecker1(Microsoft.Protocols.TestSuites.Common.FindRowFlags findRowFlags, bool isValidRestriction, bool HasRowData, bool isCorrectRowData, bool rowNoLongerVisible, bool isLastSetColumnData) {
            this.Manager.Comment("checking step \'event RopFindRowResponse(Backwards,True,True,True,False,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.FindRowFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.FindRowFlags)(1)), findRowFlags, "findRowFlags of RopFindRowResponse, state S37");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isValidRestriction, "isValidRestriction of RopFindRowResponse, state S37");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, HasRowData, "HasRowData of RopFindRowResponse, state S37");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isCorrectRowData, "isCorrectRowData of RopFindRowResponse, state S37");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, rowNoLongerVisible, "rowNoLongerVisible of RopFindRowResponse, state S37");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isLastSetColumnData, "isLastSetColumnData of RopFindRowResponse, state S37");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R534, MS-OXCTABL_R243, MS-OXCTABL_R540, M" +
                        "S-OXCTABL_R539, MS-OXCTABL_R813, MS-OXCTABL_R824, MS-OXCTABL_R226");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R534");
            this.Manager.Checkpoint("MS-OXCTABL_R243");
            this.Manager.Checkpoint("MS-OXCTABL_R540");
            this.Manager.Checkpoint("MS-OXCTABL_R539");
            this.Manager.Checkpoint("MS-OXCTABL_R813");
            this.Manager.Checkpoint("MS-OXCTABL_R824");
            this.Manager.Checkpoint("MS-OXCTABL_R226");
        }
        
        private void MSOXCTABL_S02_RowRops_Backward_TestSuite1CheckRequirementEnabledChecker3(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S17");
        }
        
        private void MSOXCTABL_S02_RowRops_Backward_TestSuite1CheckRequirementEnabledChecker4(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S31");
        }
        
        private void MSOXCTABL_S02_RowRops_Backward_TestSuite1RopFindRowResponseChecker2(Microsoft.Protocols.TestSuites.Common.FindRowFlags findRowFlags, bool isValidRestriction, bool HasRowData, bool isCorrectRowData, bool rowNoLongerVisible, bool isLastSetColumnData) {
            this.Manager.Comment("checking step \'event RopFindRowResponse(Backwards,True,True,True,False,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.FindRowFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.FindRowFlags)(1)), findRowFlags, "findRowFlags of RopFindRowResponse, state S38");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isValidRestriction, "isValidRestriction of RopFindRowResponse, state S38");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, HasRowData, "HasRowData of RopFindRowResponse, state S38");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isCorrectRowData, "isCorrectRowData of RopFindRowResponse, state S38");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, rowNoLongerVisible, "rowNoLongerVisible of RopFindRowResponse, state S38");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isLastSetColumnData, "isLastSetColumnData of RopFindRowResponse, state S38");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R608, MS-OXCTABL_R534, MS-OXCTABL_R243, M" +
                        "S-OXCTABL_R540, MS-OXCTABL_R539, MS-OXCTABL_R813, MS-OXCTABL_R824, MS-OXCTABL_R2" +
                        "26");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R608");
            this.Manager.Checkpoint("MS-OXCTABL_R534");
            this.Manager.Checkpoint("MS-OXCTABL_R243");
            this.Manager.Checkpoint("MS-OXCTABL_R540");
            this.Manager.Checkpoint("MS-OXCTABL_R539");
            this.Manager.Checkpoint("MS-OXCTABL_R813");
            this.Manager.Checkpoint("MS-OXCTABL_R824");
            this.Manager.Checkpoint("MS-OXCTABL_R226");
        }
        
        private void MSOXCTABL_S02_RowRops_Backward_TestSuite1CheckRequirementEnabledChecker5(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S31");
        }
        
        private void MSOXCTABL_S02_RowRops_Backward_TestSuite1RopFindRowResponseChecker3(Microsoft.Protocols.TestSuites.Common.FindRowFlags findRowFlags, bool isValidRestriction, bool HasRowData, bool isCorrectRowData, bool rowNoLongerVisible, bool isLastSetColumnData) {
            this.Manager.Comment("checking step \'event RopFindRowResponse(Backwards,True,True,True,False,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.FindRowFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.FindRowFlags)(1)), findRowFlags, "findRowFlags of RopFindRowResponse, state S39");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isValidRestriction, "isValidRestriction of RopFindRowResponse, state S39");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, HasRowData, "HasRowData of RopFindRowResponse, state S39");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isCorrectRowData, "isCorrectRowData of RopFindRowResponse, state S39");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, rowNoLongerVisible, "rowNoLongerVisible of RopFindRowResponse, state S39");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isLastSetColumnData, "isLastSetColumnData of RopFindRowResponse, state S39");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R534, MS-OXCTABL_R243, MS-OXCTABL_R540, M" +
                        "S-OXCTABL_R539, MS-OXCTABL_R813, MS-OXCTABL_R824, MS-OXCTABL_R226");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R534");
            this.Manager.Checkpoint("MS-OXCTABL_R243");
            this.Manager.Checkpoint("MS-OXCTABL_R540");
            this.Manager.Checkpoint("MS-OXCTABL_R539");
            this.Manager.Checkpoint("MS-OXCTABL_R813");
            this.Manager.Checkpoint("MS-OXCTABL_R824");
            this.Manager.Checkpoint("MS-OXCTABL_R226");
        }
        
        private void MSOXCTABL_S02_RowRops_Backward_TestSuite1CheckMAPIHTTPTransportSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S3");
        }
        #endregion
    }
}
