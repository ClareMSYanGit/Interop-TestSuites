//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18449
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Microsoft.Protocols.TestSuites.MS_OXCTABL {
    using System;
    using System.Collections.Generic;
    using System.Text;
    using System.Reflection;
    using Microsoft.SpecExplorer.Runtime.Testing;
    using Microsoft.Protocols.TestTools;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Spec Explorer", "3.5.3130.0")]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class S02_RowRops_FindRowSuccess_TestSuite : PtfTestClassBase {
        
        public S02_RowRops_FindRowSuccess_TestSuite() {
            this.SetSwitch("ProceedControlTimeout", "100");
            this.SetSwitch("QuiescenceTimeout", "2000000");
        }
        
        #region Expect Delegates
        public delegate void CheckMAPIHTTPTransportSupportedDelegate1(bool isSupported);
        
        public delegate void CheckRequirementEnabledDelegate1(bool enabled);
        
        public delegate void RopFindRowResponseDelegate1(Microsoft.Protocols.TestSuites.Common.FindRowFlags findRowFlags, bool isValidRestriction, bool HasRowData, bool isCorrectRowData, bool rowNoLongerVisible, bool isLastSetColumnData);
        
        public delegate void RopQueryRowsResponseDelegate1(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger);
        
        public delegate void RopQueryPositionResponseDelegate1(Microsoft.Protocols.TestSuites.MS_OXCTABL.CursorPosition cursorPosition, bool isRowCount);
        #endregion
        
        #region Event Metadata
        static System.Reflection.MethodBase CheckMAPIHTTPTransportSupportedInfo = TestManagerHelpers.GetMethodInfo(typeof(Microsoft.Protocols.TestSuites.MS_OXCTABL.IMS_OXCTABLAdapter), "CheckMAPIHTTPTransportSupported", typeof(bool).MakeByRefType());
        
        static System.Reflection.EventInfo RopQueryPositionResponseInfo = TestManagerHelpers.GetEventInfo(typeof(Microsoft.Protocols.TestSuites.MS_OXCTABL.IMS_OXCTABLAdapter), "RopQueryPositionResponse");
        
        static System.Reflection.MethodBase CheckRequirementEnabledInfo = TestManagerHelpers.GetMethodInfo(typeof(Microsoft.Protocols.TestSuites.MS_OXCTABL.IMS_OXCTABLAdapter), "CheckRequirementEnabled", typeof(int), typeof(bool).MakeByRefType());
        
        static System.Reflection.EventInfo RopQueryRowsResponseInfo = TestManagerHelpers.GetEventInfo(typeof(Microsoft.Protocols.TestSuites.MS_OXCTABL.IMS_OXCTABLAdapter), "RopQueryRowsResponse");
        
        static System.Reflection.EventInfo RopFindRowResponseInfo = TestManagerHelpers.GetEventInfo(typeof(Microsoft.Protocols.TestSuites.MS_OXCTABL.IMS_OXCTABLAdapter), "RopFindRowResponse");
        #endregion
        
        #region Adapter Instances
        private Microsoft.Protocols.TestSuites.MS_OXCTABL.IMS_OXCTABLAdapter IMS_OXCTABLAdapterInstance;
        #endregion
        
        #region Class Initialization and Cleanup
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void ClassInitialize(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext context) {
            PtfTestClassBase.Initialize(context);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void ClassCleanup() {
            PtfTestClassBase.Cleanup();
        }
        #endregion
        
        #region Test Initialization and Cleanup
        protected override void TestInitialize() {
            this.InitializeTestManager();
            this.IMS_OXCTABLAdapterInstance = ((Microsoft.Protocols.TestSuites.MS_OXCTABL.IMS_OXCTABLAdapter)(this.Manager.GetAdapter(typeof(Microsoft.Protocols.TestSuites.MS_OXCTABL.IMS_OXCTABLAdapter))));
            this.Manager.Subscribe(RopFindRowResponseInfo, this.IMS_OXCTABLAdapterInstance);
            this.Manager.Subscribe(RopQueryPositionResponseInfo, this.IMS_OXCTABLAdapterInstance);
            this.Manager.Subscribe(RopQueryRowsResponseInfo, this.IMS_OXCTABLAdapterInstance);
        }
        
        protected override void TestCleanup() {
            base.TestCleanup();
            this.CleanupTestManager();
        }
        #endregion
        
        #region Test Starting in S0
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuite() {
            this.Manager.BeginTest("MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuite");
            this.Manager.Comment("reaching state \'S0\'");
            bool temp0;
            this.Manager.Comment("executing step \'call CheckMAPIHTTPTransportSupported(out _)\'");
            this.IMS_OXCTABLAdapterInstance.CheckMAPIHTTPTransportSupported(out temp0);
            this.Manager.AddReturn(CheckMAPIHTTPTransportSupportedInfo, null, temp0);
            this.Manager.Comment("reaching state \'S1\'");
            int temp170 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_FindRowSuccess_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckMAPIHTTPTransportSupportedChecker)), new ExpectedReturn(S02_RowRops_FindRowSuccess_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckMAPIHTTPTransportSupportedChecker1)));
            if ((temp170 == 0)) {
                this.Manager.Comment("reaching state \'S6\'");
                goto label63;
            }
            if ((temp170 == 1)) {
                this.Manager.Comment("reaching state \'S7\'");
                this.Manager.Comment("executing step \'call InitializeTable(CONTENT_TABLE)\'");
                this.IMS_OXCTABLAdapterInstance.InitializeTable(((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableType)(0)));
                this.Manager.Comment("reaching state \'S12\'");
                this.Manager.Comment("checking step \'return InitializeTable\'");
                this.Manager.Comment("reaching state \'S15\'");
                Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp1;
                this.Manager.Comment("executing step \'call RopQueryPosition()\'");
                temp1 = this.IMS_OXCTABLAdapterInstance.RopQueryPosition();
                this.Manager.Checkpoint("MS-OXCTABL_R846");
                this.Manager.Comment("reaching state \'S18\'");
                this.Manager.Comment("checking step \'return RopQueryPosition/success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp1, "return of RopQueryPosition, state S18");
                this.Manager.Comment("reaching state \'S21\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_FindRowSuccess_TestSuite.RopQueryPositionResponseInfo, null, new RopQueryPositionResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopQueryPositionResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S24\'");
                    Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp2;
                    this.Manager.Comment("executing step \'call RopSetColumns(1,False,False,False)\'");
                    temp2 = this.IMS_OXCTABLAdapterInstance.RopSetColumns(1u, false, false, false);
                    this.Manager.Checkpoint("MS-OXCTABL_R831");
                    this.Manager.Checkpoint("MS-OXCTABL_R45");
                    this.Manager.Comment("reaching state \'S27\'");
                    this.Manager.Comment("checking step \'return RopSetColumns/success\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp2, "return of RopSetColumns, state S27");
                    this.Manager.Comment("reaching state \'S30\'");
                    Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp3;
                    this.Manager.Comment("executing step \'call RopCreateBookmark()\'");
                    temp3 = this.IMS_OXCTABLAdapterInstance.RopCreateBookmark();
                    this.Manager.Checkpoint("MS-OXCTABL_R526");
                    this.Manager.Comment("reaching state \'S33\'");
                    this.Manager.Comment("checking step \'return RopCreateBookmark/success\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp3, "return of RopCreateBookmark, state S33");
                    this.Manager.Comment("reaching state \'S36\'");
                    bool temp4;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(768,out _)\'");
                    this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(768, out temp4);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp4);
                    this.Manager.Comment("reaching state \'S39\'");
                    int temp169 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_FindRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker)), new ExpectedReturn(S02_RowRops_FindRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker63)));
                    if ((temp169 == 0)) {
                        this.Manager.Comment("reaching state \'S42\'");
                        bool temp5;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(866,out _)\'");
                        this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(866, out temp5);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp5);
                        this.Manager.Comment("reaching state \'S47\'");
                        int temp86 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_FindRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker1)), new ExpectedReturn(S02_RowRops_FindRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker32)));
                        if ((temp86 == 0)) {
                            this.Manager.Comment("reaching state \'S52\'");
                            bool temp6;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(867,out _)\'");
                            this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(867, out temp6);
                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp6);
                            this.Manager.Comment("reaching state \'S60\'");
                            int temp45 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_FindRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker2)), new ExpectedReturn(S02_RowRops_FindRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker17)));
                            if ((temp45 == 0)) {
                                this.Manager.Comment("reaching state \'S70\'");
                                Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp7;
                                this.Manager.Comment("executing step \'call RopQueryRows(Advance,True)\'");
                                temp7 = this.IMS_OXCTABLAdapterInstance.RopQueryRows(((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), true);
                                this.Manager.Checkpoint("MS-OXCTABL_R837");
                                this.Manager.Comment("reaching state \'S84\'");
                                this.Manager.Comment("checking step \'return RopQueryRows/success\'");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp7, "return of RopQueryRows, state S84");
                                this.Manager.Comment("reaching state \'S100\'");
                                bool temp8;
                                this.Manager.Comment("executing step \'call CheckRequirementEnabled(610,out _)\'");
                                this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(610, out temp8);
                                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp8);
                                this.Manager.Comment("reaching state \'S116\'");
                                int temp25 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_FindRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker3)), new ExpectedReturn(S02_RowRops_FindRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker10)));
                                if ((temp25 == 0)) {
                                    this.Manager.Comment("reaching state \'S136\'");
                                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_FindRowSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopQueryRowsResponseChecker))) != -1)) {
                                        this.Manager.Comment("reaching state \'S164\'");
                                        bool temp9;
                                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(827,out _)\'");
                                        this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(827, out temp9);
                                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp9);
                                        this.Manager.Comment("reaching state \'S188\'");
                                        int temp16 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_FindRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker4)), new ExpectedReturn(S02_RowRops_FindRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker7)));
                                        if ((temp16 == 0)) {
                                            this.Manager.Comment("reaching state \'S212\'");
                                            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp10;
                                            this.Manager.Comment("executing step \'call RopFindRow(Forwards,BOOKMARK_CUSTOM,True)\'");
                                            temp10 = this.IMS_OXCTABLAdapterInstance.RopFindRow(((Microsoft.Protocols.TestSuites.Common.FindRowFlags)(0)), Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_CUSTOM, true);
                                            this.Manager.Checkpoint("MS-OXCTABL_R859");
                                            this.Manager.Comment("reaching state \'S244\'");
                                            this.Manager.Comment("checking step \'return RopFindRow/success\'");
                                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp10, "return of RopFindRow, state S244");
                                            this.Manager.Comment("reaching state \'S276\'");
                                            bool temp11;
                                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(608,out _)\'");
                                            this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(608, out temp11);
                                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp11);
                                            this.Manager.Comment("reaching state \'S308\'");
                                            int temp12 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_FindRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker5)), new ExpectedReturn(S02_RowRops_FindRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker6)));
                                            if ((temp12 == 0)) {
                                                this.Manager.Comment("reaching state \'S340\'");
                                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_FindRowSuccess_TestSuite.RopFindRowResponseInfo, null, new RopFindRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopFindRowResponseChecker))) != -1)) {
                                                    this.Manager.Comment("reaching state \'S404\'");
                                                }
                                                else {
                                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_FindRowSuccess_TestSuite.RopFindRowResponseInfo, null, new RopFindRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopFindRowResponseChecker)));
                                                }
                                                goto label0;
                                            }
                                            if ((temp12 == 1)) {
                                                this.Manager.Comment("reaching state \'S341\'");
                                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_FindRowSuccess_TestSuite.RopFindRowResponseInfo, null, new RopFindRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopFindRowResponseChecker1))) != -1)) {
                                                    this.Manager.Comment("reaching state \'S405\'");
                                                }
                                                else {
                                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_FindRowSuccess_TestSuite.RopFindRowResponseInfo, null, new RopFindRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopFindRowResponseChecker1)));
                                                }
                                                goto label0;
                                            }
                                            throw new InvalidOperationException("never reached");
                                        label0:
;
                                            goto label2;
                                        }
                                        if ((temp16 == 1)) {
                                            this.Manager.Comment("reaching state \'S213\'");
                                            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp13;
                                            this.Manager.Comment("executing step \'call RopFindRow(Forwards,BOOKMARK_CUSTOM,True)\'");
                                            temp13 = this.IMS_OXCTABLAdapterInstance.RopFindRow(((Microsoft.Protocols.TestSuites.Common.FindRowFlags)(0)), Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_CUSTOM, true);
                                            this.Manager.Checkpoint("MS-OXCTABL_R859");
                                            this.Manager.Comment("reaching state \'S245\'");
                                            this.Manager.Comment("checking step \'return RopFindRow/success\'");
                                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp13, "return of RopFindRow, state S245");
                                            this.Manager.Comment("reaching state \'S277\'");
                                            bool temp14;
                                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(608,out _)\'");
                                            this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(608, out temp14);
                                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp14);
                                            this.Manager.Comment("reaching state \'S309\'");
                                            int temp15 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_FindRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker8)), new ExpectedReturn(S02_RowRops_FindRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker9)));
                                            if ((temp15 == 0)) {
                                                this.Manager.Comment("reaching state \'S342\'");
                                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_FindRowSuccess_TestSuite.RopFindRowResponseInfo, null, new RopFindRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopFindRowResponseChecker2))) != -1)) {
                                                    this.Manager.Comment("reaching state \'S406\'");
                                                }
                                                else {
                                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_FindRowSuccess_TestSuite.RopFindRowResponseInfo, null, new RopFindRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopFindRowResponseChecker2)));
                                                }
                                                goto label1;
                                            }
                                            if ((temp15 == 1)) {
                                                this.Manager.Comment("reaching state \'S343\'");
                                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_FindRowSuccess_TestSuite.RopFindRowResponseInfo, null, new RopFindRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopFindRowResponseChecker3))) != -1)) {
                                                    this.Manager.Comment("reaching state \'S407\'");
                                                }
                                                else {
                                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_FindRowSuccess_TestSuite.RopFindRowResponseInfo, null, new RopFindRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopFindRowResponseChecker3)));
                                                }
                                                goto label1;
                                            }
                                            throw new InvalidOperationException("never reached");
                                        label1:
;
                                            goto label2;
                                        }
                                        throw new InvalidOperationException("never reached");
                                    label2:
;
                                    }
                                    else {
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_FindRowSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopQueryRowsResponseChecker)));
                                    }
                                    goto label6;
                                }
                                if ((temp25 == 1)) {
                                    this.Manager.Comment("reaching state \'S137\'");
                                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_FindRowSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopQueryRowsResponseChecker1))) != -1)) {
                                        this.Manager.Comment("reaching state \'S165\'");
                                        bool temp17;
                                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(827,out _)\'");
                                        this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(827, out temp17);
                                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp17);
                                        this.Manager.Comment("reaching state \'S189\'");
                                        int temp24 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_FindRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker11)), new ExpectedReturn(S02_RowRops_FindRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker14)));
                                        if ((temp24 == 0)) {
                                            this.Manager.Comment("reaching state \'S214\'");
                                            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp18;
                                            this.Manager.Comment("executing step \'call RopFindRow(Forwards,BOOKMARK_CUSTOM,True)\'");
                                            temp18 = this.IMS_OXCTABLAdapterInstance.RopFindRow(((Microsoft.Protocols.TestSuites.Common.FindRowFlags)(0)), Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_CUSTOM, true);
                                            this.Manager.Checkpoint("MS-OXCTABL_R859");
                                            this.Manager.Comment("reaching state \'S246\'");
                                            this.Manager.Comment("checking step \'return RopFindRow/success\'");
                                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp18, "return of RopFindRow, state S246");
                                            this.Manager.Comment("reaching state \'S278\'");
                                            bool temp19;
                                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(608,out _)\'");
                                            this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(608, out temp19);
                                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp19);
                                            this.Manager.Comment("reaching state \'S310\'");
                                            int temp20 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_FindRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker12)), new ExpectedReturn(S02_RowRops_FindRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker13)));
                                            if ((temp20 == 0)) {
                                                this.Manager.Comment("reaching state \'S344\'");
                                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_FindRowSuccess_TestSuite.RopFindRowResponseInfo, null, new RopFindRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopFindRowResponseChecker4))) != -1)) {
                                                    this.Manager.Comment("reaching state \'S408\'");
                                                }
                                                else {
                                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_FindRowSuccess_TestSuite.RopFindRowResponseInfo, null, new RopFindRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopFindRowResponseChecker4)));
                                                }
                                                goto label3;
                                            }
                                            if ((temp20 == 1)) {
                                                this.Manager.Comment("reaching state \'S345\'");
                                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_FindRowSuccess_TestSuite.RopFindRowResponseInfo, null, new RopFindRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopFindRowResponseChecker5))) != -1)) {
                                                    this.Manager.Comment("reaching state \'S409\'");
                                                }
                                                else {
                                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_FindRowSuccess_TestSuite.RopFindRowResponseInfo, null, new RopFindRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopFindRowResponseChecker5)));
                                                }
                                                goto label3;
                                            }
                                            throw new InvalidOperationException("never reached");
                                        label3:
;
                                            goto label5;
                                        }
                                        if ((temp24 == 1)) {
                                            this.Manager.Comment("reaching state \'S215\'");
                                            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp21;
                                            this.Manager.Comment("executing step \'call RopFindRow(Forwards,BOOKMARK_CUSTOM,True)\'");
                                            temp21 = this.IMS_OXCTABLAdapterInstance.RopFindRow(((Microsoft.Protocols.TestSuites.Common.FindRowFlags)(0)), Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_CUSTOM, true);
                                            this.Manager.Checkpoint("MS-OXCTABL_R859");
                                            this.Manager.Comment("reaching state \'S247\'");
                                            this.Manager.Comment("checking step \'return RopFindRow/success\'");
                                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp21, "return of RopFindRow, state S247");
                                            this.Manager.Comment("reaching state \'S279\'");
                                            bool temp22;
                                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(608,out _)\'");
                                            this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(608, out temp22);
                                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp22);
                                            this.Manager.Comment("reaching state \'S311\'");
                                            int temp23 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_FindRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker15)), new ExpectedReturn(S02_RowRops_FindRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker16)));
                                            if ((temp23 == 0)) {
                                                this.Manager.Comment("reaching state \'S346\'");
                                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_FindRowSuccess_TestSuite.RopFindRowResponseInfo, null, new RopFindRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopFindRowResponseChecker6))) != -1)) {
                                                    this.Manager.Comment("reaching state \'S410\'");
                                                }
                                                else {
                                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_FindRowSuccess_TestSuite.RopFindRowResponseInfo, null, new RopFindRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopFindRowResponseChecker6)));
                                                }
                                                goto label4;
                                            }
                                            if ((temp23 == 1)) {
                                                this.Manager.Comment("reaching state \'S347\'");
                                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_FindRowSuccess_TestSuite.RopFindRowResponseInfo, null, new RopFindRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopFindRowResponseChecker7))) != -1)) {
                                                    this.Manager.Comment("reaching state \'S411\'");
                                                }
                                                else {
                                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_FindRowSuccess_TestSuite.RopFindRowResponseInfo, null, new RopFindRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopFindRowResponseChecker7)));
                                                }
                                                goto label4;
                                            }
                                            throw new InvalidOperationException("never reached");
                                        label4:
;
                                            goto label5;
                                        }
                                        throw new InvalidOperationException("never reached");
                                    label5:
;
                                    }
                                    else {
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_FindRowSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopQueryRowsResponseChecker1)));
                                    }
                                    goto label6;
                                }
                                throw new InvalidOperationException("never reached");
                            label6:
;
                                goto label14;
                            }
                            if ((temp45 == 1)) {
                                this.Manager.Comment("reaching state \'S71\'");
                                Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp26;
                                this.Manager.Comment("executing step \'call RopQueryRows(Advance,True)\'");
                                temp26 = this.IMS_OXCTABLAdapterInstance.RopQueryRows(((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), true);
                                this.Manager.Checkpoint("MS-OXCTABL_R837");
                                this.Manager.Comment("reaching state \'S85\'");
                                this.Manager.Comment("checking step \'return RopQueryRows/success\'");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp26, "return of RopQueryRows, state S85");
                                this.Manager.Comment("reaching state \'S101\'");
                                bool temp27;
                                this.Manager.Comment("executing step \'call CheckRequirementEnabled(610,out _)\'");
                                this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(610, out temp27);
                                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp27);
                                this.Manager.Comment("reaching state \'S117\'");
                                int temp44 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_FindRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker18)), new ExpectedReturn(S02_RowRops_FindRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker25)));
                                if ((temp44 == 0)) {
                                    this.Manager.Comment("reaching state \'S138\'");
                                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_FindRowSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopQueryRowsResponseChecker2))) != -1)) {
                                        this.Manager.Comment("reaching state \'S166\'");
                                        bool temp28;
                                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(827,out _)\'");
                                        this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(827, out temp28);
                                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp28);
                                        this.Manager.Comment("reaching state \'S190\'");
                                        int temp35 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_FindRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker19)), new ExpectedReturn(S02_RowRops_FindRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker22)));
                                        if ((temp35 == 0)) {
                                            this.Manager.Comment("reaching state \'S216\'");
                                            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp29;
                                            this.Manager.Comment("executing step \'call RopFindRow(Forwards,BOOKMARK_CUSTOM,True)\'");
                                            temp29 = this.IMS_OXCTABLAdapterInstance.RopFindRow(((Microsoft.Protocols.TestSuites.Common.FindRowFlags)(0)), Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_CUSTOM, true);
                                            this.Manager.Checkpoint("MS-OXCTABL_R859");
                                            this.Manager.Comment("reaching state \'S248\'");
                                            this.Manager.Comment("checking step \'return RopFindRow/success\'");
                                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp29, "return of RopFindRow, state S248");
                                            this.Manager.Comment("reaching state \'S280\'");
                                            bool temp30;
                                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(608,out _)\'");
                                            this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(608, out temp30);
                                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp30);
                                            this.Manager.Comment("reaching state \'S312\'");
                                            int temp31 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_FindRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker20)), new ExpectedReturn(S02_RowRops_FindRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker21)));
                                            if ((temp31 == 0)) {
                                                this.Manager.Comment("reaching state \'S348\'");
                                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_FindRowSuccess_TestSuite.RopFindRowResponseInfo, null, new RopFindRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopFindRowResponseChecker8))) != -1)) {
                                                    this.Manager.Comment("reaching state \'S412\'");
                                                }
                                                else {
                                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_FindRowSuccess_TestSuite.RopFindRowResponseInfo, null, new RopFindRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopFindRowResponseChecker8)));
                                                }
                                                goto label7;
                                            }
                                            if ((temp31 == 1)) {
                                                this.Manager.Comment("reaching state \'S349\'");
                                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_FindRowSuccess_TestSuite.RopFindRowResponseInfo, null, new RopFindRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopFindRowResponseChecker9))) != -1)) {
                                                    this.Manager.Comment("reaching state \'S413\'");
                                                }
                                                else {
                                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_FindRowSuccess_TestSuite.RopFindRowResponseInfo, null, new RopFindRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopFindRowResponseChecker9)));
                                                }
                                                goto label7;
                                            }
                                            throw new InvalidOperationException("never reached");
                                        label7:
;
                                            goto label9;
                                        }
                                        if ((temp35 == 1)) {
                                            this.Manager.Comment("reaching state \'S217\'");
                                            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp32;
                                            this.Manager.Comment("executing step \'call RopFindRow(Forwards,BOOKMARK_CUSTOM,True)\'");
                                            temp32 = this.IMS_OXCTABLAdapterInstance.RopFindRow(((Microsoft.Protocols.TestSuites.Common.FindRowFlags)(0)), Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_CUSTOM, true);
                                            this.Manager.Checkpoint("MS-OXCTABL_R859");
                                            this.Manager.Comment("reaching state \'S249\'");
                                            this.Manager.Comment("checking step \'return RopFindRow/success\'");
                                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp32, "return of RopFindRow, state S249");
                                            this.Manager.Comment("reaching state \'S281\'");
                                            bool temp33;
                                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(608,out _)\'");
                                            this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(608, out temp33);
                                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp33);
                                            this.Manager.Comment("reaching state \'S313\'");
                                            int temp34 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_FindRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker23)), new ExpectedReturn(S02_RowRops_FindRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker24)));
                                            if ((temp34 == 0)) {
                                                this.Manager.Comment("reaching state \'S350\'");
                                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_FindRowSuccess_TestSuite.RopFindRowResponseInfo, null, new RopFindRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopFindRowResponseChecker10))) != -1)) {
                                                    this.Manager.Comment("reaching state \'S414\'");
                                                }
                                                else {
                                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_FindRowSuccess_TestSuite.RopFindRowResponseInfo, null, new RopFindRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopFindRowResponseChecker10)));
                                                }
                                                goto label8;
                                            }
                                            if ((temp34 == 1)) {
                                                this.Manager.Comment("reaching state \'S351\'");
                                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_FindRowSuccess_TestSuite.RopFindRowResponseInfo, null, new RopFindRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopFindRowResponseChecker11))) != -1)) {
                                                    this.Manager.Comment("reaching state \'S415\'");
                                                }
                                                else {
                                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_FindRowSuccess_TestSuite.RopFindRowResponseInfo, null, new RopFindRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopFindRowResponseChecker11)));
                                                }
                                                goto label8;
                                            }
                                            throw new InvalidOperationException("never reached");
                                        label8:
;
                                            goto label9;
                                        }
                                        throw new InvalidOperationException("never reached");
                                    label9:
;
                                    }
                                    else {
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_FindRowSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopQueryRowsResponseChecker2)));
                                    }
                                    goto label13;
                                }
                                if ((temp44 == 1)) {
                                    this.Manager.Comment("reaching state \'S139\'");
                                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_FindRowSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopQueryRowsResponseChecker3))) != -1)) {
                                        this.Manager.Comment("reaching state \'S167\'");
                                        bool temp36;
                                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(827,out _)\'");
                                        this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(827, out temp36);
                                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp36);
                                        this.Manager.Comment("reaching state \'S191\'");
                                        int temp43 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_FindRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker26)), new ExpectedReturn(S02_RowRops_FindRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker29)));
                                        if ((temp43 == 0)) {
                                            this.Manager.Comment("reaching state \'S218\'");
                                            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp37;
                                            this.Manager.Comment("executing step \'call RopFindRow(Forwards,BOOKMARK_CUSTOM,True)\'");
                                            temp37 = this.IMS_OXCTABLAdapterInstance.RopFindRow(((Microsoft.Protocols.TestSuites.Common.FindRowFlags)(0)), Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_CUSTOM, true);
                                            this.Manager.Checkpoint("MS-OXCTABL_R859");
                                            this.Manager.Comment("reaching state \'S250\'");
                                            this.Manager.Comment("checking step \'return RopFindRow/success\'");
                                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp37, "return of RopFindRow, state S250");
                                            this.Manager.Comment("reaching state \'S282\'");
                                            bool temp38;
                                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(608,out _)\'");
                                            this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(608, out temp38);
                                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp38);
                                            this.Manager.Comment("reaching state \'S314\'");
                                            int temp39 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_FindRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker27)), new ExpectedReturn(S02_RowRops_FindRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker28)));
                                            if ((temp39 == 0)) {
                                                this.Manager.Comment("reaching state \'S352\'");
                                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_FindRowSuccess_TestSuite.RopFindRowResponseInfo, null, new RopFindRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopFindRowResponseChecker12))) != -1)) {
                                                    this.Manager.Comment("reaching state \'S416\'");
                                                }
                                                else {
                                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_FindRowSuccess_TestSuite.RopFindRowResponseInfo, null, new RopFindRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopFindRowResponseChecker12)));
                                                }
                                                goto label10;
                                            }
                                            if ((temp39 == 1)) {
                                                this.Manager.Comment("reaching state \'S353\'");
                                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_FindRowSuccess_TestSuite.RopFindRowResponseInfo, null, new RopFindRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopFindRowResponseChecker13))) != -1)) {
                                                    this.Manager.Comment("reaching state \'S417\'");
                                                }
                                                else {
                                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_FindRowSuccess_TestSuite.RopFindRowResponseInfo, null, new RopFindRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopFindRowResponseChecker13)));
                                                }
                                                goto label10;
                                            }
                                            throw new InvalidOperationException("never reached");
                                        label10:
;
                                            goto label12;
                                        }
                                        if ((temp43 == 1)) {
                                            this.Manager.Comment("reaching state \'S219\'");
                                            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp40;
                                            this.Manager.Comment("executing step \'call RopFindRow(Forwards,BOOKMARK_CUSTOM,True)\'");
                                            temp40 = this.IMS_OXCTABLAdapterInstance.RopFindRow(((Microsoft.Protocols.TestSuites.Common.FindRowFlags)(0)), Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_CUSTOM, true);
                                            this.Manager.Checkpoint("MS-OXCTABL_R859");
                                            this.Manager.Comment("reaching state \'S251\'");
                                            this.Manager.Comment("checking step \'return RopFindRow/success\'");
                                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp40, "return of RopFindRow, state S251");
                                            this.Manager.Comment("reaching state \'S283\'");
                                            bool temp41;
                                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(608,out _)\'");
                                            this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(608, out temp41);
                                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp41);
                                            this.Manager.Comment("reaching state \'S315\'");
                                            int temp42 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_FindRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker30)), new ExpectedReturn(S02_RowRops_FindRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker31)));
                                            if ((temp42 == 0)) {
                                                this.Manager.Comment("reaching state \'S354\'");
                                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_FindRowSuccess_TestSuite.RopFindRowResponseInfo, null, new RopFindRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopFindRowResponseChecker14))) != -1)) {
                                                    this.Manager.Comment("reaching state \'S418\'");
                                                }
                                                else {
                                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_FindRowSuccess_TestSuite.RopFindRowResponseInfo, null, new RopFindRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopFindRowResponseChecker14)));
                                                }
                                                goto label11;
                                            }
                                            if ((temp42 == 1)) {
                                                this.Manager.Comment("reaching state \'S355\'");
                                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_FindRowSuccess_TestSuite.RopFindRowResponseInfo, null, new RopFindRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopFindRowResponseChecker15))) != -1)) {
                                                    this.Manager.Comment("reaching state \'S419\'");
                                                }
                                                else {
                                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_FindRowSuccess_TestSuite.RopFindRowResponseInfo, null, new RopFindRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopFindRowResponseChecker15)));
                                                }
                                                goto label11;
                                            }
                                            throw new InvalidOperationException("never reached");
                                        label11:
;
                                            goto label12;
                                        }
                                        throw new InvalidOperationException("never reached");
                                    label12:
;
                                    }
                                    else {
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_FindRowSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopQueryRowsResponseChecker3)));
                                    }
                                    goto label13;
                                }
                                throw new InvalidOperationException("never reached");
                            label13:
;
                                goto label14;
                            }
                            throw new InvalidOperationException("never reached");
                        label14:
;
                            goto label30;
                        }
                        if ((temp86 == 1)) {
                            this.Manager.Comment("reaching state \'S53\'");
                            bool temp46;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(867,out _)\'");
                            this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(867, out temp46);
                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp46);
                            this.Manager.Comment("reaching state \'S61\'");
                            int temp85 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_FindRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker33)), new ExpectedReturn(S02_RowRops_FindRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker48)));
                            if ((temp85 == 0)) {
                                this.Manager.Comment("reaching state \'S72\'");
                                Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp47;
                                this.Manager.Comment("executing step \'call RopQueryRows(Advance,True)\'");
                                temp47 = this.IMS_OXCTABLAdapterInstance.RopQueryRows(((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), true);
                                this.Manager.Checkpoint("MS-OXCTABL_R837");
                                this.Manager.Comment("reaching state \'S86\'");
                                this.Manager.Comment("checking step \'return RopQueryRows/success\'");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp47, "return of RopQueryRows, state S86");
                                this.Manager.Comment("reaching state \'S102\'");
                                bool temp48;
                                this.Manager.Comment("executing step \'call CheckRequirementEnabled(610,out _)\'");
                                this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(610, out temp48);
                                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp48);
                                this.Manager.Comment("reaching state \'S118\'");
                                int temp65 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_FindRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker34)), new ExpectedReturn(S02_RowRops_FindRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker41)));
                                if ((temp65 == 0)) {
                                    this.Manager.Comment("reaching state \'S140\'");
                                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_FindRowSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopQueryRowsResponseChecker4))) != -1)) {
                                        this.Manager.Comment("reaching state \'S168\'");
                                        bool temp49;
                                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(827,out _)\'");
                                        this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(827, out temp49);
                                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp49);
                                        this.Manager.Comment("reaching state \'S192\'");
                                        int temp56 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_FindRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker35)), new ExpectedReturn(S02_RowRops_FindRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker38)));
                                        if ((temp56 == 0)) {
                                            this.Manager.Comment("reaching state \'S220\'");
                                            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp50;
                                            this.Manager.Comment("executing step \'call RopFindRow(Forwards,BOOKMARK_CUSTOM,True)\'");
                                            temp50 = this.IMS_OXCTABLAdapterInstance.RopFindRow(((Microsoft.Protocols.TestSuites.Common.FindRowFlags)(0)), Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_CUSTOM, true);
                                            this.Manager.Checkpoint("MS-OXCTABL_R859");
                                            this.Manager.Comment("reaching state \'S252\'");
                                            this.Manager.Comment("checking step \'return RopFindRow/success\'");
                                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp50, "return of RopFindRow, state S252");
                                            this.Manager.Comment("reaching state \'S284\'");
                                            bool temp51;
                                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(608,out _)\'");
                                            this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(608, out temp51);
                                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp51);
                                            this.Manager.Comment("reaching state \'S316\'");
                                            int temp52 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_FindRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker36)), new ExpectedReturn(S02_RowRops_FindRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker37)));
                                            if ((temp52 == 0)) {
                                                this.Manager.Comment("reaching state \'S356\'");
                                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_FindRowSuccess_TestSuite.RopFindRowResponseInfo, null, new RopFindRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopFindRowResponseChecker16))) != -1)) {
                                                    this.Manager.Comment("reaching state \'S420\'");
                                                }
                                                else {
                                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_FindRowSuccess_TestSuite.RopFindRowResponseInfo, null, new RopFindRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopFindRowResponseChecker16)));
                                                }
                                                goto label15;
                                            }
                                            if ((temp52 == 1)) {
                                                this.Manager.Comment("reaching state \'S357\'");
                                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_FindRowSuccess_TestSuite.RopFindRowResponseInfo, null, new RopFindRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopFindRowResponseChecker17))) != -1)) {
                                                    this.Manager.Comment("reaching state \'S421\'");
                                                }
                                                else {
                                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_FindRowSuccess_TestSuite.RopFindRowResponseInfo, null, new RopFindRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopFindRowResponseChecker17)));
                                                }
                                                goto label15;
                                            }
                                            throw new InvalidOperationException("never reached");
                                        label15:
;
                                            goto label17;
                                        }
                                        if ((temp56 == 1)) {
                                            this.Manager.Comment("reaching state \'S221\'");
                                            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp53;
                                            this.Manager.Comment("executing step \'call RopFindRow(Forwards,BOOKMARK_CUSTOM,True)\'");
                                            temp53 = this.IMS_OXCTABLAdapterInstance.RopFindRow(((Microsoft.Protocols.TestSuites.Common.FindRowFlags)(0)), Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_CUSTOM, true);
                                            this.Manager.Checkpoint("MS-OXCTABL_R859");
                                            this.Manager.Comment("reaching state \'S253\'");
                                            this.Manager.Comment("checking step \'return RopFindRow/success\'");
                                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp53, "return of RopFindRow, state S253");
                                            this.Manager.Comment("reaching state \'S285\'");
                                            bool temp54;
                                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(608,out _)\'");
                                            this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(608, out temp54);
                                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp54);
                                            this.Manager.Comment("reaching state \'S317\'");
                                            int temp55 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_FindRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker39)), new ExpectedReturn(S02_RowRops_FindRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker40)));
                                            if ((temp55 == 0)) {
                                                this.Manager.Comment("reaching state \'S358\'");
                                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_FindRowSuccess_TestSuite.RopFindRowResponseInfo, null, new RopFindRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopFindRowResponseChecker18))) != -1)) {
                                                    this.Manager.Comment("reaching state \'S422\'");
                                                }
                                                else {
                                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_FindRowSuccess_TestSuite.RopFindRowResponseInfo, null, new RopFindRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopFindRowResponseChecker18)));
                                                }
                                                goto label16;
                                            }
                                            if ((temp55 == 1)) {
                                                this.Manager.Comment("reaching state \'S359\'");
                                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_FindRowSuccess_TestSuite.RopFindRowResponseInfo, null, new RopFindRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopFindRowResponseChecker19))) != -1)) {
                                                    this.Manager.Comment("reaching state \'S423\'");
                                                }
                                                else {
                                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_FindRowSuccess_TestSuite.RopFindRowResponseInfo, null, new RopFindRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopFindRowResponseChecker19)));
                                                }
                                                goto label16;
                                            }
                                            throw new InvalidOperationException("never reached");
                                        label16:
;
                                            goto label17;
                                        }
                                        throw new InvalidOperationException("never reached");
                                    label17:
;
                                    }
                                    else {
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_FindRowSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopQueryRowsResponseChecker4)));
                                    }
                                    goto label21;
                                }
                                if ((temp65 == 1)) {
                                    this.Manager.Comment("reaching state \'S141\'");
                                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_FindRowSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopQueryRowsResponseChecker5))) != -1)) {
                                        this.Manager.Comment("reaching state \'S169\'");
                                        bool temp57;
                                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(827,out _)\'");
                                        this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(827, out temp57);
                                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp57);
                                        this.Manager.Comment("reaching state \'S193\'");
                                        int temp64 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_FindRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker42)), new ExpectedReturn(S02_RowRops_FindRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker45)));
                                        if ((temp64 == 0)) {
                                            this.Manager.Comment("reaching state \'S222\'");
                                            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp58;
                                            this.Manager.Comment("executing step \'call RopFindRow(Forwards,BOOKMARK_CUSTOM,True)\'");
                                            temp58 = this.IMS_OXCTABLAdapterInstance.RopFindRow(((Microsoft.Protocols.TestSuites.Common.FindRowFlags)(0)), Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_CUSTOM, true);
                                            this.Manager.Checkpoint("MS-OXCTABL_R859");
                                            this.Manager.Comment("reaching state \'S254\'");
                                            this.Manager.Comment("checking step \'return RopFindRow/success\'");
                                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp58, "return of RopFindRow, state S254");
                                            this.Manager.Comment("reaching state \'S286\'");
                                            bool temp59;
                                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(608,out _)\'");
                                            this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(608, out temp59);
                                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp59);
                                            this.Manager.Comment("reaching state \'S318\'");
                                            int temp60 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_FindRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker43)), new ExpectedReturn(S02_RowRops_FindRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker44)));
                                            if ((temp60 == 0)) {
                                                this.Manager.Comment("reaching state \'S360\'");
                                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_FindRowSuccess_TestSuite.RopFindRowResponseInfo, null, new RopFindRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopFindRowResponseChecker20))) != -1)) {
                                                    this.Manager.Comment("reaching state \'S424\'");
                                                }
                                                else {
                                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_FindRowSuccess_TestSuite.RopFindRowResponseInfo, null, new RopFindRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopFindRowResponseChecker20)));
                                                }
                                                goto label18;
                                            }
                                            if ((temp60 == 1)) {
                                                this.Manager.Comment("reaching state \'S361\'");
                                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_FindRowSuccess_TestSuite.RopFindRowResponseInfo, null, new RopFindRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopFindRowResponseChecker21))) != -1)) {
                                                    this.Manager.Comment("reaching state \'S425\'");
                                                }
                                                else {
                                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_FindRowSuccess_TestSuite.RopFindRowResponseInfo, null, new RopFindRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopFindRowResponseChecker21)));
                                                }
                                                goto label18;
                                            }
                                            throw new InvalidOperationException("never reached");
                                        label18:
;
                                            goto label20;
                                        }
                                        if ((temp64 == 1)) {
                                            this.Manager.Comment("reaching state \'S223\'");
                                            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp61;
                                            this.Manager.Comment("executing step \'call RopFindRow(Forwards,BOOKMARK_CUSTOM,True)\'");
                                            temp61 = this.IMS_OXCTABLAdapterInstance.RopFindRow(((Microsoft.Protocols.TestSuites.Common.FindRowFlags)(0)), Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_CUSTOM, true);
                                            this.Manager.Checkpoint("MS-OXCTABL_R859");
                                            this.Manager.Comment("reaching state \'S255\'");
                                            this.Manager.Comment("checking step \'return RopFindRow/success\'");
                                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp61, "return of RopFindRow, state S255");
                                            this.Manager.Comment("reaching state \'S287\'");
                                            bool temp62;
                                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(608,out _)\'");
                                            this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(608, out temp62);
                                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp62);
                                            this.Manager.Comment("reaching state \'S319\'");
                                            int temp63 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_FindRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker46)), new ExpectedReturn(S02_RowRops_FindRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker47)));
                                            if ((temp63 == 0)) {
                                                this.Manager.Comment("reaching state \'S362\'");
                                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_FindRowSuccess_TestSuite.RopFindRowResponseInfo, null, new RopFindRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopFindRowResponseChecker22))) != -1)) {
                                                    this.Manager.Comment("reaching state \'S426\'");
                                                }
                                                else {
                                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_FindRowSuccess_TestSuite.RopFindRowResponseInfo, null, new RopFindRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopFindRowResponseChecker22)));
                                                }
                                                goto label19;
                                            }
                                            if ((temp63 == 1)) {
                                                this.Manager.Comment("reaching state \'S363\'");
                                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_FindRowSuccess_TestSuite.RopFindRowResponseInfo, null, new RopFindRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopFindRowResponseChecker23))) != -1)) {
                                                    this.Manager.Comment("reaching state \'S427\'");
                                                }
                                                else {
                                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_FindRowSuccess_TestSuite.RopFindRowResponseInfo, null, new RopFindRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopFindRowResponseChecker23)));
                                                }
                                                goto label19;
                                            }
                                            throw new InvalidOperationException("never reached");
                                        label19:
;
                                            goto label20;
                                        }
                                        throw new InvalidOperationException("never reached");
                                    label20:
;
                                    }
                                    else {
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_FindRowSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopQueryRowsResponseChecker5)));
                                    }
                                    goto label21;
                                }
                                throw new InvalidOperationException("never reached");
                            label21:
;
                                goto label29;
                            }
                            if ((temp85 == 1)) {
                                this.Manager.Comment("reaching state \'S73\'");
                                Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp66;
                                this.Manager.Comment("executing step \'call RopQueryRows(Advance,True)\'");
                                temp66 = this.IMS_OXCTABLAdapterInstance.RopQueryRows(((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), true);
                                this.Manager.Checkpoint("MS-OXCTABL_R837");
                                this.Manager.Comment("reaching state \'S87\'");
                                this.Manager.Comment("checking step \'return RopQueryRows/success\'");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp66, "return of RopQueryRows, state S87");
                                this.Manager.Comment("reaching state \'S103\'");
                                bool temp67;
                                this.Manager.Comment("executing step \'call CheckRequirementEnabled(610,out _)\'");
                                this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(610, out temp67);
                                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp67);
                                this.Manager.Comment("reaching state \'S119\'");
                                int temp84 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_FindRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker49)), new ExpectedReturn(S02_RowRops_FindRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker56)));
                                if ((temp84 == 0)) {
                                    this.Manager.Comment("reaching state \'S142\'");
                                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_FindRowSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopQueryRowsResponseChecker6))) != -1)) {
                                        this.Manager.Comment("reaching state \'S170\'");
                                        bool temp68;
                                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(827,out _)\'");
                                        this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(827, out temp68);
                                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp68);
                                        this.Manager.Comment("reaching state \'S194\'");
                                        int temp75 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_FindRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker50)), new ExpectedReturn(S02_RowRops_FindRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker53)));
                                        if ((temp75 == 0)) {
                                            this.Manager.Comment("reaching state \'S224\'");
                                            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp69;
                                            this.Manager.Comment("executing step \'call RopFindRow(Forwards,BOOKMARK_CUSTOM,True)\'");
                                            temp69 = this.IMS_OXCTABLAdapterInstance.RopFindRow(((Microsoft.Protocols.TestSuites.Common.FindRowFlags)(0)), Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_CUSTOM, true);
                                            this.Manager.Checkpoint("MS-OXCTABL_R859");
                                            this.Manager.Comment("reaching state \'S256\'");
                                            this.Manager.Comment("checking step \'return RopFindRow/success\'");
                                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp69, "return of RopFindRow, state S256");
                                            this.Manager.Comment("reaching state \'S288\'");
                                            bool temp70;
                                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(608,out _)\'");
                                            this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(608, out temp70);
                                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp70);
                                            this.Manager.Comment("reaching state \'S320\'");
                                            int temp71 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_FindRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker51)), new ExpectedReturn(S02_RowRops_FindRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker52)));
                                            if ((temp71 == 0)) {
                                                this.Manager.Comment("reaching state \'S364\'");
                                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_FindRowSuccess_TestSuite.RopFindRowResponseInfo, null, new RopFindRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopFindRowResponseChecker24))) != -1)) {
                                                    this.Manager.Comment("reaching state \'S428\'");
                                                }
                                                else {
                                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_FindRowSuccess_TestSuite.RopFindRowResponseInfo, null, new RopFindRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopFindRowResponseChecker24)));
                                                }
                                                goto label22;
                                            }
                                            if ((temp71 == 1)) {
                                                this.Manager.Comment("reaching state \'S365\'");
                                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_FindRowSuccess_TestSuite.RopFindRowResponseInfo, null, new RopFindRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopFindRowResponseChecker25))) != -1)) {
                                                    this.Manager.Comment("reaching state \'S429\'");
                                                }
                                                else {
                                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_FindRowSuccess_TestSuite.RopFindRowResponseInfo, null, new RopFindRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopFindRowResponseChecker25)));
                                                }
                                                goto label22;
                                            }
                                            throw new InvalidOperationException("never reached");
                                        label22:
;
                                            goto label24;
                                        }
                                        if ((temp75 == 1)) {
                                            this.Manager.Comment("reaching state \'S225\'");
                                            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp72;
                                            this.Manager.Comment("executing step \'call RopFindRow(Forwards,BOOKMARK_CUSTOM,True)\'");
                                            temp72 = this.IMS_OXCTABLAdapterInstance.RopFindRow(((Microsoft.Protocols.TestSuites.Common.FindRowFlags)(0)), Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_CUSTOM, true);
                                            this.Manager.Checkpoint("MS-OXCTABL_R859");
                                            this.Manager.Comment("reaching state \'S257\'");
                                            this.Manager.Comment("checking step \'return RopFindRow/success\'");
                                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp72, "return of RopFindRow, state S257");
                                            this.Manager.Comment("reaching state \'S289\'");
                                            bool temp73;
                                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(608,out _)\'");
                                            this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(608, out temp73);
                                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp73);
                                            this.Manager.Comment("reaching state \'S321\'");
                                            int temp74 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_FindRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker54)), new ExpectedReturn(S02_RowRops_FindRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker55)));
                                            if ((temp74 == 0)) {
                                                this.Manager.Comment("reaching state \'S366\'");
                                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_FindRowSuccess_TestSuite.RopFindRowResponseInfo, null, new RopFindRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopFindRowResponseChecker26))) != -1)) {
                                                    this.Manager.Comment("reaching state \'S430\'");
                                                }
                                                else {
                                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_FindRowSuccess_TestSuite.RopFindRowResponseInfo, null, new RopFindRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopFindRowResponseChecker26)));
                                                }
                                                goto label23;
                                            }
                                            if ((temp74 == 1)) {
                                                this.Manager.Comment("reaching state \'S367\'");
                                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_FindRowSuccess_TestSuite.RopFindRowResponseInfo, null, new RopFindRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopFindRowResponseChecker27))) != -1)) {
                                                    this.Manager.Comment("reaching state \'S431\'");
                                                }
                                                else {
                                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_FindRowSuccess_TestSuite.RopFindRowResponseInfo, null, new RopFindRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopFindRowResponseChecker27)));
                                                }
                                                goto label23;
                                            }
                                            throw new InvalidOperationException("never reached");
                                        label23:
;
                                            goto label24;
                                        }
                                        throw new InvalidOperationException("never reached");
                                    label24:
;
                                    }
                                    else {
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_FindRowSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopQueryRowsResponseChecker6)));
                                    }
                                    goto label28;
                                }
                                if ((temp84 == 1)) {
                                    this.Manager.Comment("reaching state \'S143\'");
                                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_FindRowSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopQueryRowsResponseChecker7))) != -1)) {
                                        this.Manager.Comment("reaching state \'S171\'");
                                        bool temp76;
                                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(827,out _)\'");
                                        this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(827, out temp76);
                                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp76);
                                        this.Manager.Comment("reaching state \'S195\'");
                                        int temp83 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_FindRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker57)), new ExpectedReturn(S02_RowRops_FindRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker60)));
                                        if ((temp83 == 0)) {
                                            this.Manager.Comment("reaching state \'S226\'");
                                            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp77;
                                            this.Manager.Comment("executing step \'call RopFindRow(Forwards,BOOKMARK_CUSTOM,True)\'");
                                            temp77 = this.IMS_OXCTABLAdapterInstance.RopFindRow(((Microsoft.Protocols.TestSuites.Common.FindRowFlags)(0)), Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_CUSTOM, true);
                                            this.Manager.Checkpoint("MS-OXCTABL_R859");
                                            this.Manager.Comment("reaching state \'S258\'");
                                            this.Manager.Comment("checking step \'return RopFindRow/success\'");
                                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp77, "return of RopFindRow, state S258");
                                            this.Manager.Comment("reaching state \'S290\'");
                                            bool temp78;
                                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(608,out _)\'");
                                            this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(608, out temp78);
                                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp78);
                                            this.Manager.Comment("reaching state \'S322\'");
                                            int temp79 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_FindRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker58)), new ExpectedReturn(S02_RowRops_FindRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker59)));
                                            if ((temp79 == 0)) {
                                                this.Manager.Comment("reaching state \'S368\'");
                                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_FindRowSuccess_TestSuite.RopFindRowResponseInfo, null, new RopFindRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopFindRowResponseChecker28))) != -1)) {
                                                    this.Manager.Comment("reaching state \'S432\'");
                                                }
                                                else {
                                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_FindRowSuccess_TestSuite.RopFindRowResponseInfo, null, new RopFindRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopFindRowResponseChecker28)));
                                                }
                                                goto label25;
                                            }
                                            if ((temp79 == 1)) {
                                                this.Manager.Comment("reaching state \'S369\'");
                                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_FindRowSuccess_TestSuite.RopFindRowResponseInfo, null, new RopFindRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopFindRowResponseChecker29))) != -1)) {
                                                    this.Manager.Comment("reaching state \'S433\'");
                                                }
                                                else {
                                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_FindRowSuccess_TestSuite.RopFindRowResponseInfo, null, new RopFindRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopFindRowResponseChecker29)));
                                                }
                                                goto label25;
                                            }
                                            throw new InvalidOperationException("never reached");
                                        label25:
;
                                            goto label27;
                                        }
                                        if ((temp83 == 1)) {
                                            this.Manager.Comment("reaching state \'S227\'");
                                            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp80;
                                            this.Manager.Comment("executing step \'call RopFindRow(Forwards,BOOKMARK_CUSTOM,True)\'");
                                            temp80 = this.IMS_OXCTABLAdapterInstance.RopFindRow(((Microsoft.Protocols.TestSuites.Common.FindRowFlags)(0)), Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_CUSTOM, true);
                                            this.Manager.Checkpoint("MS-OXCTABL_R859");
                                            this.Manager.Comment("reaching state \'S259\'");
                                            this.Manager.Comment("checking step \'return RopFindRow/success\'");
                                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp80, "return of RopFindRow, state S259");
                                            this.Manager.Comment("reaching state \'S291\'");
                                            bool temp81;
                                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(608,out _)\'");
                                            this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(608, out temp81);
                                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp81);
                                            this.Manager.Comment("reaching state \'S323\'");
                                            int temp82 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_FindRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker61)), new ExpectedReturn(S02_RowRops_FindRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker62)));
                                            if ((temp82 == 0)) {
                                                this.Manager.Comment("reaching state \'S370\'");
                                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_FindRowSuccess_TestSuite.RopFindRowResponseInfo, null, new RopFindRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopFindRowResponseChecker30))) != -1)) {
                                                    this.Manager.Comment("reaching state \'S434\'");
                                                }
                                                else {
                                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_FindRowSuccess_TestSuite.RopFindRowResponseInfo, null, new RopFindRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopFindRowResponseChecker30)));
                                                }
                                                goto label26;
                                            }
                                            if ((temp82 == 1)) {
                                                this.Manager.Comment("reaching state \'S371\'");
                                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_FindRowSuccess_TestSuite.RopFindRowResponseInfo, null, new RopFindRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopFindRowResponseChecker31))) != -1)) {
                                                    this.Manager.Comment("reaching state \'S435\'");
                                                }
                                                else {
                                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_FindRowSuccess_TestSuite.RopFindRowResponseInfo, null, new RopFindRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopFindRowResponseChecker31)));
                                                }
                                                goto label26;
                                            }
                                            throw new InvalidOperationException("never reached");
                                        label26:
;
                                            goto label27;
                                        }
                                        throw new InvalidOperationException("never reached");
                                    label27:
;
                                    }
                                    else {
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_FindRowSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopQueryRowsResponseChecker7)));
                                    }
                                    goto label28;
                                }
                                throw new InvalidOperationException("never reached");
                            label28:
;
                                goto label29;
                            }
                            throw new InvalidOperationException("never reached");
                        label29:
;
                            goto label30;
                        }
                        throw new InvalidOperationException("never reached");
                    label30:
;
                        goto label62;
                    }
                    if ((temp169 == 1)) {
                        this.Manager.Comment("reaching state \'S43\'");
                        bool temp87;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(866,out _)\'");
                        this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(866, out temp87);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp87);
                        this.Manager.Comment("reaching state \'S48\'");
                        int temp168 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_FindRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker64)), new ExpectedReturn(S02_RowRops_FindRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker95)));
                        if ((temp168 == 0)) {
                            this.Manager.Comment("reaching state \'S54\'");
                            bool temp88;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(867,out _)\'");
                            this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(867, out temp88);
                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp88);
                            this.Manager.Comment("reaching state \'S62\'");
                            int temp127 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_FindRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker65)), new ExpectedReturn(S02_RowRops_FindRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker80)));
                            if ((temp127 == 0)) {
                                this.Manager.Comment("reaching state \'S74\'");
                                Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp89;
                                this.Manager.Comment("executing step \'call RopQueryRows(Advance,True)\'");
                                temp89 = this.IMS_OXCTABLAdapterInstance.RopQueryRows(((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), true);
                                this.Manager.Checkpoint("MS-OXCTABL_R837");
                                this.Manager.Comment("reaching state \'S88\'");
                                this.Manager.Comment("checking step \'return RopQueryRows/success\'");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp89, "return of RopQueryRows, state S88");
                                this.Manager.Comment("reaching state \'S104\'");
                                bool temp90;
                                this.Manager.Comment("executing step \'call CheckRequirementEnabled(610,out _)\'");
                                this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(610, out temp90);
                                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp90);
                                this.Manager.Comment("reaching state \'S120\'");
                                int temp107 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_FindRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker66)), new ExpectedReturn(S02_RowRops_FindRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker73)));
                                if ((temp107 == 0)) {
                                    this.Manager.Comment("reaching state \'S144\'");
                                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_FindRowSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopQueryRowsResponseChecker8))) != -1)) {
                                        this.Manager.Comment("reaching state \'S172\'");
                                        bool temp91;
                                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(827,out _)\'");
                                        this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(827, out temp91);
                                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp91);
                                        this.Manager.Comment("reaching state \'S196\'");
                                        int temp98 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_FindRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker67)), new ExpectedReturn(S02_RowRops_FindRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker70)));
                                        if ((temp98 == 0)) {
                                            this.Manager.Comment("reaching state \'S228\'");
                                            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp92;
                                            this.Manager.Comment("executing step \'call RopFindRow(Forwards,BOOKMARK_CUSTOM,True)\'");
                                            temp92 = this.IMS_OXCTABLAdapterInstance.RopFindRow(((Microsoft.Protocols.TestSuites.Common.FindRowFlags)(0)), Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_CUSTOM, true);
                                            this.Manager.Checkpoint("MS-OXCTABL_R859");
                                            this.Manager.Comment("reaching state \'S260\'");
                                            this.Manager.Comment("checking step \'return RopFindRow/success\'");
                                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp92, "return of RopFindRow, state S260");
                                            this.Manager.Comment("reaching state \'S292\'");
                                            bool temp93;
                                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(608,out _)\'");
                                            this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(608, out temp93);
                                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp93);
                                            this.Manager.Comment("reaching state \'S324\'");
                                            int temp94 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_FindRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker68)), new ExpectedReturn(S02_RowRops_FindRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker69)));
                                            if ((temp94 == 0)) {
                                                this.Manager.Comment("reaching state \'S372\'");
                                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_FindRowSuccess_TestSuite.RopFindRowResponseInfo, null, new RopFindRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopFindRowResponseChecker32))) != -1)) {
                                                    this.Manager.Comment("reaching state \'S436\'");
                                                }
                                                else {
                                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_FindRowSuccess_TestSuite.RopFindRowResponseInfo, null, new RopFindRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopFindRowResponseChecker32)));
                                                }
                                                goto label31;
                                            }
                                            if ((temp94 == 1)) {
                                                this.Manager.Comment("reaching state \'S373\'");
                                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_FindRowSuccess_TestSuite.RopFindRowResponseInfo, null, new RopFindRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopFindRowResponseChecker33))) != -1)) {
                                                    this.Manager.Comment("reaching state \'S437\'");
                                                }
                                                else {
                                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_FindRowSuccess_TestSuite.RopFindRowResponseInfo, null, new RopFindRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopFindRowResponseChecker33)));
                                                }
                                                goto label31;
                                            }
                                            throw new InvalidOperationException("never reached");
                                        label31:
;
                                            goto label33;
                                        }
                                        if ((temp98 == 1)) {
                                            this.Manager.Comment("reaching state \'S229\'");
                                            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp95;
                                            this.Manager.Comment("executing step \'call RopFindRow(Forwards,BOOKMARK_CUSTOM,True)\'");
                                            temp95 = this.IMS_OXCTABLAdapterInstance.RopFindRow(((Microsoft.Protocols.TestSuites.Common.FindRowFlags)(0)), Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_CUSTOM, true);
                                            this.Manager.Checkpoint("MS-OXCTABL_R859");
                                            this.Manager.Comment("reaching state \'S261\'");
                                            this.Manager.Comment("checking step \'return RopFindRow/success\'");
                                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp95, "return of RopFindRow, state S261");
                                            this.Manager.Comment("reaching state \'S293\'");
                                            bool temp96;
                                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(608,out _)\'");
                                            this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(608, out temp96);
                                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp96);
                                            this.Manager.Comment("reaching state \'S325\'");
                                            int temp97 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_FindRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker71)), new ExpectedReturn(S02_RowRops_FindRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker72)));
                                            if ((temp97 == 0)) {
                                                this.Manager.Comment("reaching state \'S374\'");
                                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_FindRowSuccess_TestSuite.RopFindRowResponseInfo, null, new RopFindRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopFindRowResponseChecker34))) != -1)) {
                                                    this.Manager.Comment("reaching state \'S438\'");
                                                }
                                                else {
                                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_FindRowSuccess_TestSuite.RopFindRowResponseInfo, null, new RopFindRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopFindRowResponseChecker34)));
                                                }
                                                goto label32;
                                            }
                                            if ((temp97 == 1)) {
                                                this.Manager.Comment("reaching state \'S375\'");
                                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_FindRowSuccess_TestSuite.RopFindRowResponseInfo, null, new RopFindRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopFindRowResponseChecker35))) != -1)) {
                                                    this.Manager.Comment("reaching state \'S439\'");
                                                }
                                                else {
                                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_FindRowSuccess_TestSuite.RopFindRowResponseInfo, null, new RopFindRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopFindRowResponseChecker35)));
                                                }
                                                goto label32;
                                            }
                                            throw new InvalidOperationException("never reached");
                                        label32:
;
                                            goto label33;
                                        }
                                        throw new InvalidOperationException("never reached");
                                    label33:
;
                                    }
                                    else {
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_FindRowSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopQueryRowsResponseChecker8)));
                                    }
                                    goto label37;
                                }
                                if ((temp107 == 1)) {
                                    this.Manager.Comment("reaching state \'S145\'");
                                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_FindRowSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopQueryRowsResponseChecker9))) != -1)) {
                                        this.Manager.Comment("reaching state \'S173\'");
                                        bool temp99;
                                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(827,out _)\'");
                                        this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(827, out temp99);
                                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp99);
                                        this.Manager.Comment("reaching state \'S197\'");
                                        int temp106 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_FindRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker74)), new ExpectedReturn(S02_RowRops_FindRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker77)));
                                        if ((temp106 == 0)) {
                                            this.Manager.Comment("reaching state \'S230\'");
                                            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp100;
                                            this.Manager.Comment("executing step \'call RopFindRow(Forwards,BOOKMARK_CUSTOM,True)\'");
                                            temp100 = this.IMS_OXCTABLAdapterInstance.RopFindRow(((Microsoft.Protocols.TestSuites.Common.FindRowFlags)(0)), Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_CUSTOM, true);
                                            this.Manager.Checkpoint("MS-OXCTABL_R859");
                                            this.Manager.Comment("reaching state \'S262\'");
                                            this.Manager.Comment("checking step \'return RopFindRow/success\'");
                                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp100, "return of RopFindRow, state S262");
                                            this.Manager.Comment("reaching state \'S294\'");
                                            bool temp101;
                                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(608,out _)\'");
                                            this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(608, out temp101);
                                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp101);
                                            this.Manager.Comment("reaching state \'S326\'");
                                            int temp102 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_FindRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker75)), new ExpectedReturn(S02_RowRops_FindRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker76)));
                                            if ((temp102 == 0)) {
                                                this.Manager.Comment("reaching state \'S376\'");
                                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_FindRowSuccess_TestSuite.RopFindRowResponseInfo, null, new RopFindRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopFindRowResponseChecker36))) != -1)) {
                                                    this.Manager.Comment("reaching state \'S440\'");
                                                }
                                                else {
                                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_FindRowSuccess_TestSuite.RopFindRowResponseInfo, null, new RopFindRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopFindRowResponseChecker36)));
                                                }
                                                goto label34;
                                            }
                                            if ((temp102 == 1)) {
                                                this.Manager.Comment("reaching state \'S377\'");
                                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_FindRowSuccess_TestSuite.RopFindRowResponseInfo, null, new RopFindRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopFindRowResponseChecker37))) != -1)) {
                                                    this.Manager.Comment("reaching state \'S441\'");
                                                }
                                                else {
                                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_FindRowSuccess_TestSuite.RopFindRowResponseInfo, null, new RopFindRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopFindRowResponseChecker37)));
                                                }
                                                goto label34;
                                            }
                                            throw new InvalidOperationException("never reached");
                                        label34:
;
                                            goto label36;
                                        }
                                        if ((temp106 == 1)) {
                                            this.Manager.Comment("reaching state \'S231\'");
                                            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp103;
                                            this.Manager.Comment("executing step \'call RopFindRow(Forwards,BOOKMARK_CUSTOM,True)\'");
                                            temp103 = this.IMS_OXCTABLAdapterInstance.RopFindRow(((Microsoft.Protocols.TestSuites.Common.FindRowFlags)(0)), Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_CUSTOM, true);
                                            this.Manager.Checkpoint("MS-OXCTABL_R859");
                                            this.Manager.Comment("reaching state \'S263\'");
                                            this.Manager.Comment("checking step \'return RopFindRow/success\'");
                                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp103, "return of RopFindRow, state S263");
                                            this.Manager.Comment("reaching state \'S295\'");
                                            bool temp104;
                                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(608,out _)\'");
                                            this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(608, out temp104);
                                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp104);
                                            this.Manager.Comment("reaching state \'S327\'");
                                            int temp105 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_FindRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker78)), new ExpectedReturn(S02_RowRops_FindRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker79)));
                                            if ((temp105 == 0)) {
                                                this.Manager.Comment("reaching state \'S378\'");
                                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_FindRowSuccess_TestSuite.RopFindRowResponseInfo, null, new RopFindRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopFindRowResponseChecker38))) != -1)) {
                                                    this.Manager.Comment("reaching state \'S442\'");
                                                }
                                                else {
                                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_FindRowSuccess_TestSuite.RopFindRowResponseInfo, null, new RopFindRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopFindRowResponseChecker38)));
                                                }
                                                goto label35;
                                            }
                                            if ((temp105 == 1)) {
                                                this.Manager.Comment("reaching state \'S379\'");
                                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_FindRowSuccess_TestSuite.RopFindRowResponseInfo, null, new RopFindRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopFindRowResponseChecker39))) != -1)) {
                                                    this.Manager.Comment("reaching state \'S443\'");
                                                }
                                                else {
                                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_FindRowSuccess_TestSuite.RopFindRowResponseInfo, null, new RopFindRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopFindRowResponseChecker39)));
                                                }
                                                goto label35;
                                            }
                                            throw new InvalidOperationException("never reached");
                                        label35:
;
                                            goto label36;
                                        }
                                        throw new InvalidOperationException("never reached");
                                    label36:
;
                                    }
                                    else {
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_FindRowSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopQueryRowsResponseChecker9)));
                                    }
                                    goto label37;
                                }
                                throw new InvalidOperationException("never reached");
                            label37:
;
                                goto label45;
                            }
                            if ((temp127 == 1)) {
                                this.Manager.Comment("reaching state \'S75\'");
                                Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp108;
                                this.Manager.Comment("executing step \'call RopQueryRows(Advance,True)\'");
                                temp108 = this.IMS_OXCTABLAdapterInstance.RopQueryRows(((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), true);
                                this.Manager.Checkpoint("MS-OXCTABL_R837");
                                this.Manager.Comment("reaching state \'S89\'");
                                this.Manager.Comment("checking step \'return RopQueryRows/success\'");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp108, "return of RopQueryRows, state S89");
                                this.Manager.Comment("reaching state \'S105\'");
                                bool temp109;
                                this.Manager.Comment("executing step \'call CheckRequirementEnabled(610,out _)\'");
                                this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(610, out temp109);
                                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp109);
                                this.Manager.Comment("reaching state \'S121\'");
                                int temp126 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_FindRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker81)), new ExpectedReturn(S02_RowRops_FindRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker88)));
                                if ((temp126 == 0)) {
                                    this.Manager.Comment("reaching state \'S146\'");
                                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_FindRowSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopQueryRowsResponseChecker10))) != -1)) {
                                        this.Manager.Comment("reaching state \'S174\'");
                                        bool temp110;
                                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(827,out _)\'");
                                        this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(827, out temp110);
                                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp110);
                                        this.Manager.Comment("reaching state \'S198\'");
                                        int temp117 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_FindRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker82)), new ExpectedReturn(S02_RowRops_FindRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker85)));
                                        if ((temp117 == 0)) {
                                            this.Manager.Comment("reaching state \'S232\'");
                                            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp111;
                                            this.Manager.Comment("executing step \'call RopFindRow(Forwards,BOOKMARK_CUSTOM,True)\'");
                                            temp111 = this.IMS_OXCTABLAdapterInstance.RopFindRow(((Microsoft.Protocols.TestSuites.Common.FindRowFlags)(0)), Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_CUSTOM, true);
                                            this.Manager.Checkpoint("MS-OXCTABL_R859");
                                            this.Manager.Comment("reaching state \'S264\'");
                                            this.Manager.Comment("checking step \'return RopFindRow/success\'");
                                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp111, "return of RopFindRow, state S264");
                                            this.Manager.Comment("reaching state \'S296\'");
                                            bool temp112;
                                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(608,out _)\'");
                                            this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(608, out temp112);
                                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp112);
                                            this.Manager.Comment("reaching state \'S328\'");
                                            int temp113 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_FindRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker83)), new ExpectedReturn(S02_RowRops_FindRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker84)));
                                            if ((temp113 == 0)) {
                                                this.Manager.Comment("reaching state \'S380\'");
                                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_FindRowSuccess_TestSuite.RopFindRowResponseInfo, null, new RopFindRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopFindRowResponseChecker40))) != -1)) {
                                                    this.Manager.Comment("reaching state \'S444\'");
                                                }
                                                else {
                                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_FindRowSuccess_TestSuite.RopFindRowResponseInfo, null, new RopFindRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopFindRowResponseChecker40)));
                                                }
                                                goto label38;
                                            }
                                            if ((temp113 == 1)) {
                                                this.Manager.Comment("reaching state \'S381\'");
                                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_FindRowSuccess_TestSuite.RopFindRowResponseInfo, null, new RopFindRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopFindRowResponseChecker41))) != -1)) {
                                                    this.Manager.Comment("reaching state \'S445\'");
                                                }
                                                else {
                                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_FindRowSuccess_TestSuite.RopFindRowResponseInfo, null, new RopFindRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopFindRowResponseChecker41)));
                                                }
                                                goto label38;
                                            }
                                            throw new InvalidOperationException("never reached");
                                        label38:
;
                                            goto label40;
                                        }
                                        if ((temp117 == 1)) {
                                            this.Manager.Comment("reaching state \'S233\'");
                                            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp114;
                                            this.Manager.Comment("executing step \'call RopFindRow(Forwards,BOOKMARK_CUSTOM,True)\'");
                                            temp114 = this.IMS_OXCTABLAdapterInstance.RopFindRow(((Microsoft.Protocols.TestSuites.Common.FindRowFlags)(0)), Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_CUSTOM, true);
                                            this.Manager.Checkpoint("MS-OXCTABL_R859");
                                            this.Manager.Comment("reaching state \'S265\'");
                                            this.Manager.Comment("checking step \'return RopFindRow/success\'");
                                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp114, "return of RopFindRow, state S265");
                                            this.Manager.Comment("reaching state \'S297\'");
                                            bool temp115;
                                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(608,out _)\'");
                                            this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(608, out temp115);
                                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp115);
                                            this.Manager.Comment("reaching state \'S329\'");
                                            int temp116 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_FindRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker86)), new ExpectedReturn(S02_RowRops_FindRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker87)));
                                            if ((temp116 == 0)) {
                                                this.Manager.Comment("reaching state \'S382\'");
                                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_FindRowSuccess_TestSuite.RopFindRowResponseInfo, null, new RopFindRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopFindRowResponseChecker42))) != -1)) {
                                                    this.Manager.Comment("reaching state \'S446\'");
                                                }
                                                else {
                                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_FindRowSuccess_TestSuite.RopFindRowResponseInfo, null, new RopFindRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopFindRowResponseChecker42)));
                                                }
                                                goto label39;
                                            }
                                            if ((temp116 == 1)) {
                                                this.Manager.Comment("reaching state \'S383\'");
                                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_FindRowSuccess_TestSuite.RopFindRowResponseInfo, null, new RopFindRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopFindRowResponseChecker43))) != -1)) {
                                                    this.Manager.Comment("reaching state \'S447\'");
                                                }
                                                else {
                                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_FindRowSuccess_TestSuite.RopFindRowResponseInfo, null, new RopFindRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopFindRowResponseChecker43)));
                                                }
                                                goto label39;
                                            }
                                            throw new InvalidOperationException("never reached");
                                        label39:
;
                                            goto label40;
                                        }
                                        throw new InvalidOperationException("never reached");
                                    label40:
;
                                    }
                                    else {
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_FindRowSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopQueryRowsResponseChecker10)));
                                    }
                                    goto label44;
                                }
                                if ((temp126 == 1)) {
                                    this.Manager.Comment("reaching state \'S147\'");
                                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_FindRowSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopQueryRowsResponseChecker11))) != -1)) {
                                        this.Manager.Comment("reaching state \'S175\'");
                                        bool temp118;
                                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(827,out _)\'");
                                        this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(827, out temp118);
                                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp118);
                                        this.Manager.Comment("reaching state \'S199\'");
                                        int temp125 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_FindRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker89)), new ExpectedReturn(S02_RowRops_FindRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker92)));
                                        if ((temp125 == 0)) {
                                            this.Manager.Comment("reaching state \'S234\'");
                                            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp119;
                                            this.Manager.Comment("executing step \'call RopFindRow(Forwards,BOOKMARK_CUSTOM,True)\'");
                                            temp119 = this.IMS_OXCTABLAdapterInstance.RopFindRow(((Microsoft.Protocols.TestSuites.Common.FindRowFlags)(0)), Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_CUSTOM, true);
                                            this.Manager.Checkpoint("MS-OXCTABL_R859");
                                            this.Manager.Comment("reaching state \'S266\'");
                                            this.Manager.Comment("checking step \'return RopFindRow/success\'");
                                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp119, "return of RopFindRow, state S266");
                                            this.Manager.Comment("reaching state \'S298\'");
                                            bool temp120;
                                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(608,out _)\'");
                                            this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(608, out temp120);
                                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp120);
                                            this.Manager.Comment("reaching state \'S330\'");
                                            int temp121 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_FindRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker90)), new ExpectedReturn(S02_RowRops_FindRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker91)));
                                            if ((temp121 == 0)) {
                                                this.Manager.Comment("reaching state \'S384\'");
                                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_FindRowSuccess_TestSuite.RopFindRowResponseInfo, null, new RopFindRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopFindRowResponseChecker44))) != -1)) {
                                                    this.Manager.Comment("reaching state \'S448\'");
                                                }
                                                else {
                                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_FindRowSuccess_TestSuite.RopFindRowResponseInfo, null, new RopFindRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopFindRowResponseChecker44)));
                                                }
                                                goto label41;
                                            }
                                            if ((temp121 == 1)) {
                                                this.Manager.Comment("reaching state \'S385\'");
                                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_FindRowSuccess_TestSuite.RopFindRowResponseInfo, null, new RopFindRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopFindRowResponseChecker45))) != -1)) {
                                                    this.Manager.Comment("reaching state \'S449\'");
                                                }
                                                else {
                                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_FindRowSuccess_TestSuite.RopFindRowResponseInfo, null, new RopFindRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopFindRowResponseChecker45)));
                                                }
                                                goto label41;
                                            }
                                            throw new InvalidOperationException("never reached");
                                        label41:
;
                                            goto label43;
                                        }
                                        if ((temp125 == 1)) {
                                            this.Manager.Comment("reaching state \'S235\'");
                                            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp122;
                                            this.Manager.Comment("executing step \'call RopFindRow(Forwards,BOOKMARK_CUSTOM,True)\'");
                                            temp122 = this.IMS_OXCTABLAdapterInstance.RopFindRow(((Microsoft.Protocols.TestSuites.Common.FindRowFlags)(0)), Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_CUSTOM, true);
                                            this.Manager.Checkpoint("MS-OXCTABL_R859");
                                            this.Manager.Comment("reaching state \'S267\'");
                                            this.Manager.Comment("checking step \'return RopFindRow/success\'");
                                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp122, "return of RopFindRow, state S267");
                                            this.Manager.Comment("reaching state \'S299\'");
                                            bool temp123;
                                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(608,out _)\'");
                                            this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(608, out temp123);
                                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp123);
                                            this.Manager.Comment("reaching state \'S331\'");
                                            int temp124 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_FindRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker93)), new ExpectedReturn(S02_RowRops_FindRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker94)));
                                            if ((temp124 == 0)) {
                                                this.Manager.Comment("reaching state \'S386\'");
                                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_FindRowSuccess_TestSuite.RopFindRowResponseInfo, null, new RopFindRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopFindRowResponseChecker46))) != -1)) {
                                                    this.Manager.Comment("reaching state \'S450\'");
                                                }
                                                else {
                                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_FindRowSuccess_TestSuite.RopFindRowResponseInfo, null, new RopFindRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopFindRowResponseChecker46)));
                                                }
                                                goto label42;
                                            }
                                            if ((temp124 == 1)) {
                                                this.Manager.Comment("reaching state \'S387\'");
                                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_FindRowSuccess_TestSuite.RopFindRowResponseInfo, null, new RopFindRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopFindRowResponseChecker47))) != -1)) {
                                                    this.Manager.Comment("reaching state \'S451\'");
                                                }
                                                else {
                                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_FindRowSuccess_TestSuite.RopFindRowResponseInfo, null, new RopFindRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopFindRowResponseChecker47)));
                                                }
                                                goto label42;
                                            }
                                            throw new InvalidOperationException("never reached");
                                        label42:
;
                                            goto label43;
                                        }
                                        throw new InvalidOperationException("never reached");
                                    label43:
;
                                    }
                                    else {
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_FindRowSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopQueryRowsResponseChecker11)));
                                    }
                                    goto label44;
                                }
                                throw new InvalidOperationException("never reached");
                            label44:
;
                                goto label45;
                            }
                            throw new InvalidOperationException("never reached");
                        label45:
;
                            goto label61;
                        }
                        if ((temp168 == 1)) {
                            this.Manager.Comment("reaching state \'S55\'");
                            bool temp128;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(867,out _)\'");
                            this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(867, out temp128);
                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp128);
                            this.Manager.Comment("reaching state \'S63\'");
                            int temp167 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_FindRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker96)), new ExpectedReturn(S02_RowRops_FindRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker111)));
                            if ((temp167 == 0)) {
                                this.Manager.Comment("reaching state \'S76\'");
                                Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp129;
                                this.Manager.Comment("executing step \'call RopQueryRows(Advance,True)\'");
                                temp129 = this.IMS_OXCTABLAdapterInstance.RopQueryRows(((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), true);
                                this.Manager.Checkpoint("MS-OXCTABL_R837");
                                this.Manager.Comment("reaching state \'S90\'");
                                this.Manager.Comment("checking step \'return RopQueryRows/success\'");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp129, "return of RopQueryRows, state S90");
                                this.Manager.Comment("reaching state \'S106\'");
                                bool temp130;
                                this.Manager.Comment("executing step \'call CheckRequirementEnabled(610,out _)\'");
                                this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(610, out temp130);
                                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp130);
                                this.Manager.Comment("reaching state \'S122\'");
                                int temp147 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_FindRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker97)), new ExpectedReturn(S02_RowRops_FindRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker104)));
                                if ((temp147 == 0)) {
                                    this.Manager.Comment("reaching state \'S148\'");
                                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_FindRowSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopQueryRowsResponseChecker12))) != -1)) {
                                        this.Manager.Comment("reaching state \'S176\'");
                                        bool temp131;
                                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(827,out _)\'");
                                        this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(827, out temp131);
                                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp131);
                                        this.Manager.Comment("reaching state \'S200\'");
                                        int temp138 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_FindRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker98)), new ExpectedReturn(S02_RowRops_FindRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker101)));
                                        if ((temp138 == 0)) {
                                            this.Manager.Comment("reaching state \'S236\'");
                                            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp132;
                                            this.Manager.Comment("executing step \'call RopFindRow(Forwards,BOOKMARK_CUSTOM,True)\'");
                                            temp132 = this.IMS_OXCTABLAdapterInstance.RopFindRow(((Microsoft.Protocols.TestSuites.Common.FindRowFlags)(0)), Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_CUSTOM, true);
                                            this.Manager.Checkpoint("MS-OXCTABL_R859");
                                            this.Manager.Comment("reaching state \'S268\'");
                                            this.Manager.Comment("checking step \'return RopFindRow/success\'");
                                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp132, "return of RopFindRow, state S268");
                                            this.Manager.Comment("reaching state \'S300\'");
                                            bool temp133;
                                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(608,out _)\'");
                                            this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(608, out temp133);
                                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp133);
                                            this.Manager.Comment("reaching state \'S332\'");
                                            int temp134 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_FindRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker99)), new ExpectedReturn(S02_RowRops_FindRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker100)));
                                            if ((temp134 == 0)) {
                                                this.Manager.Comment("reaching state \'S388\'");
                                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_FindRowSuccess_TestSuite.RopFindRowResponseInfo, null, new RopFindRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopFindRowResponseChecker48))) != -1)) {
                                                    this.Manager.Comment("reaching state \'S452\'");
                                                }
                                                else {
                                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_FindRowSuccess_TestSuite.RopFindRowResponseInfo, null, new RopFindRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopFindRowResponseChecker48)));
                                                }
                                                goto label46;
                                            }
                                            if ((temp134 == 1)) {
                                                this.Manager.Comment("reaching state \'S389\'");
                                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_FindRowSuccess_TestSuite.RopFindRowResponseInfo, null, new RopFindRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopFindRowResponseChecker49))) != -1)) {
                                                    this.Manager.Comment("reaching state \'S453\'");
                                                }
                                                else {
                                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_FindRowSuccess_TestSuite.RopFindRowResponseInfo, null, new RopFindRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopFindRowResponseChecker49)));
                                                }
                                                goto label46;
                                            }
                                            throw new InvalidOperationException("never reached");
                                        label46:
;
                                            goto label48;
                                        }
                                        if ((temp138 == 1)) {
                                            this.Manager.Comment("reaching state \'S237\'");
                                            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp135;
                                            this.Manager.Comment("executing step \'call RopFindRow(Forwards,BOOKMARK_CUSTOM,True)\'");
                                            temp135 = this.IMS_OXCTABLAdapterInstance.RopFindRow(((Microsoft.Protocols.TestSuites.Common.FindRowFlags)(0)), Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_CUSTOM, true);
                                            this.Manager.Checkpoint("MS-OXCTABL_R859");
                                            this.Manager.Comment("reaching state \'S269\'");
                                            this.Manager.Comment("checking step \'return RopFindRow/success\'");
                                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp135, "return of RopFindRow, state S269");
                                            this.Manager.Comment("reaching state \'S301\'");
                                            bool temp136;
                                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(608,out _)\'");
                                            this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(608, out temp136);
                                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp136);
                                            this.Manager.Comment("reaching state \'S333\'");
                                            int temp137 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_FindRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker102)), new ExpectedReturn(S02_RowRops_FindRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker103)));
                                            if ((temp137 == 0)) {
                                                this.Manager.Comment("reaching state \'S390\'");
                                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_FindRowSuccess_TestSuite.RopFindRowResponseInfo, null, new RopFindRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopFindRowResponseChecker50))) != -1)) {
                                                    this.Manager.Comment("reaching state \'S454\'");
                                                }
                                                else {
                                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_FindRowSuccess_TestSuite.RopFindRowResponseInfo, null, new RopFindRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopFindRowResponseChecker50)));
                                                }
                                                goto label47;
                                            }
                                            if ((temp137 == 1)) {
                                                this.Manager.Comment("reaching state \'S391\'");
                                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_FindRowSuccess_TestSuite.RopFindRowResponseInfo, null, new RopFindRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopFindRowResponseChecker51))) != -1)) {
                                                    this.Manager.Comment("reaching state \'S455\'");
                                                }
                                                else {
                                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_FindRowSuccess_TestSuite.RopFindRowResponseInfo, null, new RopFindRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopFindRowResponseChecker51)));
                                                }
                                                goto label47;
                                            }
                                            throw new InvalidOperationException("never reached");
                                        label47:
;
                                            goto label48;
                                        }
                                        throw new InvalidOperationException("never reached");
                                    label48:
;
                                    }
                                    else {
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_FindRowSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopQueryRowsResponseChecker12)));
                                    }
                                    goto label52;
                                }
                                if ((temp147 == 1)) {
                                    this.Manager.Comment("reaching state \'S149\'");
                                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_FindRowSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopQueryRowsResponseChecker13))) != -1)) {
                                        this.Manager.Comment("reaching state \'S177\'");
                                        bool temp139;
                                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(827,out _)\'");
                                        this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(827, out temp139);
                                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp139);
                                        this.Manager.Comment("reaching state \'S201\'");
                                        int temp146 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_FindRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker105)), new ExpectedReturn(S02_RowRops_FindRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker108)));
                                        if ((temp146 == 0)) {
                                            this.Manager.Comment("reaching state \'S238\'");
                                            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp140;
                                            this.Manager.Comment("executing step \'call RopFindRow(Forwards,BOOKMARK_CUSTOM,True)\'");
                                            temp140 = this.IMS_OXCTABLAdapterInstance.RopFindRow(((Microsoft.Protocols.TestSuites.Common.FindRowFlags)(0)), Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_CUSTOM, true);
                                            this.Manager.Checkpoint("MS-OXCTABL_R859");
                                            this.Manager.Comment("reaching state \'S270\'");
                                            this.Manager.Comment("checking step \'return RopFindRow/success\'");
                                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp140, "return of RopFindRow, state S270");
                                            this.Manager.Comment("reaching state \'S302\'");
                                            bool temp141;
                                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(608,out _)\'");
                                            this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(608, out temp141);
                                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp141);
                                            this.Manager.Comment("reaching state \'S334\'");
                                            int temp142 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_FindRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker106)), new ExpectedReturn(S02_RowRops_FindRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker107)));
                                            if ((temp142 == 0)) {
                                                this.Manager.Comment("reaching state \'S392\'");
                                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_FindRowSuccess_TestSuite.RopFindRowResponseInfo, null, new RopFindRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopFindRowResponseChecker52))) != -1)) {
                                                    this.Manager.Comment("reaching state \'S456\'");
                                                }
                                                else {
                                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_FindRowSuccess_TestSuite.RopFindRowResponseInfo, null, new RopFindRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopFindRowResponseChecker52)));
                                                }
                                                goto label49;
                                            }
                                            if ((temp142 == 1)) {
                                                this.Manager.Comment("reaching state \'S393\'");
                                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_FindRowSuccess_TestSuite.RopFindRowResponseInfo, null, new RopFindRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopFindRowResponseChecker53))) != -1)) {
                                                    this.Manager.Comment("reaching state \'S457\'");
                                                }
                                                else {
                                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_FindRowSuccess_TestSuite.RopFindRowResponseInfo, null, new RopFindRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopFindRowResponseChecker53)));
                                                }
                                                goto label49;
                                            }
                                            throw new InvalidOperationException("never reached");
                                        label49:
;
                                            goto label51;
                                        }
                                        if ((temp146 == 1)) {
                                            this.Manager.Comment("reaching state \'S239\'");
                                            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp143;
                                            this.Manager.Comment("executing step \'call RopFindRow(Forwards,BOOKMARK_CUSTOM,True)\'");
                                            temp143 = this.IMS_OXCTABLAdapterInstance.RopFindRow(((Microsoft.Protocols.TestSuites.Common.FindRowFlags)(0)), Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_CUSTOM, true);
                                            this.Manager.Checkpoint("MS-OXCTABL_R859");
                                            this.Manager.Comment("reaching state \'S271\'");
                                            this.Manager.Comment("checking step \'return RopFindRow/success\'");
                                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp143, "return of RopFindRow, state S271");
                                            this.Manager.Comment("reaching state \'S303\'");
                                            bool temp144;
                                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(608,out _)\'");
                                            this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(608, out temp144);
                                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp144);
                                            this.Manager.Comment("reaching state \'S335\'");
                                            int temp145 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_FindRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker109)), new ExpectedReturn(S02_RowRops_FindRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker110)));
                                            if ((temp145 == 0)) {
                                                this.Manager.Comment("reaching state \'S394\'");
                                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_FindRowSuccess_TestSuite.RopFindRowResponseInfo, null, new RopFindRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopFindRowResponseChecker54))) != -1)) {
                                                    this.Manager.Comment("reaching state \'S458\'");
                                                }
                                                else {
                                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_FindRowSuccess_TestSuite.RopFindRowResponseInfo, null, new RopFindRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopFindRowResponseChecker54)));
                                                }
                                                goto label50;
                                            }
                                            if ((temp145 == 1)) {
                                                this.Manager.Comment("reaching state \'S395\'");
                                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_FindRowSuccess_TestSuite.RopFindRowResponseInfo, null, new RopFindRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopFindRowResponseChecker55))) != -1)) {
                                                    this.Manager.Comment("reaching state \'S459\'");
                                                }
                                                else {
                                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_FindRowSuccess_TestSuite.RopFindRowResponseInfo, null, new RopFindRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopFindRowResponseChecker55)));
                                                }
                                                goto label50;
                                            }
                                            throw new InvalidOperationException("never reached");
                                        label50:
;
                                            goto label51;
                                        }
                                        throw new InvalidOperationException("never reached");
                                    label51:
;
                                    }
                                    else {
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_FindRowSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopQueryRowsResponseChecker13)));
                                    }
                                    goto label52;
                                }
                                throw new InvalidOperationException("never reached");
                            label52:
;
                                goto label60;
                            }
                            if ((temp167 == 1)) {
                                this.Manager.Comment("reaching state \'S77\'");
                                Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp148;
                                this.Manager.Comment("executing step \'call RopQueryRows(Advance,True)\'");
                                temp148 = this.IMS_OXCTABLAdapterInstance.RopQueryRows(((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), true);
                                this.Manager.Checkpoint("MS-OXCTABL_R837");
                                this.Manager.Comment("reaching state \'S91\'");
                                this.Manager.Comment("checking step \'return RopQueryRows/success\'");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp148, "return of RopQueryRows, state S91");
                                this.Manager.Comment("reaching state \'S107\'");
                                bool temp149;
                                this.Manager.Comment("executing step \'call CheckRequirementEnabled(610,out _)\'");
                                this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(610, out temp149);
                                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp149);
                                this.Manager.Comment("reaching state \'S123\'");
                                int temp166 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_FindRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker112)), new ExpectedReturn(S02_RowRops_FindRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker119)));
                                if ((temp166 == 0)) {
                                    this.Manager.Comment("reaching state \'S150\'");
                                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_FindRowSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopQueryRowsResponseChecker14))) != -1)) {
                                        this.Manager.Comment("reaching state \'S178\'");
                                        bool temp150;
                                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(827,out _)\'");
                                        this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(827, out temp150);
                                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp150);
                                        this.Manager.Comment("reaching state \'S202\'");
                                        int temp157 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_FindRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker113)), new ExpectedReturn(S02_RowRops_FindRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker116)));
                                        if ((temp157 == 0)) {
                                            this.Manager.Comment("reaching state \'S240\'");
                                            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp151;
                                            this.Manager.Comment("executing step \'call RopFindRow(Forwards,BOOKMARK_CUSTOM,True)\'");
                                            temp151 = this.IMS_OXCTABLAdapterInstance.RopFindRow(((Microsoft.Protocols.TestSuites.Common.FindRowFlags)(0)), Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_CUSTOM, true);
                                            this.Manager.Checkpoint("MS-OXCTABL_R859");
                                            this.Manager.Comment("reaching state \'S272\'");
                                            this.Manager.Comment("checking step \'return RopFindRow/success\'");
                                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp151, "return of RopFindRow, state S272");
                                            this.Manager.Comment("reaching state \'S304\'");
                                            bool temp152;
                                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(608,out _)\'");
                                            this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(608, out temp152);
                                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp152);
                                            this.Manager.Comment("reaching state \'S336\'");
                                            int temp153 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_FindRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker114)), new ExpectedReturn(S02_RowRops_FindRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker115)));
                                            if ((temp153 == 0)) {
                                                this.Manager.Comment("reaching state \'S396\'");
                                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_FindRowSuccess_TestSuite.RopFindRowResponseInfo, null, new RopFindRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopFindRowResponseChecker56))) != -1)) {
                                                    this.Manager.Comment("reaching state \'S460\'");
                                                }
                                                else {
                                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_FindRowSuccess_TestSuite.RopFindRowResponseInfo, null, new RopFindRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopFindRowResponseChecker56)));
                                                }
                                                goto label53;
                                            }
                                            if ((temp153 == 1)) {
                                                this.Manager.Comment("reaching state \'S397\'");
                                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_FindRowSuccess_TestSuite.RopFindRowResponseInfo, null, new RopFindRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopFindRowResponseChecker57))) != -1)) {
                                                    this.Manager.Comment("reaching state \'S461\'");
                                                }
                                                else {
                                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_FindRowSuccess_TestSuite.RopFindRowResponseInfo, null, new RopFindRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopFindRowResponseChecker57)));
                                                }
                                                goto label53;
                                            }
                                            throw new InvalidOperationException("never reached");
                                        label53:
;
                                            goto label55;
                                        }
                                        if ((temp157 == 1)) {
                                            this.Manager.Comment("reaching state \'S241\'");
                                            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp154;
                                            this.Manager.Comment("executing step \'call RopFindRow(Forwards,BOOKMARK_CUSTOM,True)\'");
                                            temp154 = this.IMS_OXCTABLAdapterInstance.RopFindRow(((Microsoft.Protocols.TestSuites.Common.FindRowFlags)(0)), Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_CUSTOM, true);
                                            this.Manager.Checkpoint("MS-OXCTABL_R859");
                                            this.Manager.Comment("reaching state \'S273\'");
                                            this.Manager.Comment("checking step \'return RopFindRow/success\'");
                                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp154, "return of RopFindRow, state S273");
                                            this.Manager.Comment("reaching state \'S305\'");
                                            bool temp155;
                                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(608,out _)\'");
                                            this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(608, out temp155);
                                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp155);
                                            this.Manager.Comment("reaching state \'S337\'");
                                            int temp156 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_FindRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker117)), new ExpectedReturn(S02_RowRops_FindRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker118)));
                                            if ((temp156 == 0)) {
                                                this.Manager.Comment("reaching state \'S398\'");
                                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_FindRowSuccess_TestSuite.RopFindRowResponseInfo, null, new RopFindRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopFindRowResponseChecker58))) != -1)) {
                                                    this.Manager.Comment("reaching state \'S462\'");
                                                }
                                                else {
                                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_FindRowSuccess_TestSuite.RopFindRowResponseInfo, null, new RopFindRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopFindRowResponseChecker58)));
                                                }
                                                goto label54;
                                            }
                                            if ((temp156 == 1)) {
                                                this.Manager.Comment("reaching state \'S399\'");
                                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_FindRowSuccess_TestSuite.RopFindRowResponseInfo, null, new RopFindRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopFindRowResponseChecker59))) != -1)) {
                                                    this.Manager.Comment("reaching state \'S463\'");
                                                }
                                                else {
                                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_FindRowSuccess_TestSuite.RopFindRowResponseInfo, null, new RopFindRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopFindRowResponseChecker59)));
                                                }
                                                goto label54;
                                            }
                                            throw new InvalidOperationException("never reached");
                                        label54:
;
                                            goto label55;
                                        }
                                        throw new InvalidOperationException("never reached");
                                    label55:
;
                                    }
                                    else {
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_FindRowSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopQueryRowsResponseChecker14)));
                                    }
                                    goto label59;
                                }
                                if ((temp166 == 1)) {
                                    this.Manager.Comment("reaching state \'S151\'");
                                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_FindRowSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopQueryRowsResponseChecker15))) != -1)) {
                                        this.Manager.Comment("reaching state \'S179\'");
                                        bool temp158;
                                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(827,out _)\'");
                                        this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(827, out temp158);
                                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp158);
                                        this.Manager.Comment("reaching state \'S203\'");
                                        int temp165 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_FindRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker120)), new ExpectedReturn(S02_RowRops_FindRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker123)));
                                        if ((temp165 == 0)) {
                                            this.Manager.Comment("reaching state \'S242\'");
                                            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp159;
                                            this.Manager.Comment("executing step \'call RopFindRow(Forwards,BOOKMARK_CUSTOM,True)\'");
                                            temp159 = this.IMS_OXCTABLAdapterInstance.RopFindRow(((Microsoft.Protocols.TestSuites.Common.FindRowFlags)(0)), Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_CUSTOM, true);
                                            this.Manager.Checkpoint("MS-OXCTABL_R859");
                                            this.Manager.Comment("reaching state \'S274\'");
                                            this.Manager.Comment("checking step \'return RopFindRow/success\'");
                                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp159, "return of RopFindRow, state S274");
                                            this.Manager.Comment("reaching state \'S306\'");
                                            bool temp160;
                                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(608,out _)\'");
                                            this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(608, out temp160);
                                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp160);
                                            this.Manager.Comment("reaching state \'S338\'");
                                            int temp161 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_FindRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker121)), new ExpectedReturn(S02_RowRops_FindRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker122)));
                                            if ((temp161 == 0)) {
                                                this.Manager.Comment("reaching state \'S400\'");
                                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_FindRowSuccess_TestSuite.RopFindRowResponseInfo, null, new RopFindRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopFindRowResponseChecker60))) != -1)) {
                                                    this.Manager.Comment("reaching state \'S464\'");
                                                }
                                                else {
                                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_FindRowSuccess_TestSuite.RopFindRowResponseInfo, null, new RopFindRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopFindRowResponseChecker60)));
                                                }
                                                goto label56;
                                            }
                                            if ((temp161 == 1)) {
                                                this.Manager.Comment("reaching state \'S401\'");
                                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_FindRowSuccess_TestSuite.RopFindRowResponseInfo, null, new RopFindRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopFindRowResponseChecker61))) != -1)) {
                                                    this.Manager.Comment("reaching state \'S465\'");
                                                }
                                                else {
                                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_FindRowSuccess_TestSuite.RopFindRowResponseInfo, null, new RopFindRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopFindRowResponseChecker61)));
                                                }
                                                goto label56;
                                            }
                                            throw new InvalidOperationException("never reached");
                                        label56:
;
                                            goto label58;
                                        }
                                        if ((temp165 == 1)) {
                                            this.Manager.Comment("reaching state \'S243\'");
                                            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp162;
                                            this.Manager.Comment("executing step \'call RopFindRow(Forwards,BOOKMARK_CUSTOM,True)\'");
                                            temp162 = this.IMS_OXCTABLAdapterInstance.RopFindRow(((Microsoft.Protocols.TestSuites.Common.FindRowFlags)(0)), Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_CUSTOM, true);
                                            this.Manager.Checkpoint("MS-OXCTABL_R859");
                                            this.Manager.Comment("reaching state \'S275\'");
                                            this.Manager.Comment("checking step \'return RopFindRow/success\'");
                                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp162, "return of RopFindRow, state S275");
                                            this.Manager.Comment("reaching state \'S307\'");
                                            bool temp163;
                                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(608,out _)\'");
                                            this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(608, out temp163);
                                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp163);
                                            this.Manager.Comment("reaching state \'S339\'");
                                            int temp164 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_FindRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker124)), new ExpectedReturn(S02_RowRops_FindRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker125)));
                                            if ((temp164 == 0)) {
                                                this.Manager.Comment("reaching state \'S402\'");
                                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_FindRowSuccess_TestSuite.RopFindRowResponseInfo, null, new RopFindRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopFindRowResponseChecker62))) != -1)) {
                                                    this.Manager.Comment("reaching state \'S466\'");
                                                }
                                                else {
                                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_FindRowSuccess_TestSuite.RopFindRowResponseInfo, null, new RopFindRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopFindRowResponseChecker62)));
                                                }
                                                goto label57;
                                            }
                                            if ((temp164 == 1)) {
                                                this.Manager.Comment("reaching state \'S403\'");
                                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_FindRowSuccess_TestSuite.RopFindRowResponseInfo, null, new RopFindRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopFindRowResponseChecker63))) != -1)) {
                                                    this.Manager.Comment("reaching state \'S467\'");
                                                }
                                                else {
                                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_FindRowSuccess_TestSuite.RopFindRowResponseInfo, null, new RopFindRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopFindRowResponseChecker63)));
                                                }
                                                goto label57;
                                            }
                                            throw new InvalidOperationException("never reached");
                                        label57:
;
                                            goto label58;
                                        }
                                        throw new InvalidOperationException("never reached");
                                    label58:
;
                                    }
                                    else {
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_FindRowSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopQueryRowsResponseChecker15)));
                                    }
                                    goto label59;
                                }
                                throw new InvalidOperationException("never reached");
                            label59:
;
                                goto label60;
                            }
                            throw new InvalidOperationException("never reached");
                        label60:
;
                            goto label61;
                        }
                        throw new InvalidOperationException("never reached");
                    label61:
;
                        goto label62;
                    }
                    throw new InvalidOperationException("never reached");
                label62:
;
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_FindRowSuccess_TestSuite.RopQueryPositionResponseInfo, null, new RopQueryPositionResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopQueryPositionResponseChecker)));
                }
                goto label63;
            }
            throw new InvalidOperationException("never reached");
        label63:
;
            this.Manager.EndTest();
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckMAPIHTTPTransportSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S1");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckMAPIHTTPTransportSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S1");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopQueryPositionResponseChecker(Microsoft.Protocols.TestSuites.MS_OXCTABL.CursorPosition cursorPosition, bool isRowCount) {
            this.Manager.Comment("checking step \'event RopQueryPositionResponse(BEGIN,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.CursorPosition>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.CursorPosition)(0)), cursorPosition, "cursorPosition of RopQueryPositionResponse, state S21");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRowCount, "isRowCount of RopQueryPositionResponse, state S21");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R491");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R491");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S39");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker1(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S47");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker2(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S60");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker3(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S116");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopQueryRowsResponseChecker(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,CREATEBOOKMARK,True," +
                    "True,True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S136");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S136");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S136");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType.CREATEBOOKMARK, ropType, "ropType of RopQueryRowsResponse, state S136");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S136");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S136");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S136");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S136");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S136");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S136");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker4(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S188");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker5(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S308");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopFindRowResponseChecker(Microsoft.Protocols.TestSuites.Common.FindRowFlags findRowFlags, bool isValidRestriction, bool HasRowData, bool isCorrectRowData, bool rowNoLongerVisible, bool isLastSetColumnData) {
            this.Manager.Comment("checking step \'event RopFindRowResponse(Forwards,True,True,True,False,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.FindRowFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.FindRowFlags)(0)), findRowFlags, "findRowFlags of RopFindRowResponse, state S340");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isValidRestriction, "isValidRestriction of RopFindRowResponse, state S340");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, HasRowData, "HasRowData of RopFindRowResponse, state S340");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isCorrectRowData, "isCorrectRowData of RopFindRowResponse, state S340");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, rowNoLongerVisible, "rowNoLongerVisible of RopFindRowResponse, state S340");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isLastSetColumnData, "isLastSetColumnData of RopFindRowResponse, state S340");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R534, MS-OXCTABL_R243, MS-OXCTABL_R540, M" +
                        "S-OXCTABL_R539, MS-OXCTABL_R813, MS-OXCTABL_R824, MS-OXCTABL_R225, MS-OXCTABL_R2" +
                        "39");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R534");
            this.Manager.Checkpoint("MS-OXCTABL_R243");
            this.Manager.Checkpoint("MS-OXCTABL_R540");
            this.Manager.Checkpoint("MS-OXCTABL_R539");
            this.Manager.Checkpoint("MS-OXCTABL_R813");
            this.Manager.Checkpoint("MS-OXCTABL_R824");
            this.Manager.Checkpoint("MS-OXCTABL_R225");
            this.Manager.Checkpoint("MS-OXCTABL_R239");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker6(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S308");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopFindRowResponseChecker1(Microsoft.Protocols.TestSuites.Common.FindRowFlags findRowFlags, bool isValidRestriction, bool HasRowData, bool isCorrectRowData, bool rowNoLongerVisible, bool isLastSetColumnData) {
            this.Manager.Comment("checking step \'event RopFindRowResponse(Forwards,True,True,True,False,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.FindRowFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.FindRowFlags)(0)), findRowFlags, "findRowFlags of RopFindRowResponse, state S341");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isValidRestriction, "isValidRestriction of RopFindRowResponse, state S341");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, HasRowData, "HasRowData of RopFindRowResponse, state S341");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isCorrectRowData, "isCorrectRowData of RopFindRowResponse, state S341");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, rowNoLongerVisible, "rowNoLongerVisible of RopFindRowResponse, state S341");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isLastSetColumnData, "isLastSetColumnData of RopFindRowResponse, state S341");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R534, MS-OXCTABL_R243, MS-OXCTABL_R540, M" +
                        "S-OXCTABL_R539, MS-OXCTABL_R813, MS-OXCTABL_R824, MS-OXCTABL_R225, MS-OXCTABL_R2" +
                        "39");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R534");
            this.Manager.Checkpoint("MS-OXCTABL_R243");
            this.Manager.Checkpoint("MS-OXCTABL_R540");
            this.Manager.Checkpoint("MS-OXCTABL_R539");
            this.Manager.Checkpoint("MS-OXCTABL_R813");
            this.Manager.Checkpoint("MS-OXCTABL_R824");
            this.Manager.Checkpoint("MS-OXCTABL_R225");
            this.Manager.Checkpoint("MS-OXCTABL_R239");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker7(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S188");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker8(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S309");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopFindRowResponseChecker2(Microsoft.Protocols.TestSuites.Common.FindRowFlags findRowFlags, bool isValidRestriction, bool HasRowData, bool isCorrectRowData, bool rowNoLongerVisible, bool isLastSetColumnData) {
            this.Manager.Comment("checking step \'event RopFindRowResponse(Forwards,True,True,True,False,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.FindRowFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.FindRowFlags)(0)), findRowFlags, "findRowFlags of RopFindRowResponse, state S342");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isValidRestriction, "isValidRestriction of RopFindRowResponse, state S342");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, HasRowData, "HasRowData of RopFindRowResponse, state S342");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isCorrectRowData, "isCorrectRowData of RopFindRowResponse, state S342");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, rowNoLongerVisible, "rowNoLongerVisible of RopFindRowResponse, state S342");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isLastSetColumnData, "isLastSetColumnData of RopFindRowResponse, state S342");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R534, MS-OXCTABL_R243, MS-OXCTABL_R540, M" +
                        "S-OXCTABL_R539, MS-OXCTABL_R813, MS-OXCTABL_R824, MS-OXCTABL_R225, MS-OXCTABL_R2" +
                        "39");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R534");
            this.Manager.Checkpoint("MS-OXCTABL_R243");
            this.Manager.Checkpoint("MS-OXCTABL_R540");
            this.Manager.Checkpoint("MS-OXCTABL_R539");
            this.Manager.Checkpoint("MS-OXCTABL_R813");
            this.Manager.Checkpoint("MS-OXCTABL_R824");
            this.Manager.Checkpoint("MS-OXCTABL_R225");
            this.Manager.Checkpoint("MS-OXCTABL_R239");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker9(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S309");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopFindRowResponseChecker3(Microsoft.Protocols.TestSuites.Common.FindRowFlags findRowFlags, bool isValidRestriction, bool HasRowData, bool isCorrectRowData, bool rowNoLongerVisible, bool isLastSetColumnData) {
            this.Manager.Comment("checking step \'event RopFindRowResponse(Forwards,True,True,True,False,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.FindRowFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.FindRowFlags)(0)), findRowFlags, "findRowFlags of RopFindRowResponse, state S343");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isValidRestriction, "isValidRestriction of RopFindRowResponse, state S343");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, HasRowData, "HasRowData of RopFindRowResponse, state S343");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isCorrectRowData, "isCorrectRowData of RopFindRowResponse, state S343");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, rowNoLongerVisible, "rowNoLongerVisible of RopFindRowResponse, state S343");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isLastSetColumnData, "isLastSetColumnData of RopFindRowResponse, state S343");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R534, MS-OXCTABL_R243, MS-OXCTABL_R540, M" +
                        "S-OXCTABL_R539, MS-OXCTABL_R813, MS-OXCTABL_R824, MS-OXCTABL_R225, MS-OXCTABL_R2" +
                        "39");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R534");
            this.Manager.Checkpoint("MS-OXCTABL_R243");
            this.Manager.Checkpoint("MS-OXCTABL_R540");
            this.Manager.Checkpoint("MS-OXCTABL_R539");
            this.Manager.Checkpoint("MS-OXCTABL_R813");
            this.Manager.Checkpoint("MS-OXCTABL_R824");
            this.Manager.Checkpoint("MS-OXCTABL_R225");
            this.Manager.Checkpoint("MS-OXCTABL_R239");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker10(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S116");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopQueryRowsResponseChecker1(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,CREATEBOOKMARK,True," +
                    "True,True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S137");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S137");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S137");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType.CREATEBOOKMARK, ropType, "ropType of RopQueryRowsResponse, state S137");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S137");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S137");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S137");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S137");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S137");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S137");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker11(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S189");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker12(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S310");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopFindRowResponseChecker4(Microsoft.Protocols.TestSuites.Common.FindRowFlags findRowFlags, bool isValidRestriction, bool HasRowData, bool isCorrectRowData, bool rowNoLongerVisible, bool isLastSetColumnData) {
            this.Manager.Comment("checking step \'event RopFindRowResponse(Forwards,True,True,True,False,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.FindRowFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.FindRowFlags)(0)), findRowFlags, "findRowFlags of RopFindRowResponse, state S344");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isValidRestriction, "isValidRestriction of RopFindRowResponse, state S344");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, HasRowData, "HasRowData of RopFindRowResponse, state S344");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isCorrectRowData, "isCorrectRowData of RopFindRowResponse, state S344");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, rowNoLongerVisible, "rowNoLongerVisible of RopFindRowResponse, state S344");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isLastSetColumnData, "isLastSetColumnData of RopFindRowResponse, state S344");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R534, MS-OXCTABL_R243, MS-OXCTABL_R540, M" +
                        "S-OXCTABL_R539, MS-OXCTABL_R813, MS-OXCTABL_R824, MS-OXCTABL_R225, MS-OXCTABL_R2" +
                        "39");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R534");
            this.Manager.Checkpoint("MS-OXCTABL_R243");
            this.Manager.Checkpoint("MS-OXCTABL_R540");
            this.Manager.Checkpoint("MS-OXCTABL_R539");
            this.Manager.Checkpoint("MS-OXCTABL_R813");
            this.Manager.Checkpoint("MS-OXCTABL_R824");
            this.Manager.Checkpoint("MS-OXCTABL_R225");
            this.Manager.Checkpoint("MS-OXCTABL_R239");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker13(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S310");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopFindRowResponseChecker5(Microsoft.Protocols.TestSuites.Common.FindRowFlags findRowFlags, bool isValidRestriction, bool HasRowData, bool isCorrectRowData, bool rowNoLongerVisible, bool isLastSetColumnData) {
            this.Manager.Comment("checking step \'event RopFindRowResponse(Forwards,True,True,True,False,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.FindRowFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.FindRowFlags)(0)), findRowFlags, "findRowFlags of RopFindRowResponse, state S345");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isValidRestriction, "isValidRestriction of RopFindRowResponse, state S345");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, HasRowData, "HasRowData of RopFindRowResponse, state S345");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isCorrectRowData, "isCorrectRowData of RopFindRowResponse, state S345");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, rowNoLongerVisible, "rowNoLongerVisible of RopFindRowResponse, state S345");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isLastSetColumnData, "isLastSetColumnData of RopFindRowResponse, state S345");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R534, MS-OXCTABL_R243, MS-OXCTABL_R540, M" +
                        "S-OXCTABL_R539, MS-OXCTABL_R813, MS-OXCTABL_R824, MS-OXCTABL_R225, MS-OXCTABL_R2" +
                        "39");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R534");
            this.Manager.Checkpoint("MS-OXCTABL_R243");
            this.Manager.Checkpoint("MS-OXCTABL_R540");
            this.Manager.Checkpoint("MS-OXCTABL_R539");
            this.Manager.Checkpoint("MS-OXCTABL_R813");
            this.Manager.Checkpoint("MS-OXCTABL_R824");
            this.Manager.Checkpoint("MS-OXCTABL_R225");
            this.Manager.Checkpoint("MS-OXCTABL_R239");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker14(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S189");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker15(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S311");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopFindRowResponseChecker6(Microsoft.Protocols.TestSuites.Common.FindRowFlags findRowFlags, bool isValidRestriction, bool HasRowData, bool isCorrectRowData, bool rowNoLongerVisible, bool isLastSetColumnData) {
            this.Manager.Comment("checking step \'event RopFindRowResponse(Forwards,True,True,True,False,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.FindRowFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.FindRowFlags)(0)), findRowFlags, "findRowFlags of RopFindRowResponse, state S346");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isValidRestriction, "isValidRestriction of RopFindRowResponse, state S346");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, HasRowData, "HasRowData of RopFindRowResponse, state S346");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isCorrectRowData, "isCorrectRowData of RopFindRowResponse, state S346");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, rowNoLongerVisible, "rowNoLongerVisible of RopFindRowResponse, state S346");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isLastSetColumnData, "isLastSetColumnData of RopFindRowResponse, state S346");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R534, MS-OXCTABL_R243, MS-OXCTABL_R540, M" +
                        "S-OXCTABL_R539, MS-OXCTABL_R813, MS-OXCTABL_R824, MS-OXCTABL_R225, MS-OXCTABL_R2" +
                        "39");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R534");
            this.Manager.Checkpoint("MS-OXCTABL_R243");
            this.Manager.Checkpoint("MS-OXCTABL_R540");
            this.Manager.Checkpoint("MS-OXCTABL_R539");
            this.Manager.Checkpoint("MS-OXCTABL_R813");
            this.Manager.Checkpoint("MS-OXCTABL_R824");
            this.Manager.Checkpoint("MS-OXCTABL_R225");
            this.Manager.Checkpoint("MS-OXCTABL_R239");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker16(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S311");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopFindRowResponseChecker7(Microsoft.Protocols.TestSuites.Common.FindRowFlags findRowFlags, bool isValidRestriction, bool HasRowData, bool isCorrectRowData, bool rowNoLongerVisible, bool isLastSetColumnData) {
            this.Manager.Comment("checking step \'event RopFindRowResponse(Forwards,True,True,True,False,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.FindRowFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.FindRowFlags)(0)), findRowFlags, "findRowFlags of RopFindRowResponse, state S347");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isValidRestriction, "isValidRestriction of RopFindRowResponse, state S347");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, HasRowData, "HasRowData of RopFindRowResponse, state S347");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isCorrectRowData, "isCorrectRowData of RopFindRowResponse, state S347");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, rowNoLongerVisible, "rowNoLongerVisible of RopFindRowResponse, state S347");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isLastSetColumnData, "isLastSetColumnData of RopFindRowResponse, state S347");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R534, MS-OXCTABL_R243, MS-OXCTABL_R540, M" +
                        "S-OXCTABL_R539, MS-OXCTABL_R813, MS-OXCTABL_R824, MS-OXCTABL_R225, MS-OXCTABL_R2" +
                        "39");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R534");
            this.Manager.Checkpoint("MS-OXCTABL_R243");
            this.Manager.Checkpoint("MS-OXCTABL_R540");
            this.Manager.Checkpoint("MS-OXCTABL_R539");
            this.Manager.Checkpoint("MS-OXCTABL_R813");
            this.Manager.Checkpoint("MS-OXCTABL_R824");
            this.Manager.Checkpoint("MS-OXCTABL_R225");
            this.Manager.Checkpoint("MS-OXCTABL_R239");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker17(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S60");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker18(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S117");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopQueryRowsResponseChecker2(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,CREATEBOOKMARK,True," +
                    "True,True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S138");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S138");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S138");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType.CREATEBOOKMARK, ropType, "ropType of RopQueryRowsResponse, state S138");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S138");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S138");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S138");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S138");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S138");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S138");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker19(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S190");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker20(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S312");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopFindRowResponseChecker8(Microsoft.Protocols.TestSuites.Common.FindRowFlags findRowFlags, bool isValidRestriction, bool HasRowData, bool isCorrectRowData, bool rowNoLongerVisible, bool isLastSetColumnData) {
            this.Manager.Comment("checking step \'event RopFindRowResponse(Forwards,True,True,True,False,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.FindRowFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.FindRowFlags)(0)), findRowFlags, "findRowFlags of RopFindRowResponse, state S348");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isValidRestriction, "isValidRestriction of RopFindRowResponse, state S348");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, HasRowData, "HasRowData of RopFindRowResponse, state S348");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isCorrectRowData, "isCorrectRowData of RopFindRowResponse, state S348");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, rowNoLongerVisible, "rowNoLongerVisible of RopFindRowResponse, state S348");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isLastSetColumnData, "isLastSetColumnData of RopFindRowResponse, state S348");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R534, MS-OXCTABL_R243, MS-OXCTABL_R540, M" +
                        "S-OXCTABL_R539, MS-OXCTABL_R813, MS-OXCTABL_R824, MS-OXCTABL_R225, MS-OXCTABL_R2" +
                        "39");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R534");
            this.Manager.Checkpoint("MS-OXCTABL_R243");
            this.Manager.Checkpoint("MS-OXCTABL_R540");
            this.Manager.Checkpoint("MS-OXCTABL_R539");
            this.Manager.Checkpoint("MS-OXCTABL_R813");
            this.Manager.Checkpoint("MS-OXCTABL_R824");
            this.Manager.Checkpoint("MS-OXCTABL_R225");
            this.Manager.Checkpoint("MS-OXCTABL_R239");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker21(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S312");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopFindRowResponseChecker9(Microsoft.Protocols.TestSuites.Common.FindRowFlags findRowFlags, bool isValidRestriction, bool HasRowData, bool isCorrectRowData, bool rowNoLongerVisible, bool isLastSetColumnData) {
            this.Manager.Comment("checking step \'event RopFindRowResponse(Forwards,True,True,True,False,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.FindRowFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.FindRowFlags)(0)), findRowFlags, "findRowFlags of RopFindRowResponse, state S349");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isValidRestriction, "isValidRestriction of RopFindRowResponse, state S349");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, HasRowData, "HasRowData of RopFindRowResponse, state S349");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isCorrectRowData, "isCorrectRowData of RopFindRowResponse, state S349");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, rowNoLongerVisible, "rowNoLongerVisible of RopFindRowResponse, state S349");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isLastSetColumnData, "isLastSetColumnData of RopFindRowResponse, state S349");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R534, MS-OXCTABL_R243, MS-OXCTABL_R540, M" +
                        "S-OXCTABL_R539, MS-OXCTABL_R813, MS-OXCTABL_R824, MS-OXCTABL_R225, MS-OXCTABL_R2" +
                        "39");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R534");
            this.Manager.Checkpoint("MS-OXCTABL_R243");
            this.Manager.Checkpoint("MS-OXCTABL_R540");
            this.Manager.Checkpoint("MS-OXCTABL_R539");
            this.Manager.Checkpoint("MS-OXCTABL_R813");
            this.Manager.Checkpoint("MS-OXCTABL_R824");
            this.Manager.Checkpoint("MS-OXCTABL_R225");
            this.Manager.Checkpoint("MS-OXCTABL_R239");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker22(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S190");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker23(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S313");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopFindRowResponseChecker10(Microsoft.Protocols.TestSuites.Common.FindRowFlags findRowFlags, bool isValidRestriction, bool HasRowData, bool isCorrectRowData, bool rowNoLongerVisible, bool isLastSetColumnData) {
            this.Manager.Comment("checking step \'event RopFindRowResponse(Forwards,True,True,True,False,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.FindRowFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.FindRowFlags)(0)), findRowFlags, "findRowFlags of RopFindRowResponse, state S350");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isValidRestriction, "isValidRestriction of RopFindRowResponse, state S350");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, HasRowData, "HasRowData of RopFindRowResponse, state S350");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isCorrectRowData, "isCorrectRowData of RopFindRowResponse, state S350");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, rowNoLongerVisible, "rowNoLongerVisible of RopFindRowResponse, state S350");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isLastSetColumnData, "isLastSetColumnData of RopFindRowResponse, state S350");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R534, MS-OXCTABL_R243, MS-OXCTABL_R540, M" +
                        "S-OXCTABL_R539, MS-OXCTABL_R813, MS-OXCTABL_R824, MS-OXCTABL_R225, MS-OXCTABL_R2" +
                        "39");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R534");
            this.Manager.Checkpoint("MS-OXCTABL_R243");
            this.Manager.Checkpoint("MS-OXCTABL_R540");
            this.Manager.Checkpoint("MS-OXCTABL_R539");
            this.Manager.Checkpoint("MS-OXCTABL_R813");
            this.Manager.Checkpoint("MS-OXCTABL_R824");
            this.Manager.Checkpoint("MS-OXCTABL_R225");
            this.Manager.Checkpoint("MS-OXCTABL_R239");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker24(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S313");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopFindRowResponseChecker11(Microsoft.Protocols.TestSuites.Common.FindRowFlags findRowFlags, bool isValidRestriction, bool HasRowData, bool isCorrectRowData, bool rowNoLongerVisible, bool isLastSetColumnData) {
            this.Manager.Comment("checking step \'event RopFindRowResponse(Forwards,True,True,True,False,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.FindRowFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.FindRowFlags)(0)), findRowFlags, "findRowFlags of RopFindRowResponse, state S351");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isValidRestriction, "isValidRestriction of RopFindRowResponse, state S351");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, HasRowData, "HasRowData of RopFindRowResponse, state S351");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isCorrectRowData, "isCorrectRowData of RopFindRowResponse, state S351");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, rowNoLongerVisible, "rowNoLongerVisible of RopFindRowResponse, state S351");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isLastSetColumnData, "isLastSetColumnData of RopFindRowResponse, state S351");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R534, MS-OXCTABL_R243, MS-OXCTABL_R540, M" +
                        "S-OXCTABL_R539, MS-OXCTABL_R813, MS-OXCTABL_R824, MS-OXCTABL_R225, MS-OXCTABL_R2" +
                        "39");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R534");
            this.Manager.Checkpoint("MS-OXCTABL_R243");
            this.Manager.Checkpoint("MS-OXCTABL_R540");
            this.Manager.Checkpoint("MS-OXCTABL_R539");
            this.Manager.Checkpoint("MS-OXCTABL_R813");
            this.Manager.Checkpoint("MS-OXCTABL_R824");
            this.Manager.Checkpoint("MS-OXCTABL_R225");
            this.Manager.Checkpoint("MS-OXCTABL_R239");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker25(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S117");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopQueryRowsResponseChecker3(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,CREATEBOOKMARK,True," +
                    "True,True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S139");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S139");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S139");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType.CREATEBOOKMARK, ropType, "ropType of RopQueryRowsResponse, state S139");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S139");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S139");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S139");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S139");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S139");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S139");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker26(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S191");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker27(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S314");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopFindRowResponseChecker12(Microsoft.Protocols.TestSuites.Common.FindRowFlags findRowFlags, bool isValidRestriction, bool HasRowData, bool isCorrectRowData, bool rowNoLongerVisible, bool isLastSetColumnData) {
            this.Manager.Comment("checking step \'event RopFindRowResponse(Forwards,True,True,True,False,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.FindRowFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.FindRowFlags)(0)), findRowFlags, "findRowFlags of RopFindRowResponse, state S352");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isValidRestriction, "isValidRestriction of RopFindRowResponse, state S352");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, HasRowData, "HasRowData of RopFindRowResponse, state S352");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isCorrectRowData, "isCorrectRowData of RopFindRowResponse, state S352");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, rowNoLongerVisible, "rowNoLongerVisible of RopFindRowResponse, state S352");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isLastSetColumnData, "isLastSetColumnData of RopFindRowResponse, state S352");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R534, MS-OXCTABL_R243, MS-OXCTABL_R540, M" +
                        "S-OXCTABL_R539, MS-OXCTABL_R813, MS-OXCTABL_R824, MS-OXCTABL_R225, MS-OXCTABL_R2" +
                        "39");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R534");
            this.Manager.Checkpoint("MS-OXCTABL_R243");
            this.Manager.Checkpoint("MS-OXCTABL_R540");
            this.Manager.Checkpoint("MS-OXCTABL_R539");
            this.Manager.Checkpoint("MS-OXCTABL_R813");
            this.Manager.Checkpoint("MS-OXCTABL_R824");
            this.Manager.Checkpoint("MS-OXCTABL_R225");
            this.Manager.Checkpoint("MS-OXCTABL_R239");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker28(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S314");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopFindRowResponseChecker13(Microsoft.Protocols.TestSuites.Common.FindRowFlags findRowFlags, bool isValidRestriction, bool HasRowData, bool isCorrectRowData, bool rowNoLongerVisible, bool isLastSetColumnData) {
            this.Manager.Comment("checking step \'event RopFindRowResponse(Forwards,True,True,True,False,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.FindRowFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.FindRowFlags)(0)), findRowFlags, "findRowFlags of RopFindRowResponse, state S353");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isValidRestriction, "isValidRestriction of RopFindRowResponse, state S353");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, HasRowData, "HasRowData of RopFindRowResponse, state S353");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isCorrectRowData, "isCorrectRowData of RopFindRowResponse, state S353");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, rowNoLongerVisible, "rowNoLongerVisible of RopFindRowResponse, state S353");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isLastSetColumnData, "isLastSetColumnData of RopFindRowResponse, state S353");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R534, MS-OXCTABL_R243, MS-OXCTABL_R540, M" +
                        "S-OXCTABL_R539, MS-OXCTABL_R813, MS-OXCTABL_R824, MS-OXCTABL_R225, MS-OXCTABL_R2" +
                        "39");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R534");
            this.Manager.Checkpoint("MS-OXCTABL_R243");
            this.Manager.Checkpoint("MS-OXCTABL_R540");
            this.Manager.Checkpoint("MS-OXCTABL_R539");
            this.Manager.Checkpoint("MS-OXCTABL_R813");
            this.Manager.Checkpoint("MS-OXCTABL_R824");
            this.Manager.Checkpoint("MS-OXCTABL_R225");
            this.Manager.Checkpoint("MS-OXCTABL_R239");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker29(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S191");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker30(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S315");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopFindRowResponseChecker14(Microsoft.Protocols.TestSuites.Common.FindRowFlags findRowFlags, bool isValidRestriction, bool HasRowData, bool isCorrectRowData, bool rowNoLongerVisible, bool isLastSetColumnData) {
            this.Manager.Comment("checking step \'event RopFindRowResponse(Forwards,True,True,True,False,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.FindRowFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.FindRowFlags)(0)), findRowFlags, "findRowFlags of RopFindRowResponse, state S354");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isValidRestriction, "isValidRestriction of RopFindRowResponse, state S354");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, HasRowData, "HasRowData of RopFindRowResponse, state S354");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isCorrectRowData, "isCorrectRowData of RopFindRowResponse, state S354");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, rowNoLongerVisible, "rowNoLongerVisible of RopFindRowResponse, state S354");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isLastSetColumnData, "isLastSetColumnData of RopFindRowResponse, state S354");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R534, MS-OXCTABL_R243, MS-OXCTABL_R540, M" +
                        "S-OXCTABL_R539, MS-OXCTABL_R813, MS-OXCTABL_R824, MS-OXCTABL_R225, MS-OXCTABL_R2" +
                        "39");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R534");
            this.Manager.Checkpoint("MS-OXCTABL_R243");
            this.Manager.Checkpoint("MS-OXCTABL_R540");
            this.Manager.Checkpoint("MS-OXCTABL_R539");
            this.Manager.Checkpoint("MS-OXCTABL_R813");
            this.Manager.Checkpoint("MS-OXCTABL_R824");
            this.Manager.Checkpoint("MS-OXCTABL_R225");
            this.Manager.Checkpoint("MS-OXCTABL_R239");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker31(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S315");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopFindRowResponseChecker15(Microsoft.Protocols.TestSuites.Common.FindRowFlags findRowFlags, bool isValidRestriction, bool HasRowData, bool isCorrectRowData, bool rowNoLongerVisible, bool isLastSetColumnData) {
            this.Manager.Comment("checking step \'event RopFindRowResponse(Forwards,True,True,True,False,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.FindRowFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.FindRowFlags)(0)), findRowFlags, "findRowFlags of RopFindRowResponse, state S355");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isValidRestriction, "isValidRestriction of RopFindRowResponse, state S355");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, HasRowData, "HasRowData of RopFindRowResponse, state S355");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isCorrectRowData, "isCorrectRowData of RopFindRowResponse, state S355");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, rowNoLongerVisible, "rowNoLongerVisible of RopFindRowResponse, state S355");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isLastSetColumnData, "isLastSetColumnData of RopFindRowResponse, state S355");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R534, MS-OXCTABL_R243, MS-OXCTABL_R540, M" +
                        "S-OXCTABL_R539, MS-OXCTABL_R813, MS-OXCTABL_R824, MS-OXCTABL_R225, MS-OXCTABL_R2" +
                        "39");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R534");
            this.Manager.Checkpoint("MS-OXCTABL_R243");
            this.Manager.Checkpoint("MS-OXCTABL_R540");
            this.Manager.Checkpoint("MS-OXCTABL_R539");
            this.Manager.Checkpoint("MS-OXCTABL_R813");
            this.Manager.Checkpoint("MS-OXCTABL_R824");
            this.Manager.Checkpoint("MS-OXCTABL_R225");
            this.Manager.Checkpoint("MS-OXCTABL_R239");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker32(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S47");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker33(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S61");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker34(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S118");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopQueryRowsResponseChecker4(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,CREATEBOOKMARK,True," +
                    "True,True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S140");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S140");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S140");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType.CREATEBOOKMARK, ropType, "ropType of RopQueryRowsResponse, state S140");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S140");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S140");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S140");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S140");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S140");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S140");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker35(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S192");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker36(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S316");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopFindRowResponseChecker16(Microsoft.Protocols.TestSuites.Common.FindRowFlags findRowFlags, bool isValidRestriction, bool HasRowData, bool isCorrectRowData, bool rowNoLongerVisible, bool isLastSetColumnData) {
            this.Manager.Comment("checking step \'event RopFindRowResponse(Forwards,True,True,True,False,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.FindRowFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.FindRowFlags)(0)), findRowFlags, "findRowFlags of RopFindRowResponse, state S356");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isValidRestriction, "isValidRestriction of RopFindRowResponse, state S356");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, HasRowData, "HasRowData of RopFindRowResponse, state S356");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isCorrectRowData, "isCorrectRowData of RopFindRowResponse, state S356");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, rowNoLongerVisible, "rowNoLongerVisible of RopFindRowResponse, state S356");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isLastSetColumnData, "isLastSetColumnData of RopFindRowResponse, state S356");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R534, MS-OXCTABL_R243, MS-OXCTABL_R540, M" +
                        "S-OXCTABL_R539, MS-OXCTABL_R813, MS-OXCTABL_R824, MS-OXCTABL_R225, MS-OXCTABL_R2" +
                        "39");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R534");
            this.Manager.Checkpoint("MS-OXCTABL_R243");
            this.Manager.Checkpoint("MS-OXCTABL_R540");
            this.Manager.Checkpoint("MS-OXCTABL_R539");
            this.Manager.Checkpoint("MS-OXCTABL_R813");
            this.Manager.Checkpoint("MS-OXCTABL_R824");
            this.Manager.Checkpoint("MS-OXCTABL_R225");
            this.Manager.Checkpoint("MS-OXCTABL_R239");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker37(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S316");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopFindRowResponseChecker17(Microsoft.Protocols.TestSuites.Common.FindRowFlags findRowFlags, bool isValidRestriction, bool HasRowData, bool isCorrectRowData, bool rowNoLongerVisible, bool isLastSetColumnData) {
            this.Manager.Comment("checking step \'event RopFindRowResponse(Forwards,True,True,True,False,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.FindRowFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.FindRowFlags)(0)), findRowFlags, "findRowFlags of RopFindRowResponse, state S357");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isValidRestriction, "isValidRestriction of RopFindRowResponse, state S357");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, HasRowData, "HasRowData of RopFindRowResponse, state S357");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isCorrectRowData, "isCorrectRowData of RopFindRowResponse, state S357");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, rowNoLongerVisible, "rowNoLongerVisible of RopFindRowResponse, state S357");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isLastSetColumnData, "isLastSetColumnData of RopFindRowResponse, state S357");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R534, MS-OXCTABL_R243, MS-OXCTABL_R540, M" +
                        "S-OXCTABL_R539, MS-OXCTABL_R813, MS-OXCTABL_R824, MS-OXCTABL_R225, MS-OXCTABL_R2" +
                        "39");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R534");
            this.Manager.Checkpoint("MS-OXCTABL_R243");
            this.Manager.Checkpoint("MS-OXCTABL_R540");
            this.Manager.Checkpoint("MS-OXCTABL_R539");
            this.Manager.Checkpoint("MS-OXCTABL_R813");
            this.Manager.Checkpoint("MS-OXCTABL_R824");
            this.Manager.Checkpoint("MS-OXCTABL_R225");
            this.Manager.Checkpoint("MS-OXCTABL_R239");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker38(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S192");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker39(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S317");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopFindRowResponseChecker18(Microsoft.Protocols.TestSuites.Common.FindRowFlags findRowFlags, bool isValidRestriction, bool HasRowData, bool isCorrectRowData, bool rowNoLongerVisible, bool isLastSetColumnData) {
            this.Manager.Comment("checking step \'event RopFindRowResponse(Forwards,True,True,True,False,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.FindRowFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.FindRowFlags)(0)), findRowFlags, "findRowFlags of RopFindRowResponse, state S358");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isValidRestriction, "isValidRestriction of RopFindRowResponse, state S358");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, HasRowData, "HasRowData of RopFindRowResponse, state S358");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isCorrectRowData, "isCorrectRowData of RopFindRowResponse, state S358");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, rowNoLongerVisible, "rowNoLongerVisible of RopFindRowResponse, state S358");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isLastSetColumnData, "isLastSetColumnData of RopFindRowResponse, state S358");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R534, MS-OXCTABL_R243, MS-OXCTABL_R540, M" +
                        "S-OXCTABL_R539, MS-OXCTABL_R813, MS-OXCTABL_R824, MS-OXCTABL_R225, MS-OXCTABL_R2" +
                        "39");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R534");
            this.Manager.Checkpoint("MS-OXCTABL_R243");
            this.Manager.Checkpoint("MS-OXCTABL_R540");
            this.Manager.Checkpoint("MS-OXCTABL_R539");
            this.Manager.Checkpoint("MS-OXCTABL_R813");
            this.Manager.Checkpoint("MS-OXCTABL_R824");
            this.Manager.Checkpoint("MS-OXCTABL_R225");
            this.Manager.Checkpoint("MS-OXCTABL_R239");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker40(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S317");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopFindRowResponseChecker19(Microsoft.Protocols.TestSuites.Common.FindRowFlags findRowFlags, bool isValidRestriction, bool HasRowData, bool isCorrectRowData, bool rowNoLongerVisible, bool isLastSetColumnData) {
            this.Manager.Comment("checking step \'event RopFindRowResponse(Forwards,True,True,True,False,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.FindRowFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.FindRowFlags)(0)), findRowFlags, "findRowFlags of RopFindRowResponse, state S359");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isValidRestriction, "isValidRestriction of RopFindRowResponse, state S359");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, HasRowData, "HasRowData of RopFindRowResponse, state S359");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isCorrectRowData, "isCorrectRowData of RopFindRowResponse, state S359");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, rowNoLongerVisible, "rowNoLongerVisible of RopFindRowResponse, state S359");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isLastSetColumnData, "isLastSetColumnData of RopFindRowResponse, state S359");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R534, MS-OXCTABL_R243, MS-OXCTABL_R540, M" +
                        "S-OXCTABL_R539, MS-OXCTABL_R813, MS-OXCTABL_R824, MS-OXCTABL_R225, MS-OXCTABL_R2" +
                        "39");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R534");
            this.Manager.Checkpoint("MS-OXCTABL_R243");
            this.Manager.Checkpoint("MS-OXCTABL_R540");
            this.Manager.Checkpoint("MS-OXCTABL_R539");
            this.Manager.Checkpoint("MS-OXCTABL_R813");
            this.Manager.Checkpoint("MS-OXCTABL_R824");
            this.Manager.Checkpoint("MS-OXCTABL_R225");
            this.Manager.Checkpoint("MS-OXCTABL_R239");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker41(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S118");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopQueryRowsResponseChecker5(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,CREATEBOOKMARK,True," +
                    "True,True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S141");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S141");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S141");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType.CREATEBOOKMARK, ropType, "ropType of RopQueryRowsResponse, state S141");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S141");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S141");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S141");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S141");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S141");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S141");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker42(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S193");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker43(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S318");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopFindRowResponseChecker20(Microsoft.Protocols.TestSuites.Common.FindRowFlags findRowFlags, bool isValidRestriction, bool HasRowData, bool isCorrectRowData, bool rowNoLongerVisible, bool isLastSetColumnData) {
            this.Manager.Comment("checking step \'event RopFindRowResponse(Forwards,True,True,True,False,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.FindRowFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.FindRowFlags)(0)), findRowFlags, "findRowFlags of RopFindRowResponse, state S360");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isValidRestriction, "isValidRestriction of RopFindRowResponse, state S360");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, HasRowData, "HasRowData of RopFindRowResponse, state S360");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isCorrectRowData, "isCorrectRowData of RopFindRowResponse, state S360");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, rowNoLongerVisible, "rowNoLongerVisible of RopFindRowResponse, state S360");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isLastSetColumnData, "isLastSetColumnData of RopFindRowResponse, state S360");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R534, MS-OXCTABL_R243, MS-OXCTABL_R540, M" +
                        "S-OXCTABL_R539, MS-OXCTABL_R813, MS-OXCTABL_R824, MS-OXCTABL_R225, MS-OXCTABL_R2" +
                        "39");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R534");
            this.Manager.Checkpoint("MS-OXCTABL_R243");
            this.Manager.Checkpoint("MS-OXCTABL_R540");
            this.Manager.Checkpoint("MS-OXCTABL_R539");
            this.Manager.Checkpoint("MS-OXCTABL_R813");
            this.Manager.Checkpoint("MS-OXCTABL_R824");
            this.Manager.Checkpoint("MS-OXCTABL_R225");
            this.Manager.Checkpoint("MS-OXCTABL_R239");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker44(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S318");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopFindRowResponseChecker21(Microsoft.Protocols.TestSuites.Common.FindRowFlags findRowFlags, bool isValidRestriction, bool HasRowData, bool isCorrectRowData, bool rowNoLongerVisible, bool isLastSetColumnData) {
            this.Manager.Comment("checking step \'event RopFindRowResponse(Forwards,True,True,True,False,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.FindRowFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.FindRowFlags)(0)), findRowFlags, "findRowFlags of RopFindRowResponse, state S361");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isValidRestriction, "isValidRestriction of RopFindRowResponse, state S361");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, HasRowData, "HasRowData of RopFindRowResponse, state S361");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isCorrectRowData, "isCorrectRowData of RopFindRowResponse, state S361");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, rowNoLongerVisible, "rowNoLongerVisible of RopFindRowResponse, state S361");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isLastSetColumnData, "isLastSetColumnData of RopFindRowResponse, state S361");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R534, MS-OXCTABL_R243, MS-OXCTABL_R540, M" +
                        "S-OXCTABL_R539, MS-OXCTABL_R813, MS-OXCTABL_R824, MS-OXCTABL_R225, MS-OXCTABL_R2" +
                        "39");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R534");
            this.Manager.Checkpoint("MS-OXCTABL_R243");
            this.Manager.Checkpoint("MS-OXCTABL_R540");
            this.Manager.Checkpoint("MS-OXCTABL_R539");
            this.Manager.Checkpoint("MS-OXCTABL_R813");
            this.Manager.Checkpoint("MS-OXCTABL_R824");
            this.Manager.Checkpoint("MS-OXCTABL_R225");
            this.Manager.Checkpoint("MS-OXCTABL_R239");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker45(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S193");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker46(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S319");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopFindRowResponseChecker22(Microsoft.Protocols.TestSuites.Common.FindRowFlags findRowFlags, bool isValidRestriction, bool HasRowData, bool isCorrectRowData, bool rowNoLongerVisible, bool isLastSetColumnData) {
            this.Manager.Comment("checking step \'event RopFindRowResponse(Forwards,True,True,True,False,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.FindRowFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.FindRowFlags)(0)), findRowFlags, "findRowFlags of RopFindRowResponse, state S362");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isValidRestriction, "isValidRestriction of RopFindRowResponse, state S362");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, HasRowData, "HasRowData of RopFindRowResponse, state S362");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isCorrectRowData, "isCorrectRowData of RopFindRowResponse, state S362");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, rowNoLongerVisible, "rowNoLongerVisible of RopFindRowResponse, state S362");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isLastSetColumnData, "isLastSetColumnData of RopFindRowResponse, state S362");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R534, MS-OXCTABL_R243, MS-OXCTABL_R540, M" +
                        "S-OXCTABL_R539, MS-OXCTABL_R813, MS-OXCTABL_R824, MS-OXCTABL_R225, MS-OXCTABL_R2" +
                        "39");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R534");
            this.Manager.Checkpoint("MS-OXCTABL_R243");
            this.Manager.Checkpoint("MS-OXCTABL_R540");
            this.Manager.Checkpoint("MS-OXCTABL_R539");
            this.Manager.Checkpoint("MS-OXCTABL_R813");
            this.Manager.Checkpoint("MS-OXCTABL_R824");
            this.Manager.Checkpoint("MS-OXCTABL_R225");
            this.Manager.Checkpoint("MS-OXCTABL_R239");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker47(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S319");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopFindRowResponseChecker23(Microsoft.Protocols.TestSuites.Common.FindRowFlags findRowFlags, bool isValidRestriction, bool HasRowData, bool isCorrectRowData, bool rowNoLongerVisible, bool isLastSetColumnData) {
            this.Manager.Comment("checking step \'event RopFindRowResponse(Forwards,True,True,True,False,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.FindRowFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.FindRowFlags)(0)), findRowFlags, "findRowFlags of RopFindRowResponse, state S363");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isValidRestriction, "isValidRestriction of RopFindRowResponse, state S363");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, HasRowData, "HasRowData of RopFindRowResponse, state S363");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isCorrectRowData, "isCorrectRowData of RopFindRowResponse, state S363");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, rowNoLongerVisible, "rowNoLongerVisible of RopFindRowResponse, state S363");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isLastSetColumnData, "isLastSetColumnData of RopFindRowResponse, state S363");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R534, MS-OXCTABL_R243, MS-OXCTABL_R540, M" +
                        "S-OXCTABL_R539, MS-OXCTABL_R813, MS-OXCTABL_R824, MS-OXCTABL_R225, MS-OXCTABL_R2" +
                        "39");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R534");
            this.Manager.Checkpoint("MS-OXCTABL_R243");
            this.Manager.Checkpoint("MS-OXCTABL_R540");
            this.Manager.Checkpoint("MS-OXCTABL_R539");
            this.Manager.Checkpoint("MS-OXCTABL_R813");
            this.Manager.Checkpoint("MS-OXCTABL_R824");
            this.Manager.Checkpoint("MS-OXCTABL_R225");
            this.Manager.Checkpoint("MS-OXCTABL_R239");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker48(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S61");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker49(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S119");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopQueryRowsResponseChecker6(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,CREATEBOOKMARK,True," +
                    "True,True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S142");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S142");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S142");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType.CREATEBOOKMARK, ropType, "ropType of RopQueryRowsResponse, state S142");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S142");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S142");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S142");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S142");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S142");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S142");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker50(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S194");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker51(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S320");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopFindRowResponseChecker24(Microsoft.Protocols.TestSuites.Common.FindRowFlags findRowFlags, bool isValidRestriction, bool HasRowData, bool isCorrectRowData, bool rowNoLongerVisible, bool isLastSetColumnData) {
            this.Manager.Comment("checking step \'event RopFindRowResponse(Forwards,True,True,True,False,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.FindRowFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.FindRowFlags)(0)), findRowFlags, "findRowFlags of RopFindRowResponse, state S364");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isValidRestriction, "isValidRestriction of RopFindRowResponse, state S364");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, HasRowData, "HasRowData of RopFindRowResponse, state S364");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isCorrectRowData, "isCorrectRowData of RopFindRowResponse, state S364");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, rowNoLongerVisible, "rowNoLongerVisible of RopFindRowResponse, state S364");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isLastSetColumnData, "isLastSetColumnData of RopFindRowResponse, state S364");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R534, MS-OXCTABL_R243, MS-OXCTABL_R540, M" +
                        "S-OXCTABL_R539, MS-OXCTABL_R813, MS-OXCTABL_R824, MS-OXCTABL_R225, MS-OXCTABL_R2" +
                        "39");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R534");
            this.Manager.Checkpoint("MS-OXCTABL_R243");
            this.Manager.Checkpoint("MS-OXCTABL_R540");
            this.Manager.Checkpoint("MS-OXCTABL_R539");
            this.Manager.Checkpoint("MS-OXCTABL_R813");
            this.Manager.Checkpoint("MS-OXCTABL_R824");
            this.Manager.Checkpoint("MS-OXCTABL_R225");
            this.Manager.Checkpoint("MS-OXCTABL_R239");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker52(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S320");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopFindRowResponseChecker25(Microsoft.Protocols.TestSuites.Common.FindRowFlags findRowFlags, bool isValidRestriction, bool HasRowData, bool isCorrectRowData, bool rowNoLongerVisible, bool isLastSetColumnData) {
            this.Manager.Comment("checking step \'event RopFindRowResponse(Forwards,True,True,True,False,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.FindRowFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.FindRowFlags)(0)), findRowFlags, "findRowFlags of RopFindRowResponse, state S365");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isValidRestriction, "isValidRestriction of RopFindRowResponse, state S365");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, HasRowData, "HasRowData of RopFindRowResponse, state S365");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isCorrectRowData, "isCorrectRowData of RopFindRowResponse, state S365");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, rowNoLongerVisible, "rowNoLongerVisible of RopFindRowResponse, state S365");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isLastSetColumnData, "isLastSetColumnData of RopFindRowResponse, state S365");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R534, MS-OXCTABL_R243, MS-OXCTABL_R540, M" +
                        "S-OXCTABL_R539, MS-OXCTABL_R813, MS-OXCTABL_R824, MS-OXCTABL_R225, MS-OXCTABL_R2" +
                        "39");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R534");
            this.Manager.Checkpoint("MS-OXCTABL_R243");
            this.Manager.Checkpoint("MS-OXCTABL_R540");
            this.Manager.Checkpoint("MS-OXCTABL_R539");
            this.Manager.Checkpoint("MS-OXCTABL_R813");
            this.Manager.Checkpoint("MS-OXCTABL_R824");
            this.Manager.Checkpoint("MS-OXCTABL_R225");
            this.Manager.Checkpoint("MS-OXCTABL_R239");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker53(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S194");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker54(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S321");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopFindRowResponseChecker26(Microsoft.Protocols.TestSuites.Common.FindRowFlags findRowFlags, bool isValidRestriction, bool HasRowData, bool isCorrectRowData, bool rowNoLongerVisible, bool isLastSetColumnData) {
            this.Manager.Comment("checking step \'event RopFindRowResponse(Forwards,True,True,True,False,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.FindRowFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.FindRowFlags)(0)), findRowFlags, "findRowFlags of RopFindRowResponse, state S366");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isValidRestriction, "isValidRestriction of RopFindRowResponse, state S366");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, HasRowData, "HasRowData of RopFindRowResponse, state S366");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isCorrectRowData, "isCorrectRowData of RopFindRowResponse, state S366");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, rowNoLongerVisible, "rowNoLongerVisible of RopFindRowResponse, state S366");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isLastSetColumnData, "isLastSetColumnData of RopFindRowResponse, state S366");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R534, MS-OXCTABL_R243, MS-OXCTABL_R540, M" +
                        "S-OXCTABL_R539, MS-OXCTABL_R813, MS-OXCTABL_R824, MS-OXCTABL_R225, MS-OXCTABL_R2" +
                        "39");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R534");
            this.Manager.Checkpoint("MS-OXCTABL_R243");
            this.Manager.Checkpoint("MS-OXCTABL_R540");
            this.Manager.Checkpoint("MS-OXCTABL_R539");
            this.Manager.Checkpoint("MS-OXCTABL_R813");
            this.Manager.Checkpoint("MS-OXCTABL_R824");
            this.Manager.Checkpoint("MS-OXCTABL_R225");
            this.Manager.Checkpoint("MS-OXCTABL_R239");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker55(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S321");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopFindRowResponseChecker27(Microsoft.Protocols.TestSuites.Common.FindRowFlags findRowFlags, bool isValidRestriction, bool HasRowData, bool isCorrectRowData, bool rowNoLongerVisible, bool isLastSetColumnData) {
            this.Manager.Comment("checking step \'event RopFindRowResponse(Forwards,True,True,True,False,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.FindRowFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.FindRowFlags)(0)), findRowFlags, "findRowFlags of RopFindRowResponse, state S367");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isValidRestriction, "isValidRestriction of RopFindRowResponse, state S367");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, HasRowData, "HasRowData of RopFindRowResponse, state S367");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isCorrectRowData, "isCorrectRowData of RopFindRowResponse, state S367");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, rowNoLongerVisible, "rowNoLongerVisible of RopFindRowResponse, state S367");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isLastSetColumnData, "isLastSetColumnData of RopFindRowResponse, state S367");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R534, MS-OXCTABL_R243, MS-OXCTABL_R540, M" +
                        "S-OXCTABL_R539, MS-OXCTABL_R813, MS-OXCTABL_R824, MS-OXCTABL_R225, MS-OXCTABL_R2" +
                        "39");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R534");
            this.Manager.Checkpoint("MS-OXCTABL_R243");
            this.Manager.Checkpoint("MS-OXCTABL_R540");
            this.Manager.Checkpoint("MS-OXCTABL_R539");
            this.Manager.Checkpoint("MS-OXCTABL_R813");
            this.Manager.Checkpoint("MS-OXCTABL_R824");
            this.Manager.Checkpoint("MS-OXCTABL_R225");
            this.Manager.Checkpoint("MS-OXCTABL_R239");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker56(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S119");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopQueryRowsResponseChecker7(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,CREATEBOOKMARK,True," +
                    "True,True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S143");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S143");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S143");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType.CREATEBOOKMARK, ropType, "ropType of RopQueryRowsResponse, state S143");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S143");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S143");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S143");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S143");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S143");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S143");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker57(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S195");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker58(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S322");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopFindRowResponseChecker28(Microsoft.Protocols.TestSuites.Common.FindRowFlags findRowFlags, bool isValidRestriction, bool HasRowData, bool isCorrectRowData, bool rowNoLongerVisible, bool isLastSetColumnData) {
            this.Manager.Comment("checking step \'event RopFindRowResponse(Forwards,True,True,True,False,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.FindRowFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.FindRowFlags)(0)), findRowFlags, "findRowFlags of RopFindRowResponse, state S368");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isValidRestriction, "isValidRestriction of RopFindRowResponse, state S368");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, HasRowData, "HasRowData of RopFindRowResponse, state S368");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isCorrectRowData, "isCorrectRowData of RopFindRowResponse, state S368");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, rowNoLongerVisible, "rowNoLongerVisible of RopFindRowResponse, state S368");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isLastSetColumnData, "isLastSetColumnData of RopFindRowResponse, state S368");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R534, MS-OXCTABL_R243, MS-OXCTABL_R540, M" +
                        "S-OXCTABL_R539, MS-OXCTABL_R813, MS-OXCTABL_R824, MS-OXCTABL_R225, MS-OXCTABL_R2" +
                        "39");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R534");
            this.Manager.Checkpoint("MS-OXCTABL_R243");
            this.Manager.Checkpoint("MS-OXCTABL_R540");
            this.Manager.Checkpoint("MS-OXCTABL_R539");
            this.Manager.Checkpoint("MS-OXCTABL_R813");
            this.Manager.Checkpoint("MS-OXCTABL_R824");
            this.Manager.Checkpoint("MS-OXCTABL_R225");
            this.Manager.Checkpoint("MS-OXCTABL_R239");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker59(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S322");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopFindRowResponseChecker29(Microsoft.Protocols.TestSuites.Common.FindRowFlags findRowFlags, bool isValidRestriction, bool HasRowData, bool isCorrectRowData, bool rowNoLongerVisible, bool isLastSetColumnData) {
            this.Manager.Comment("checking step \'event RopFindRowResponse(Forwards,True,True,True,False,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.FindRowFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.FindRowFlags)(0)), findRowFlags, "findRowFlags of RopFindRowResponse, state S369");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isValidRestriction, "isValidRestriction of RopFindRowResponse, state S369");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, HasRowData, "HasRowData of RopFindRowResponse, state S369");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isCorrectRowData, "isCorrectRowData of RopFindRowResponse, state S369");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, rowNoLongerVisible, "rowNoLongerVisible of RopFindRowResponse, state S369");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isLastSetColumnData, "isLastSetColumnData of RopFindRowResponse, state S369");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R534, MS-OXCTABL_R243, MS-OXCTABL_R540, M" +
                        "S-OXCTABL_R539, MS-OXCTABL_R813, MS-OXCTABL_R824, MS-OXCTABL_R225, MS-OXCTABL_R2" +
                        "39");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R534");
            this.Manager.Checkpoint("MS-OXCTABL_R243");
            this.Manager.Checkpoint("MS-OXCTABL_R540");
            this.Manager.Checkpoint("MS-OXCTABL_R539");
            this.Manager.Checkpoint("MS-OXCTABL_R813");
            this.Manager.Checkpoint("MS-OXCTABL_R824");
            this.Manager.Checkpoint("MS-OXCTABL_R225");
            this.Manager.Checkpoint("MS-OXCTABL_R239");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker60(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S195");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker61(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S323");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopFindRowResponseChecker30(Microsoft.Protocols.TestSuites.Common.FindRowFlags findRowFlags, bool isValidRestriction, bool HasRowData, bool isCorrectRowData, bool rowNoLongerVisible, bool isLastSetColumnData) {
            this.Manager.Comment("checking step \'event RopFindRowResponse(Forwards,True,True,True,False,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.FindRowFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.FindRowFlags)(0)), findRowFlags, "findRowFlags of RopFindRowResponse, state S370");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isValidRestriction, "isValidRestriction of RopFindRowResponse, state S370");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, HasRowData, "HasRowData of RopFindRowResponse, state S370");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isCorrectRowData, "isCorrectRowData of RopFindRowResponse, state S370");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, rowNoLongerVisible, "rowNoLongerVisible of RopFindRowResponse, state S370");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isLastSetColumnData, "isLastSetColumnData of RopFindRowResponse, state S370");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R534, MS-OXCTABL_R243, MS-OXCTABL_R540, M" +
                        "S-OXCTABL_R539, MS-OXCTABL_R813, MS-OXCTABL_R824, MS-OXCTABL_R225, MS-OXCTABL_R2" +
                        "39");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R534");
            this.Manager.Checkpoint("MS-OXCTABL_R243");
            this.Manager.Checkpoint("MS-OXCTABL_R540");
            this.Manager.Checkpoint("MS-OXCTABL_R539");
            this.Manager.Checkpoint("MS-OXCTABL_R813");
            this.Manager.Checkpoint("MS-OXCTABL_R824");
            this.Manager.Checkpoint("MS-OXCTABL_R225");
            this.Manager.Checkpoint("MS-OXCTABL_R239");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker62(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S323");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopFindRowResponseChecker31(Microsoft.Protocols.TestSuites.Common.FindRowFlags findRowFlags, bool isValidRestriction, bool HasRowData, bool isCorrectRowData, bool rowNoLongerVisible, bool isLastSetColumnData) {
            this.Manager.Comment("checking step \'event RopFindRowResponse(Forwards,True,True,True,False,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.FindRowFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.FindRowFlags)(0)), findRowFlags, "findRowFlags of RopFindRowResponse, state S371");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isValidRestriction, "isValidRestriction of RopFindRowResponse, state S371");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, HasRowData, "HasRowData of RopFindRowResponse, state S371");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isCorrectRowData, "isCorrectRowData of RopFindRowResponse, state S371");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, rowNoLongerVisible, "rowNoLongerVisible of RopFindRowResponse, state S371");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isLastSetColumnData, "isLastSetColumnData of RopFindRowResponse, state S371");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R534, MS-OXCTABL_R243, MS-OXCTABL_R540, M" +
                        "S-OXCTABL_R539, MS-OXCTABL_R813, MS-OXCTABL_R824, MS-OXCTABL_R225, MS-OXCTABL_R2" +
                        "39");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R534");
            this.Manager.Checkpoint("MS-OXCTABL_R243");
            this.Manager.Checkpoint("MS-OXCTABL_R540");
            this.Manager.Checkpoint("MS-OXCTABL_R539");
            this.Manager.Checkpoint("MS-OXCTABL_R813");
            this.Manager.Checkpoint("MS-OXCTABL_R824");
            this.Manager.Checkpoint("MS-OXCTABL_R225");
            this.Manager.Checkpoint("MS-OXCTABL_R239");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker63(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S39");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker64(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S48");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker65(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S62");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker66(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S120");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopQueryRowsResponseChecker8(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,CREATEBOOKMARK,True," +
                    "True,True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S144");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S144");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S144");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType.CREATEBOOKMARK, ropType, "ropType of RopQueryRowsResponse, state S144");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S144");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S144");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S144");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S144");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S144");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S144");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker67(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S196");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker68(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S324");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopFindRowResponseChecker32(Microsoft.Protocols.TestSuites.Common.FindRowFlags findRowFlags, bool isValidRestriction, bool HasRowData, bool isCorrectRowData, bool rowNoLongerVisible, bool isLastSetColumnData) {
            this.Manager.Comment("checking step \'event RopFindRowResponse(Forwards,True,True,True,False,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.FindRowFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.FindRowFlags)(0)), findRowFlags, "findRowFlags of RopFindRowResponse, state S372");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isValidRestriction, "isValidRestriction of RopFindRowResponse, state S372");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, HasRowData, "HasRowData of RopFindRowResponse, state S372");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isCorrectRowData, "isCorrectRowData of RopFindRowResponse, state S372");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, rowNoLongerVisible, "rowNoLongerVisible of RopFindRowResponse, state S372");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isLastSetColumnData, "isLastSetColumnData of RopFindRowResponse, state S372");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R534, MS-OXCTABL_R243, MS-OXCTABL_R540, M" +
                        "S-OXCTABL_R539, MS-OXCTABL_R813, MS-OXCTABL_R824, MS-OXCTABL_R225, MS-OXCTABL_R2" +
                        "39");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R534");
            this.Manager.Checkpoint("MS-OXCTABL_R243");
            this.Manager.Checkpoint("MS-OXCTABL_R540");
            this.Manager.Checkpoint("MS-OXCTABL_R539");
            this.Manager.Checkpoint("MS-OXCTABL_R813");
            this.Manager.Checkpoint("MS-OXCTABL_R824");
            this.Manager.Checkpoint("MS-OXCTABL_R225");
            this.Manager.Checkpoint("MS-OXCTABL_R239");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker69(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S324");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopFindRowResponseChecker33(Microsoft.Protocols.TestSuites.Common.FindRowFlags findRowFlags, bool isValidRestriction, bool HasRowData, bool isCorrectRowData, bool rowNoLongerVisible, bool isLastSetColumnData) {
            this.Manager.Comment("checking step \'event RopFindRowResponse(Forwards,True,True,True,False,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.FindRowFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.FindRowFlags)(0)), findRowFlags, "findRowFlags of RopFindRowResponse, state S373");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isValidRestriction, "isValidRestriction of RopFindRowResponse, state S373");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, HasRowData, "HasRowData of RopFindRowResponse, state S373");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isCorrectRowData, "isCorrectRowData of RopFindRowResponse, state S373");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, rowNoLongerVisible, "rowNoLongerVisible of RopFindRowResponse, state S373");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isLastSetColumnData, "isLastSetColumnData of RopFindRowResponse, state S373");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R534, MS-OXCTABL_R243, MS-OXCTABL_R540, M" +
                        "S-OXCTABL_R539, MS-OXCTABL_R813, MS-OXCTABL_R824, MS-OXCTABL_R225, MS-OXCTABL_R2" +
                        "39");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R534");
            this.Manager.Checkpoint("MS-OXCTABL_R243");
            this.Manager.Checkpoint("MS-OXCTABL_R540");
            this.Manager.Checkpoint("MS-OXCTABL_R539");
            this.Manager.Checkpoint("MS-OXCTABL_R813");
            this.Manager.Checkpoint("MS-OXCTABL_R824");
            this.Manager.Checkpoint("MS-OXCTABL_R225");
            this.Manager.Checkpoint("MS-OXCTABL_R239");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker70(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S196");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker71(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S325");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopFindRowResponseChecker34(Microsoft.Protocols.TestSuites.Common.FindRowFlags findRowFlags, bool isValidRestriction, bool HasRowData, bool isCorrectRowData, bool rowNoLongerVisible, bool isLastSetColumnData) {
            this.Manager.Comment("checking step \'event RopFindRowResponse(Forwards,True,True,True,False,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.FindRowFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.FindRowFlags)(0)), findRowFlags, "findRowFlags of RopFindRowResponse, state S374");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isValidRestriction, "isValidRestriction of RopFindRowResponse, state S374");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, HasRowData, "HasRowData of RopFindRowResponse, state S374");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isCorrectRowData, "isCorrectRowData of RopFindRowResponse, state S374");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, rowNoLongerVisible, "rowNoLongerVisible of RopFindRowResponse, state S374");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isLastSetColumnData, "isLastSetColumnData of RopFindRowResponse, state S374");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R534, MS-OXCTABL_R243, MS-OXCTABL_R540, M" +
                        "S-OXCTABL_R539, MS-OXCTABL_R813, MS-OXCTABL_R824, MS-OXCTABL_R225, MS-OXCTABL_R2" +
                        "39");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R534");
            this.Manager.Checkpoint("MS-OXCTABL_R243");
            this.Manager.Checkpoint("MS-OXCTABL_R540");
            this.Manager.Checkpoint("MS-OXCTABL_R539");
            this.Manager.Checkpoint("MS-OXCTABL_R813");
            this.Manager.Checkpoint("MS-OXCTABL_R824");
            this.Manager.Checkpoint("MS-OXCTABL_R225");
            this.Manager.Checkpoint("MS-OXCTABL_R239");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker72(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S325");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopFindRowResponseChecker35(Microsoft.Protocols.TestSuites.Common.FindRowFlags findRowFlags, bool isValidRestriction, bool HasRowData, bool isCorrectRowData, bool rowNoLongerVisible, bool isLastSetColumnData) {
            this.Manager.Comment("checking step \'event RopFindRowResponse(Forwards,True,True,True,False,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.FindRowFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.FindRowFlags)(0)), findRowFlags, "findRowFlags of RopFindRowResponse, state S375");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isValidRestriction, "isValidRestriction of RopFindRowResponse, state S375");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, HasRowData, "HasRowData of RopFindRowResponse, state S375");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isCorrectRowData, "isCorrectRowData of RopFindRowResponse, state S375");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, rowNoLongerVisible, "rowNoLongerVisible of RopFindRowResponse, state S375");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isLastSetColumnData, "isLastSetColumnData of RopFindRowResponse, state S375");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R534, MS-OXCTABL_R243, MS-OXCTABL_R540, M" +
                        "S-OXCTABL_R539, MS-OXCTABL_R813, MS-OXCTABL_R824, MS-OXCTABL_R225, MS-OXCTABL_R2" +
                        "39");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R534");
            this.Manager.Checkpoint("MS-OXCTABL_R243");
            this.Manager.Checkpoint("MS-OXCTABL_R540");
            this.Manager.Checkpoint("MS-OXCTABL_R539");
            this.Manager.Checkpoint("MS-OXCTABL_R813");
            this.Manager.Checkpoint("MS-OXCTABL_R824");
            this.Manager.Checkpoint("MS-OXCTABL_R225");
            this.Manager.Checkpoint("MS-OXCTABL_R239");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker73(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S120");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopQueryRowsResponseChecker9(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,CREATEBOOKMARK,True," +
                    "True,True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S145");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S145");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S145");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType.CREATEBOOKMARK, ropType, "ropType of RopQueryRowsResponse, state S145");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S145");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S145");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S145");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S145");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S145");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S145");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker74(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S197");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker75(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S326");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopFindRowResponseChecker36(Microsoft.Protocols.TestSuites.Common.FindRowFlags findRowFlags, bool isValidRestriction, bool HasRowData, bool isCorrectRowData, bool rowNoLongerVisible, bool isLastSetColumnData) {
            this.Manager.Comment("checking step \'event RopFindRowResponse(Forwards,True,True,True,False,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.FindRowFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.FindRowFlags)(0)), findRowFlags, "findRowFlags of RopFindRowResponse, state S376");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isValidRestriction, "isValidRestriction of RopFindRowResponse, state S376");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, HasRowData, "HasRowData of RopFindRowResponse, state S376");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isCorrectRowData, "isCorrectRowData of RopFindRowResponse, state S376");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, rowNoLongerVisible, "rowNoLongerVisible of RopFindRowResponse, state S376");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isLastSetColumnData, "isLastSetColumnData of RopFindRowResponse, state S376");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R534, MS-OXCTABL_R243, MS-OXCTABL_R540, M" +
                        "S-OXCTABL_R539, MS-OXCTABL_R813, MS-OXCTABL_R824, MS-OXCTABL_R225, MS-OXCTABL_R2" +
                        "39");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R534");
            this.Manager.Checkpoint("MS-OXCTABL_R243");
            this.Manager.Checkpoint("MS-OXCTABL_R540");
            this.Manager.Checkpoint("MS-OXCTABL_R539");
            this.Manager.Checkpoint("MS-OXCTABL_R813");
            this.Manager.Checkpoint("MS-OXCTABL_R824");
            this.Manager.Checkpoint("MS-OXCTABL_R225");
            this.Manager.Checkpoint("MS-OXCTABL_R239");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker76(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S326");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopFindRowResponseChecker37(Microsoft.Protocols.TestSuites.Common.FindRowFlags findRowFlags, bool isValidRestriction, bool HasRowData, bool isCorrectRowData, bool rowNoLongerVisible, bool isLastSetColumnData) {
            this.Manager.Comment("checking step \'event RopFindRowResponse(Forwards,True,True,True,False,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.FindRowFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.FindRowFlags)(0)), findRowFlags, "findRowFlags of RopFindRowResponse, state S377");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isValidRestriction, "isValidRestriction of RopFindRowResponse, state S377");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, HasRowData, "HasRowData of RopFindRowResponse, state S377");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isCorrectRowData, "isCorrectRowData of RopFindRowResponse, state S377");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, rowNoLongerVisible, "rowNoLongerVisible of RopFindRowResponse, state S377");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isLastSetColumnData, "isLastSetColumnData of RopFindRowResponse, state S377");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R534, MS-OXCTABL_R243, MS-OXCTABL_R540, M" +
                        "S-OXCTABL_R539, MS-OXCTABL_R813, MS-OXCTABL_R824, MS-OXCTABL_R225, MS-OXCTABL_R2" +
                        "39");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R534");
            this.Manager.Checkpoint("MS-OXCTABL_R243");
            this.Manager.Checkpoint("MS-OXCTABL_R540");
            this.Manager.Checkpoint("MS-OXCTABL_R539");
            this.Manager.Checkpoint("MS-OXCTABL_R813");
            this.Manager.Checkpoint("MS-OXCTABL_R824");
            this.Manager.Checkpoint("MS-OXCTABL_R225");
            this.Manager.Checkpoint("MS-OXCTABL_R239");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker77(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S197");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker78(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S327");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopFindRowResponseChecker38(Microsoft.Protocols.TestSuites.Common.FindRowFlags findRowFlags, bool isValidRestriction, bool HasRowData, bool isCorrectRowData, bool rowNoLongerVisible, bool isLastSetColumnData) {
            this.Manager.Comment("checking step \'event RopFindRowResponse(Forwards,True,True,True,False,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.FindRowFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.FindRowFlags)(0)), findRowFlags, "findRowFlags of RopFindRowResponse, state S378");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isValidRestriction, "isValidRestriction of RopFindRowResponse, state S378");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, HasRowData, "HasRowData of RopFindRowResponse, state S378");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isCorrectRowData, "isCorrectRowData of RopFindRowResponse, state S378");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, rowNoLongerVisible, "rowNoLongerVisible of RopFindRowResponse, state S378");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isLastSetColumnData, "isLastSetColumnData of RopFindRowResponse, state S378");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R534, MS-OXCTABL_R243, MS-OXCTABL_R540, M" +
                        "S-OXCTABL_R539, MS-OXCTABL_R813, MS-OXCTABL_R824, MS-OXCTABL_R225, MS-OXCTABL_R2" +
                        "39");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R534");
            this.Manager.Checkpoint("MS-OXCTABL_R243");
            this.Manager.Checkpoint("MS-OXCTABL_R540");
            this.Manager.Checkpoint("MS-OXCTABL_R539");
            this.Manager.Checkpoint("MS-OXCTABL_R813");
            this.Manager.Checkpoint("MS-OXCTABL_R824");
            this.Manager.Checkpoint("MS-OXCTABL_R225");
            this.Manager.Checkpoint("MS-OXCTABL_R239");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker79(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S327");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopFindRowResponseChecker39(Microsoft.Protocols.TestSuites.Common.FindRowFlags findRowFlags, bool isValidRestriction, bool HasRowData, bool isCorrectRowData, bool rowNoLongerVisible, bool isLastSetColumnData) {
            this.Manager.Comment("checking step \'event RopFindRowResponse(Forwards,True,True,True,False,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.FindRowFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.FindRowFlags)(0)), findRowFlags, "findRowFlags of RopFindRowResponse, state S379");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isValidRestriction, "isValidRestriction of RopFindRowResponse, state S379");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, HasRowData, "HasRowData of RopFindRowResponse, state S379");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isCorrectRowData, "isCorrectRowData of RopFindRowResponse, state S379");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, rowNoLongerVisible, "rowNoLongerVisible of RopFindRowResponse, state S379");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isLastSetColumnData, "isLastSetColumnData of RopFindRowResponse, state S379");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R534, MS-OXCTABL_R243, MS-OXCTABL_R540, M" +
                        "S-OXCTABL_R539, MS-OXCTABL_R813, MS-OXCTABL_R824, MS-OXCTABL_R225, MS-OXCTABL_R2" +
                        "39");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R534");
            this.Manager.Checkpoint("MS-OXCTABL_R243");
            this.Manager.Checkpoint("MS-OXCTABL_R540");
            this.Manager.Checkpoint("MS-OXCTABL_R539");
            this.Manager.Checkpoint("MS-OXCTABL_R813");
            this.Manager.Checkpoint("MS-OXCTABL_R824");
            this.Manager.Checkpoint("MS-OXCTABL_R225");
            this.Manager.Checkpoint("MS-OXCTABL_R239");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker80(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S62");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker81(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S121");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopQueryRowsResponseChecker10(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,CREATEBOOKMARK,True," +
                    "True,True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S146");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S146");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S146");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType.CREATEBOOKMARK, ropType, "ropType of RopQueryRowsResponse, state S146");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S146");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S146");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S146");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S146");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S146");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S146");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker82(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S198");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker83(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S328");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopFindRowResponseChecker40(Microsoft.Protocols.TestSuites.Common.FindRowFlags findRowFlags, bool isValidRestriction, bool HasRowData, bool isCorrectRowData, bool rowNoLongerVisible, bool isLastSetColumnData) {
            this.Manager.Comment("checking step \'event RopFindRowResponse(Forwards,True,True,True,False,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.FindRowFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.FindRowFlags)(0)), findRowFlags, "findRowFlags of RopFindRowResponse, state S380");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isValidRestriction, "isValidRestriction of RopFindRowResponse, state S380");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, HasRowData, "HasRowData of RopFindRowResponse, state S380");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isCorrectRowData, "isCorrectRowData of RopFindRowResponse, state S380");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, rowNoLongerVisible, "rowNoLongerVisible of RopFindRowResponse, state S380");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isLastSetColumnData, "isLastSetColumnData of RopFindRowResponse, state S380");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R534, MS-OXCTABL_R243, MS-OXCTABL_R540, M" +
                        "S-OXCTABL_R539, MS-OXCTABL_R813, MS-OXCTABL_R824, MS-OXCTABL_R225, MS-OXCTABL_R2" +
                        "39");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R534");
            this.Manager.Checkpoint("MS-OXCTABL_R243");
            this.Manager.Checkpoint("MS-OXCTABL_R540");
            this.Manager.Checkpoint("MS-OXCTABL_R539");
            this.Manager.Checkpoint("MS-OXCTABL_R813");
            this.Manager.Checkpoint("MS-OXCTABL_R824");
            this.Manager.Checkpoint("MS-OXCTABL_R225");
            this.Manager.Checkpoint("MS-OXCTABL_R239");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker84(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S328");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopFindRowResponseChecker41(Microsoft.Protocols.TestSuites.Common.FindRowFlags findRowFlags, bool isValidRestriction, bool HasRowData, bool isCorrectRowData, bool rowNoLongerVisible, bool isLastSetColumnData) {
            this.Manager.Comment("checking step \'event RopFindRowResponse(Forwards,True,True,True,False,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.FindRowFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.FindRowFlags)(0)), findRowFlags, "findRowFlags of RopFindRowResponse, state S381");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isValidRestriction, "isValidRestriction of RopFindRowResponse, state S381");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, HasRowData, "HasRowData of RopFindRowResponse, state S381");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isCorrectRowData, "isCorrectRowData of RopFindRowResponse, state S381");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, rowNoLongerVisible, "rowNoLongerVisible of RopFindRowResponse, state S381");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isLastSetColumnData, "isLastSetColumnData of RopFindRowResponse, state S381");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R534, MS-OXCTABL_R243, MS-OXCTABL_R540, M" +
                        "S-OXCTABL_R539, MS-OXCTABL_R813, MS-OXCTABL_R824, MS-OXCTABL_R225, MS-OXCTABL_R2" +
                        "39");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R534");
            this.Manager.Checkpoint("MS-OXCTABL_R243");
            this.Manager.Checkpoint("MS-OXCTABL_R540");
            this.Manager.Checkpoint("MS-OXCTABL_R539");
            this.Manager.Checkpoint("MS-OXCTABL_R813");
            this.Manager.Checkpoint("MS-OXCTABL_R824");
            this.Manager.Checkpoint("MS-OXCTABL_R225");
            this.Manager.Checkpoint("MS-OXCTABL_R239");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker85(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S198");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker86(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S329");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopFindRowResponseChecker42(Microsoft.Protocols.TestSuites.Common.FindRowFlags findRowFlags, bool isValidRestriction, bool HasRowData, bool isCorrectRowData, bool rowNoLongerVisible, bool isLastSetColumnData) {
            this.Manager.Comment("checking step \'event RopFindRowResponse(Forwards,True,True,True,False,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.FindRowFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.FindRowFlags)(0)), findRowFlags, "findRowFlags of RopFindRowResponse, state S382");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isValidRestriction, "isValidRestriction of RopFindRowResponse, state S382");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, HasRowData, "HasRowData of RopFindRowResponse, state S382");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isCorrectRowData, "isCorrectRowData of RopFindRowResponse, state S382");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, rowNoLongerVisible, "rowNoLongerVisible of RopFindRowResponse, state S382");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isLastSetColumnData, "isLastSetColumnData of RopFindRowResponse, state S382");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R534, MS-OXCTABL_R243, MS-OXCTABL_R540, M" +
                        "S-OXCTABL_R539, MS-OXCTABL_R813, MS-OXCTABL_R824, MS-OXCTABL_R225, MS-OXCTABL_R2" +
                        "39");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R534");
            this.Manager.Checkpoint("MS-OXCTABL_R243");
            this.Manager.Checkpoint("MS-OXCTABL_R540");
            this.Manager.Checkpoint("MS-OXCTABL_R539");
            this.Manager.Checkpoint("MS-OXCTABL_R813");
            this.Manager.Checkpoint("MS-OXCTABL_R824");
            this.Manager.Checkpoint("MS-OXCTABL_R225");
            this.Manager.Checkpoint("MS-OXCTABL_R239");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker87(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S329");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopFindRowResponseChecker43(Microsoft.Protocols.TestSuites.Common.FindRowFlags findRowFlags, bool isValidRestriction, bool HasRowData, bool isCorrectRowData, bool rowNoLongerVisible, bool isLastSetColumnData) {
            this.Manager.Comment("checking step \'event RopFindRowResponse(Forwards,True,True,True,False,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.FindRowFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.FindRowFlags)(0)), findRowFlags, "findRowFlags of RopFindRowResponse, state S383");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isValidRestriction, "isValidRestriction of RopFindRowResponse, state S383");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, HasRowData, "HasRowData of RopFindRowResponse, state S383");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isCorrectRowData, "isCorrectRowData of RopFindRowResponse, state S383");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, rowNoLongerVisible, "rowNoLongerVisible of RopFindRowResponse, state S383");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isLastSetColumnData, "isLastSetColumnData of RopFindRowResponse, state S383");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R534, MS-OXCTABL_R243, MS-OXCTABL_R540, M" +
                        "S-OXCTABL_R539, MS-OXCTABL_R813, MS-OXCTABL_R824, MS-OXCTABL_R225, MS-OXCTABL_R2" +
                        "39");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R534");
            this.Manager.Checkpoint("MS-OXCTABL_R243");
            this.Manager.Checkpoint("MS-OXCTABL_R540");
            this.Manager.Checkpoint("MS-OXCTABL_R539");
            this.Manager.Checkpoint("MS-OXCTABL_R813");
            this.Manager.Checkpoint("MS-OXCTABL_R824");
            this.Manager.Checkpoint("MS-OXCTABL_R225");
            this.Manager.Checkpoint("MS-OXCTABL_R239");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker88(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S121");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopQueryRowsResponseChecker11(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,CREATEBOOKMARK,True," +
                    "True,True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S147");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S147");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S147");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType.CREATEBOOKMARK, ropType, "ropType of RopQueryRowsResponse, state S147");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S147");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S147");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S147");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S147");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S147");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S147");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker89(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S199");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker90(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S330");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopFindRowResponseChecker44(Microsoft.Protocols.TestSuites.Common.FindRowFlags findRowFlags, bool isValidRestriction, bool HasRowData, bool isCorrectRowData, bool rowNoLongerVisible, bool isLastSetColumnData) {
            this.Manager.Comment("checking step \'event RopFindRowResponse(Forwards,True,True,True,False,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.FindRowFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.FindRowFlags)(0)), findRowFlags, "findRowFlags of RopFindRowResponse, state S384");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isValidRestriction, "isValidRestriction of RopFindRowResponse, state S384");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, HasRowData, "HasRowData of RopFindRowResponse, state S384");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isCorrectRowData, "isCorrectRowData of RopFindRowResponse, state S384");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, rowNoLongerVisible, "rowNoLongerVisible of RopFindRowResponse, state S384");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isLastSetColumnData, "isLastSetColumnData of RopFindRowResponse, state S384");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R534, MS-OXCTABL_R243, MS-OXCTABL_R540, M" +
                        "S-OXCTABL_R539, MS-OXCTABL_R813, MS-OXCTABL_R824, MS-OXCTABL_R225, MS-OXCTABL_R2" +
                        "39");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R534");
            this.Manager.Checkpoint("MS-OXCTABL_R243");
            this.Manager.Checkpoint("MS-OXCTABL_R540");
            this.Manager.Checkpoint("MS-OXCTABL_R539");
            this.Manager.Checkpoint("MS-OXCTABL_R813");
            this.Manager.Checkpoint("MS-OXCTABL_R824");
            this.Manager.Checkpoint("MS-OXCTABL_R225");
            this.Manager.Checkpoint("MS-OXCTABL_R239");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker91(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S330");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopFindRowResponseChecker45(Microsoft.Protocols.TestSuites.Common.FindRowFlags findRowFlags, bool isValidRestriction, bool HasRowData, bool isCorrectRowData, bool rowNoLongerVisible, bool isLastSetColumnData) {
            this.Manager.Comment("checking step \'event RopFindRowResponse(Forwards,True,True,True,False,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.FindRowFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.FindRowFlags)(0)), findRowFlags, "findRowFlags of RopFindRowResponse, state S385");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isValidRestriction, "isValidRestriction of RopFindRowResponse, state S385");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, HasRowData, "HasRowData of RopFindRowResponse, state S385");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isCorrectRowData, "isCorrectRowData of RopFindRowResponse, state S385");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, rowNoLongerVisible, "rowNoLongerVisible of RopFindRowResponse, state S385");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isLastSetColumnData, "isLastSetColumnData of RopFindRowResponse, state S385");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R534, MS-OXCTABL_R243, MS-OXCTABL_R540, M" +
                        "S-OXCTABL_R539, MS-OXCTABL_R813, MS-OXCTABL_R824, MS-OXCTABL_R225, MS-OXCTABL_R2" +
                        "39");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R534");
            this.Manager.Checkpoint("MS-OXCTABL_R243");
            this.Manager.Checkpoint("MS-OXCTABL_R540");
            this.Manager.Checkpoint("MS-OXCTABL_R539");
            this.Manager.Checkpoint("MS-OXCTABL_R813");
            this.Manager.Checkpoint("MS-OXCTABL_R824");
            this.Manager.Checkpoint("MS-OXCTABL_R225");
            this.Manager.Checkpoint("MS-OXCTABL_R239");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker92(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S199");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker93(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S331");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopFindRowResponseChecker46(Microsoft.Protocols.TestSuites.Common.FindRowFlags findRowFlags, bool isValidRestriction, bool HasRowData, bool isCorrectRowData, bool rowNoLongerVisible, bool isLastSetColumnData) {
            this.Manager.Comment("checking step \'event RopFindRowResponse(Forwards,True,True,True,False,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.FindRowFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.FindRowFlags)(0)), findRowFlags, "findRowFlags of RopFindRowResponse, state S386");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isValidRestriction, "isValidRestriction of RopFindRowResponse, state S386");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, HasRowData, "HasRowData of RopFindRowResponse, state S386");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isCorrectRowData, "isCorrectRowData of RopFindRowResponse, state S386");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, rowNoLongerVisible, "rowNoLongerVisible of RopFindRowResponse, state S386");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isLastSetColumnData, "isLastSetColumnData of RopFindRowResponse, state S386");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R534, MS-OXCTABL_R243, MS-OXCTABL_R540, M" +
                        "S-OXCTABL_R539, MS-OXCTABL_R813, MS-OXCTABL_R824, MS-OXCTABL_R225, MS-OXCTABL_R2" +
                        "39");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R534");
            this.Manager.Checkpoint("MS-OXCTABL_R243");
            this.Manager.Checkpoint("MS-OXCTABL_R540");
            this.Manager.Checkpoint("MS-OXCTABL_R539");
            this.Manager.Checkpoint("MS-OXCTABL_R813");
            this.Manager.Checkpoint("MS-OXCTABL_R824");
            this.Manager.Checkpoint("MS-OXCTABL_R225");
            this.Manager.Checkpoint("MS-OXCTABL_R239");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker94(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S331");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopFindRowResponseChecker47(Microsoft.Protocols.TestSuites.Common.FindRowFlags findRowFlags, bool isValidRestriction, bool HasRowData, bool isCorrectRowData, bool rowNoLongerVisible, bool isLastSetColumnData) {
            this.Manager.Comment("checking step \'event RopFindRowResponse(Forwards,True,True,True,False,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.FindRowFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.FindRowFlags)(0)), findRowFlags, "findRowFlags of RopFindRowResponse, state S387");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isValidRestriction, "isValidRestriction of RopFindRowResponse, state S387");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, HasRowData, "HasRowData of RopFindRowResponse, state S387");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isCorrectRowData, "isCorrectRowData of RopFindRowResponse, state S387");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, rowNoLongerVisible, "rowNoLongerVisible of RopFindRowResponse, state S387");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isLastSetColumnData, "isLastSetColumnData of RopFindRowResponse, state S387");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R534, MS-OXCTABL_R243, MS-OXCTABL_R540, M" +
                        "S-OXCTABL_R539, MS-OXCTABL_R813, MS-OXCTABL_R824, MS-OXCTABL_R225, MS-OXCTABL_R2" +
                        "39");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R534");
            this.Manager.Checkpoint("MS-OXCTABL_R243");
            this.Manager.Checkpoint("MS-OXCTABL_R540");
            this.Manager.Checkpoint("MS-OXCTABL_R539");
            this.Manager.Checkpoint("MS-OXCTABL_R813");
            this.Manager.Checkpoint("MS-OXCTABL_R824");
            this.Manager.Checkpoint("MS-OXCTABL_R225");
            this.Manager.Checkpoint("MS-OXCTABL_R239");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker95(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S48");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker96(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S63");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker97(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S122");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopQueryRowsResponseChecker12(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,CREATEBOOKMARK,True," +
                    "True,True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S148");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S148");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S148");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType.CREATEBOOKMARK, ropType, "ropType of RopQueryRowsResponse, state S148");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S148");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S148");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S148");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S148");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S148");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S148");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker98(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S200");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker99(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S332");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopFindRowResponseChecker48(Microsoft.Protocols.TestSuites.Common.FindRowFlags findRowFlags, bool isValidRestriction, bool HasRowData, bool isCorrectRowData, bool rowNoLongerVisible, bool isLastSetColumnData) {
            this.Manager.Comment("checking step \'event RopFindRowResponse(Forwards,True,True,True,False,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.FindRowFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.FindRowFlags)(0)), findRowFlags, "findRowFlags of RopFindRowResponse, state S388");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isValidRestriction, "isValidRestriction of RopFindRowResponse, state S388");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, HasRowData, "HasRowData of RopFindRowResponse, state S388");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isCorrectRowData, "isCorrectRowData of RopFindRowResponse, state S388");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, rowNoLongerVisible, "rowNoLongerVisible of RopFindRowResponse, state S388");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isLastSetColumnData, "isLastSetColumnData of RopFindRowResponse, state S388");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R534, MS-OXCTABL_R243, MS-OXCTABL_R540, M" +
                        "S-OXCTABL_R539, MS-OXCTABL_R813, MS-OXCTABL_R824, MS-OXCTABL_R225, MS-OXCTABL_R2" +
                        "39");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R534");
            this.Manager.Checkpoint("MS-OXCTABL_R243");
            this.Manager.Checkpoint("MS-OXCTABL_R540");
            this.Manager.Checkpoint("MS-OXCTABL_R539");
            this.Manager.Checkpoint("MS-OXCTABL_R813");
            this.Manager.Checkpoint("MS-OXCTABL_R824");
            this.Manager.Checkpoint("MS-OXCTABL_R225");
            this.Manager.Checkpoint("MS-OXCTABL_R239");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker100(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S332");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopFindRowResponseChecker49(Microsoft.Protocols.TestSuites.Common.FindRowFlags findRowFlags, bool isValidRestriction, bool HasRowData, bool isCorrectRowData, bool rowNoLongerVisible, bool isLastSetColumnData) {
            this.Manager.Comment("checking step \'event RopFindRowResponse(Forwards,True,True,True,False,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.FindRowFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.FindRowFlags)(0)), findRowFlags, "findRowFlags of RopFindRowResponse, state S389");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isValidRestriction, "isValidRestriction of RopFindRowResponse, state S389");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, HasRowData, "HasRowData of RopFindRowResponse, state S389");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isCorrectRowData, "isCorrectRowData of RopFindRowResponse, state S389");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, rowNoLongerVisible, "rowNoLongerVisible of RopFindRowResponse, state S389");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isLastSetColumnData, "isLastSetColumnData of RopFindRowResponse, state S389");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R534, MS-OXCTABL_R243, MS-OXCTABL_R540, M" +
                        "S-OXCTABL_R539, MS-OXCTABL_R813, MS-OXCTABL_R824, MS-OXCTABL_R225, MS-OXCTABL_R2" +
                        "39");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R534");
            this.Manager.Checkpoint("MS-OXCTABL_R243");
            this.Manager.Checkpoint("MS-OXCTABL_R540");
            this.Manager.Checkpoint("MS-OXCTABL_R539");
            this.Manager.Checkpoint("MS-OXCTABL_R813");
            this.Manager.Checkpoint("MS-OXCTABL_R824");
            this.Manager.Checkpoint("MS-OXCTABL_R225");
            this.Manager.Checkpoint("MS-OXCTABL_R239");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker101(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S200");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker102(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S333");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopFindRowResponseChecker50(Microsoft.Protocols.TestSuites.Common.FindRowFlags findRowFlags, bool isValidRestriction, bool HasRowData, bool isCorrectRowData, bool rowNoLongerVisible, bool isLastSetColumnData) {
            this.Manager.Comment("checking step \'event RopFindRowResponse(Forwards,True,True,True,False,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.FindRowFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.FindRowFlags)(0)), findRowFlags, "findRowFlags of RopFindRowResponse, state S390");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isValidRestriction, "isValidRestriction of RopFindRowResponse, state S390");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, HasRowData, "HasRowData of RopFindRowResponse, state S390");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isCorrectRowData, "isCorrectRowData of RopFindRowResponse, state S390");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, rowNoLongerVisible, "rowNoLongerVisible of RopFindRowResponse, state S390");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isLastSetColumnData, "isLastSetColumnData of RopFindRowResponse, state S390");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R534, MS-OXCTABL_R243, MS-OXCTABL_R540, M" +
                        "S-OXCTABL_R539, MS-OXCTABL_R813, MS-OXCTABL_R824, MS-OXCTABL_R225, MS-OXCTABL_R2" +
                        "39");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R534");
            this.Manager.Checkpoint("MS-OXCTABL_R243");
            this.Manager.Checkpoint("MS-OXCTABL_R540");
            this.Manager.Checkpoint("MS-OXCTABL_R539");
            this.Manager.Checkpoint("MS-OXCTABL_R813");
            this.Manager.Checkpoint("MS-OXCTABL_R824");
            this.Manager.Checkpoint("MS-OXCTABL_R225");
            this.Manager.Checkpoint("MS-OXCTABL_R239");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker103(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S333");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopFindRowResponseChecker51(Microsoft.Protocols.TestSuites.Common.FindRowFlags findRowFlags, bool isValidRestriction, bool HasRowData, bool isCorrectRowData, bool rowNoLongerVisible, bool isLastSetColumnData) {
            this.Manager.Comment("checking step \'event RopFindRowResponse(Forwards,True,True,True,False,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.FindRowFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.FindRowFlags)(0)), findRowFlags, "findRowFlags of RopFindRowResponse, state S391");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isValidRestriction, "isValidRestriction of RopFindRowResponse, state S391");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, HasRowData, "HasRowData of RopFindRowResponse, state S391");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isCorrectRowData, "isCorrectRowData of RopFindRowResponse, state S391");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, rowNoLongerVisible, "rowNoLongerVisible of RopFindRowResponse, state S391");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isLastSetColumnData, "isLastSetColumnData of RopFindRowResponse, state S391");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R534, MS-OXCTABL_R243, MS-OXCTABL_R540, M" +
                        "S-OXCTABL_R539, MS-OXCTABL_R813, MS-OXCTABL_R824, MS-OXCTABL_R225, MS-OXCTABL_R2" +
                        "39");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R534");
            this.Manager.Checkpoint("MS-OXCTABL_R243");
            this.Manager.Checkpoint("MS-OXCTABL_R540");
            this.Manager.Checkpoint("MS-OXCTABL_R539");
            this.Manager.Checkpoint("MS-OXCTABL_R813");
            this.Manager.Checkpoint("MS-OXCTABL_R824");
            this.Manager.Checkpoint("MS-OXCTABL_R225");
            this.Manager.Checkpoint("MS-OXCTABL_R239");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker104(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S122");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopQueryRowsResponseChecker13(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,CREATEBOOKMARK,True," +
                    "True,True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S149");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S149");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S149");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType.CREATEBOOKMARK, ropType, "ropType of RopQueryRowsResponse, state S149");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S149");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S149");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S149");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S149");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S149");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S149");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker105(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S201");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker106(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S334");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopFindRowResponseChecker52(Microsoft.Protocols.TestSuites.Common.FindRowFlags findRowFlags, bool isValidRestriction, bool HasRowData, bool isCorrectRowData, bool rowNoLongerVisible, bool isLastSetColumnData) {
            this.Manager.Comment("checking step \'event RopFindRowResponse(Forwards,True,True,True,False,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.FindRowFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.FindRowFlags)(0)), findRowFlags, "findRowFlags of RopFindRowResponse, state S392");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isValidRestriction, "isValidRestriction of RopFindRowResponse, state S392");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, HasRowData, "HasRowData of RopFindRowResponse, state S392");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isCorrectRowData, "isCorrectRowData of RopFindRowResponse, state S392");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, rowNoLongerVisible, "rowNoLongerVisible of RopFindRowResponse, state S392");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isLastSetColumnData, "isLastSetColumnData of RopFindRowResponse, state S392");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R534, MS-OXCTABL_R243, MS-OXCTABL_R540, M" +
                        "S-OXCTABL_R539, MS-OXCTABL_R813, MS-OXCTABL_R824, MS-OXCTABL_R225, MS-OXCTABL_R2" +
                        "39");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R534");
            this.Manager.Checkpoint("MS-OXCTABL_R243");
            this.Manager.Checkpoint("MS-OXCTABL_R540");
            this.Manager.Checkpoint("MS-OXCTABL_R539");
            this.Manager.Checkpoint("MS-OXCTABL_R813");
            this.Manager.Checkpoint("MS-OXCTABL_R824");
            this.Manager.Checkpoint("MS-OXCTABL_R225");
            this.Manager.Checkpoint("MS-OXCTABL_R239");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker107(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S334");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopFindRowResponseChecker53(Microsoft.Protocols.TestSuites.Common.FindRowFlags findRowFlags, bool isValidRestriction, bool HasRowData, bool isCorrectRowData, bool rowNoLongerVisible, bool isLastSetColumnData) {
            this.Manager.Comment("checking step \'event RopFindRowResponse(Forwards,True,True,True,False,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.FindRowFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.FindRowFlags)(0)), findRowFlags, "findRowFlags of RopFindRowResponse, state S393");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isValidRestriction, "isValidRestriction of RopFindRowResponse, state S393");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, HasRowData, "HasRowData of RopFindRowResponse, state S393");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isCorrectRowData, "isCorrectRowData of RopFindRowResponse, state S393");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, rowNoLongerVisible, "rowNoLongerVisible of RopFindRowResponse, state S393");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isLastSetColumnData, "isLastSetColumnData of RopFindRowResponse, state S393");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R534, MS-OXCTABL_R243, MS-OXCTABL_R540, M" +
                        "S-OXCTABL_R539, MS-OXCTABL_R813, MS-OXCTABL_R824, MS-OXCTABL_R225, MS-OXCTABL_R2" +
                        "39");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R534");
            this.Manager.Checkpoint("MS-OXCTABL_R243");
            this.Manager.Checkpoint("MS-OXCTABL_R540");
            this.Manager.Checkpoint("MS-OXCTABL_R539");
            this.Manager.Checkpoint("MS-OXCTABL_R813");
            this.Manager.Checkpoint("MS-OXCTABL_R824");
            this.Manager.Checkpoint("MS-OXCTABL_R225");
            this.Manager.Checkpoint("MS-OXCTABL_R239");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker108(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S201");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker109(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S335");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopFindRowResponseChecker54(Microsoft.Protocols.TestSuites.Common.FindRowFlags findRowFlags, bool isValidRestriction, bool HasRowData, bool isCorrectRowData, bool rowNoLongerVisible, bool isLastSetColumnData) {
            this.Manager.Comment("checking step \'event RopFindRowResponse(Forwards,True,True,True,False,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.FindRowFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.FindRowFlags)(0)), findRowFlags, "findRowFlags of RopFindRowResponse, state S394");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isValidRestriction, "isValidRestriction of RopFindRowResponse, state S394");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, HasRowData, "HasRowData of RopFindRowResponse, state S394");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isCorrectRowData, "isCorrectRowData of RopFindRowResponse, state S394");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, rowNoLongerVisible, "rowNoLongerVisible of RopFindRowResponse, state S394");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isLastSetColumnData, "isLastSetColumnData of RopFindRowResponse, state S394");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R534, MS-OXCTABL_R243, MS-OXCTABL_R540, M" +
                        "S-OXCTABL_R539, MS-OXCTABL_R813, MS-OXCTABL_R824, MS-OXCTABL_R225, MS-OXCTABL_R2" +
                        "39");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R534");
            this.Manager.Checkpoint("MS-OXCTABL_R243");
            this.Manager.Checkpoint("MS-OXCTABL_R540");
            this.Manager.Checkpoint("MS-OXCTABL_R539");
            this.Manager.Checkpoint("MS-OXCTABL_R813");
            this.Manager.Checkpoint("MS-OXCTABL_R824");
            this.Manager.Checkpoint("MS-OXCTABL_R225");
            this.Manager.Checkpoint("MS-OXCTABL_R239");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker110(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S335");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopFindRowResponseChecker55(Microsoft.Protocols.TestSuites.Common.FindRowFlags findRowFlags, bool isValidRestriction, bool HasRowData, bool isCorrectRowData, bool rowNoLongerVisible, bool isLastSetColumnData) {
            this.Manager.Comment("checking step \'event RopFindRowResponse(Forwards,True,True,True,False,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.FindRowFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.FindRowFlags)(0)), findRowFlags, "findRowFlags of RopFindRowResponse, state S395");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isValidRestriction, "isValidRestriction of RopFindRowResponse, state S395");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, HasRowData, "HasRowData of RopFindRowResponse, state S395");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isCorrectRowData, "isCorrectRowData of RopFindRowResponse, state S395");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, rowNoLongerVisible, "rowNoLongerVisible of RopFindRowResponse, state S395");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isLastSetColumnData, "isLastSetColumnData of RopFindRowResponse, state S395");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R534, MS-OXCTABL_R243, MS-OXCTABL_R540, M" +
                        "S-OXCTABL_R539, MS-OXCTABL_R813, MS-OXCTABL_R824, MS-OXCTABL_R225, MS-OXCTABL_R2" +
                        "39");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R534");
            this.Manager.Checkpoint("MS-OXCTABL_R243");
            this.Manager.Checkpoint("MS-OXCTABL_R540");
            this.Manager.Checkpoint("MS-OXCTABL_R539");
            this.Manager.Checkpoint("MS-OXCTABL_R813");
            this.Manager.Checkpoint("MS-OXCTABL_R824");
            this.Manager.Checkpoint("MS-OXCTABL_R225");
            this.Manager.Checkpoint("MS-OXCTABL_R239");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker111(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S63");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker112(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S123");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopQueryRowsResponseChecker14(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,CREATEBOOKMARK,True," +
                    "True,True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S150");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S150");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S150");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType.CREATEBOOKMARK, ropType, "ropType of RopQueryRowsResponse, state S150");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S150");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S150");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S150");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S150");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S150");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S150");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker113(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S202");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker114(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S336");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopFindRowResponseChecker56(Microsoft.Protocols.TestSuites.Common.FindRowFlags findRowFlags, bool isValidRestriction, bool HasRowData, bool isCorrectRowData, bool rowNoLongerVisible, bool isLastSetColumnData) {
            this.Manager.Comment("checking step \'event RopFindRowResponse(Forwards,True,True,True,False,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.FindRowFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.FindRowFlags)(0)), findRowFlags, "findRowFlags of RopFindRowResponse, state S396");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isValidRestriction, "isValidRestriction of RopFindRowResponse, state S396");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, HasRowData, "HasRowData of RopFindRowResponse, state S396");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isCorrectRowData, "isCorrectRowData of RopFindRowResponse, state S396");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, rowNoLongerVisible, "rowNoLongerVisible of RopFindRowResponse, state S396");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isLastSetColumnData, "isLastSetColumnData of RopFindRowResponse, state S396");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R534, MS-OXCTABL_R243, MS-OXCTABL_R540, M" +
                        "S-OXCTABL_R539, MS-OXCTABL_R813, MS-OXCTABL_R824, MS-OXCTABL_R225, MS-OXCTABL_R2" +
                        "39");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R534");
            this.Manager.Checkpoint("MS-OXCTABL_R243");
            this.Manager.Checkpoint("MS-OXCTABL_R540");
            this.Manager.Checkpoint("MS-OXCTABL_R539");
            this.Manager.Checkpoint("MS-OXCTABL_R813");
            this.Manager.Checkpoint("MS-OXCTABL_R824");
            this.Manager.Checkpoint("MS-OXCTABL_R225");
            this.Manager.Checkpoint("MS-OXCTABL_R239");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker115(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S336");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopFindRowResponseChecker57(Microsoft.Protocols.TestSuites.Common.FindRowFlags findRowFlags, bool isValidRestriction, bool HasRowData, bool isCorrectRowData, bool rowNoLongerVisible, bool isLastSetColumnData) {
            this.Manager.Comment("checking step \'event RopFindRowResponse(Forwards,True,True,True,False,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.FindRowFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.FindRowFlags)(0)), findRowFlags, "findRowFlags of RopFindRowResponse, state S397");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isValidRestriction, "isValidRestriction of RopFindRowResponse, state S397");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, HasRowData, "HasRowData of RopFindRowResponse, state S397");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isCorrectRowData, "isCorrectRowData of RopFindRowResponse, state S397");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, rowNoLongerVisible, "rowNoLongerVisible of RopFindRowResponse, state S397");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isLastSetColumnData, "isLastSetColumnData of RopFindRowResponse, state S397");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R534, MS-OXCTABL_R243, MS-OXCTABL_R540, M" +
                        "S-OXCTABL_R539, MS-OXCTABL_R813, MS-OXCTABL_R824, MS-OXCTABL_R225, MS-OXCTABL_R2" +
                        "39");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R534");
            this.Manager.Checkpoint("MS-OXCTABL_R243");
            this.Manager.Checkpoint("MS-OXCTABL_R540");
            this.Manager.Checkpoint("MS-OXCTABL_R539");
            this.Manager.Checkpoint("MS-OXCTABL_R813");
            this.Manager.Checkpoint("MS-OXCTABL_R824");
            this.Manager.Checkpoint("MS-OXCTABL_R225");
            this.Manager.Checkpoint("MS-OXCTABL_R239");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker116(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S202");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker117(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S337");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopFindRowResponseChecker58(Microsoft.Protocols.TestSuites.Common.FindRowFlags findRowFlags, bool isValidRestriction, bool HasRowData, bool isCorrectRowData, bool rowNoLongerVisible, bool isLastSetColumnData) {
            this.Manager.Comment("checking step \'event RopFindRowResponse(Forwards,True,True,True,False,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.FindRowFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.FindRowFlags)(0)), findRowFlags, "findRowFlags of RopFindRowResponse, state S398");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isValidRestriction, "isValidRestriction of RopFindRowResponse, state S398");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, HasRowData, "HasRowData of RopFindRowResponse, state S398");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isCorrectRowData, "isCorrectRowData of RopFindRowResponse, state S398");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, rowNoLongerVisible, "rowNoLongerVisible of RopFindRowResponse, state S398");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isLastSetColumnData, "isLastSetColumnData of RopFindRowResponse, state S398");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R534, MS-OXCTABL_R243, MS-OXCTABL_R540, M" +
                        "S-OXCTABL_R539, MS-OXCTABL_R813, MS-OXCTABL_R824, MS-OXCTABL_R225, MS-OXCTABL_R2" +
                        "39");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R534");
            this.Manager.Checkpoint("MS-OXCTABL_R243");
            this.Manager.Checkpoint("MS-OXCTABL_R540");
            this.Manager.Checkpoint("MS-OXCTABL_R539");
            this.Manager.Checkpoint("MS-OXCTABL_R813");
            this.Manager.Checkpoint("MS-OXCTABL_R824");
            this.Manager.Checkpoint("MS-OXCTABL_R225");
            this.Manager.Checkpoint("MS-OXCTABL_R239");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker118(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S337");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopFindRowResponseChecker59(Microsoft.Protocols.TestSuites.Common.FindRowFlags findRowFlags, bool isValidRestriction, bool HasRowData, bool isCorrectRowData, bool rowNoLongerVisible, bool isLastSetColumnData) {
            this.Manager.Comment("checking step \'event RopFindRowResponse(Forwards,True,True,True,False,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.FindRowFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.FindRowFlags)(0)), findRowFlags, "findRowFlags of RopFindRowResponse, state S399");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isValidRestriction, "isValidRestriction of RopFindRowResponse, state S399");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, HasRowData, "HasRowData of RopFindRowResponse, state S399");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isCorrectRowData, "isCorrectRowData of RopFindRowResponse, state S399");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, rowNoLongerVisible, "rowNoLongerVisible of RopFindRowResponse, state S399");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isLastSetColumnData, "isLastSetColumnData of RopFindRowResponse, state S399");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R534, MS-OXCTABL_R243, MS-OXCTABL_R540, M" +
                        "S-OXCTABL_R539, MS-OXCTABL_R813, MS-OXCTABL_R824, MS-OXCTABL_R225, MS-OXCTABL_R2" +
                        "39");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R534");
            this.Manager.Checkpoint("MS-OXCTABL_R243");
            this.Manager.Checkpoint("MS-OXCTABL_R540");
            this.Manager.Checkpoint("MS-OXCTABL_R539");
            this.Manager.Checkpoint("MS-OXCTABL_R813");
            this.Manager.Checkpoint("MS-OXCTABL_R824");
            this.Manager.Checkpoint("MS-OXCTABL_R225");
            this.Manager.Checkpoint("MS-OXCTABL_R239");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker119(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S123");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopQueryRowsResponseChecker15(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,CREATEBOOKMARK,True," +
                    "True,True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S151");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S151");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S151");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType.CREATEBOOKMARK, ropType, "ropType of RopQueryRowsResponse, state S151");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S151");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S151");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S151");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S151");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S151");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S151");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker120(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S203");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker121(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S338");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopFindRowResponseChecker60(Microsoft.Protocols.TestSuites.Common.FindRowFlags findRowFlags, bool isValidRestriction, bool HasRowData, bool isCorrectRowData, bool rowNoLongerVisible, bool isLastSetColumnData) {
            this.Manager.Comment("checking step \'event RopFindRowResponse(Forwards,True,True,True,False,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.FindRowFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.FindRowFlags)(0)), findRowFlags, "findRowFlags of RopFindRowResponse, state S400");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isValidRestriction, "isValidRestriction of RopFindRowResponse, state S400");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, HasRowData, "HasRowData of RopFindRowResponse, state S400");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isCorrectRowData, "isCorrectRowData of RopFindRowResponse, state S400");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, rowNoLongerVisible, "rowNoLongerVisible of RopFindRowResponse, state S400");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isLastSetColumnData, "isLastSetColumnData of RopFindRowResponse, state S400");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R534, MS-OXCTABL_R243, MS-OXCTABL_R540, M" +
                        "S-OXCTABL_R539, MS-OXCTABL_R813, MS-OXCTABL_R824, MS-OXCTABL_R225, MS-OXCTABL_R2" +
                        "39");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R534");
            this.Manager.Checkpoint("MS-OXCTABL_R243");
            this.Manager.Checkpoint("MS-OXCTABL_R540");
            this.Manager.Checkpoint("MS-OXCTABL_R539");
            this.Manager.Checkpoint("MS-OXCTABL_R813");
            this.Manager.Checkpoint("MS-OXCTABL_R824");
            this.Manager.Checkpoint("MS-OXCTABL_R225");
            this.Manager.Checkpoint("MS-OXCTABL_R239");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker122(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S338");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopFindRowResponseChecker61(Microsoft.Protocols.TestSuites.Common.FindRowFlags findRowFlags, bool isValidRestriction, bool HasRowData, bool isCorrectRowData, bool rowNoLongerVisible, bool isLastSetColumnData) {
            this.Manager.Comment("checking step \'event RopFindRowResponse(Forwards,True,True,True,False,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.FindRowFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.FindRowFlags)(0)), findRowFlags, "findRowFlags of RopFindRowResponse, state S401");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isValidRestriction, "isValidRestriction of RopFindRowResponse, state S401");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, HasRowData, "HasRowData of RopFindRowResponse, state S401");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isCorrectRowData, "isCorrectRowData of RopFindRowResponse, state S401");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, rowNoLongerVisible, "rowNoLongerVisible of RopFindRowResponse, state S401");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isLastSetColumnData, "isLastSetColumnData of RopFindRowResponse, state S401");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R534, MS-OXCTABL_R243, MS-OXCTABL_R540, M" +
                        "S-OXCTABL_R539, MS-OXCTABL_R813, MS-OXCTABL_R824, MS-OXCTABL_R225, MS-OXCTABL_R2" +
                        "39");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R534");
            this.Manager.Checkpoint("MS-OXCTABL_R243");
            this.Manager.Checkpoint("MS-OXCTABL_R540");
            this.Manager.Checkpoint("MS-OXCTABL_R539");
            this.Manager.Checkpoint("MS-OXCTABL_R813");
            this.Manager.Checkpoint("MS-OXCTABL_R824");
            this.Manager.Checkpoint("MS-OXCTABL_R225");
            this.Manager.Checkpoint("MS-OXCTABL_R239");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker123(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S203");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker124(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S339");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopFindRowResponseChecker62(Microsoft.Protocols.TestSuites.Common.FindRowFlags findRowFlags, bool isValidRestriction, bool HasRowData, bool isCorrectRowData, bool rowNoLongerVisible, bool isLastSetColumnData) {
            this.Manager.Comment("checking step \'event RopFindRowResponse(Forwards,True,True,True,False,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.FindRowFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.FindRowFlags)(0)), findRowFlags, "findRowFlags of RopFindRowResponse, state S402");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isValidRestriction, "isValidRestriction of RopFindRowResponse, state S402");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, HasRowData, "HasRowData of RopFindRowResponse, state S402");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isCorrectRowData, "isCorrectRowData of RopFindRowResponse, state S402");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, rowNoLongerVisible, "rowNoLongerVisible of RopFindRowResponse, state S402");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isLastSetColumnData, "isLastSetColumnData of RopFindRowResponse, state S402");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R534, MS-OXCTABL_R243, MS-OXCTABL_R540, M" +
                        "S-OXCTABL_R539, MS-OXCTABL_R813, MS-OXCTABL_R824, MS-OXCTABL_R225, MS-OXCTABL_R2" +
                        "39");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R534");
            this.Manager.Checkpoint("MS-OXCTABL_R243");
            this.Manager.Checkpoint("MS-OXCTABL_R540");
            this.Manager.Checkpoint("MS-OXCTABL_R539");
            this.Manager.Checkpoint("MS-OXCTABL_R813");
            this.Manager.Checkpoint("MS-OXCTABL_R824");
            this.Manager.Checkpoint("MS-OXCTABL_R225");
            this.Manager.Checkpoint("MS-OXCTABL_R239");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteCheckRequirementEnabledChecker125(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S339");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuiteRopFindRowResponseChecker63(Microsoft.Protocols.TestSuites.Common.FindRowFlags findRowFlags, bool isValidRestriction, bool HasRowData, bool isCorrectRowData, bool rowNoLongerVisible, bool isLastSetColumnData) {
            this.Manager.Comment("checking step \'event RopFindRowResponse(Forwards,True,True,True,False,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.FindRowFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.FindRowFlags)(0)), findRowFlags, "findRowFlags of RopFindRowResponse, state S403");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isValidRestriction, "isValidRestriction of RopFindRowResponse, state S403");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, HasRowData, "HasRowData of RopFindRowResponse, state S403");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isCorrectRowData, "isCorrectRowData of RopFindRowResponse, state S403");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, rowNoLongerVisible, "rowNoLongerVisible of RopFindRowResponse, state S403");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isLastSetColumnData, "isLastSetColumnData of RopFindRowResponse, state S403");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R534, MS-OXCTABL_R243, MS-OXCTABL_R540, M" +
                        "S-OXCTABL_R539, MS-OXCTABL_R813, MS-OXCTABL_R824, MS-OXCTABL_R225, MS-OXCTABL_R2" +
                        "39");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R534");
            this.Manager.Checkpoint("MS-OXCTABL_R243");
            this.Manager.Checkpoint("MS-OXCTABL_R540");
            this.Manager.Checkpoint("MS-OXCTABL_R539");
            this.Manager.Checkpoint("MS-OXCTABL_R813");
            this.Manager.Checkpoint("MS-OXCTABL_R824");
            this.Manager.Checkpoint("MS-OXCTABL_R225");
            this.Manager.Checkpoint("MS-OXCTABL_R239");
        }
        #endregion
        
        #region Test Starting in S2
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuite1() {
            this.Manager.BeginTest("MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuite1");
            this.Manager.Comment("reaching state \'S2\'");
            bool temp171;
            this.Manager.Comment("executing step \'call CheckMAPIHTTPTransportSupported(out _)\'");
            this.IMS_OXCTABLAdapterInstance.CheckMAPIHTTPTransportSupported(out temp171);
            this.Manager.AddReturn(CheckMAPIHTTPTransportSupportedInfo, null, temp171);
            this.Manager.Comment("reaching state \'S3\'");
            int temp194 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_FindRowSuccess_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuite1CheckMAPIHTTPTransportSupportedChecker)), new ExpectedReturn(S02_RowRops_FindRowSuccess_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuite1CheckMAPIHTTPTransportSupportedChecker1)));
            if ((temp194 == 0)) {
                this.Manager.Comment("reaching state \'S8\'");
                this.Manager.Comment("executing step \'call InitializeTable(HIERARCHY_TABLE)\'");
                this.IMS_OXCTABLAdapterInstance.InitializeTable(((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableType)(1)));
                this.Manager.Comment("reaching state \'S13\'");
                this.Manager.Comment("checking step \'return InitializeTable\'");
                this.Manager.Comment("reaching state \'S16\'");
                Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp172;
                this.Manager.Comment("executing step \'call RopQueryPosition()\'");
                temp172 = this.IMS_OXCTABLAdapterInstance.RopQueryPosition();
                this.Manager.Checkpoint("MS-OXCTABL_R844");
                this.Manager.Comment("reaching state \'S19\'");
                this.Manager.Comment("checking step \'return RopQueryPosition/success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp172, "return of RopQueryPosition, state S19");
                this.Manager.Comment("reaching state \'S22\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_FindRowSuccess_TestSuite.RopQueryPositionResponseInfo, null, new RopQueryPositionResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuite1RopQueryPositionResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S25\'");
                    Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp173;
                    this.Manager.Comment("executing step \'call RopSetColumns(1,False,False,False)\'");
                    temp173 = this.IMS_OXCTABLAdapterInstance.RopSetColumns(1u, false, false, false);
                    this.Manager.Checkpoint("MS-OXCTABL_R829");
                    this.Manager.Checkpoint("MS-OXCTABL_R45");
                    this.Manager.Comment("reaching state \'S28\'");
                    this.Manager.Comment("checking step \'return RopSetColumns/success\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp173, "return of RopSetColumns, state S28");
                    this.Manager.Comment("reaching state \'S31\'");
                    Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp174;
                    this.Manager.Comment("executing step \'call RopCreateBookmark()\'");
                    temp174 = this.IMS_OXCTABLAdapterInstance.RopCreateBookmark();
                    this.Manager.Checkpoint("MS-OXCTABL_R857");
                    this.Manager.Comment("reaching state \'S34\'");
                    this.Manager.Comment("checking step \'return RopCreateBookmark/success\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp174, "return of RopCreateBookmark, state S34");
                    this.Manager.Comment("reaching state \'S37\'");
                    Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp175;
                    this.Manager.Comment("executing step \'call RopQueryRows(Advance,True)\'");
                    temp175 = this.IMS_OXCTABLAdapterInstance.RopQueryRows(((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), true);
                    this.Manager.Checkpoint("MS-OXCTABL_R835");
                    this.Manager.Comment("reaching state \'S40\'");
                    this.Manager.Comment("checking step \'return RopQueryRows/success\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp175, "return of RopQueryRows, state S40");
                    this.Manager.Comment("reaching state \'S44\'");
                    bool temp176;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(610,out _)\'");
                    this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(610, out temp176);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp176);
                    this.Manager.Comment("reaching state \'S49\'");
                    int temp193 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_FindRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuite1CheckRequirementEnabledChecker)), new ExpectedReturn(S02_RowRops_FindRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuite1CheckRequirementEnabledChecker7)));
                    if ((temp193 == 0)) {
                        this.Manager.Comment("reaching state \'S56\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_FindRowSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuite1RopQueryRowsResponseChecker))) != -1)) {
                            this.Manager.Comment("reaching state \'S64\'");
                            bool temp177;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(827,out _)\'");
                            this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(827, out temp177);
                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp177);
                            this.Manager.Comment("reaching state \'S78\'");
                            int temp184 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_FindRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuite1CheckRequirementEnabledChecker1)), new ExpectedReturn(S02_RowRops_FindRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuite1CheckRequirementEnabledChecker4)));
                            if ((temp184 == 0)) {
                                this.Manager.Comment("reaching state \'S92\'");
                                Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp178;
                                this.Manager.Comment("executing step \'call RopFindRow(Forwards,BOOKMARK_CUSTOM,True)\'");
                                temp178 = this.IMS_OXCTABLAdapterInstance.RopFindRow(((Microsoft.Protocols.TestSuites.Common.FindRowFlags)(0)), Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_CUSTOM, true);
                                this.Manager.Checkpoint("MS-OXCTABL_R858");
                                this.Manager.Comment("reaching state \'S108\'");
                                this.Manager.Comment("checking step \'return RopFindRow/success\'");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp178, "return of RopFindRow, state S108");
                                this.Manager.Comment("reaching state \'S124\'");
                                bool temp179;
                                this.Manager.Comment("executing step \'call CheckRequirementEnabled(608,out _)\'");
                                this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(608, out temp179);
                                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp179);
                                this.Manager.Comment("reaching state \'S152\'");
                                int temp180 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_FindRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuite1CheckRequirementEnabledChecker2)), new ExpectedReturn(S02_RowRops_FindRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuite1CheckRequirementEnabledChecker3)));
                                if ((temp180 == 0)) {
                                    this.Manager.Comment("reaching state \'S180\'");
                                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_FindRowSuccess_TestSuite.RopFindRowResponseInfo, null, new RopFindRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuite1RopFindRowResponseChecker))) != -1)) {
                                        this.Manager.Comment("reaching state \'S204\'");
                                    }
                                    else {
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_FindRowSuccess_TestSuite.RopFindRowResponseInfo, null, new RopFindRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuite1RopFindRowResponseChecker)));
                                    }
                                    goto label64;
                                }
                                if ((temp180 == 1)) {
                                    this.Manager.Comment("reaching state \'S181\'");
                                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_FindRowSuccess_TestSuite.RopFindRowResponseInfo, null, new RopFindRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuite1RopFindRowResponseChecker1))) != -1)) {
                                        this.Manager.Comment("reaching state \'S205\'");
                                    }
                                    else {
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_FindRowSuccess_TestSuite.RopFindRowResponseInfo, null, new RopFindRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuite1RopFindRowResponseChecker1)));
                                    }
                                    goto label64;
                                }
                                throw new InvalidOperationException("never reached");
                            label64:
;
                                goto label66;
                            }
                            if ((temp184 == 1)) {
                                this.Manager.Comment("reaching state \'S93\'");
                                Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp181;
                                this.Manager.Comment("executing step \'call RopFindRow(Forwards,BOOKMARK_CUSTOM,True)\'");
                                temp181 = this.IMS_OXCTABLAdapterInstance.RopFindRow(((Microsoft.Protocols.TestSuites.Common.FindRowFlags)(0)), Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_CUSTOM, true);
                                this.Manager.Checkpoint("MS-OXCTABL_R858");
                                this.Manager.Comment("reaching state \'S109\'");
                                this.Manager.Comment("checking step \'return RopFindRow/success\'");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp181, "return of RopFindRow, state S109");
                                this.Manager.Comment("reaching state \'S125\'");
                                bool temp182;
                                this.Manager.Comment("executing step \'call CheckRequirementEnabled(608,out _)\'");
                                this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(608, out temp182);
                                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp182);
                                this.Manager.Comment("reaching state \'S153\'");
                                int temp183 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_FindRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuite1CheckRequirementEnabledChecker5)), new ExpectedReturn(S02_RowRops_FindRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuite1CheckRequirementEnabledChecker6)));
                                if ((temp183 == 0)) {
                                    this.Manager.Comment("reaching state \'S182\'");
                                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_FindRowSuccess_TestSuite.RopFindRowResponseInfo, null, new RopFindRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuite1RopFindRowResponseChecker2))) != -1)) {
                                        this.Manager.Comment("reaching state \'S206\'");
                                    }
                                    else {
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_FindRowSuccess_TestSuite.RopFindRowResponseInfo, null, new RopFindRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuite1RopFindRowResponseChecker2)));
                                    }
                                    goto label65;
                                }
                                if ((temp183 == 1)) {
                                    this.Manager.Comment("reaching state \'S183\'");
                                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_FindRowSuccess_TestSuite.RopFindRowResponseInfo, null, new RopFindRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuite1RopFindRowResponseChecker3))) != -1)) {
                                        this.Manager.Comment("reaching state \'S207\'");
                                    }
                                    else {
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_FindRowSuccess_TestSuite.RopFindRowResponseInfo, null, new RopFindRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuite1RopFindRowResponseChecker3)));
                                    }
                                    goto label65;
                                }
                                throw new InvalidOperationException("never reached");
                            label65:
;
                                goto label66;
                            }
                            throw new InvalidOperationException("never reached");
                        label66:
;
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_FindRowSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuite1RopQueryRowsResponseChecker)));
                        }
                        goto label70;
                    }
                    if ((temp193 == 1)) {
                        this.Manager.Comment("reaching state \'S57\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_FindRowSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuite1RopQueryRowsResponseChecker1))) != -1)) {
                            this.Manager.Comment("reaching state \'S65\'");
                            bool temp185;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(827,out _)\'");
                            this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(827, out temp185);
                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp185);
                            this.Manager.Comment("reaching state \'S79\'");
                            int temp192 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_FindRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuite1CheckRequirementEnabledChecker8)), new ExpectedReturn(S02_RowRops_FindRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuite1CheckRequirementEnabledChecker11)));
                            if ((temp192 == 0)) {
                                this.Manager.Comment("reaching state \'S94\'");
                                Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp186;
                                this.Manager.Comment("executing step \'call RopFindRow(Forwards,BOOKMARK_CUSTOM,True)\'");
                                temp186 = this.IMS_OXCTABLAdapterInstance.RopFindRow(((Microsoft.Protocols.TestSuites.Common.FindRowFlags)(0)), Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_CUSTOM, true);
                                this.Manager.Checkpoint("MS-OXCTABL_R858");
                                this.Manager.Comment("reaching state \'S110\'");
                                this.Manager.Comment("checking step \'return RopFindRow/success\'");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp186, "return of RopFindRow, state S110");
                                this.Manager.Comment("reaching state \'S126\'");
                                bool temp187;
                                this.Manager.Comment("executing step \'call CheckRequirementEnabled(608,out _)\'");
                                this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(608, out temp187);
                                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp187);
                                this.Manager.Comment("reaching state \'S154\'");
                                int temp188 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_FindRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuite1CheckRequirementEnabledChecker9)), new ExpectedReturn(S02_RowRops_FindRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuite1CheckRequirementEnabledChecker10)));
                                if ((temp188 == 0)) {
                                    this.Manager.Comment("reaching state \'S184\'");
                                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_FindRowSuccess_TestSuite.RopFindRowResponseInfo, null, new RopFindRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuite1RopFindRowResponseChecker4))) != -1)) {
                                        this.Manager.Comment("reaching state \'S208\'");
                                    }
                                    else {
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_FindRowSuccess_TestSuite.RopFindRowResponseInfo, null, new RopFindRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuite1RopFindRowResponseChecker4)));
                                    }
                                    goto label67;
                                }
                                if ((temp188 == 1)) {
                                    this.Manager.Comment("reaching state \'S185\'");
                                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_FindRowSuccess_TestSuite.RopFindRowResponseInfo, null, new RopFindRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuite1RopFindRowResponseChecker5))) != -1)) {
                                        this.Manager.Comment("reaching state \'S209\'");
                                    }
                                    else {
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_FindRowSuccess_TestSuite.RopFindRowResponseInfo, null, new RopFindRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuite1RopFindRowResponseChecker5)));
                                    }
                                    goto label67;
                                }
                                throw new InvalidOperationException("never reached");
                            label67:
;
                                goto label69;
                            }
                            if ((temp192 == 1)) {
                                this.Manager.Comment("reaching state \'S95\'");
                                Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp189;
                                this.Manager.Comment("executing step \'call RopFindRow(Forwards,BOOKMARK_CUSTOM,True)\'");
                                temp189 = this.IMS_OXCTABLAdapterInstance.RopFindRow(((Microsoft.Protocols.TestSuites.Common.FindRowFlags)(0)), Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_CUSTOM, true);
                                this.Manager.Checkpoint("MS-OXCTABL_R858");
                                this.Manager.Comment("reaching state \'S111\'");
                                this.Manager.Comment("checking step \'return RopFindRow/success\'");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp189, "return of RopFindRow, state S111");
                                this.Manager.Comment("reaching state \'S127\'");
                                bool temp190;
                                this.Manager.Comment("executing step \'call CheckRequirementEnabled(608,out _)\'");
                                this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(608, out temp190);
                                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp190);
                                this.Manager.Comment("reaching state \'S155\'");
                                int temp191 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_FindRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuite1CheckRequirementEnabledChecker12)), new ExpectedReturn(S02_RowRops_FindRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuite1CheckRequirementEnabledChecker13)));
                                if ((temp191 == 0)) {
                                    this.Manager.Comment("reaching state \'S186\'");
                                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_FindRowSuccess_TestSuite.RopFindRowResponseInfo, null, new RopFindRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuite1RopFindRowResponseChecker6))) != -1)) {
                                        this.Manager.Comment("reaching state \'S210\'");
                                    }
                                    else {
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_FindRowSuccess_TestSuite.RopFindRowResponseInfo, null, new RopFindRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuite1RopFindRowResponseChecker6)));
                                    }
                                    goto label68;
                                }
                                if ((temp191 == 1)) {
                                    this.Manager.Comment("reaching state \'S187\'");
                                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_FindRowSuccess_TestSuite.RopFindRowResponseInfo, null, new RopFindRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuite1RopFindRowResponseChecker7))) != -1)) {
                                        this.Manager.Comment("reaching state \'S211\'");
                                    }
                                    else {
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_FindRowSuccess_TestSuite.RopFindRowResponseInfo, null, new RopFindRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuite1RopFindRowResponseChecker7)));
                                    }
                                    goto label68;
                                }
                                throw new InvalidOperationException("never reached");
                            label68:
;
                                goto label69;
                            }
                            throw new InvalidOperationException("never reached");
                        label69:
;
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_FindRowSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuite1RopQueryRowsResponseChecker1)));
                        }
                        goto label70;
                    }
                    throw new InvalidOperationException("never reached");
                label70:
;
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_FindRowSuccess_TestSuite.RopQueryPositionResponseInfo, null, new RopQueryPositionResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuite1RopQueryPositionResponseChecker)));
                }
                goto label71;
            }
            if ((temp194 == 1)) {
                this.Manager.Comment("reaching state \'S9\'");
                goto label71;
            }
            throw new InvalidOperationException("never reached");
        label71:
;
            this.Manager.EndTest();
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuite1CheckMAPIHTTPTransportSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S3");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuite1RopQueryPositionResponseChecker(Microsoft.Protocols.TestSuites.MS_OXCTABL.CursorPosition cursorPosition, bool isRowCount) {
            this.Manager.Comment("checking step \'event RopQueryPositionResponse(BEGIN,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.CursorPosition>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.CursorPosition)(0)), cursorPosition, "cursorPosition of RopQueryPositionResponse, state S22");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRowCount, "isRowCount of RopQueryPositionResponse, state S22");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R491");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R491");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuite1CheckRequirementEnabledChecker(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S49");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuite1RopQueryRowsResponseChecker(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,CREATEBOOKMARK,True," +
                    "True,True,True,BOOKMARK_END,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S56");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S56");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S56");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType.CREATEBOOKMARK, ropType, "ropType of RopQueryRowsResponse, state S56");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S56");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S56");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S56");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S56");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_END, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S56");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S56");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R29, MS-OXCTABL_R725");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R29");
            this.Manager.Checkpoint("MS-OXCTABL_R725");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuite1CheckRequirementEnabledChecker1(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S78");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuite1CheckRequirementEnabledChecker2(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S152");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuite1RopFindRowResponseChecker(Microsoft.Protocols.TestSuites.Common.FindRowFlags findRowFlags, bool isValidRestriction, bool HasRowData, bool isCorrectRowData, bool rowNoLongerVisible, bool isLastSetColumnData) {
            this.Manager.Comment("checking step \'event RopFindRowResponse(Forwards,True,True,True,False,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.FindRowFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.FindRowFlags)(0)), findRowFlags, "findRowFlags of RopFindRowResponse, state S180");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isValidRestriction, "isValidRestriction of RopFindRowResponse, state S180");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, HasRowData, "HasRowData of RopFindRowResponse, state S180");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isCorrectRowData, "isCorrectRowData of RopFindRowResponse, state S180");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, rowNoLongerVisible, "rowNoLongerVisible of RopFindRowResponse, state S180");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isLastSetColumnData, "isLastSetColumnData of RopFindRowResponse, state S180");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R608, MS-OXCTABL_R534, MS-OXCTABL_R243, M" +
                        "S-OXCTABL_R540, MS-OXCTABL_R539, MS-OXCTABL_R813, MS-OXCTABL_R824, MS-OXCTABL_R2" +
                        "25, MS-OXCTABL_R239");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R608");
            this.Manager.Checkpoint("MS-OXCTABL_R534");
            this.Manager.Checkpoint("MS-OXCTABL_R243");
            this.Manager.Checkpoint("MS-OXCTABL_R540");
            this.Manager.Checkpoint("MS-OXCTABL_R539");
            this.Manager.Checkpoint("MS-OXCTABL_R813");
            this.Manager.Checkpoint("MS-OXCTABL_R824");
            this.Manager.Checkpoint("MS-OXCTABL_R225");
            this.Manager.Checkpoint("MS-OXCTABL_R239");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuite1CheckRequirementEnabledChecker3(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S152");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuite1RopFindRowResponseChecker1(Microsoft.Protocols.TestSuites.Common.FindRowFlags findRowFlags, bool isValidRestriction, bool HasRowData, bool isCorrectRowData, bool rowNoLongerVisible, bool isLastSetColumnData) {
            this.Manager.Comment("checking step \'event RopFindRowResponse(Forwards,True,True,True,False,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.FindRowFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.FindRowFlags)(0)), findRowFlags, "findRowFlags of RopFindRowResponse, state S181");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isValidRestriction, "isValidRestriction of RopFindRowResponse, state S181");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, HasRowData, "HasRowData of RopFindRowResponse, state S181");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isCorrectRowData, "isCorrectRowData of RopFindRowResponse, state S181");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, rowNoLongerVisible, "rowNoLongerVisible of RopFindRowResponse, state S181");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isLastSetColumnData, "isLastSetColumnData of RopFindRowResponse, state S181");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R534, MS-OXCTABL_R243, MS-OXCTABL_R540, M" +
                        "S-OXCTABL_R539, MS-OXCTABL_R813, MS-OXCTABL_R824, MS-OXCTABL_R225, MS-OXCTABL_R2" +
                        "39");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R534");
            this.Manager.Checkpoint("MS-OXCTABL_R243");
            this.Manager.Checkpoint("MS-OXCTABL_R540");
            this.Manager.Checkpoint("MS-OXCTABL_R539");
            this.Manager.Checkpoint("MS-OXCTABL_R813");
            this.Manager.Checkpoint("MS-OXCTABL_R824");
            this.Manager.Checkpoint("MS-OXCTABL_R225");
            this.Manager.Checkpoint("MS-OXCTABL_R239");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuite1CheckRequirementEnabledChecker4(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S78");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuite1CheckRequirementEnabledChecker5(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S153");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuite1RopFindRowResponseChecker2(Microsoft.Protocols.TestSuites.Common.FindRowFlags findRowFlags, bool isValidRestriction, bool HasRowData, bool isCorrectRowData, bool rowNoLongerVisible, bool isLastSetColumnData) {
            this.Manager.Comment("checking step \'event RopFindRowResponse(Forwards,True,True,True,False,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.FindRowFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.FindRowFlags)(0)), findRowFlags, "findRowFlags of RopFindRowResponse, state S182");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isValidRestriction, "isValidRestriction of RopFindRowResponse, state S182");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, HasRowData, "HasRowData of RopFindRowResponse, state S182");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isCorrectRowData, "isCorrectRowData of RopFindRowResponse, state S182");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, rowNoLongerVisible, "rowNoLongerVisible of RopFindRowResponse, state S182");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isLastSetColumnData, "isLastSetColumnData of RopFindRowResponse, state S182");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R608, MS-OXCTABL_R534, MS-OXCTABL_R243, M" +
                        "S-OXCTABL_R540, MS-OXCTABL_R539, MS-OXCTABL_R813, MS-OXCTABL_R824, MS-OXCTABL_R2" +
                        "25, MS-OXCTABL_R239");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R608");
            this.Manager.Checkpoint("MS-OXCTABL_R534");
            this.Manager.Checkpoint("MS-OXCTABL_R243");
            this.Manager.Checkpoint("MS-OXCTABL_R540");
            this.Manager.Checkpoint("MS-OXCTABL_R539");
            this.Manager.Checkpoint("MS-OXCTABL_R813");
            this.Manager.Checkpoint("MS-OXCTABL_R824");
            this.Manager.Checkpoint("MS-OXCTABL_R225");
            this.Manager.Checkpoint("MS-OXCTABL_R239");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuite1CheckRequirementEnabledChecker6(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S153");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuite1RopFindRowResponseChecker3(Microsoft.Protocols.TestSuites.Common.FindRowFlags findRowFlags, bool isValidRestriction, bool HasRowData, bool isCorrectRowData, bool rowNoLongerVisible, bool isLastSetColumnData) {
            this.Manager.Comment("checking step \'event RopFindRowResponse(Forwards,True,True,True,False,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.FindRowFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.FindRowFlags)(0)), findRowFlags, "findRowFlags of RopFindRowResponse, state S183");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isValidRestriction, "isValidRestriction of RopFindRowResponse, state S183");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, HasRowData, "HasRowData of RopFindRowResponse, state S183");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isCorrectRowData, "isCorrectRowData of RopFindRowResponse, state S183");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, rowNoLongerVisible, "rowNoLongerVisible of RopFindRowResponse, state S183");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isLastSetColumnData, "isLastSetColumnData of RopFindRowResponse, state S183");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R534, MS-OXCTABL_R243, MS-OXCTABL_R540, M" +
                        "S-OXCTABL_R539, MS-OXCTABL_R813, MS-OXCTABL_R824, MS-OXCTABL_R225, MS-OXCTABL_R2" +
                        "39");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R534");
            this.Manager.Checkpoint("MS-OXCTABL_R243");
            this.Manager.Checkpoint("MS-OXCTABL_R540");
            this.Manager.Checkpoint("MS-OXCTABL_R539");
            this.Manager.Checkpoint("MS-OXCTABL_R813");
            this.Manager.Checkpoint("MS-OXCTABL_R824");
            this.Manager.Checkpoint("MS-OXCTABL_R225");
            this.Manager.Checkpoint("MS-OXCTABL_R239");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuite1CheckRequirementEnabledChecker7(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S49");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuite1RopQueryRowsResponseChecker1(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,CREATEBOOKMARK,True," +
                    "True,True,True,BOOKMARK_END,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S57");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S57");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S57");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType.CREATEBOOKMARK, ropType, "ropType of RopQueryRowsResponse, state S57");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S57");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S57");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S57");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S57");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_END, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S57");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S57");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R29, MS-OXCTABL_R725");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R29");
            this.Manager.Checkpoint("MS-OXCTABL_R725");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuite1CheckRequirementEnabledChecker8(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S79");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuite1CheckRequirementEnabledChecker9(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S154");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuite1RopFindRowResponseChecker4(Microsoft.Protocols.TestSuites.Common.FindRowFlags findRowFlags, bool isValidRestriction, bool HasRowData, bool isCorrectRowData, bool rowNoLongerVisible, bool isLastSetColumnData) {
            this.Manager.Comment("checking step \'event RopFindRowResponse(Forwards,True,True,True,False,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.FindRowFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.FindRowFlags)(0)), findRowFlags, "findRowFlags of RopFindRowResponse, state S184");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isValidRestriction, "isValidRestriction of RopFindRowResponse, state S184");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, HasRowData, "HasRowData of RopFindRowResponse, state S184");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isCorrectRowData, "isCorrectRowData of RopFindRowResponse, state S184");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, rowNoLongerVisible, "rowNoLongerVisible of RopFindRowResponse, state S184");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isLastSetColumnData, "isLastSetColumnData of RopFindRowResponse, state S184");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R608, MS-OXCTABL_R534, MS-OXCTABL_R243, M" +
                        "S-OXCTABL_R540, MS-OXCTABL_R539, MS-OXCTABL_R813, MS-OXCTABL_R824, MS-OXCTABL_R2" +
                        "25, MS-OXCTABL_R239");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R608");
            this.Manager.Checkpoint("MS-OXCTABL_R534");
            this.Manager.Checkpoint("MS-OXCTABL_R243");
            this.Manager.Checkpoint("MS-OXCTABL_R540");
            this.Manager.Checkpoint("MS-OXCTABL_R539");
            this.Manager.Checkpoint("MS-OXCTABL_R813");
            this.Manager.Checkpoint("MS-OXCTABL_R824");
            this.Manager.Checkpoint("MS-OXCTABL_R225");
            this.Manager.Checkpoint("MS-OXCTABL_R239");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuite1CheckRequirementEnabledChecker10(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S154");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuite1RopFindRowResponseChecker5(Microsoft.Protocols.TestSuites.Common.FindRowFlags findRowFlags, bool isValidRestriction, bool HasRowData, bool isCorrectRowData, bool rowNoLongerVisible, bool isLastSetColumnData) {
            this.Manager.Comment("checking step \'event RopFindRowResponse(Forwards,True,True,True,False,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.FindRowFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.FindRowFlags)(0)), findRowFlags, "findRowFlags of RopFindRowResponse, state S185");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isValidRestriction, "isValidRestriction of RopFindRowResponse, state S185");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, HasRowData, "HasRowData of RopFindRowResponse, state S185");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isCorrectRowData, "isCorrectRowData of RopFindRowResponse, state S185");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, rowNoLongerVisible, "rowNoLongerVisible of RopFindRowResponse, state S185");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isLastSetColumnData, "isLastSetColumnData of RopFindRowResponse, state S185");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R534, MS-OXCTABL_R243, MS-OXCTABL_R540, M" +
                        "S-OXCTABL_R539, MS-OXCTABL_R813, MS-OXCTABL_R824, MS-OXCTABL_R225, MS-OXCTABL_R2" +
                        "39");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R534");
            this.Manager.Checkpoint("MS-OXCTABL_R243");
            this.Manager.Checkpoint("MS-OXCTABL_R540");
            this.Manager.Checkpoint("MS-OXCTABL_R539");
            this.Manager.Checkpoint("MS-OXCTABL_R813");
            this.Manager.Checkpoint("MS-OXCTABL_R824");
            this.Manager.Checkpoint("MS-OXCTABL_R225");
            this.Manager.Checkpoint("MS-OXCTABL_R239");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuite1CheckRequirementEnabledChecker11(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S79");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuite1CheckRequirementEnabledChecker12(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S155");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuite1RopFindRowResponseChecker6(Microsoft.Protocols.TestSuites.Common.FindRowFlags findRowFlags, bool isValidRestriction, bool HasRowData, bool isCorrectRowData, bool rowNoLongerVisible, bool isLastSetColumnData) {
            this.Manager.Comment("checking step \'event RopFindRowResponse(Forwards,True,True,True,False,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.FindRowFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.FindRowFlags)(0)), findRowFlags, "findRowFlags of RopFindRowResponse, state S186");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isValidRestriction, "isValidRestriction of RopFindRowResponse, state S186");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, HasRowData, "HasRowData of RopFindRowResponse, state S186");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isCorrectRowData, "isCorrectRowData of RopFindRowResponse, state S186");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, rowNoLongerVisible, "rowNoLongerVisible of RopFindRowResponse, state S186");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isLastSetColumnData, "isLastSetColumnData of RopFindRowResponse, state S186");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R608, MS-OXCTABL_R534, MS-OXCTABL_R243, M" +
                        "S-OXCTABL_R540, MS-OXCTABL_R539, MS-OXCTABL_R813, MS-OXCTABL_R824, MS-OXCTABL_R2" +
                        "25, MS-OXCTABL_R239");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R608");
            this.Manager.Checkpoint("MS-OXCTABL_R534");
            this.Manager.Checkpoint("MS-OXCTABL_R243");
            this.Manager.Checkpoint("MS-OXCTABL_R540");
            this.Manager.Checkpoint("MS-OXCTABL_R539");
            this.Manager.Checkpoint("MS-OXCTABL_R813");
            this.Manager.Checkpoint("MS-OXCTABL_R824");
            this.Manager.Checkpoint("MS-OXCTABL_R225");
            this.Manager.Checkpoint("MS-OXCTABL_R239");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuite1CheckRequirementEnabledChecker13(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S155");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuite1RopFindRowResponseChecker7(Microsoft.Protocols.TestSuites.Common.FindRowFlags findRowFlags, bool isValidRestriction, bool HasRowData, bool isCorrectRowData, bool rowNoLongerVisible, bool isLastSetColumnData) {
            this.Manager.Comment("checking step \'event RopFindRowResponse(Forwards,True,True,True,False,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.FindRowFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.FindRowFlags)(0)), findRowFlags, "findRowFlags of RopFindRowResponse, state S187");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isValidRestriction, "isValidRestriction of RopFindRowResponse, state S187");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, HasRowData, "HasRowData of RopFindRowResponse, state S187");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isCorrectRowData, "isCorrectRowData of RopFindRowResponse, state S187");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, rowNoLongerVisible, "rowNoLongerVisible of RopFindRowResponse, state S187");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isLastSetColumnData, "isLastSetColumnData of RopFindRowResponse, state S187");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R534, MS-OXCTABL_R243, MS-OXCTABL_R540, M" +
                        "S-OXCTABL_R539, MS-OXCTABL_R813, MS-OXCTABL_R824, MS-OXCTABL_R225, MS-OXCTABL_R2" +
                        "39");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R534");
            this.Manager.Checkpoint("MS-OXCTABL_R243");
            this.Manager.Checkpoint("MS-OXCTABL_R540");
            this.Manager.Checkpoint("MS-OXCTABL_R539");
            this.Manager.Checkpoint("MS-OXCTABL_R813");
            this.Manager.Checkpoint("MS-OXCTABL_R824");
            this.Manager.Checkpoint("MS-OXCTABL_R225");
            this.Manager.Checkpoint("MS-OXCTABL_R239");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuite1CheckMAPIHTTPTransportSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S3");
        }
        #endregion
        
        #region Test Starting in S4
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuite2() {
            this.Manager.BeginTest("MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuite2");
            this.Manager.Comment("reaching state \'S4\'");
            bool temp195;
            this.Manager.Comment("executing step \'call CheckMAPIHTTPTransportSupported(out _)\'");
            this.IMS_OXCTABLAdapterInstance.CheckMAPIHTTPTransportSupported(out temp195);
            this.Manager.AddReturn(CheckMAPIHTTPTransportSupportedInfo, null, temp195);
            this.Manager.Comment("reaching state \'S5\'");
            int temp225 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_FindRowSuccess_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuite2CheckMAPIHTTPTransportSupportedChecker)), new ExpectedReturn(S02_RowRops_FindRowSuccess_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuite2CheckMAPIHTTPTransportSupportedChecker1)));
            if ((temp225 == 0)) {
                this.Manager.Comment("reaching state \'S10\'");
                this.Manager.Comment("executing step \'call InitializeTable(RULES_TABLE)\'");
                this.IMS_OXCTABLAdapterInstance.InitializeTable(Microsoft.Protocols.TestSuites.MS_OXCTABL.TableType.RULES_TABLE);
                this.Manager.Comment("reaching state \'S14\'");
                this.Manager.Comment("checking step \'return InitializeTable\'");
                this.Manager.Comment("reaching state \'S17\'");
                Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp196;
                this.Manager.Comment("executing step \'call RopQueryPosition()\'");
                temp196 = this.IMS_OXCTABLAdapterInstance.RopQueryPosition();
                this.Manager.Checkpoint("MS-OXCTABL_R845");
                this.Manager.Comment("reaching state \'S20\'");
                this.Manager.Comment("checking step \'return RopQueryPosition/success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp196, "return of RopQueryPosition, state S20");
                this.Manager.Comment("reaching state \'S23\'");
                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_FindRowSuccess_TestSuite.RopQueryPositionResponseInfo, null, new RopQueryPositionResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuite2RopQueryPositionResponseChecker))) != -1)) {
                    this.Manager.Comment("reaching state \'S26\'");
                    Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp197;
                    this.Manager.Comment("executing step \'call RopSetColumns(1,False,False,False)\'");
                    temp197 = this.IMS_OXCTABLAdapterInstance.RopSetColumns(1u, false, false, false);
                    this.Manager.Checkpoint("MS-OXCTABL_R830");
                    this.Manager.Checkpoint("MS-OXCTABL_R45");
                    this.Manager.Comment("reaching state \'S29\'");
                    this.Manager.Comment("checking step \'return RopSetColumns/success\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp197, "return of RopSetColumns, state S29");
                    this.Manager.Comment("reaching state \'S32\'");
                    Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp198;
                    this.Manager.Comment("executing step \'call RopQueryRows(Advance,True)\'");
                    temp198 = this.IMS_OXCTABLAdapterInstance.RopQueryRows(((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), true);
                    this.Manager.Checkpoint("MS-OXCTABL_R836");
                    this.Manager.Comment("reaching state \'S35\'");
                    this.Manager.Comment("checking step \'return RopQueryRows/success\'");
                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp198, "return of RopQueryRows, state S35");
                    this.Manager.Comment("reaching state \'S38\'");
                    bool temp199;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(610,out _)\'");
                    this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(610, out temp199);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp199);
                    this.Manager.Comment("reaching state \'S41\'");
                    int temp224 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_FindRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuite2CheckRequirementEnabledChecker)), new ExpectedReturn(S02_RowRops_FindRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuite2CheckRequirementEnabledChecker7)));
                    if ((temp224 == 0)) {
                        this.Manager.Comment("reaching state \'S45\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_FindRowSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuite2RopQueryRowsResponseChecker))) != -1)) {
                            this.Manager.Comment("reaching state \'S50\'");
                            bool temp200;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(827,out _)\'");
                            this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(827, out temp200);
                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp200);
                            this.Manager.Comment("reaching state \'S58\'");
                            int temp211 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_FindRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuite2CheckRequirementEnabledChecker1)), new ExpectedReturn(S02_RowRops_FindRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuite2CheckRequirementEnabledChecker4)));
                            if ((temp211 == 0)) {
                                this.Manager.Comment("reaching state \'S66\'");
                                Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp201;
                                this.Manager.Comment("executing step \'call RopFindRow(Forwards,BOOKMARK_BEGINNING,True)\'");
                                temp201 = this.IMS_OXCTABLAdapterInstance.RopFindRow(((Microsoft.Protocols.TestSuites.Common.FindRowFlags)(0)), ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(0)), true);
                                this.Manager.Checkpoint("MS-OXCTABL_R874");
                                this.Manager.Comment("reaching state \'S80\'");
                                this.Manager.Comment("checking step \'return RopFindRow/success\'");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp201, "return of RopFindRow, state S80");
                                this.Manager.Comment("reaching state \'S96\'");
                                bool temp202;
                                this.Manager.Comment("executing step \'call CheckRequirementEnabled(608,out _)\'");
                                this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(608, out temp202);
                                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp202);
                                this.Manager.Comment("reaching state \'S112\'");
                                int temp205 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_FindRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuite2CheckRequirementEnabledChecker2)), new ExpectedReturn(S02_RowRops_FindRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuite2CheckRequirementEnabledChecker3)));
                                if ((temp205 == 0)) {
                                    this.Manager.Comment("reaching state \'S128\'");
                                    int temp203 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_FindRowSuccess_TestSuite.RopFindRowResponseInfo, null, new RopFindRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuite2RopFindRowResponseChecker)), new ExpectedEvent(S02_RowRops_FindRowSuccess_TestSuite.RopFindRowResponseInfo, null, new RopFindRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuite2RopFindRowResponseChecker1)));
                                    if ((temp203 == 0)) {
                                        S02_RowRops_FindRowSuccess_TestSuiteS156();
                                        goto label72;
                                    }
                                    if ((temp203 == 1)) {
                                        S02_RowRops_FindRowSuccess_TestSuiteS156();
                                        goto label72;
                                    }
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_FindRowSuccess_TestSuite.RopFindRowResponseInfo, null, new RopFindRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuite2RopFindRowResponseChecker)), new ExpectedEvent(S02_RowRops_FindRowSuccess_TestSuite.RopFindRowResponseInfo, null, new RopFindRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuite2RopFindRowResponseChecker1)));
                                label72:
;
                                    goto label74;
                                }
                                if ((temp205 == 1)) {
                                    this.Manager.Comment("reaching state \'S129\'");
                                    int temp204 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_FindRowSuccess_TestSuite.RopFindRowResponseInfo, null, new RopFindRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuite2RopFindRowResponseChecker2)), new ExpectedEvent(S02_RowRops_FindRowSuccess_TestSuite.RopFindRowResponseInfo, null, new RopFindRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuite2RopFindRowResponseChecker3)));
                                    if ((temp204 == 0)) {
                                        S02_RowRops_FindRowSuccess_TestSuiteS157();
                                        goto label73;
                                    }
                                    if ((temp204 == 1)) {
                                        S02_RowRops_FindRowSuccess_TestSuiteS157();
                                        goto label73;
                                    }
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_FindRowSuccess_TestSuite.RopFindRowResponseInfo, null, new RopFindRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuite2RopFindRowResponseChecker2)), new ExpectedEvent(S02_RowRops_FindRowSuccess_TestSuite.RopFindRowResponseInfo, null, new RopFindRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuite2RopFindRowResponseChecker3)));
                                label73:
;
                                    goto label74;
                                }
                                throw new InvalidOperationException("never reached");
                            label74:
;
                                goto label78;
                            }
                            if ((temp211 == 1)) {
                                this.Manager.Comment("reaching state \'S67\'");
                                Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp206;
                                this.Manager.Comment("executing step \'call RopFindRow(Forwards,BOOKMARK_BEGINNING,True)\'");
                                temp206 = this.IMS_OXCTABLAdapterInstance.RopFindRow(((Microsoft.Protocols.TestSuites.Common.FindRowFlags)(0)), ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(0)), true);
                                this.Manager.Checkpoint("MS-OXCTABL_R874");
                                this.Manager.Comment("reaching state \'S81\'");
                                this.Manager.Comment("checking step \'return RopFindRow/success\'");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp206, "return of RopFindRow, state S81");
                                this.Manager.Comment("reaching state \'S97\'");
                                bool temp207;
                                this.Manager.Comment("executing step \'call CheckRequirementEnabled(608,out _)\'");
                                this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(608, out temp207);
                                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp207);
                                this.Manager.Comment("reaching state \'S113\'");
                                int temp210 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_FindRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuite2CheckRequirementEnabledChecker5)), new ExpectedReturn(S02_RowRops_FindRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuite2CheckRequirementEnabledChecker6)));
                                if ((temp210 == 0)) {
                                    this.Manager.Comment("reaching state \'S130\'");
                                    int temp208 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_FindRowSuccess_TestSuite.RopFindRowResponseInfo, null, new RopFindRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuite2RopFindRowResponseChecker4)), new ExpectedEvent(S02_RowRops_FindRowSuccess_TestSuite.RopFindRowResponseInfo, null, new RopFindRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuite2RopFindRowResponseChecker5)));
                                    if ((temp208 == 0)) {
                                        S02_RowRops_FindRowSuccess_TestSuiteS158();
                                        goto label75;
                                    }
                                    if ((temp208 == 1)) {
                                        S02_RowRops_FindRowSuccess_TestSuiteS158();
                                        goto label75;
                                    }
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_FindRowSuccess_TestSuite.RopFindRowResponseInfo, null, new RopFindRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuite2RopFindRowResponseChecker4)), new ExpectedEvent(S02_RowRops_FindRowSuccess_TestSuite.RopFindRowResponseInfo, null, new RopFindRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuite2RopFindRowResponseChecker5)));
                                label75:
;
                                    goto label77;
                                }
                                if ((temp210 == 1)) {
                                    this.Manager.Comment("reaching state \'S131\'");
                                    int temp209 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_FindRowSuccess_TestSuite.RopFindRowResponseInfo, null, new RopFindRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuite2RopFindRowResponseChecker6)), new ExpectedEvent(S02_RowRops_FindRowSuccess_TestSuite.RopFindRowResponseInfo, null, new RopFindRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuite2RopFindRowResponseChecker7)));
                                    if ((temp209 == 0)) {
                                        S02_RowRops_FindRowSuccess_TestSuiteS159();
                                        goto label76;
                                    }
                                    if ((temp209 == 1)) {
                                        S02_RowRops_FindRowSuccess_TestSuiteS159();
                                        goto label76;
                                    }
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_FindRowSuccess_TestSuite.RopFindRowResponseInfo, null, new RopFindRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuite2RopFindRowResponseChecker6)), new ExpectedEvent(S02_RowRops_FindRowSuccess_TestSuite.RopFindRowResponseInfo, null, new RopFindRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuite2RopFindRowResponseChecker7)));
                                label76:
;
                                    goto label77;
                                }
                                throw new InvalidOperationException("never reached");
                            label77:
;
                                goto label78;
                            }
                            throw new InvalidOperationException("never reached");
                        label78:
;
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_FindRowSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuite2RopQueryRowsResponseChecker)));
                        }
                        goto label86;
                    }
                    if ((temp224 == 1)) {
                        this.Manager.Comment("reaching state \'S46\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_FindRowSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuite2RopQueryRowsResponseChecker1))) != -1)) {
                            this.Manager.Comment("reaching state \'S51\'");
                            bool temp212;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(827,out _)\'");
                            this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(827, out temp212);
                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp212);
                            this.Manager.Comment("reaching state \'S59\'");
                            int temp223 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_FindRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuite2CheckRequirementEnabledChecker8)), new ExpectedReturn(S02_RowRops_FindRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuite2CheckRequirementEnabledChecker11)));
                            if ((temp223 == 0)) {
                                this.Manager.Comment("reaching state \'S68\'");
                                Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp213;
                                this.Manager.Comment("executing step \'call RopFindRow(Forwards,BOOKMARK_BEGINNING,True)\'");
                                temp213 = this.IMS_OXCTABLAdapterInstance.RopFindRow(((Microsoft.Protocols.TestSuites.Common.FindRowFlags)(0)), ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(0)), true);
                                this.Manager.Checkpoint("MS-OXCTABL_R874");
                                this.Manager.Comment("reaching state \'S82\'");
                                this.Manager.Comment("checking step \'return RopFindRow/success\'");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp213, "return of RopFindRow, state S82");
                                this.Manager.Comment("reaching state \'S98\'");
                                bool temp214;
                                this.Manager.Comment("executing step \'call CheckRequirementEnabled(608,out _)\'");
                                this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(608, out temp214);
                                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp214);
                                this.Manager.Comment("reaching state \'S114\'");
                                int temp217 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_FindRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuite2CheckRequirementEnabledChecker9)), new ExpectedReturn(S02_RowRops_FindRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuite2CheckRequirementEnabledChecker10)));
                                if ((temp217 == 0)) {
                                    this.Manager.Comment("reaching state \'S132\'");
                                    int temp215 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_FindRowSuccess_TestSuite.RopFindRowResponseInfo, null, new RopFindRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuite2RopFindRowResponseChecker8)), new ExpectedEvent(S02_RowRops_FindRowSuccess_TestSuite.RopFindRowResponseInfo, null, new RopFindRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuite2RopFindRowResponseChecker9)));
                                    if ((temp215 == 0)) {
                                        S02_RowRops_FindRowSuccess_TestSuiteS160();
                                        goto label79;
                                    }
                                    if ((temp215 == 1)) {
                                        S02_RowRops_FindRowSuccess_TestSuiteS160();
                                        goto label79;
                                    }
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_FindRowSuccess_TestSuite.RopFindRowResponseInfo, null, new RopFindRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuite2RopFindRowResponseChecker8)), new ExpectedEvent(S02_RowRops_FindRowSuccess_TestSuite.RopFindRowResponseInfo, null, new RopFindRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuite2RopFindRowResponseChecker9)));
                                label79:
;
                                    goto label81;
                                }
                                if ((temp217 == 1)) {
                                    this.Manager.Comment("reaching state \'S133\'");
                                    int temp216 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_FindRowSuccess_TestSuite.RopFindRowResponseInfo, null, new RopFindRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuite2RopFindRowResponseChecker10)), new ExpectedEvent(S02_RowRops_FindRowSuccess_TestSuite.RopFindRowResponseInfo, null, new RopFindRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuite2RopFindRowResponseChecker11)));
                                    if ((temp216 == 0)) {
                                        S02_RowRops_FindRowSuccess_TestSuiteS161();
                                        goto label80;
                                    }
                                    if ((temp216 == 1)) {
                                        S02_RowRops_FindRowSuccess_TestSuiteS161();
                                        goto label80;
                                    }
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_FindRowSuccess_TestSuite.RopFindRowResponseInfo, null, new RopFindRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuite2RopFindRowResponseChecker10)), new ExpectedEvent(S02_RowRops_FindRowSuccess_TestSuite.RopFindRowResponseInfo, null, new RopFindRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuite2RopFindRowResponseChecker11)));
                                label80:
;
                                    goto label81;
                                }
                                throw new InvalidOperationException("never reached");
                            label81:
;
                                goto label85;
                            }
                            if ((temp223 == 1)) {
                                this.Manager.Comment("reaching state \'S69\'");
                                Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp218;
                                this.Manager.Comment("executing step \'call RopFindRow(Forwards,BOOKMARK_BEGINNING,True)\'");
                                temp218 = this.IMS_OXCTABLAdapterInstance.RopFindRow(((Microsoft.Protocols.TestSuites.Common.FindRowFlags)(0)), ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(0)), true);
                                this.Manager.Checkpoint("MS-OXCTABL_R874");
                                this.Manager.Comment("reaching state \'S83\'");
                                this.Manager.Comment("checking step \'return RopFindRow/success\'");
                                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp218, "return of RopFindRow, state S83");
                                this.Manager.Comment("reaching state \'S99\'");
                                bool temp219;
                                this.Manager.Comment("executing step \'call CheckRequirementEnabled(608,out _)\'");
                                this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(608, out temp219);
                                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp219);
                                this.Manager.Comment("reaching state \'S115\'");
                                int temp222 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_FindRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuite2CheckRequirementEnabledChecker12)), new ExpectedReturn(S02_RowRops_FindRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuite2CheckRequirementEnabledChecker13)));
                                if ((temp222 == 0)) {
                                    this.Manager.Comment("reaching state \'S134\'");
                                    int temp220 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_FindRowSuccess_TestSuite.RopFindRowResponseInfo, null, new RopFindRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuite2RopFindRowResponseChecker12)), new ExpectedEvent(S02_RowRops_FindRowSuccess_TestSuite.RopFindRowResponseInfo, null, new RopFindRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuite2RopFindRowResponseChecker13)));
                                    if ((temp220 == 0)) {
                                        S02_RowRops_FindRowSuccess_TestSuiteS162();
                                        goto label82;
                                    }
                                    if ((temp220 == 1)) {
                                        S02_RowRops_FindRowSuccess_TestSuiteS162();
                                        goto label82;
                                    }
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_FindRowSuccess_TestSuite.RopFindRowResponseInfo, null, new RopFindRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuite2RopFindRowResponseChecker12)), new ExpectedEvent(S02_RowRops_FindRowSuccess_TestSuite.RopFindRowResponseInfo, null, new RopFindRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuite2RopFindRowResponseChecker13)));
                                label82:
;
                                    goto label84;
                                }
                                if ((temp222 == 1)) {
                                    this.Manager.Comment("reaching state \'S135\'");
                                    int temp221 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_FindRowSuccess_TestSuite.RopFindRowResponseInfo, null, new RopFindRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuite2RopFindRowResponseChecker14)), new ExpectedEvent(S02_RowRops_FindRowSuccess_TestSuite.RopFindRowResponseInfo, null, new RopFindRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuite2RopFindRowResponseChecker15)));
                                    if ((temp221 == 0)) {
                                        S02_RowRops_FindRowSuccess_TestSuiteS163();
                                        goto label83;
                                    }
                                    if ((temp221 == 1)) {
                                        S02_RowRops_FindRowSuccess_TestSuiteS163();
                                        goto label83;
                                    }
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_FindRowSuccess_TestSuite.RopFindRowResponseInfo, null, new RopFindRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuite2RopFindRowResponseChecker14)), new ExpectedEvent(S02_RowRops_FindRowSuccess_TestSuite.RopFindRowResponseInfo, null, new RopFindRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuite2RopFindRowResponseChecker15)));
                                label83:
;
                                    goto label84;
                                }
                                throw new InvalidOperationException("never reached");
                            label84:
;
                                goto label85;
                            }
                            throw new InvalidOperationException("never reached");
                        label85:
;
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_FindRowSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuite2RopQueryRowsResponseChecker1)));
                        }
                        goto label86;
                    }
                    throw new InvalidOperationException("never reached");
                label86:
;
                }
                else {
                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_FindRowSuccess_TestSuite.RopQueryPositionResponseInfo, null, new RopQueryPositionResponseDelegate1(this.MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuite2RopQueryPositionResponseChecker)));
                }
                goto label87;
            }
            if ((temp225 == 1)) {
                this.Manager.Comment("reaching state \'S11\'");
                goto label87;
            }
            throw new InvalidOperationException("never reached");
        label87:
;
            this.Manager.EndTest();
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuite2CheckMAPIHTTPTransportSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S5");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuite2RopQueryPositionResponseChecker(Microsoft.Protocols.TestSuites.MS_OXCTABL.CursorPosition cursorPosition, bool isRowCount) {
            this.Manager.Comment("checking step \'event RopQueryPositionResponse(BEGIN,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.CursorPosition>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.CursorPosition)(0)), cursorPosition, "cursorPosition of RopQueryPositionResponse, state S23");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRowCount, "isRowCount of RopQueryPositionResponse, state S23");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R491");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R491");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuite2CheckRequirementEnabledChecker(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S41");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuite2RopQueryRowsResponseChecker(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SETCOLUMNS,True,True" +
                    ",True,True,BOOKMARK_END,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S45");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S45");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S45");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S45");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S45");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S45");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S45");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S45");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_END, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S45");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S45");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R29, MS-OXCTABL_R725, MS-OXCTABL_R472, MS-OXCTABL_R427, MS-OXCTABL_R42" +
                        "6, MS-OXCTABL_R116");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R29");
            this.Manager.Checkpoint("MS-OXCTABL_R725");
            this.Manager.Checkpoint("MS-OXCTABL_R472");
            this.Manager.Checkpoint("MS-OXCTABL_R427");
            this.Manager.Checkpoint("MS-OXCTABL_R426");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuite2CheckRequirementEnabledChecker1(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S58");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuite2CheckRequirementEnabledChecker2(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S112");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuite2RopFindRowResponseChecker(Microsoft.Protocols.TestSuites.Common.FindRowFlags findRowFlags, bool isValidRestriction, bool HasRowData, bool isCorrectRowData, bool rowNoLongerVisible, bool isLastSetColumnData) {
            this.Manager.Comment("checking step \'event RopFindRowResponse(Forwards,True,False,True,False,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.FindRowFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.FindRowFlags)(0)), findRowFlags, "findRowFlags of RopFindRowResponse, state S128");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isValidRestriction, "isValidRestriction of RopFindRowResponse, state S128");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, HasRowData, "HasRowData of RopFindRowResponse, state S128");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isCorrectRowData, "isCorrectRowData of RopFindRowResponse, state S128");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, rowNoLongerVisible, "rowNoLongerVisible of RopFindRowResponse, state S128");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isLastSetColumnData, "isLastSetColumnData of RopFindRowResponse, state S128");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R540, MS-OXCTABL_R539, MS-OXCTABL_R813, M" +
                        "S-OXCTABL_R824, MS-OXCTABL_R225");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R540");
            this.Manager.Checkpoint("MS-OXCTABL_R539");
            this.Manager.Checkpoint("MS-OXCTABL_R813");
            this.Manager.Checkpoint("MS-OXCTABL_R824");
            this.Manager.Checkpoint("MS-OXCTABL_R225");
        }
        
        private void S02_RowRops_FindRowSuccess_TestSuiteS156() {
            this.Manager.Comment("reaching state \'S156\'");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuite2RopFindRowResponseChecker1(Microsoft.Protocols.TestSuites.Common.FindRowFlags findRowFlags, bool isValidRestriction, bool HasRowData, bool isCorrectRowData, bool rowNoLongerVisible, bool isLastSetColumnData) {
            this.Manager.Comment("checking step \'event RopFindRowResponse(Forwards,True,True,True,False,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.FindRowFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.FindRowFlags)(0)), findRowFlags, "findRowFlags of RopFindRowResponse, state S128");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isValidRestriction, "isValidRestriction of RopFindRowResponse, state S128");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, HasRowData, "HasRowData of RopFindRowResponse, state S128");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isCorrectRowData, "isCorrectRowData of RopFindRowResponse, state S128");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, rowNoLongerVisible, "rowNoLongerVisible of RopFindRowResponse, state S128");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isLastSetColumnData, "isLastSetColumnData of RopFindRowResponse, state S128");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R534, MS-OXCTABL_R243, MS-OXCTABL_R540, M" +
                        "S-OXCTABL_R539, MS-OXCTABL_R813, MS-OXCTABL_R824, MS-OXCTABL_R225");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R534");
            this.Manager.Checkpoint("MS-OXCTABL_R243");
            this.Manager.Checkpoint("MS-OXCTABL_R540");
            this.Manager.Checkpoint("MS-OXCTABL_R539");
            this.Manager.Checkpoint("MS-OXCTABL_R813");
            this.Manager.Checkpoint("MS-OXCTABL_R824");
            this.Manager.Checkpoint("MS-OXCTABL_R225");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuite2CheckRequirementEnabledChecker3(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S112");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuite2RopFindRowResponseChecker2(Microsoft.Protocols.TestSuites.Common.FindRowFlags findRowFlags, bool isValidRestriction, bool HasRowData, bool isCorrectRowData, bool rowNoLongerVisible, bool isLastSetColumnData) {
            this.Manager.Comment("checking step \'event RopFindRowResponse(Forwards,True,False,True,False,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.FindRowFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.FindRowFlags)(0)), findRowFlags, "findRowFlags of RopFindRowResponse, state S129");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isValidRestriction, "isValidRestriction of RopFindRowResponse, state S129");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, HasRowData, "HasRowData of RopFindRowResponse, state S129");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isCorrectRowData, "isCorrectRowData of RopFindRowResponse, state S129");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, rowNoLongerVisible, "rowNoLongerVisible of RopFindRowResponse, state S129");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isLastSetColumnData, "isLastSetColumnData of RopFindRowResponse, state S129");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R540, MS-OXCTABL_R539, MS-OXCTABL_R813, M" +
                        "S-OXCTABL_R824, MS-OXCTABL_R225");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R540");
            this.Manager.Checkpoint("MS-OXCTABL_R539");
            this.Manager.Checkpoint("MS-OXCTABL_R813");
            this.Manager.Checkpoint("MS-OXCTABL_R824");
            this.Manager.Checkpoint("MS-OXCTABL_R225");
        }
        
        private void S02_RowRops_FindRowSuccess_TestSuiteS157() {
            this.Manager.Comment("reaching state \'S157\'");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuite2RopFindRowResponseChecker3(Microsoft.Protocols.TestSuites.Common.FindRowFlags findRowFlags, bool isValidRestriction, bool HasRowData, bool isCorrectRowData, bool rowNoLongerVisible, bool isLastSetColumnData) {
            this.Manager.Comment("checking step \'event RopFindRowResponse(Forwards,True,True,True,False,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.FindRowFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.FindRowFlags)(0)), findRowFlags, "findRowFlags of RopFindRowResponse, state S129");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isValidRestriction, "isValidRestriction of RopFindRowResponse, state S129");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, HasRowData, "HasRowData of RopFindRowResponse, state S129");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isCorrectRowData, "isCorrectRowData of RopFindRowResponse, state S129");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, rowNoLongerVisible, "rowNoLongerVisible of RopFindRowResponse, state S129");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isLastSetColumnData, "isLastSetColumnData of RopFindRowResponse, state S129");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R534, MS-OXCTABL_R243, MS-OXCTABL_R540, M" +
                        "S-OXCTABL_R539, MS-OXCTABL_R813, MS-OXCTABL_R824, MS-OXCTABL_R225");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R534");
            this.Manager.Checkpoint("MS-OXCTABL_R243");
            this.Manager.Checkpoint("MS-OXCTABL_R540");
            this.Manager.Checkpoint("MS-OXCTABL_R539");
            this.Manager.Checkpoint("MS-OXCTABL_R813");
            this.Manager.Checkpoint("MS-OXCTABL_R824");
            this.Manager.Checkpoint("MS-OXCTABL_R225");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuite2CheckRequirementEnabledChecker4(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S58");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuite2CheckRequirementEnabledChecker5(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S113");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuite2RopFindRowResponseChecker4(Microsoft.Protocols.TestSuites.Common.FindRowFlags findRowFlags, bool isValidRestriction, bool HasRowData, bool isCorrectRowData, bool rowNoLongerVisible, bool isLastSetColumnData) {
            this.Manager.Comment("checking step \'event RopFindRowResponse(Forwards,True,False,True,False,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.FindRowFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.FindRowFlags)(0)), findRowFlags, "findRowFlags of RopFindRowResponse, state S130");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isValidRestriction, "isValidRestriction of RopFindRowResponse, state S130");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, HasRowData, "HasRowData of RopFindRowResponse, state S130");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isCorrectRowData, "isCorrectRowData of RopFindRowResponse, state S130");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, rowNoLongerVisible, "rowNoLongerVisible of RopFindRowResponse, state S130");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isLastSetColumnData, "isLastSetColumnData of RopFindRowResponse, state S130");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R540, MS-OXCTABL_R539, MS-OXCTABL_R813, M" +
                        "S-OXCTABL_R824, MS-OXCTABL_R225");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R540");
            this.Manager.Checkpoint("MS-OXCTABL_R539");
            this.Manager.Checkpoint("MS-OXCTABL_R813");
            this.Manager.Checkpoint("MS-OXCTABL_R824");
            this.Manager.Checkpoint("MS-OXCTABL_R225");
        }
        
        private void S02_RowRops_FindRowSuccess_TestSuiteS158() {
            this.Manager.Comment("reaching state \'S158\'");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuite2RopFindRowResponseChecker5(Microsoft.Protocols.TestSuites.Common.FindRowFlags findRowFlags, bool isValidRestriction, bool HasRowData, bool isCorrectRowData, bool rowNoLongerVisible, bool isLastSetColumnData) {
            this.Manager.Comment("checking step \'event RopFindRowResponse(Forwards,True,True,True,False,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.FindRowFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.FindRowFlags)(0)), findRowFlags, "findRowFlags of RopFindRowResponse, state S130");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isValidRestriction, "isValidRestriction of RopFindRowResponse, state S130");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, HasRowData, "HasRowData of RopFindRowResponse, state S130");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isCorrectRowData, "isCorrectRowData of RopFindRowResponse, state S130");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, rowNoLongerVisible, "rowNoLongerVisible of RopFindRowResponse, state S130");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isLastSetColumnData, "isLastSetColumnData of RopFindRowResponse, state S130");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R534, MS-OXCTABL_R243, MS-OXCTABL_R540, M" +
                        "S-OXCTABL_R539, MS-OXCTABL_R813, MS-OXCTABL_R824, MS-OXCTABL_R225");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R534");
            this.Manager.Checkpoint("MS-OXCTABL_R243");
            this.Manager.Checkpoint("MS-OXCTABL_R540");
            this.Manager.Checkpoint("MS-OXCTABL_R539");
            this.Manager.Checkpoint("MS-OXCTABL_R813");
            this.Manager.Checkpoint("MS-OXCTABL_R824");
            this.Manager.Checkpoint("MS-OXCTABL_R225");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuite2CheckRequirementEnabledChecker6(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S113");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuite2RopFindRowResponseChecker6(Microsoft.Protocols.TestSuites.Common.FindRowFlags findRowFlags, bool isValidRestriction, bool HasRowData, bool isCorrectRowData, bool rowNoLongerVisible, bool isLastSetColumnData) {
            this.Manager.Comment("checking step \'event RopFindRowResponse(Forwards,True,False,True,False,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.FindRowFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.FindRowFlags)(0)), findRowFlags, "findRowFlags of RopFindRowResponse, state S131");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isValidRestriction, "isValidRestriction of RopFindRowResponse, state S131");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, HasRowData, "HasRowData of RopFindRowResponse, state S131");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isCorrectRowData, "isCorrectRowData of RopFindRowResponse, state S131");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, rowNoLongerVisible, "rowNoLongerVisible of RopFindRowResponse, state S131");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isLastSetColumnData, "isLastSetColumnData of RopFindRowResponse, state S131");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R540, MS-OXCTABL_R539, MS-OXCTABL_R813, M" +
                        "S-OXCTABL_R824, MS-OXCTABL_R225");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R540");
            this.Manager.Checkpoint("MS-OXCTABL_R539");
            this.Manager.Checkpoint("MS-OXCTABL_R813");
            this.Manager.Checkpoint("MS-OXCTABL_R824");
            this.Manager.Checkpoint("MS-OXCTABL_R225");
        }
        
        private void S02_RowRops_FindRowSuccess_TestSuiteS159() {
            this.Manager.Comment("reaching state \'S159\'");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuite2RopFindRowResponseChecker7(Microsoft.Protocols.TestSuites.Common.FindRowFlags findRowFlags, bool isValidRestriction, bool HasRowData, bool isCorrectRowData, bool rowNoLongerVisible, bool isLastSetColumnData) {
            this.Manager.Comment("checking step \'event RopFindRowResponse(Forwards,True,True,True,False,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.FindRowFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.FindRowFlags)(0)), findRowFlags, "findRowFlags of RopFindRowResponse, state S131");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isValidRestriction, "isValidRestriction of RopFindRowResponse, state S131");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, HasRowData, "HasRowData of RopFindRowResponse, state S131");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isCorrectRowData, "isCorrectRowData of RopFindRowResponse, state S131");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, rowNoLongerVisible, "rowNoLongerVisible of RopFindRowResponse, state S131");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isLastSetColumnData, "isLastSetColumnData of RopFindRowResponse, state S131");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R534, MS-OXCTABL_R243, MS-OXCTABL_R540, M" +
                        "S-OXCTABL_R539, MS-OXCTABL_R813, MS-OXCTABL_R824, MS-OXCTABL_R225");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R534");
            this.Manager.Checkpoint("MS-OXCTABL_R243");
            this.Manager.Checkpoint("MS-OXCTABL_R540");
            this.Manager.Checkpoint("MS-OXCTABL_R539");
            this.Manager.Checkpoint("MS-OXCTABL_R813");
            this.Manager.Checkpoint("MS-OXCTABL_R824");
            this.Manager.Checkpoint("MS-OXCTABL_R225");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuite2CheckRequirementEnabledChecker7(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S41");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuite2RopQueryRowsResponseChecker1(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SETCOLUMNS,True,True" +
                    ",True,True,BOOKMARK_END,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S46");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S46");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S46");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S46");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S46");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S46");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S46");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S46");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_END, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S46");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S46");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R29, MS-OXCTABL_R725, MS-OXCTABL_R472, MS-OXCTABL_R427, MS-OXCTABL_R42" +
                        "6, MS-OXCTABL_R116, MS-OXCTABL_R610");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R29");
            this.Manager.Checkpoint("MS-OXCTABL_R725");
            this.Manager.Checkpoint("MS-OXCTABL_R472");
            this.Manager.Checkpoint("MS-OXCTABL_R427");
            this.Manager.Checkpoint("MS-OXCTABL_R426");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R610");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuite2CheckRequirementEnabledChecker8(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S59");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuite2CheckRequirementEnabledChecker9(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S114");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuite2RopFindRowResponseChecker8(Microsoft.Protocols.TestSuites.Common.FindRowFlags findRowFlags, bool isValidRestriction, bool HasRowData, bool isCorrectRowData, bool rowNoLongerVisible, bool isLastSetColumnData) {
            this.Manager.Comment("checking step \'event RopFindRowResponse(Forwards,True,False,True,False,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.FindRowFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.FindRowFlags)(0)), findRowFlags, "findRowFlags of RopFindRowResponse, state S132");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isValidRestriction, "isValidRestriction of RopFindRowResponse, state S132");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, HasRowData, "HasRowData of RopFindRowResponse, state S132");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isCorrectRowData, "isCorrectRowData of RopFindRowResponse, state S132");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, rowNoLongerVisible, "rowNoLongerVisible of RopFindRowResponse, state S132");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isLastSetColumnData, "isLastSetColumnData of RopFindRowResponse, state S132");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R540, MS-OXCTABL_R539, MS-OXCTABL_R813, M" +
                        "S-OXCTABL_R824, MS-OXCTABL_R225");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R540");
            this.Manager.Checkpoint("MS-OXCTABL_R539");
            this.Manager.Checkpoint("MS-OXCTABL_R813");
            this.Manager.Checkpoint("MS-OXCTABL_R824");
            this.Manager.Checkpoint("MS-OXCTABL_R225");
        }
        
        private void S02_RowRops_FindRowSuccess_TestSuiteS160() {
            this.Manager.Comment("reaching state \'S160\'");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuite2RopFindRowResponseChecker9(Microsoft.Protocols.TestSuites.Common.FindRowFlags findRowFlags, bool isValidRestriction, bool HasRowData, bool isCorrectRowData, bool rowNoLongerVisible, bool isLastSetColumnData) {
            this.Manager.Comment("checking step \'event RopFindRowResponse(Forwards,True,True,True,False,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.FindRowFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.FindRowFlags)(0)), findRowFlags, "findRowFlags of RopFindRowResponse, state S132");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isValidRestriction, "isValidRestriction of RopFindRowResponse, state S132");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, HasRowData, "HasRowData of RopFindRowResponse, state S132");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isCorrectRowData, "isCorrectRowData of RopFindRowResponse, state S132");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, rowNoLongerVisible, "rowNoLongerVisible of RopFindRowResponse, state S132");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isLastSetColumnData, "isLastSetColumnData of RopFindRowResponse, state S132");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R534, MS-OXCTABL_R243, MS-OXCTABL_R540, M" +
                        "S-OXCTABL_R539, MS-OXCTABL_R813, MS-OXCTABL_R824, MS-OXCTABL_R225");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R534");
            this.Manager.Checkpoint("MS-OXCTABL_R243");
            this.Manager.Checkpoint("MS-OXCTABL_R540");
            this.Manager.Checkpoint("MS-OXCTABL_R539");
            this.Manager.Checkpoint("MS-OXCTABL_R813");
            this.Manager.Checkpoint("MS-OXCTABL_R824");
            this.Manager.Checkpoint("MS-OXCTABL_R225");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuite2CheckRequirementEnabledChecker10(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S114");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuite2RopFindRowResponseChecker10(Microsoft.Protocols.TestSuites.Common.FindRowFlags findRowFlags, bool isValidRestriction, bool HasRowData, bool isCorrectRowData, bool rowNoLongerVisible, bool isLastSetColumnData) {
            this.Manager.Comment("checking step \'event RopFindRowResponse(Forwards,True,False,True,False,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.FindRowFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.FindRowFlags)(0)), findRowFlags, "findRowFlags of RopFindRowResponse, state S133");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isValidRestriction, "isValidRestriction of RopFindRowResponse, state S133");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, HasRowData, "HasRowData of RopFindRowResponse, state S133");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isCorrectRowData, "isCorrectRowData of RopFindRowResponse, state S133");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, rowNoLongerVisible, "rowNoLongerVisible of RopFindRowResponse, state S133");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isLastSetColumnData, "isLastSetColumnData of RopFindRowResponse, state S133");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R540, MS-OXCTABL_R539, MS-OXCTABL_R813, M" +
                        "S-OXCTABL_R824, MS-OXCTABL_R225");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R540");
            this.Manager.Checkpoint("MS-OXCTABL_R539");
            this.Manager.Checkpoint("MS-OXCTABL_R813");
            this.Manager.Checkpoint("MS-OXCTABL_R824");
            this.Manager.Checkpoint("MS-OXCTABL_R225");
        }
        
        private void S02_RowRops_FindRowSuccess_TestSuiteS161() {
            this.Manager.Comment("reaching state \'S161\'");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuite2RopFindRowResponseChecker11(Microsoft.Protocols.TestSuites.Common.FindRowFlags findRowFlags, bool isValidRestriction, bool HasRowData, bool isCorrectRowData, bool rowNoLongerVisible, bool isLastSetColumnData) {
            this.Manager.Comment("checking step \'event RopFindRowResponse(Forwards,True,True,True,False,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.FindRowFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.FindRowFlags)(0)), findRowFlags, "findRowFlags of RopFindRowResponse, state S133");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isValidRestriction, "isValidRestriction of RopFindRowResponse, state S133");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, HasRowData, "HasRowData of RopFindRowResponse, state S133");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isCorrectRowData, "isCorrectRowData of RopFindRowResponse, state S133");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, rowNoLongerVisible, "rowNoLongerVisible of RopFindRowResponse, state S133");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isLastSetColumnData, "isLastSetColumnData of RopFindRowResponse, state S133");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R534, MS-OXCTABL_R243, MS-OXCTABL_R540, M" +
                        "S-OXCTABL_R539, MS-OXCTABL_R813, MS-OXCTABL_R824, MS-OXCTABL_R225");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R534");
            this.Manager.Checkpoint("MS-OXCTABL_R243");
            this.Manager.Checkpoint("MS-OXCTABL_R540");
            this.Manager.Checkpoint("MS-OXCTABL_R539");
            this.Manager.Checkpoint("MS-OXCTABL_R813");
            this.Manager.Checkpoint("MS-OXCTABL_R824");
            this.Manager.Checkpoint("MS-OXCTABL_R225");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuite2CheckRequirementEnabledChecker11(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S59");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuite2CheckRequirementEnabledChecker12(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S115");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuite2RopFindRowResponseChecker12(Microsoft.Protocols.TestSuites.Common.FindRowFlags findRowFlags, bool isValidRestriction, bool HasRowData, bool isCorrectRowData, bool rowNoLongerVisible, bool isLastSetColumnData) {
            this.Manager.Comment("checking step \'event RopFindRowResponse(Forwards,True,False,True,False,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.FindRowFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.FindRowFlags)(0)), findRowFlags, "findRowFlags of RopFindRowResponse, state S134");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isValidRestriction, "isValidRestriction of RopFindRowResponse, state S134");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, HasRowData, "HasRowData of RopFindRowResponse, state S134");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isCorrectRowData, "isCorrectRowData of RopFindRowResponse, state S134");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, rowNoLongerVisible, "rowNoLongerVisible of RopFindRowResponse, state S134");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isLastSetColumnData, "isLastSetColumnData of RopFindRowResponse, state S134");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R540, MS-OXCTABL_R539, MS-OXCTABL_R813, M" +
                        "S-OXCTABL_R824, MS-OXCTABL_R225");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R540");
            this.Manager.Checkpoint("MS-OXCTABL_R539");
            this.Manager.Checkpoint("MS-OXCTABL_R813");
            this.Manager.Checkpoint("MS-OXCTABL_R824");
            this.Manager.Checkpoint("MS-OXCTABL_R225");
        }
        
        private void S02_RowRops_FindRowSuccess_TestSuiteS162() {
            this.Manager.Comment("reaching state \'S162\'");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuite2RopFindRowResponseChecker13(Microsoft.Protocols.TestSuites.Common.FindRowFlags findRowFlags, bool isValidRestriction, bool HasRowData, bool isCorrectRowData, bool rowNoLongerVisible, bool isLastSetColumnData) {
            this.Manager.Comment("checking step \'event RopFindRowResponse(Forwards,True,True,True,False,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.FindRowFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.FindRowFlags)(0)), findRowFlags, "findRowFlags of RopFindRowResponse, state S134");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isValidRestriction, "isValidRestriction of RopFindRowResponse, state S134");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, HasRowData, "HasRowData of RopFindRowResponse, state S134");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isCorrectRowData, "isCorrectRowData of RopFindRowResponse, state S134");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, rowNoLongerVisible, "rowNoLongerVisible of RopFindRowResponse, state S134");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isLastSetColumnData, "isLastSetColumnData of RopFindRowResponse, state S134");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R534, MS-OXCTABL_R243, MS-OXCTABL_R540, M" +
                        "S-OXCTABL_R539, MS-OXCTABL_R813, MS-OXCTABL_R824, MS-OXCTABL_R225");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R534");
            this.Manager.Checkpoint("MS-OXCTABL_R243");
            this.Manager.Checkpoint("MS-OXCTABL_R540");
            this.Manager.Checkpoint("MS-OXCTABL_R539");
            this.Manager.Checkpoint("MS-OXCTABL_R813");
            this.Manager.Checkpoint("MS-OXCTABL_R824");
            this.Manager.Checkpoint("MS-OXCTABL_R225");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuite2CheckRequirementEnabledChecker13(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S115");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuite2RopFindRowResponseChecker14(Microsoft.Protocols.TestSuites.Common.FindRowFlags findRowFlags, bool isValidRestriction, bool HasRowData, bool isCorrectRowData, bool rowNoLongerVisible, bool isLastSetColumnData) {
            this.Manager.Comment("checking step \'event RopFindRowResponse(Forwards,True,False,True,False,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.FindRowFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.FindRowFlags)(0)), findRowFlags, "findRowFlags of RopFindRowResponse, state S135");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isValidRestriction, "isValidRestriction of RopFindRowResponse, state S135");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, HasRowData, "HasRowData of RopFindRowResponse, state S135");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isCorrectRowData, "isCorrectRowData of RopFindRowResponse, state S135");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, rowNoLongerVisible, "rowNoLongerVisible of RopFindRowResponse, state S135");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isLastSetColumnData, "isLastSetColumnData of RopFindRowResponse, state S135");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R540, MS-OXCTABL_R539, MS-OXCTABL_R813, M" +
                        "S-OXCTABL_R824, MS-OXCTABL_R225");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R540");
            this.Manager.Checkpoint("MS-OXCTABL_R539");
            this.Manager.Checkpoint("MS-OXCTABL_R813");
            this.Manager.Checkpoint("MS-OXCTABL_R824");
            this.Manager.Checkpoint("MS-OXCTABL_R225");
        }
        
        private void S02_RowRops_FindRowSuccess_TestSuiteS163() {
            this.Manager.Comment("reaching state \'S163\'");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuite2RopFindRowResponseChecker15(Microsoft.Protocols.TestSuites.Common.FindRowFlags findRowFlags, bool isValidRestriction, bool HasRowData, bool isCorrectRowData, bool rowNoLongerVisible, bool isLastSetColumnData) {
            this.Manager.Comment("checking step \'event RopFindRowResponse(Forwards,True,True,True,False,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.FindRowFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.FindRowFlags)(0)), findRowFlags, "findRowFlags of RopFindRowResponse, state S135");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isValidRestriction, "isValidRestriction of RopFindRowResponse, state S135");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, HasRowData, "HasRowData of RopFindRowResponse, state S135");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isCorrectRowData, "isCorrectRowData of RopFindRowResponse, state S135");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, rowNoLongerVisible, "rowNoLongerVisible of RopFindRowResponse, state S135");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isLastSetColumnData, "isLastSetColumnData of RopFindRowResponse, state S135");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R534, MS-OXCTABL_R243, MS-OXCTABL_R540, M" +
                        "S-OXCTABL_R539, MS-OXCTABL_R813, MS-OXCTABL_R824, MS-OXCTABL_R225");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R534");
            this.Manager.Checkpoint("MS-OXCTABL_R243");
            this.Manager.Checkpoint("MS-OXCTABL_R540");
            this.Manager.Checkpoint("MS-OXCTABL_R539");
            this.Manager.Checkpoint("MS-OXCTABL_R813");
            this.Manager.Checkpoint("MS-OXCTABL_R824");
            this.Manager.Checkpoint("MS-OXCTABL_R225");
        }
        
        private void MSOXCTABL_S02_RowRops_FindRowSuccess_TestSuite2CheckMAPIHTTPTransportSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S5");
        }
        #endregion
    }
}
