//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18449
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Microsoft.Protocols.TestSuites.MS_OXCTABL {
    using System;
    using System.Collections.Generic;
    using System.Text;
    using System.Reflection;
    using Microsoft.SpecExplorer.Runtime.Testing;
    using Microsoft.Protocols.TestTools;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Spec Explorer", "3.5.3130.0")]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class S02_RowRops_QueryRowsSuccess_TestSuite : PtfTestClassBase {
        
        public S02_RowRops_QueryRowsSuccess_TestSuite() {
            this.SetSwitch("ProceedControlTimeout", "100");
            this.SetSwitch("QuiescenceTimeout", "2000000");
        }
        
        #region Expect Delegates
        public delegate void CheckMAPIHTTPTransportSupportedDelegate1(bool isSupported);
        
        public delegate void CheckRequirementEnabledDelegate1(bool enabled);
        
        public delegate void RopQueryRowsResponseDelegate1(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger);
        #endregion
        
        #region Event Metadata
        static System.Reflection.MethodBase CheckMAPIHTTPTransportSupportedInfo = TestManagerHelpers.GetMethodInfo(typeof(Microsoft.Protocols.TestSuites.MS_OXCTABL.IMS_OXCTABLAdapter), "CheckMAPIHTTPTransportSupported", typeof(bool).MakeByRefType());
        
        static System.Reflection.MethodBase CheckRequirementEnabledInfo = TestManagerHelpers.GetMethodInfo(typeof(Microsoft.Protocols.TestSuites.MS_OXCTABL.IMS_OXCTABLAdapter), "CheckRequirementEnabled", typeof(int), typeof(bool).MakeByRefType());
        
        static System.Reflection.EventInfo RopQueryRowsResponseInfo = TestManagerHelpers.GetEventInfo(typeof(Microsoft.Protocols.TestSuites.MS_OXCTABL.IMS_OXCTABLAdapter), "RopQueryRowsResponse");
        #endregion
        
        #region Adapter Instances
        private Microsoft.Protocols.TestSuites.MS_OXCTABL.IMS_OXCTABLAdapter IMS_OXCTABLAdapterInstance;
        #endregion
        
        #region Class Initialization and Cleanup
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void ClassInitialize(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext context) {
            PtfTestClassBase.Initialize(context);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void ClassCleanup() {
            PtfTestClassBase.Cleanup();
        }
        #endregion
        
        #region Test Initialization and Cleanup
        protected override void TestInitialize() {
            this.InitializeTestManager();
            this.IMS_OXCTABLAdapterInstance = ((Microsoft.Protocols.TestSuites.MS_OXCTABL.IMS_OXCTABLAdapter)(this.Manager.GetAdapter(typeof(Microsoft.Protocols.TestSuites.MS_OXCTABL.IMS_OXCTABLAdapter))));
            this.Manager.Subscribe(RopQueryRowsResponseInfo, this.IMS_OXCTABLAdapterInstance);
        }
        
        protected override void TestCleanup() {
            base.TestCleanup();
            this.CleanupTestManager();
        }
        #endregion
        
        #region Test Starting in S0
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void MSOXCTABL_S02_RowRops_QueryRowsSuccess_TestSuite() {
            this.Manager.BeginTest("MSOXCTABL_S02_RowRops_QueryRowsSuccess_TestSuite");
            this.Manager.Comment("reaching state \'S0\'");
            bool temp0;
            this.Manager.Comment("executing step \'call CheckMAPIHTTPTransportSupported(out _)\'");
            this.IMS_OXCTABLAdapterInstance.CheckMAPIHTTPTransportSupported(out temp0);
            this.Manager.AddReturn(CheckMAPIHTTPTransportSupportedInfo, null, temp0);
            this.Manager.Comment("reaching state \'S1\'");
            int temp40 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_QueryRowsSuccess_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCTABL_S02_RowRops_QueryRowsSuccess_TestSuiteCheckMAPIHTTPTransportSupportedChecker)), new ExpectedReturn(S02_RowRops_QueryRowsSuccess_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCTABL_S02_RowRops_QueryRowsSuccess_TestSuiteCheckMAPIHTTPTransportSupportedChecker1)));
            if ((temp40 == 0)) {
                this.Manager.Comment("reaching state \'S2\'");
                goto label15;
            }
            if ((temp40 == 1)) {
                this.Manager.Comment("reaching state \'S3\'");
                this.Manager.Comment("executing step \'call InitializeTable(CONTENT_TABLE)\'");
                this.IMS_OXCTABLAdapterInstance.InitializeTable(((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableType)(0)));
                this.Manager.Comment("reaching state \'S4\'");
                this.Manager.Comment("checking step \'return InitializeTable\'");
                this.Manager.Comment("reaching state \'S5\'");
                Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp1;
                this.Manager.Comment("executing step \'call RopSetColumns(1,False,False,False)\'");
                temp1 = this.IMS_OXCTABLAdapterInstance.RopSetColumns(1u, false, false, false);
                this.Manager.Checkpoint("MS-OXCTABL_R831");
                this.Manager.Checkpoint("MS-OXCTABL_R45");
                this.Manager.Comment("reaching state \'S6\'");
                this.Manager.Comment("checking step \'return RopSetColumns/success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp1, "return of RopSetColumns, state S6");
                this.Manager.Comment("reaching state \'S7\'");
                bool temp2;
                this.Manager.Comment("executing step \'call CheckRequirementEnabled(768,out _)\'");
                this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(768, out temp2);
                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp2);
                this.Manager.Comment("reaching state \'S8\'");
                int temp39 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_QueryRowsSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_QueryRowsSuccess_TestSuiteCheckRequirementEnabledChecker)), new ExpectedReturn(S02_RowRops_QueryRowsSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_QueryRowsSuccess_TestSuiteCheckRequirementEnabledChecker15)));
                if ((temp39 == 0)) {
                    this.Manager.Comment("reaching state \'S10\'");
                    bool temp3;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(866,out _)\'");
                    this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(866, out temp3);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp3);
                    this.Manager.Comment("reaching state \'S12\'");
                    int temp20 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_QueryRowsSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_QueryRowsSuccess_TestSuiteCheckRequirementEnabledChecker1)), new ExpectedReturn(S02_RowRops_QueryRowsSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_QueryRowsSuccess_TestSuiteCheckRequirementEnabledChecker8)));
                    if ((temp20 == 0)) {
                        this.Manager.Comment("reaching state \'S15\'");
                        bool temp4;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(867,out _)\'");
                        this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(867, out temp4);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp4);
                        this.Manager.Comment("reaching state \'S19\'");
                        int temp11 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_QueryRowsSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_QueryRowsSuccess_TestSuiteCheckRequirementEnabledChecker2)), new ExpectedReturn(S02_RowRops_QueryRowsSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_QueryRowsSuccess_TestSuiteCheckRequirementEnabledChecker5)));
                        if ((temp11 == 0)) {
                            this.Manager.Comment("reaching state \'S25\'");
                            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp5;
                            this.Manager.Comment("executing step \'call RopQueryRows(Advance,True)\'");
                            temp5 = this.IMS_OXCTABLAdapterInstance.RopQueryRows(((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), true);
                            this.Manager.Checkpoint("MS-OXCTABL_R837");
                            this.Manager.Comment("reaching state \'S33\'");
                            this.Manager.Comment("checking step \'return RopQueryRows/success\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp5, "return of RopQueryRows, state S33");
                            this.Manager.Comment("reaching state \'S41\'");
                            bool temp6;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(610,out _)\'");
                            this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(610, out temp6);
                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp6);
                            this.Manager.Comment("reaching state \'S49\'");
                            int temp7 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_QueryRowsSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_QueryRowsSuccess_TestSuiteCheckRequirementEnabledChecker3)), new ExpectedReturn(S02_RowRops_QueryRowsSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_QueryRowsSuccess_TestSuiteCheckRequirementEnabledChecker4)));
                            if ((temp7 == 0)) {
                                this.Manager.Comment("reaching state \'S61\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_QueryRowsSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_QueryRowsSuccess_TestSuiteRopQueryRowsResponseChecker))) != -1)) {
                                    this.Manager.Comment("reaching state \'S77\'");
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_QueryRowsSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_QueryRowsSuccess_TestSuiteRopQueryRowsResponseChecker)));
                                }
                                goto label0;
                            }
                            if ((temp7 == 1)) {
                                this.Manager.Comment("reaching state \'S62\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_QueryRowsSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_QueryRowsSuccess_TestSuiteRopQueryRowsResponseChecker1))) != -1)) {
                                    this.Manager.Comment("reaching state \'S78\'");
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_QueryRowsSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_QueryRowsSuccess_TestSuiteRopQueryRowsResponseChecker1)));
                                }
                                goto label0;
                            }
                            throw new InvalidOperationException("never reached");
                        label0:
;
                            goto label2;
                        }
                        if ((temp11 == 1)) {
                            this.Manager.Comment("reaching state \'S26\'");
                            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp8;
                            this.Manager.Comment("executing step \'call RopQueryRows(Advance,True)\'");
                            temp8 = this.IMS_OXCTABLAdapterInstance.RopQueryRows(((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), true);
                            this.Manager.Checkpoint("MS-OXCTABL_R837");
                            this.Manager.Comment("reaching state \'S34\'");
                            this.Manager.Comment("checking step \'return RopQueryRows/success\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp8, "return of RopQueryRows, state S34");
                            this.Manager.Comment("reaching state \'S42\'");
                            bool temp9;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(610,out _)\'");
                            this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(610, out temp9);
                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp9);
                            this.Manager.Comment("reaching state \'S50\'");
                            int temp10 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_QueryRowsSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_QueryRowsSuccess_TestSuiteCheckRequirementEnabledChecker6)), new ExpectedReturn(S02_RowRops_QueryRowsSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_QueryRowsSuccess_TestSuiteCheckRequirementEnabledChecker7)));
                            if ((temp10 == 0)) {
                                this.Manager.Comment("reaching state \'S63\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_QueryRowsSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_QueryRowsSuccess_TestSuiteRopQueryRowsResponseChecker2))) != -1)) {
                                    this.Manager.Comment("reaching state \'S79\'");
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_QueryRowsSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_QueryRowsSuccess_TestSuiteRopQueryRowsResponseChecker2)));
                                }
                                goto label1;
                            }
                            if ((temp10 == 1)) {
                                this.Manager.Comment("reaching state \'S64\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_QueryRowsSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_QueryRowsSuccess_TestSuiteRopQueryRowsResponseChecker3))) != -1)) {
                                    this.Manager.Comment("reaching state \'S80\'");
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_QueryRowsSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_QueryRowsSuccess_TestSuiteRopQueryRowsResponseChecker3)));
                                }
                                goto label1;
                            }
                            throw new InvalidOperationException("never reached");
                        label1:
;
                            goto label2;
                        }
                        throw new InvalidOperationException("never reached");
                    label2:
;
                        goto label6;
                    }
                    if ((temp20 == 1)) {
                        this.Manager.Comment("reaching state \'S16\'");
                        bool temp12;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(867,out _)\'");
                        this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(867, out temp12);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp12);
                        this.Manager.Comment("reaching state \'S20\'");
                        int temp19 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_QueryRowsSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_QueryRowsSuccess_TestSuiteCheckRequirementEnabledChecker9)), new ExpectedReturn(S02_RowRops_QueryRowsSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_QueryRowsSuccess_TestSuiteCheckRequirementEnabledChecker12)));
                        if ((temp19 == 0)) {
                            this.Manager.Comment("reaching state \'S27\'");
                            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp13;
                            this.Manager.Comment("executing step \'call RopQueryRows(Advance,True)\'");
                            temp13 = this.IMS_OXCTABLAdapterInstance.RopQueryRows(((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), true);
                            this.Manager.Checkpoint("MS-OXCTABL_R837");
                            this.Manager.Comment("reaching state \'S35\'");
                            this.Manager.Comment("checking step \'return RopQueryRows/success\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp13, "return of RopQueryRows, state S35");
                            this.Manager.Comment("reaching state \'S43\'");
                            bool temp14;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(610,out _)\'");
                            this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(610, out temp14);
                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp14);
                            this.Manager.Comment("reaching state \'S51\'");
                            int temp15 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_QueryRowsSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_QueryRowsSuccess_TestSuiteCheckRequirementEnabledChecker10)), new ExpectedReturn(S02_RowRops_QueryRowsSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_QueryRowsSuccess_TestSuiteCheckRequirementEnabledChecker11)));
                            if ((temp15 == 0)) {
                                this.Manager.Comment("reaching state \'S65\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_QueryRowsSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_QueryRowsSuccess_TestSuiteRopQueryRowsResponseChecker4))) != -1)) {
                                    this.Manager.Comment("reaching state \'S81\'");
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_QueryRowsSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_QueryRowsSuccess_TestSuiteRopQueryRowsResponseChecker4)));
                                }
                                goto label3;
                            }
                            if ((temp15 == 1)) {
                                this.Manager.Comment("reaching state \'S66\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_QueryRowsSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_QueryRowsSuccess_TestSuiteRopQueryRowsResponseChecker5))) != -1)) {
                                    this.Manager.Comment("reaching state \'S82\'");
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_QueryRowsSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_QueryRowsSuccess_TestSuiteRopQueryRowsResponseChecker5)));
                                }
                                goto label3;
                            }
                            throw new InvalidOperationException("never reached");
                        label3:
;
                            goto label5;
                        }
                        if ((temp19 == 1)) {
                            this.Manager.Comment("reaching state \'S28\'");
                            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp16;
                            this.Manager.Comment("executing step \'call RopQueryRows(Advance,True)\'");
                            temp16 = this.IMS_OXCTABLAdapterInstance.RopQueryRows(((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), true);
                            this.Manager.Checkpoint("MS-OXCTABL_R837");
                            this.Manager.Comment("reaching state \'S36\'");
                            this.Manager.Comment("checking step \'return RopQueryRows/success\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp16, "return of RopQueryRows, state S36");
                            this.Manager.Comment("reaching state \'S44\'");
                            bool temp17;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(610,out _)\'");
                            this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(610, out temp17);
                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp17);
                            this.Manager.Comment("reaching state \'S52\'");
                            int temp18 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_QueryRowsSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_QueryRowsSuccess_TestSuiteCheckRequirementEnabledChecker13)), new ExpectedReturn(S02_RowRops_QueryRowsSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_QueryRowsSuccess_TestSuiteCheckRequirementEnabledChecker14)));
                            if ((temp18 == 0)) {
                                this.Manager.Comment("reaching state \'S67\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_QueryRowsSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_QueryRowsSuccess_TestSuiteRopQueryRowsResponseChecker6))) != -1)) {
                                    this.Manager.Comment("reaching state \'S83\'");
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_QueryRowsSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_QueryRowsSuccess_TestSuiteRopQueryRowsResponseChecker6)));
                                }
                                goto label4;
                            }
                            if ((temp18 == 1)) {
                                this.Manager.Comment("reaching state \'S68\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_QueryRowsSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_QueryRowsSuccess_TestSuiteRopQueryRowsResponseChecker7))) != -1)) {
                                    this.Manager.Comment("reaching state \'S84\'");
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_QueryRowsSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_QueryRowsSuccess_TestSuiteRopQueryRowsResponseChecker7)));
                                }
                                goto label4;
                            }
                            throw new InvalidOperationException("never reached");
                        label4:
;
                            goto label5;
                        }
                        throw new InvalidOperationException("never reached");
                    label5:
;
                        goto label6;
                    }
                    throw new InvalidOperationException("never reached");
                label6:
;
                    goto label14;
                }
                if ((temp39 == 1)) {
                    this.Manager.Comment("reaching state \'S9\'");
                    bool temp21;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(866,out _)\'");
                    this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(866, out temp21);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp21);
                    this.Manager.Comment("reaching state \'S11\'");
                    int temp38 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_QueryRowsSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_QueryRowsSuccess_TestSuiteCheckRequirementEnabledChecker16)), new ExpectedReturn(S02_RowRops_QueryRowsSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_QueryRowsSuccess_TestSuiteCheckRequirementEnabledChecker23)));
                    if ((temp38 == 0)) {
                        this.Manager.Comment("reaching state \'S13\'");
                        bool temp22;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(867,out _)\'");
                        this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(867, out temp22);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp22);
                        this.Manager.Comment("reaching state \'S17\'");
                        int temp29 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_QueryRowsSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_QueryRowsSuccess_TestSuiteCheckRequirementEnabledChecker17)), new ExpectedReturn(S02_RowRops_QueryRowsSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_QueryRowsSuccess_TestSuiteCheckRequirementEnabledChecker20)));
                        if ((temp29 == 0)) {
                            this.Manager.Comment("reaching state \'S21\'");
                            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp23;
                            this.Manager.Comment("executing step \'call RopQueryRows(Advance,True)\'");
                            temp23 = this.IMS_OXCTABLAdapterInstance.RopQueryRows(((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), true);
                            this.Manager.Checkpoint("MS-OXCTABL_R837");
                            this.Manager.Comment("reaching state \'S29\'");
                            this.Manager.Comment("checking step \'return RopQueryRows/success\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp23, "return of RopQueryRows, state S29");
                            this.Manager.Comment("reaching state \'S37\'");
                            bool temp24;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(610,out _)\'");
                            this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(610, out temp24);
                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp24);
                            this.Manager.Comment("reaching state \'S45\'");
                            int temp25 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_QueryRowsSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_QueryRowsSuccess_TestSuiteCheckRequirementEnabledChecker18)), new ExpectedReturn(S02_RowRops_QueryRowsSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_QueryRowsSuccess_TestSuiteCheckRequirementEnabledChecker19)));
                            if ((temp25 == 0)) {
                                this.Manager.Comment("reaching state \'S53\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_QueryRowsSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_QueryRowsSuccess_TestSuiteRopQueryRowsResponseChecker8))) != -1)) {
                                    this.Manager.Comment("reaching state \'S69\'");
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_QueryRowsSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_QueryRowsSuccess_TestSuiteRopQueryRowsResponseChecker8)));
                                }
                                goto label7;
                            }
                            if ((temp25 == 1)) {
                                this.Manager.Comment("reaching state \'S54\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_QueryRowsSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_QueryRowsSuccess_TestSuiteRopQueryRowsResponseChecker9))) != -1)) {
                                    this.Manager.Comment("reaching state \'S70\'");
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_QueryRowsSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_QueryRowsSuccess_TestSuiteRopQueryRowsResponseChecker9)));
                                }
                                goto label7;
                            }
                            throw new InvalidOperationException("never reached");
                        label7:
;
                            goto label9;
                        }
                        if ((temp29 == 1)) {
                            this.Manager.Comment("reaching state \'S22\'");
                            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp26;
                            this.Manager.Comment("executing step \'call RopQueryRows(Advance,True)\'");
                            temp26 = this.IMS_OXCTABLAdapterInstance.RopQueryRows(((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), true);
                            this.Manager.Checkpoint("MS-OXCTABL_R837");
                            this.Manager.Comment("reaching state \'S30\'");
                            this.Manager.Comment("checking step \'return RopQueryRows/success\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp26, "return of RopQueryRows, state S30");
                            this.Manager.Comment("reaching state \'S38\'");
                            bool temp27;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(610,out _)\'");
                            this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(610, out temp27);
                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp27);
                            this.Manager.Comment("reaching state \'S46\'");
                            int temp28 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_QueryRowsSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_QueryRowsSuccess_TestSuiteCheckRequirementEnabledChecker21)), new ExpectedReturn(S02_RowRops_QueryRowsSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_QueryRowsSuccess_TestSuiteCheckRequirementEnabledChecker22)));
                            if ((temp28 == 0)) {
                                this.Manager.Comment("reaching state \'S55\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_QueryRowsSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_QueryRowsSuccess_TestSuiteRopQueryRowsResponseChecker10))) != -1)) {
                                    this.Manager.Comment("reaching state \'S71\'");
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_QueryRowsSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_QueryRowsSuccess_TestSuiteRopQueryRowsResponseChecker10)));
                                }
                                goto label8;
                            }
                            if ((temp28 == 1)) {
                                this.Manager.Comment("reaching state \'S56\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_QueryRowsSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_QueryRowsSuccess_TestSuiteRopQueryRowsResponseChecker11))) != -1)) {
                                    this.Manager.Comment("reaching state \'S72\'");
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_QueryRowsSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_QueryRowsSuccess_TestSuiteRopQueryRowsResponseChecker11)));
                                }
                                goto label8;
                            }
                            throw new InvalidOperationException("never reached");
                        label8:
;
                            goto label9;
                        }
                        throw new InvalidOperationException("never reached");
                    label9:
;
                        goto label13;
                    }
                    if ((temp38 == 1)) {
                        this.Manager.Comment("reaching state \'S14\'");
                        bool temp30;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(867,out _)\'");
                        this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(867, out temp30);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp30);
                        this.Manager.Comment("reaching state \'S18\'");
                        int temp37 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_QueryRowsSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_QueryRowsSuccess_TestSuiteCheckRequirementEnabledChecker24)), new ExpectedReturn(S02_RowRops_QueryRowsSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_QueryRowsSuccess_TestSuiteCheckRequirementEnabledChecker27)));
                        if ((temp37 == 0)) {
                            this.Manager.Comment("reaching state \'S23\'");
                            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp31;
                            this.Manager.Comment("executing step \'call RopQueryRows(Advance,True)\'");
                            temp31 = this.IMS_OXCTABLAdapterInstance.RopQueryRows(((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), true);
                            this.Manager.Checkpoint("MS-OXCTABL_R837");
                            this.Manager.Comment("reaching state \'S31\'");
                            this.Manager.Comment("checking step \'return RopQueryRows/success\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp31, "return of RopQueryRows, state S31");
                            this.Manager.Comment("reaching state \'S39\'");
                            bool temp32;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(610,out _)\'");
                            this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(610, out temp32);
                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp32);
                            this.Manager.Comment("reaching state \'S47\'");
                            int temp33 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_QueryRowsSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_QueryRowsSuccess_TestSuiteCheckRequirementEnabledChecker25)), new ExpectedReturn(S02_RowRops_QueryRowsSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_QueryRowsSuccess_TestSuiteCheckRequirementEnabledChecker26)));
                            if ((temp33 == 0)) {
                                this.Manager.Comment("reaching state \'S57\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_QueryRowsSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_QueryRowsSuccess_TestSuiteRopQueryRowsResponseChecker12))) != -1)) {
                                    this.Manager.Comment("reaching state \'S73\'");
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_QueryRowsSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_QueryRowsSuccess_TestSuiteRopQueryRowsResponseChecker12)));
                                }
                                goto label10;
                            }
                            if ((temp33 == 1)) {
                                this.Manager.Comment("reaching state \'S58\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_QueryRowsSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_QueryRowsSuccess_TestSuiteRopQueryRowsResponseChecker13))) != -1)) {
                                    this.Manager.Comment("reaching state \'S74\'");
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_QueryRowsSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_QueryRowsSuccess_TestSuiteRopQueryRowsResponseChecker13)));
                                }
                                goto label10;
                            }
                            throw new InvalidOperationException("never reached");
                        label10:
;
                            goto label12;
                        }
                        if ((temp37 == 1)) {
                            this.Manager.Comment("reaching state \'S24\'");
                            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp34;
                            this.Manager.Comment("executing step \'call RopQueryRows(Advance,True)\'");
                            temp34 = this.IMS_OXCTABLAdapterInstance.RopQueryRows(((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), true);
                            this.Manager.Checkpoint("MS-OXCTABL_R837");
                            this.Manager.Comment("reaching state \'S32\'");
                            this.Manager.Comment("checking step \'return RopQueryRows/success\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp34, "return of RopQueryRows, state S32");
                            this.Manager.Comment("reaching state \'S40\'");
                            bool temp35;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(610,out _)\'");
                            this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(610, out temp35);
                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp35);
                            this.Manager.Comment("reaching state \'S48\'");
                            int temp36 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_QueryRowsSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_QueryRowsSuccess_TestSuiteCheckRequirementEnabledChecker28)), new ExpectedReturn(S02_RowRops_QueryRowsSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_QueryRowsSuccess_TestSuiteCheckRequirementEnabledChecker29)));
                            if ((temp36 == 0)) {
                                this.Manager.Comment("reaching state \'S59\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_QueryRowsSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_QueryRowsSuccess_TestSuiteRopQueryRowsResponseChecker14))) != -1)) {
                                    this.Manager.Comment("reaching state \'S75\'");
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_QueryRowsSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_QueryRowsSuccess_TestSuiteRopQueryRowsResponseChecker14)));
                                }
                                goto label11;
                            }
                            if ((temp36 == 1)) {
                                this.Manager.Comment("reaching state \'S60\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_QueryRowsSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_QueryRowsSuccess_TestSuiteRopQueryRowsResponseChecker15))) != -1)) {
                                    this.Manager.Comment("reaching state \'S76\'");
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_QueryRowsSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_QueryRowsSuccess_TestSuiteRopQueryRowsResponseChecker15)));
                                }
                                goto label11;
                            }
                            throw new InvalidOperationException("never reached");
                        label11:
;
                            goto label12;
                        }
                        throw new InvalidOperationException("never reached");
                    label12:
;
                        goto label13;
                    }
                    throw new InvalidOperationException("never reached");
                label13:
;
                    goto label14;
                }
                throw new InvalidOperationException("never reached");
            label14:
;
                goto label15;
            }
            throw new InvalidOperationException("never reached");
        label15:
;
            this.Manager.EndTest();
        }
        
        private void MSOXCTABL_S02_RowRops_QueryRowsSuccess_TestSuiteCheckMAPIHTTPTransportSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S1");
        }
        
        private void MSOXCTABL_S02_RowRops_QueryRowsSuccess_TestSuiteCheckMAPIHTTPTransportSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S1");
        }
        
        private void MSOXCTABL_S02_RowRops_QueryRowsSuccess_TestSuiteCheckRequirementEnabledChecker(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S8");
        }
        
        private void MSOXCTABL_S02_RowRops_QueryRowsSuccess_TestSuiteCheckRequirementEnabledChecker1(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S12");
        }
        
        private void MSOXCTABL_S02_RowRops_QueryRowsSuccess_TestSuiteCheckRequirementEnabledChecker2(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S19");
        }
        
        private void MSOXCTABL_S02_RowRops_QueryRowsSuccess_TestSuiteCheckRequirementEnabledChecker3(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S49");
        }
        
        private void MSOXCTABL_S02_RowRops_QueryRowsSuccess_TestSuiteRopQueryRowsResponseChecker(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SETCOLUMNS,True,True" +
                    ",True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S61");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S61");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S61");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S61");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S61");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S61");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S61");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S61");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S61");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S61");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R472, MS-OXCTABL_R427, MS-OXCTABL_R42" +
                        "6, MS-OXCTABL_R116, MS-OXCTABL_R610");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R472");
            this.Manager.Checkpoint("MS-OXCTABL_R427");
            this.Manager.Checkpoint("MS-OXCTABL_R426");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R610");
        }
        
        private void MSOXCTABL_S02_RowRops_QueryRowsSuccess_TestSuiteCheckRequirementEnabledChecker4(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S49");
        }
        
        private void MSOXCTABL_S02_RowRops_QueryRowsSuccess_TestSuiteRopQueryRowsResponseChecker1(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SETCOLUMNS,True,True" +
                    ",True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S62");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S62");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S62");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S62");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S62");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S62");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S62");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S62");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S62");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S62");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R472, MS-OXCTABL_R427, MS-OXCTABL_R42" +
                        "6, MS-OXCTABL_R116");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R472");
            this.Manager.Checkpoint("MS-OXCTABL_R427");
            this.Manager.Checkpoint("MS-OXCTABL_R426");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
        }
        
        private void MSOXCTABL_S02_RowRops_QueryRowsSuccess_TestSuiteCheckRequirementEnabledChecker5(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S19");
        }
        
        private void MSOXCTABL_S02_RowRops_QueryRowsSuccess_TestSuiteCheckRequirementEnabledChecker6(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S50");
        }
        
        private void MSOXCTABL_S02_RowRops_QueryRowsSuccess_TestSuiteRopQueryRowsResponseChecker2(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SETCOLUMNS,True,True" +
                    ",True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S63");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S63");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S63");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S63");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S63");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S63");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S63");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S63");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S63");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S63");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R472, MS-OXCTABL_R427, MS-OXCTABL_R42" +
                        "6, MS-OXCTABL_R116, MS-OXCTABL_R610");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R472");
            this.Manager.Checkpoint("MS-OXCTABL_R427");
            this.Manager.Checkpoint("MS-OXCTABL_R426");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R610");
        }
        
        private void MSOXCTABL_S02_RowRops_QueryRowsSuccess_TestSuiteCheckRequirementEnabledChecker7(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S50");
        }
        
        private void MSOXCTABL_S02_RowRops_QueryRowsSuccess_TestSuiteRopQueryRowsResponseChecker3(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SETCOLUMNS,True,True" +
                    ",True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S64");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S64");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S64");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S64");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S64");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S64");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S64");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S64");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S64");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S64");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R472, MS-OXCTABL_R427, MS-OXCTABL_R42" +
                        "6, MS-OXCTABL_R116");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R472");
            this.Manager.Checkpoint("MS-OXCTABL_R427");
            this.Manager.Checkpoint("MS-OXCTABL_R426");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
        }
        
        private void MSOXCTABL_S02_RowRops_QueryRowsSuccess_TestSuiteCheckRequirementEnabledChecker8(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S12");
        }
        
        private void MSOXCTABL_S02_RowRops_QueryRowsSuccess_TestSuiteCheckRequirementEnabledChecker9(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S20");
        }
        
        private void MSOXCTABL_S02_RowRops_QueryRowsSuccess_TestSuiteCheckRequirementEnabledChecker10(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S51");
        }
        
        private void MSOXCTABL_S02_RowRops_QueryRowsSuccess_TestSuiteRopQueryRowsResponseChecker4(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SETCOLUMNS,True,True" +
                    ",True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S65");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S65");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S65");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S65");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S65");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S65");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S65");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S65");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S65");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S65");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R472, MS-OXCTABL_R427, MS-OXCTABL_R42" +
                        "6, MS-OXCTABL_R116, MS-OXCTABL_R610");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R472");
            this.Manager.Checkpoint("MS-OXCTABL_R427");
            this.Manager.Checkpoint("MS-OXCTABL_R426");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R610");
        }
        
        private void MSOXCTABL_S02_RowRops_QueryRowsSuccess_TestSuiteCheckRequirementEnabledChecker11(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S51");
        }
        
        private void MSOXCTABL_S02_RowRops_QueryRowsSuccess_TestSuiteRopQueryRowsResponseChecker5(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SETCOLUMNS,True,True" +
                    ",True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S66");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S66");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S66");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S66");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S66");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S66");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S66");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S66");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S66");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S66");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R472, MS-OXCTABL_R427, MS-OXCTABL_R42" +
                        "6, MS-OXCTABL_R116");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R472");
            this.Manager.Checkpoint("MS-OXCTABL_R427");
            this.Manager.Checkpoint("MS-OXCTABL_R426");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
        }
        
        private void MSOXCTABL_S02_RowRops_QueryRowsSuccess_TestSuiteCheckRequirementEnabledChecker12(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S20");
        }
        
        private void MSOXCTABL_S02_RowRops_QueryRowsSuccess_TestSuiteCheckRequirementEnabledChecker13(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S52");
        }
        
        private void MSOXCTABL_S02_RowRops_QueryRowsSuccess_TestSuiteRopQueryRowsResponseChecker6(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SETCOLUMNS,True,True" +
                    ",True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S67");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S67");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S67");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S67");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S67");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S67");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S67");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S67");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S67");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S67");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R472, MS-OXCTABL_R427, MS-OXCTABL_R42" +
                        "6, MS-OXCTABL_R116, MS-OXCTABL_R610");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R472");
            this.Manager.Checkpoint("MS-OXCTABL_R427");
            this.Manager.Checkpoint("MS-OXCTABL_R426");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R610");
        }
        
        private void MSOXCTABL_S02_RowRops_QueryRowsSuccess_TestSuiteCheckRequirementEnabledChecker14(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S52");
        }
        
        private void MSOXCTABL_S02_RowRops_QueryRowsSuccess_TestSuiteRopQueryRowsResponseChecker7(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SETCOLUMNS,True,True" +
                    ",True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S68");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S68");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S68");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S68");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S68");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S68");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S68");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S68");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S68");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S68");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R472, MS-OXCTABL_R427, MS-OXCTABL_R42" +
                        "6, MS-OXCTABL_R116");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R472");
            this.Manager.Checkpoint("MS-OXCTABL_R427");
            this.Manager.Checkpoint("MS-OXCTABL_R426");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
        }
        
        private void MSOXCTABL_S02_RowRops_QueryRowsSuccess_TestSuiteCheckRequirementEnabledChecker15(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S8");
        }
        
        private void MSOXCTABL_S02_RowRops_QueryRowsSuccess_TestSuiteCheckRequirementEnabledChecker16(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S11");
        }
        
        private void MSOXCTABL_S02_RowRops_QueryRowsSuccess_TestSuiteCheckRequirementEnabledChecker17(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S17");
        }
        
        private void MSOXCTABL_S02_RowRops_QueryRowsSuccess_TestSuiteCheckRequirementEnabledChecker18(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S45");
        }
        
        private void MSOXCTABL_S02_RowRops_QueryRowsSuccess_TestSuiteRopQueryRowsResponseChecker8(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SETCOLUMNS,True,True" +
                    ",True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S53");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S53");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S53");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S53");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S53");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S53");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S53");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S53");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S53");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S53");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R472, MS-OXCTABL_R427, MS-OXCTABL_R42" +
                        "6, MS-OXCTABL_R116");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R472");
            this.Manager.Checkpoint("MS-OXCTABL_R427");
            this.Manager.Checkpoint("MS-OXCTABL_R426");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
        }
        
        private void MSOXCTABL_S02_RowRops_QueryRowsSuccess_TestSuiteCheckRequirementEnabledChecker19(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S45");
        }
        
        private void MSOXCTABL_S02_RowRops_QueryRowsSuccess_TestSuiteRopQueryRowsResponseChecker9(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SETCOLUMNS,True,True" +
                    ",True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S54");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S54");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S54");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S54");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S54");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S54");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S54");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S54");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S54");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S54");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R472, MS-OXCTABL_R427, MS-OXCTABL_R42" +
                        "6, MS-OXCTABL_R116, MS-OXCTABL_R610");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R472");
            this.Manager.Checkpoint("MS-OXCTABL_R427");
            this.Manager.Checkpoint("MS-OXCTABL_R426");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R610");
        }
        
        private void MSOXCTABL_S02_RowRops_QueryRowsSuccess_TestSuiteCheckRequirementEnabledChecker20(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S17");
        }
        
        private void MSOXCTABL_S02_RowRops_QueryRowsSuccess_TestSuiteCheckRequirementEnabledChecker21(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S46");
        }
        
        private void MSOXCTABL_S02_RowRops_QueryRowsSuccess_TestSuiteRopQueryRowsResponseChecker10(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SETCOLUMNS,True,True" +
                    ",True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S55");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S55");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S55");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S55");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S55");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S55");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S55");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S55");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S55");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S55");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R472, MS-OXCTABL_R427, MS-OXCTABL_R42" +
                        "6, MS-OXCTABL_R116, MS-OXCTABL_R610");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R472");
            this.Manager.Checkpoint("MS-OXCTABL_R427");
            this.Manager.Checkpoint("MS-OXCTABL_R426");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R610");
        }
        
        private void MSOXCTABL_S02_RowRops_QueryRowsSuccess_TestSuiteCheckRequirementEnabledChecker22(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S46");
        }
        
        private void MSOXCTABL_S02_RowRops_QueryRowsSuccess_TestSuiteRopQueryRowsResponseChecker11(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SETCOLUMNS,True,True" +
                    ",True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S56");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S56");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S56");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S56");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S56");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S56");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S56");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S56");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S56");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S56");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R472, MS-OXCTABL_R427, MS-OXCTABL_R42" +
                        "6, MS-OXCTABL_R116");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R472");
            this.Manager.Checkpoint("MS-OXCTABL_R427");
            this.Manager.Checkpoint("MS-OXCTABL_R426");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
        }
        
        private void MSOXCTABL_S02_RowRops_QueryRowsSuccess_TestSuiteCheckRequirementEnabledChecker23(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S11");
        }
        
        private void MSOXCTABL_S02_RowRops_QueryRowsSuccess_TestSuiteCheckRequirementEnabledChecker24(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S18");
        }
        
        private void MSOXCTABL_S02_RowRops_QueryRowsSuccess_TestSuiteCheckRequirementEnabledChecker25(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S47");
        }
        
        private void MSOXCTABL_S02_RowRops_QueryRowsSuccess_TestSuiteRopQueryRowsResponseChecker12(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SETCOLUMNS,True,True" +
                    ",True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S57");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S57");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S57");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S57");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S57");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S57");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S57");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S57");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S57");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S57");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R472, MS-OXCTABL_R427, MS-OXCTABL_R42" +
                        "6, MS-OXCTABL_R116, MS-OXCTABL_R610");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R472");
            this.Manager.Checkpoint("MS-OXCTABL_R427");
            this.Manager.Checkpoint("MS-OXCTABL_R426");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R610");
        }
        
        private void MSOXCTABL_S02_RowRops_QueryRowsSuccess_TestSuiteCheckRequirementEnabledChecker26(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S47");
        }
        
        private void MSOXCTABL_S02_RowRops_QueryRowsSuccess_TestSuiteRopQueryRowsResponseChecker13(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SETCOLUMNS,True,True" +
                    ",True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S58");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S58");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S58");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S58");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S58");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S58");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S58");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S58");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S58");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S58");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R472, MS-OXCTABL_R427, MS-OXCTABL_R42" +
                        "6, MS-OXCTABL_R116");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R472");
            this.Manager.Checkpoint("MS-OXCTABL_R427");
            this.Manager.Checkpoint("MS-OXCTABL_R426");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
        }
        
        private void MSOXCTABL_S02_RowRops_QueryRowsSuccess_TestSuiteCheckRequirementEnabledChecker27(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S18");
        }
        
        private void MSOXCTABL_S02_RowRops_QueryRowsSuccess_TestSuiteCheckRequirementEnabledChecker28(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S48");
        }
        
        private void MSOXCTABL_S02_RowRops_QueryRowsSuccess_TestSuiteRopQueryRowsResponseChecker14(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SETCOLUMNS,True,True" +
                    ",True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S59");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S59");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S59");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S59");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S59");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S59");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S59");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S59");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S59");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S59");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R472, MS-OXCTABL_R427, MS-OXCTABL_R42" +
                        "6, MS-OXCTABL_R116, MS-OXCTABL_R610");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R472");
            this.Manager.Checkpoint("MS-OXCTABL_R427");
            this.Manager.Checkpoint("MS-OXCTABL_R426");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R610");
        }
        
        private void MSOXCTABL_S02_RowRops_QueryRowsSuccess_TestSuiteCheckRequirementEnabledChecker29(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S48");
        }
        
        private void MSOXCTABL_S02_RowRops_QueryRowsSuccess_TestSuiteRopQueryRowsResponseChecker15(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SETCOLUMNS,True,True" +
                    ",True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S60");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S60");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S60");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S60");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S60");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S60");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S60");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S60");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S60");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S60");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R472, MS-OXCTABL_R427, MS-OXCTABL_R42" +
                        "6, MS-OXCTABL_R116");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R472");
            this.Manager.Checkpoint("MS-OXCTABL_R427");
            this.Manager.Checkpoint("MS-OXCTABL_R426");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
        }
        #endregion
    }
}
