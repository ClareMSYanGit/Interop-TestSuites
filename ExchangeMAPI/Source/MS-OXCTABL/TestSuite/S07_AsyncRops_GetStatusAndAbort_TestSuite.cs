//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18449
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Microsoft.Protocols.TestSuites.MS_OXCTABL {
    using System;
    using System.Collections.Generic;
    using System.Text;
    using System.Reflection;
    using Microsoft.SpecExplorer.Runtime.Testing;
    using Microsoft.Protocols.TestTools;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Spec Explorer", "3.5.3130.0")]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class S07_AsyncRops_GetStatusAndAbort_TestSuite : PtfTestClassBase {
        
        public S07_AsyncRops_GetStatusAndAbort_TestSuite() {
            this.SetSwitch("ProceedControlTimeout", "100");
            this.SetSwitch("QuiescenceTimeout", "2000000");
        }
        
        #region Expect Delegates
        public delegate void CheckMAPIHTTPTransportSupportedDelegate1(bool isSupported);
        
        public delegate void CheckRequirementEnabledDelegate1(bool enabled);
        #endregion
        
        #region Event Metadata
        static System.Reflection.MethodBase CheckMAPIHTTPTransportSupportedInfo = TestManagerHelpers.GetMethodInfo(typeof(Microsoft.Protocols.TestSuites.MS_OXCTABL.IMS_OXCTABLAdapter), "CheckMAPIHTTPTransportSupported", typeof(bool).MakeByRefType());
        
        static System.Reflection.MethodBase CheckRequirementEnabledInfo = TestManagerHelpers.GetMethodInfo(typeof(Microsoft.Protocols.TestSuites.MS_OXCTABL.IMS_OXCTABLAdapter), "CheckRequirementEnabled", typeof(int), typeof(bool).MakeByRefType());
        #endregion
        
        #region Adapter Instances
        private Microsoft.Protocols.TestSuites.MS_OXCTABL.IMS_OXCTABLAdapter IMS_OXCTABLAdapterInstance;
        #endregion
        
        #region Class Initialization and Cleanup
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void ClassInitialize(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext context) {
            PtfTestClassBase.Initialize(context);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void ClassCleanup() {
            PtfTestClassBase.Cleanup();
        }
        #endregion
        
        #region Test Initialization and Cleanup
        protected override void TestInitialize() {
            this.InitializeTestManager();
            this.IMS_OXCTABLAdapterInstance = ((Microsoft.Protocols.TestSuites.MS_OXCTABL.IMS_OXCTABLAdapter)(this.Manager.GetAdapter(typeof(Microsoft.Protocols.TestSuites.MS_OXCTABL.IMS_OXCTABLAdapter))));
        }
        
        protected override void TestCleanup() {
            base.TestCleanup();
            this.CleanupTestManager();
        }
        #endregion
        
        #region Test Starting in S0
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void MSOXCTABL_S07_AsyncRops_GetStatusAndAbort_TestSuite() {
            this.Manager.BeginTest("MSOXCTABL_S07_AsyncRops_GetStatusAndAbort_TestSuite");
            this.Manager.Comment("reaching state \'S0\'");
            bool temp0;
            this.Manager.Comment("executing step \'call CheckMAPIHTTPTransportSupported(out _)\'");
            this.IMS_OXCTABLAdapterInstance.CheckMAPIHTTPTransportSupported(out temp0);
            this.Manager.AddReturn(CheckMAPIHTTPTransportSupportedInfo, null, temp0);
            this.Manager.Comment("reaching state \'S1\'");
            int temp16 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S07_AsyncRops_GetStatusAndAbort_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCTABL_S07_AsyncRops_GetStatusAndAbort_TestSuiteCheckMAPIHTTPTransportSupportedChecker)), new ExpectedReturn(S07_AsyncRops_GetStatusAndAbort_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCTABL_S07_AsyncRops_GetStatusAndAbort_TestSuiteCheckMAPIHTTPTransportSupportedChecker1)));
            if ((temp16 == 0)) {
                this.Manager.Comment("reaching state \'S12\'");
                goto label3;
            }
            if ((temp16 == 1)) {
                this.Manager.Comment("reaching state \'S13\'");
                this.Manager.Comment("executing step \'call InitializeTable(HIERARCHY_TABLE)\'");
                this.IMS_OXCTABLAdapterInstance.InitializeTable(((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableType)(1)));
                this.Manager.Comment("reaching state \'S24\'");
                this.Manager.Comment("checking step \'return InitializeTable\'");
                this.Manager.Comment("reaching state \'S30\'");
                Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp1;
                this.Manager.Comment("executing step \'call RopSetColumns(1,False,False,True)\'");
                temp1 = this.IMS_OXCTABLAdapterInstance.RopSetColumns(1u, false, false, true);
                this.Manager.Checkpoint("MS-OXCTABL_R829");
                this.Manager.Checkpoint("MS-OXCTABL_R45");
                this.Manager.Comment("reaching state \'S36\'");
                this.Manager.Comment("checking step \'return RopSetColumns/success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp1, "return of RopSetColumns, state S36");
                this.Manager.Comment("reaching state \'S42\'");
                bool temp2;
                this.Manager.Comment("executing step \'call CheckRequirementEnabled(791,out _)\'");
                this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(791, out temp2);
                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp2);
                this.Manager.Comment("reaching state \'S48\'");
                int temp15 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S07_AsyncRops_GetStatusAndAbort_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S07_AsyncRops_GetStatusAndAbort_TestSuiteCheckRequirementEnabledChecker)), new ExpectedReturn(S07_AsyncRops_GetStatusAndAbort_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S07_AsyncRops_GetStatusAndAbort_TestSuiteCheckRequirementEnabledChecker3)));
                if ((temp15 == 0)) {
                    this.Manager.Comment("reaching state \'S54\'");
                    bool temp3;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(792,out _)\'");
                    this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(792, out temp3);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp3);
                    this.Manager.Comment("reaching state \'S66\'");
                    int temp8 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S07_AsyncRops_GetStatusAndAbort_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S07_AsyncRops_GetStatusAndAbort_TestSuiteCheckRequirementEnabledChecker1)), new ExpectedReturn(S07_AsyncRops_GetStatusAndAbort_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S07_AsyncRops_GetStatusAndAbort_TestSuiteCheckRequirementEnabledChecker2)));
                    if ((temp8 == 0)) {
                        this.Manager.Comment("reaching state \'S78\'");
                        Microsoft.Protocols.TestSuites.Common.TableStatus temp4;
                        Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp5;
                        this.Manager.Comment("executing step \'call RopGetStatus(out _)\'");
                        temp5 = this.IMS_OXCTABLAdapterInstance.RopGetStatus(out temp4);
                        this.Manager.Checkpoint("MS-OXCTABL_R840");
                        this.Manager.Comment("reaching state \'S102\'");
                        this.Manager.Comment("checking step \'return RopGetStatus/[out TblstatComplete]:success\'");
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.TableStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.TableStatus)(0)), temp4, "tableStatus of RopGetStatus, state S102");
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp5, "return of RopGetStatus, state S102");
                        S07_AsyncRops_GetStatusAndAbort_TestSuiteS126();
                        goto label0;
                    }
                    if ((temp8 == 1)) {
                        this.Manager.Comment("reaching state \'S79\'");
                        Microsoft.Protocols.TestSuites.Common.TableStatus temp6;
                        Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp7;
                        this.Manager.Comment("executing step \'call RopGetStatus(out _)\'");
                        temp7 = this.IMS_OXCTABLAdapterInstance.RopGetStatus(out temp6);
                        this.Manager.Comment("reaching state \'S103\'");
                        this.Manager.Comment("checking step \'return RopGetStatus/[out TblstatComplete]:NotImplemented\'");
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.TableStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.TableStatus)(0)), temp6, "tableStatus of RopGetStatus, state S103");
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues.NotImplemented, temp7, "return of RopGetStatus, state S103");
                        S07_AsyncRops_GetStatusAndAbort_TestSuiteS127();
                        goto label0;
                    }
                    throw new InvalidOperationException("never reached");
                label0:
;
                    goto label2;
                }
                if ((temp15 == 1)) {
                    this.Manager.Comment("reaching state \'S55\'");
                    bool temp9;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(792,out _)\'");
                    this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(792, out temp9);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp9);
                    this.Manager.Comment("reaching state \'S67\'");
                    int temp14 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S07_AsyncRops_GetStatusAndAbort_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S07_AsyncRops_GetStatusAndAbort_TestSuiteCheckRequirementEnabledChecker4)), new ExpectedReturn(S07_AsyncRops_GetStatusAndAbort_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S07_AsyncRops_GetStatusAndAbort_TestSuiteCheckRequirementEnabledChecker5)));
                    if ((temp14 == 0)) {
                        this.Manager.Comment("reaching state \'S80\'");
                        Microsoft.Protocols.TestSuites.Common.TableStatus temp10;
                        Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp11;
                        this.Manager.Comment("executing step \'call RopGetStatus(out _)\'");
                        temp11 = this.IMS_OXCTABLAdapterInstance.RopGetStatus(out temp10);
                        this.Manager.Comment("reaching state \'S104\'");
                        this.Manager.Comment("checking step \'return RopGetStatus/[out TblstatComplete]:NotImplemented\'");
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.TableStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.TableStatus)(0)), temp10, "tableStatus of RopGetStatus, state S104");
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues.NotImplemented, temp11, "return of RopGetStatus, state S104");
                        S07_AsyncRops_GetStatusAndAbort_TestSuiteS128();
                        goto label1;
                    }
                    if ((temp14 == 1)) {
                        this.Manager.Comment("reaching state \'S81\'");
                        Microsoft.Protocols.TestSuites.Common.TableStatus temp12;
                        Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp13;
                        this.Manager.Comment("executing step \'call RopGetStatus(out _)\'");
                        temp13 = this.IMS_OXCTABLAdapterInstance.RopGetStatus(out temp12);
                        this.Manager.Checkpoint("MS-OXCTABL_R840");
                        this.Manager.Comment("reaching state \'S105\'");
                        this.Manager.Comment("checking step \'return RopGetStatus/[out TblstatComplete]:success\'");
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.TableStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.TableStatus)(0)), temp12, "tableStatus of RopGetStatus, state S105");
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp13, "return of RopGetStatus, state S105");
                        S07_AsyncRops_GetStatusAndAbort_TestSuiteS129();
                        goto label1;
                    }
                    throw new InvalidOperationException("never reached");
                label1:
;
                    goto label2;
                }
                throw new InvalidOperationException("never reached");
            label2:
;
                goto label3;
            }
            throw new InvalidOperationException("never reached");
        label3:
;
            this.Manager.EndTest();
        }
        
        private void MSOXCTABL_S07_AsyncRops_GetStatusAndAbort_TestSuiteCheckMAPIHTTPTransportSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S1");
        }
        
        private void MSOXCTABL_S07_AsyncRops_GetStatusAndAbort_TestSuiteCheckMAPIHTTPTransportSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S1");
        }
        
        private void MSOXCTABL_S07_AsyncRops_GetStatusAndAbort_TestSuiteCheckRequirementEnabledChecker(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S48");
        }
        
        private void MSOXCTABL_S07_AsyncRops_GetStatusAndAbort_TestSuiteCheckRequirementEnabledChecker1(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S66");
        }
        
        private void S07_AsyncRops_GetStatusAndAbort_TestSuiteS126() {
            this.Manager.Comment("reaching state \'S126\'");
        }
        
        private void MSOXCTABL_S07_AsyncRops_GetStatusAndAbort_TestSuiteCheckRequirementEnabledChecker2(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S66");
        }
        
        private void S07_AsyncRops_GetStatusAndAbort_TestSuiteS127() {
            this.Manager.Comment("reaching state \'S127\'");
        }
        
        private void MSOXCTABL_S07_AsyncRops_GetStatusAndAbort_TestSuiteCheckRequirementEnabledChecker3(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S48");
        }
        
        private void MSOXCTABL_S07_AsyncRops_GetStatusAndAbort_TestSuiteCheckRequirementEnabledChecker4(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S67");
        }
        
        private void S07_AsyncRops_GetStatusAndAbort_TestSuiteS128() {
            this.Manager.Comment("reaching state \'S128\'");
        }
        
        private void MSOXCTABL_S07_AsyncRops_GetStatusAndAbort_TestSuiteCheckRequirementEnabledChecker5(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S67");
        }
        
        private void S07_AsyncRops_GetStatusAndAbort_TestSuiteS129() {
            this.Manager.Comment("reaching state \'S129\'");
        }
        #endregion
        
        #region Test Starting in S10
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void MSOXCTABL_S07_AsyncRops_GetStatusAndAbort_TestSuite1() {
            this.Manager.BeginTest("MSOXCTABL_S07_AsyncRops_GetStatusAndAbort_TestSuite1");
            this.Manager.Comment("reaching state \'S10\'");
            bool temp17;
            this.Manager.Comment("executing step \'call CheckMAPIHTTPTransportSupported(out _)\'");
            this.IMS_OXCTABLAdapterInstance.CheckMAPIHTTPTransportSupported(out temp17);
            this.Manager.AddReturn(CheckMAPIHTTPTransportSupportedInfo, null, temp17);
            this.Manager.Comment("reaching state \'S11\'");
            int temp33 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S07_AsyncRops_GetStatusAndAbort_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCTABL_S07_AsyncRops_GetStatusAndAbort_TestSuite1CheckMAPIHTTPTransportSupportedChecker)), new ExpectedReturn(S07_AsyncRops_GetStatusAndAbort_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCTABL_S07_AsyncRops_GetStatusAndAbort_TestSuite1CheckMAPIHTTPTransportSupportedChecker1)));
            if ((temp33 == 0)) {
                this.Manager.Comment("reaching state \'S22\'");
                this.Manager.Comment("executing step \'call InitializeTable(RULES_TABLE)\'");
                this.IMS_OXCTABLAdapterInstance.InitializeTable(Microsoft.Protocols.TestSuites.MS_OXCTABL.TableType.RULES_TABLE);
                this.Manager.Comment("reaching state \'S29\'");
                this.Manager.Comment("checking step \'return InitializeTable\'");
                this.Manager.Comment("reaching state \'S35\'");
                Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp18;
                this.Manager.Comment("executing step \'call RopSetColumns(1,False,False,True)\'");
                temp18 = this.IMS_OXCTABLAdapterInstance.RopSetColumns(1u, false, false, true);
                this.Manager.Checkpoint("MS-OXCTABL_R830");
                this.Manager.Checkpoint("MS-OXCTABL_R45");
                this.Manager.Comment("reaching state \'S41\'");
                this.Manager.Comment("checking step \'return RopSetColumns/success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp18, "return of RopSetColumns, state S41");
                this.Manager.Comment("reaching state \'S47\'");
                bool temp19;
                this.Manager.Comment("executing step \'call CheckRequirementEnabled(791,out _)\'");
                this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(791, out temp19);
                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp19);
                this.Manager.Comment("reaching state \'S53\'");
                int temp32 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S07_AsyncRops_GetStatusAndAbort_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S07_AsyncRops_GetStatusAndAbort_TestSuite1CheckRequirementEnabledChecker)), new ExpectedReturn(S07_AsyncRops_GetStatusAndAbort_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S07_AsyncRops_GetStatusAndAbort_TestSuite1CheckRequirementEnabledChecker3)));
                if ((temp32 == 0)) {
                    this.Manager.Comment("reaching state \'S64\'");
                    bool temp20;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(792,out _)\'");
                    this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(792, out temp20);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp20);
                    this.Manager.Comment("reaching state \'S76\'");
                    int temp25 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S07_AsyncRops_GetStatusAndAbort_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S07_AsyncRops_GetStatusAndAbort_TestSuite1CheckRequirementEnabledChecker1)), new ExpectedReturn(S07_AsyncRops_GetStatusAndAbort_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S07_AsyncRops_GetStatusAndAbort_TestSuite1CheckRequirementEnabledChecker2)));
                    if ((temp25 == 0)) {
                        this.Manager.Comment("reaching state \'S98\'");
                        Microsoft.Protocols.TestSuites.Common.TableStatus temp21;
                        Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp22;
                        this.Manager.Comment("executing step \'call RopGetStatus(out _)\'");
                        temp22 = this.IMS_OXCTABLAdapterInstance.RopGetStatus(out temp21);
                        this.Manager.Checkpoint("MS-OXCTABL_R841");
                        this.Manager.Comment("reaching state \'S122\'");
                        this.Manager.Comment("checking step \'return RopGetStatus/[out TblstatComplete]:success\'");
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.TableStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.TableStatus)(0)), temp21, "tableStatus of RopGetStatus, state S122");
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp22, "return of RopGetStatus, state S122");
                        S07_AsyncRops_GetStatusAndAbort_TestSuiteS133();
                        goto label4;
                    }
                    if ((temp25 == 1)) {
                        this.Manager.Comment("reaching state \'S99\'");
                        Microsoft.Protocols.TestSuites.Common.TableStatus temp23;
                        Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp24;
                        this.Manager.Comment("executing step \'call RopGetStatus(out _)\'");
                        temp24 = this.IMS_OXCTABLAdapterInstance.RopGetStatus(out temp23);
                        this.Manager.Comment("reaching state \'S123\'");
                        this.Manager.Comment("checking step \'return RopGetStatus/[out TblstatComplete]:NotImplemented\'");
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.TableStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.TableStatus)(0)), temp23, "tableStatus of RopGetStatus, state S123");
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues.NotImplemented, temp24, "return of RopGetStatus, state S123");
                        S07_AsyncRops_GetStatusAndAbort_TestSuiteS132();
                        goto label4;
                    }
                    throw new InvalidOperationException("never reached");
                label4:
;
                    goto label6;
                }
                if ((temp32 == 1)) {
                    this.Manager.Comment("reaching state \'S65\'");
                    bool temp26;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(792,out _)\'");
                    this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(792, out temp26);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp26);
                    this.Manager.Comment("reaching state \'S77\'");
                    int temp31 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S07_AsyncRops_GetStatusAndAbort_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S07_AsyncRops_GetStatusAndAbort_TestSuite1CheckRequirementEnabledChecker4)), new ExpectedReturn(S07_AsyncRops_GetStatusAndAbort_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S07_AsyncRops_GetStatusAndAbort_TestSuite1CheckRequirementEnabledChecker5)));
                    if ((temp31 == 0)) {
                        this.Manager.Comment("reaching state \'S100\'");
                        Microsoft.Protocols.TestSuites.Common.TableStatus temp27;
                        Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp28;
                        this.Manager.Comment("executing step \'call RopGetStatus(out _)\'");
                        temp28 = this.IMS_OXCTABLAdapterInstance.RopGetStatus(out temp27);
                        this.Manager.Checkpoint("MS-OXCTABL_R841");
                        this.Manager.Comment("reaching state \'S124\'");
                        this.Manager.Comment("checking step \'return RopGetStatus/[out TblstatComplete]:success\'");
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.TableStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.TableStatus)(0)), temp27, "tableStatus of RopGetStatus, state S124");
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp28, "return of RopGetStatus, state S124");
                        S07_AsyncRops_GetStatusAndAbort_TestSuiteS131();
                        goto label5;
                    }
                    if ((temp31 == 1)) {
                        this.Manager.Comment("reaching state \'S101\'");
                        Microsoft.Protocols.TestSuites.Common.TableStatus temp29;
                        Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp30;
                        this.Manager.Comment("executing step \'call RopGetStatus(out _)\'");
                        temp30 = this.IMS_OXCTABLAdapterInstance.RopGetStatus(out temp29);
                        this.Manager.Comment("reaching state \'S125\'");
                        this.Manager.Comment("checking step \'return RopGetStatus/[out TblstatComplete]:NotImplemented\'");
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.TableStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.TableStatus)(0)), temp29, "tableStatus of RopGetStatus, state S125");
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues.NotImplemented, temp30, "return of RopGetStatus, state S125");
                        S07_AsyncRops_GetStatusAndAbort_TestSuiteS130();
                        goto label5;
                    }
                    throw new InvalidOperationException("never reached");
                label5:
;
                    goto label6;
                }
                throw new InvalidOperationException("never reached");
            label6:
;
                goto label7;
            }
            if ((temp33 == 1)) {
                this.Manager.Comment("reaching state \'S23\'");
                goto label7;
            }
            throw new InvalidOperationException("never reached");
        label7:
;
            this.Manager.EndTest();
        }
        
        private void MSOXCTABL_S07_AsyncRops_GetStatusAndAbort_TestSuite1CheckMAPIHTTPTransportSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S11");
        }
        
        private void MSOXCTABL_S07_AsyncRops_GetStatusAndAbort_TestSuite1CheckRequirementEnabledChecker(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S53");
        }
        
        private void MSOXCTABL_S07_AsyncRops_GetStatusAndAbort_TestSuite1CheckRequirementEnabledChecker1(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S76");
        }
        
        private void S07_AsyncRops_GetStatusAndAbort_TestSuiteS133() {
            this.Manager.Comment("reaching state \'S133\'");
        }
        
        private void MSOXCTABL_S07_AsyncRops_GetStatusAndAbort_TestSuite1CheckRequirementEnabledChecker2(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S76");
        }
        
        private void S07_AsyncRops_GetStatusAndAbort_TestSuiteS132() {
            this.Manager.Comment("reaching state \'S132\'");
        }
        
        private void MSOXCTABL_S07_AsyncRops_GetStatusAndAbort_TestSuite1CheckRequirementEnabledChecker3(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S53");
        }
        
        private void MSOXCTABL_S07_AsyncRops_GetStatusAndAbort_TestSuite1CheckRequirementEnabledChecker4(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S77");
        }
        
        private void S07_AsyncRops_GetStatusAndAbort_TestSuiteS131() {
            this.Manager.Comment("reaching state \'S131\'");
        }
        
        private void MSOXCTABL_S07_AsyncRops_GetStatusAndAbort_TestSuite1CheckRequirementEnabledChecker5(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S77");
        }
        
        private void S07_AsyncRops_GetStatusAndAbort_TestSuiteS130() {
            this.Manager.Comment("reaching state \'S130\'");
        }
        
        private void MSOXCTABL_S07_AsyncRops_GetStatusAndAbort_TestSuite1CheckMAPIHTTPTransportSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S11");
        }
        #endregion
        
        #region Test Starting in S2
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void MSOXCTABL_S07_AsyncRops_GetStatusAndAbort_TestSuite2() {
            this.Manager.BeginTest("MSOXCTABL_S07_AsyncRops_GetStatusAndAbort_TestSuite2");
            this.Manager.Comment("reaching state \'S2\'");
            bool temp34;
            this.Manager.Comment("executing step \'call CheckMAPIHTTPTransportSupported(out _)\'");
            this.IMS_OXCTABLAdapterInstance.CheckMAPIHTTPTransportSupported(out temp34);
            this.Manager.AddReturn(CheckMAPIHTTPTransportSupportedInfo, null, temp34);
            this.Manager.Comment("reaching state \'S3\'");
            int temp50 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S07_AsyncRops_GetStatusAndAbort_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCTABL_S07_AsyncRops_GetStatusAndAbort_TestSuite2CheckMAPIHTTPTransportSupportedChecker)), new ExpectedReturn(S07_AsyncRops_GetStatusAndAbort_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCTABL_S07_AsyncRops_GetStatusAndAbort_TestSuite2CheckMAPIHTTPTransportSupportedChecker1)));
            if ((temp50 == 0)) {
                this.Manager.Comment("reaching state \'S14\'");
                this.Manager.Comment("executing step \'call InitializeTable(RULES_TABLE)\'");
                this.IMS_OXCTABLAdapterInstance.InitializeTable(Microsoft.Protocols.TestSuites.MS_OXCTABL.TableType.RULES_TABLE);
                this.Manager.Comment("reaching state \'S25\'");
                this.Manager.Comment("checking step \'return InitializeTable\'");
                this.Manager.Comment("reaching state \'S31\'");
                Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp35;
                this.Manager.Comment("executing step \'call RopSetColumns(1,False,False,True)\'");
                temp35 = this.IMS_OXCTABLAdapterInstance.RopSetColumns(1u, false, false, true);
                this.Manager.Checkpoint("MS-OXCTABL_R830");
                this.Manager.Checkpoint("MS-OXCTABL_R45");
                this.Manager.Comment("reaching state \'S37\'");
                this.Manager.Comment("checking step \'return RopSetColumns/success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp35, "return of RopSetColumns, state S37");
                this.Manager.Comment("reaching state \'S43\'");
                bool temp36;
                this.Manager.Comment("executing step \'call CheckRequirementEnabled(791,out _)\'");
                this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(791, out temp36);
                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp36);
                this.Manager.Comment("reaching state \'S49\'");
                int temp49 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S07_AsyncRops_GetStatusAndAbort_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S07_AsyncRops_GetStatusAndAbort_TestSuite2CheckRequirementEnabledChecker)), new ExpectedReturn(S07_AsyncRops_GetStatusAndAbort_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S07_AsyncRops_GetStatusAndAbort_TestSuite2CheckRequirementEnabledChecker3)));
                if ((temp49 == 0)) {
                    this.Manager.Comment("reaching state \'S56\'");
                    bool temp37;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(792,out _)\'");
                    this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(792, out temp37);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp37);
                    this.Manager.Comment("reaching state \'S68\'");
                    int temp42 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S07_AsyncRops_GetStatusAndAbort_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S07_AsyncRops_GetStatusAndAbort_TestSuite2CheckRequirementEnabledChecker1)), new ExpectedReturn(S07_AsyncRops_GetStatusAndAbort_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S07_AsyncRops_GetStatusAndAbort_TestSuite2CheckRequirementEnabledChecker2)));
                    if ((temp42 == 0)) {
                        this.Manager.Comment("reaching state \'S82\'");
                        Microsoft.Protocols.TestSuites.Common.TableStatus temp38;
                        Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp39;
                        this.Manager.Comment("executing step \'call RopAbort(out _)\'");
                        temp39 = this.IMS_OXCTABLAdapterInstance.RopAbort(out temp38);
                        this.Manager.Comment("reaching state \'S106\'");
                        this.Manager.Comment("checking step \'return RopAbort/[out TblstatComplete]:NotImplemented\'");
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.TableStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.TableStatus)(0)), temp38, "tableStatus of RopAbort, state S106");
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues.NotImplemented, temp39, "return of RopAbort, state S106");
                        S07_AsyncRops_GetStatusAndAbort_TestSuiteS130();
                        goto label8;
                    }
                    if ((temp42 == 1)) {
                        this.Manager.Comment("reaching state \'S83\'");
                        Microsoft.Protocols.TestSuites.Common.TableStatus temp40;
                        Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp41;
                        this.Manager.Comment("executing step \'call RopAbort(out _)\'");
                        temp41 = this.IMS_OXCTABLAdapterInstance.RopAbort(out temp40);
                        this.Manager.Comment("reaching state \'S107\'");
                        this.Manager.Comment("checking step \'return RopAbort/[out TblstatComplete]:NotImplemented\'");
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.TableStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.TableStatus)(0)), temp40, "tableStatus of RopAbort, state S107");
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues.NotImplemented, temp41, "return of RopAbort, state S107");
                        S07_AsyncRops_GetStatusAndAbort_TestSuiteS131();
                        goto label8;
                    }
                    throw new InvalidOperationException("never reached");
                label8:
;
                    goto label10;
                }
                if ((temp49 == 1)) {
                    this.Manager.Comment("reaching state \'S57\'");
                    bool temp43;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(792,out _)\'");
                    this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(792, out temp43);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp43);
                    this.Manager.Comment("reaching state \'S69\'");
                    int temp48 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S07_AsyncRops_GetStatusAndAbort_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S07_AsyncRops_GetStatusAndAbort_TestSuite2CheckRequirementEnabledChecker4)), new ExpectedReturn(S07_AsyncRops_GetStatusAndAbort_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S07_AsyncRops_GetStatusAndAbort_TestSuite2CheckRequirementEnabledChecker5)));
                    if ((temp48 == 0)) {
                        this.Manager.Comment("reaching state \'S84\'");
                        Microsoft.Protocols.TestSuites.Common.TableStatus temp44;
                        Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp45;
                        this.Manager.Comment("executing step \'call RopAbort(out _)\'");
                        temp45 = this.IMS_OXCTABLAdapterInstance.RopAbort(out temp44);
                        this.Manager.Checkpoint("MS-OXCTABL_R486");
                        this.Manager.Comment("reaching state \'S108\'");
                        this.Manager.Comment("checking step \'return RopAbort/[out TblstatComplete]:ecNotSupported\'");
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.TableStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.TableStatus)(0)), temp44, "tableStatus of RopAbort, state S108");
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues.ecNotSupported, temp45, "return of RopAbort, state S108");
                        S07_AsyncRops_GetStatusAndAbort_TestSuiteS132();
                        goto label9;
                    }
                    if ((temp48 == 1)) {
                        this.Manager.Comment("reaching state \'S85\'");
                        Microsoft.Protocols.TestSuites.Common.TableStatus temp46;
                        Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp47;
                        this.Manager.Comment("executing step \'call RopAbort(out _)\'");
                        temp47 = this.IMS_OXCTABLAdapterInstance.RopAbort(out temp46);
                        this.Manager.Checkpoint("MS-OXCTABL_R486");
                        this.Manager.Comment("reaching state \'S109\'");
                        this.Manager.Comment("checking step \'return RopAbort/[out TblstatComplete]:ecNotSupported\'");
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.TableStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.TableStatus)(0)), temp46, "tableStatus of RopAbort, state S109");
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues.ecNotSupported, temp47, "return of RopAbort, state S109");
                        S07_AsyncRops_GetStatusAndAbort_TestSuiteS133();
                        goto label9;
                    }
                    throw new InvalidOperationException("never reached");
                label9:
;
                    goto label10;
                }
                throw new InvalidOperationException("never reached");
            label10:
;
                goto label11;
            }
            if ((temp50 == 1)) {
                this.Manager.Comment("reaching state \'S15\'");
                goto label11;
            }
            throw new InvalidOperationException("never reached");
        label11:
;
            this.Manager.EndTest();
        }
        
        private void MSOXCTABL_S07_AsyncRops_GetStatusAndAbort_TestSuite2CheckMAPIHTTPTransportSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S3");
        }
        
        private void MSOXCTABL_S07_AsyncRops_GetStatusAndAbort_TestSuite2CheckRequirementEnabledChecker(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S49");
        }
        
        private void MSOXCTABL_S07_AsyncRops_GetStatusAndAbort_TestSuite2CheckRequirementEnabledChecker1(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S68");
        }
        
        private void MSOXCTABL_S07_AsyncRops_GetStatusAndAbort_TestSuite2CheckRequirementEnabledChecker2(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S68");
        }
        
        private void MSOXCTABL_S07_AsyncRops_GetStatusAndAbort_TestSuite2CheckRequirementEnabledChecker3(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S49");
        }
        
        private void MSOXCTABL_S07_AsyncRops_GetStatusAndAbort_TestSuite2CheckRequirementEnabledChecker4(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S69");
        }
        
        private void MSOXCTABL_S07_AsyncRops_GetStatusAndAbort_TestSuite2CheckRequirementEnabledChecker5(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S69");
        }
        
        private void MSOXCTABL_S07_AsyncRops_GetStatusAndAbort_TestSuite2CheckMAPIHTTPTransportSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S3");
        }
        #endregion
        
        #region Test Starting in S4
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void MSOXCTABL_S07_AsyncRops_GetStatusAndAbort_TestSuite3() {
            this.Manager.BeginTest("MSOXCTABL_S07_AsyncRops_GetStatusAndAbort_TestSuite3");
            this.Manager.Comment("reaching state \'S4\'");
            bool temp51;
            this.Manager.Comment("executing step \'call CheckMAPIHTTPTransportSupported(out _)\'");
            this.IMS_OXCTABLAdapterInstance.CheckMAPIHTTPTransportSupported(out temp51);
            this.Manager.AddReturn(CheckMAPIHTTPTransportSupportedInfo, null, temp51);
            this.Manager.Comment("reaching state \'S5\'");
            int temp67 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S07_AsyncRops_GetStatusAndAbort_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCTABL_S07_AsyncRops_GetStatusAndAbort_TestSuite3CheckMAPIHTTPTransportSupportedChecker)), new ExpectedReturn(S07_AsyncRops_GetStatusAndAbort_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCTABL_S07_AsyncRops_GetStatusAndAbort_TestSuite3CheckMAPIHTTPTransportSupportedChecker1)));
            if ((temp67 == 0)) {
                this.Manager.Comment("reaching state \'S16\'");
                this.Manager.Comment("executing step \'call InitializeTable(CONTENT_TABLE)\'");
                this.IMS_OXCTABLAdapterInstance.InitializeTable(((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableType)(0)));
                this.Manager.Comment("reaching state \'S26\'");
                this.Manager.Comment("checking step \'return InitializeTable\'");
                this.Manager.Comment("reaching state \'S32\'");
                Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp52;
                this.Manager.Comment("executing step \'call RopSetColumns(1,False,False,True)\'");
                temp52 = this.IMS_OXCTABLAdapterInstance.RopSetColumns(1u, false, false, true);
                this.Manager.Checkpoint("MS-OXCTABL_R831");
                this.Manager.Checkpoint("MS-OXCTABL_R45");
                this.Manager.Comment("reaching state \'S38\'");
                this.Manager.Comment("checking step \'return RopSetColumns/success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp52, "return of RopSetColumns, state S38");
                this.Manager.Comment("reaching state \'S44\'");
                bool temp53;
                this.Manager.Comment("executing step \'call CheckRequirementEnabled(791,out _)\'");
                this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(791, out temp53);
                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp53);
                this.Manager.Comment("reaching state \'S50\'");
                int temp66 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S07_AsyncRops_GetStatusAndAbort_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S07_AsyncRops_GetStatusAndAbort_TestSuite3CheckRequirementEnabledChecker)), new ExpectedReturn(S07_AsyncRops_GetStatusAndAbort_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S07_AsyncRops_GetStatusAndAbort_TestSuite3CheckRequirementEnabledChecker3)));
                if ((temp66 == 0)) {
                    this.Manager.Comment("reaching state \'S58\'");
                    bool temp54;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(792,out _)\'");
                    this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(792, out temp54);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp54);
                    this.Manager.Comment("reaching state \'S70\'");
                    int temp59 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S07_AsyncRops_GetStatusAndAbort_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S07_AsyncRops_GetStatusAndAbort_TestSuite3CheckRequirementEnabledChecker1)), new ExpectedReturn(S07_AsyncRops_GetStatusAndAbort_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S07_AsyncRops_GetStatusAndAbort_TestSuite3CheckRequirementEnabledChecker2)));
                    if ((temp59 == 0)) {
                        this.Manager.Comment("reaching state \'S86\'");
                        Microsoft.Protocols.TestSuites.Common.TableStatus temp55;
                        Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp56;
                        this.Manager.Comment("executing step \'call RopAbort(out _)\'");
                        temp56 = this.IMS_OXCTABLAdapterInstance.RopAbort(out temp55);
                        this.Manager.Comment("reaching state \'S110\'");
                        this.Manager.Comment("checking step \'return RopAbort/[out TblstatComplete]:NotImplemented\'");
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.TableStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.TableStatus)(0)), temp55, "tableStatus of RopAbort, state S110");
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues.NotImplemented, temp56, "return of RopAbort, state S110");
                        S07_AsyncRops_GetStatusAndAbort_TestSuiteS134();
                        goto label12;
                    }
                    if ((temp59 == 1)) {
                        this.Manager.Comment("reaching state \'S87\'");
                        Microsoft.Protocols.TestSuites.Common.TableStatus temp57;
                        Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp58;
                        this.Manager.Comment("executing step \'call RopAbort(out _)\'");
                        temp58 = this.IMS_OXCTABLAdapterInstance.RopAbort(out temp57);
                        this.Manager.Comment("reaching state \'S111\'");
                        this.Manager.Comment("checking step \'return RopAbort/[out TblstatComplete]:NotImplemented\'");
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.TableStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.TableStatus)(0)), temp57, "tableStatus of RopAbort, state S111");
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues.NotImplemented, temp58, "return of RopAbort, state S111");
                        S07_AsyncRops_GetStatusAndAbort_TestSuiteS135();
                        goto label12;
                    }
                    throw new InvalidOperationException("never reached");
                label12:
;
                    goto label14;
                }
                if ((temp66 == 1)) {
                    this.Manager.Comment("reaching state \'S59\'");
                    bool temp60;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(792,out _)\'");
                    this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(792, out temp60);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp60);
                    this.Manager.Comment("reaching state \'S71\'");
                    int temp65 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S07_AsyncRops_GetStatusAndAbort_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S07_AsyncRops_GetStatusAndAbort_TestSuite3CheckRequirementEnabledChecker4)), new ExpectedReturn(S07_AsyncRops_GetStatusAndAbort_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S07_AsyncRops_GetStatusAndAbort_TestSuite3CheckRequirementEnabledChecker5)));
                    if ((temp65 == 0)) {
                        this.Manager.Comment("reaching state \'S88\'");
                        Microsoft.Protocols.TestSuites.Common.TableStatus temp61;
                        Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp62;
                        this.Manager.Comment("executing step \'call RopAbort(out _)\'");
                        temp62 = this.IMS_OXCTABLAdapterInstance.RopAbort(out temp61);
                        this.Manager.Checkpoint("MS-OXCTABL_R483");
                        this.Manager.Comment("reaching state \'S112\'");
                        this.Manager.Comment("checking step \'return RopAbort/[out TblstatComplete]:ecUnableToAbort\'");
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.TableStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.TableStatus)(0)), temp61, "tableStatus of RopAbort, state S112");
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues.ecUnableToAbort, temp62, "return of RopAbort, state S112");
                        S07_AsyncRops_GetStatusAndAbort_TestSuiteS136();
                        goto label13;
                    }
                    if ((temp65 == 1)) {
                        this.Manager.Comment("reaching state \'S89\'");
                        Microsoft.Protocols.TestSuites.Common.TableStatus temp63;
                        Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp64;
                        this.Manager.Comment("executing step \'call RopAbort(out _)\'");
                        temp64 = this.IMS_OXCTABLAdapterInstance.RopAbort(out temp63);
                        this.Manager.Checkpoint("MS-OXCTABL_R483");
                        this.Manager.Comment("reaching state \'S113\'");
                        this.Manager.Comment("checking step \'return RopAbort/[out TblstatComplete]:ecUnableToAbort\'");
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.TableStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.TableStatus)(0)), temp63, "tableStatus of RopAbort, state S113");
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues.ecUnableToAbort, temp64, "return of RopAbort, state S113");
                        S07_AsyncRops_GetStatusAndAbort_TestSuiteS137();
                        goto label13;
                    }
                    throw new InvalidOperationException("never reached");
                label13:
;
                    goto label14;
                }
                throw new InvalidOperationException("never reached");
            label14:
;
                goto label15;
            }
            if ((temp67 == 1)) {
                this.Manager.Comment("reaching state \'S17\'");
                goto label15;
            }
            throw new InvalidOperationException("never reached");
        label15:
;
            this.Manager.EndTest();
        }
        
        private void MSOXCTABL_S07_AsyncRops_GetStatusAndAbort_TestSuite3CheckMAPIHTTPTransportSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S5");
        }
        
        private void MSOXCTABL_S07_AsyncRops_GetStatusAndAbort_TestSuite3CheckRequirementEnabledChecker(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S50");
        }
        
        private void MSOXCTABL_S07_AsyncRops_GetStatusAndAbort_TestSuite3CheckRequirementEnabledChecker1(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S70");
        }
        
        private void S07_AsyncRops_GetStatusAndAbort_TestSuiteS134() {
            this.Manager.Comment("reaching state \'S134\'");
        }
        
        private void MSOXCTABL_S07_AsyncRops_GetStatusAndAbort_TestSuite3CheckRequirementEnabledChecker2(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S70");
        }
        
        private void S07_AsyncRops_GetStatusAndAbort_TestSuiteS135() {
            this.Manager.Comment("reaching state \'S135\'");
        }
        
        private void MSOXCTABL_S07_AsyncRops_GetStatusAndAbort_TestSuite3CheckRequirementEnabledChecker3(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S50");
        }
        
        private void MSOXCTABL_S07_AsyncRops_GetStatusAndAbort_TestSuite3CheckRequirementEnabledChecker4(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S71");
        }
        
        private void S07_AsyncRops_GetStatusAndAbort_TestSuiteS136() {
            this.Manager.Comment("reaching state \'S136\'");
        }
        
        private void MSOXCTABL_S07_AsyncRops_GetStatusAndAbort_TestSuite3CheckRequirementEnabledChecker5(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S71");
        }
        
        private void S07_AsyncRops_GetStatusAndAbort_TestSuiteS137() {
            this.Manager.Comment("reaching state \'S137\'");
        }
        
        private void MSOXCTABL_S07_AsyncRops_GetStatusAndAbort_TestSuite3CheckMAPIHTTPTransportSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S5");
        }
        #endregion
        
        #region Test Starting in S6
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void MSOXCTABL_S07_AsyncRops_GetStatusAndAbort_TestSuite4() {
            this.Manager.BeginTest("MSOXCTABL_S07_AsyncRops_GetStatusAndAbort_TestSuite4");
            this.Manager.Comment("reaching state \'S6\'");
            bool temp68;
            this.Manager.Comment("executing step \'call CheckMAPIHTTPTransportSupported(out _)\'");
            this.IMS_OXCTABLAdapterInstance.CheckMAPIHTTPTransportSupported(out temp68);
            this.Manager.AddReturn(CheckMAPIHTTPTransportSupportedInfo, null, temp68);
            this.Manager.Comment("reaching state \'S7\'");
            int temp84 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S07_AsyncRops_GetStatusAndAbort_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCTABL_S07_AsyncRops_GetStatusAndAbort_TestSuite4CheckMAPIHTTPTransportSupportedChecker)), new ExpectedReturn(S07_AsyncRops_GetStatusAndAbort_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCTABL_S07_AsyncRops_GetStatusAndAbort_TestSuite4CheckMAPIHTTPTransportSupportedChecker1)));
            if ((temp84 == 0)) {
                this.Manager.Comment("reaching state \'S18\'");
                this.Manager.Comment("executing step \'call InitializeTable(HIERARCHY_TABLE)\'");
                this.IMS_OXCTABLAdapterInstance.InitializeTable(((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableType)(1)));
                this.Manager.Comment("reaching state \'S27\'");
                this.Manager.Comment("checking step \'return InitializeTable\'");
                this.Manager.Comment("reaching state \'S33\'");
                Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp69;
                this.Manager.Comment("executing step \'call RopSetColumns(1,False,False,True)\'");
                temp69 = this.IMS_OXCTABLAdapterInstance.RopSetColumns(1u, false, false, true);
                this.Manager.Checkpoint("MS-OXCTABL_R829");
                this.Manager.Checkpoint("MS-OXCTABL_R45");
                this.Manager.Comment("reaching state \'S39\'");
                this.Manager.Comment("checking step \'return RopSetColumns/success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp69, "return of RopSetColumns, state S39");
                this.Manager.Comment("reaching state \'S45\'");
                bool temp70;
                this.Manager.Comment("executing step \'call CheckRequirementEnabled(791,out _)\'");
                this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(791, out temp70);
                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp70);
                this.Manager.Comment("reaching state \'S51\'");
                int temp83 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S07_AsyncRops_GetStatusAndAbort_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S07_AsyncRops_GetStatusAndAbort_TestSuite4CheckRequirementEnabledChecker)), new ExpectedReturn(S07_AsyncRops_GetStatusAndAbort_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S07_AsyncRops_GetStatusAndAbort_TestSuite4CheckRequirementEnabledChecker3)));
                if ((temp83 == 0)) {
                    this.Manager.Comment("reaching state \'S60\'");
                    bool temp71;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(792,out _)\'");
                    this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(792, out temp71);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp71);
                    this.Manager.Comment("reaching state \'S72\'");
                    int temp76 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S07_AsyncRops_GetStatusAndAbort_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S07_AsyncRops_GetStatusAndAbort_TestSuite4CheckRequirementEnabledChecker1)), new ExpectedReturn(S07_AsyncRops_GetStatusAndAbort_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S07_AsyncRops_GetStatusAndAbort_TestSuite4CheckRequirementEnabledChecker2)));
                    if ((temp76 == 0)) {
                        this.Manager.Comment("reaching state \'S90\'");
                        Microsoft.Protocols.TestSuites.Common.TableStatus temp72;
                        Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp73;
                        this.Manager.Comment("executing step \'call RopAbort(out _)\'");
                        temp73 = this.IMS_OXCTABLAdapterInstance.RopAbort(out temp72);
                        this.Manager.Comment("reaching state \'S114\'");
                        this.Manager.Comment("checking step \'return RopAbort/[out TblstatComplete]:NotImplemented\'");
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.TableStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.TableStatus)(0)), temp72, "tableStatus of RopAbort, state S114");
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues.NotImplemented, temp73, "return of RopAbort, state S114");
                        S07_AsyncRops_GetStatusAndAbort_TestSuiteS129();
                        goto label16;
                    }
                    if ((temp76 == 1)) {
                        this.Manager.Comment("reaching state \'S91\'");
                        Microsoft.Protocols.TestSuites.Common.TableStatus temp74;
                        Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp75;
                        this.Manager.Comment("executing step \'call RopAbort(out _)\'");
                        temp75 = this.IMS_OXCTABLAdapterInstance.RopAbort(out temp74);
                        this.Manager.Comment("reaching state \'S115\'");
                        this.Manager.Comment("checking step \'return RopAbort/[out TblstatComplete]:NotImplemented\'");
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.TableStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.TableStatus)(0)), temp74, "tableStatus of RopAbort, state S115");
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues.NotImplemented, temp75, "return of RopAbort, state S115");
                        S07_AsyncRops_GetStatusAndAbort_TestSuiteS128();
                        goto label16;
                    }
                    throw new InvalidOperationException("never reached");
                label16:
;
                    goto label18;
                }
                if ((temp83 == 1)) {
                    this.Manager.Comment("reaching state \'S61\'");
                    bool temp77;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(792,out _)\'");
                    this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(792, out temp77);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp77);
                    this.Manager.Comment("reaching state \'S73\'");
                    int temp82 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S07_AsyncRops_GetStatusAndAbort_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S07_AsyncRops_GetStatusAndAbort_TestSuite4CheckRequirementEnabledChecker4)), new ExpectedReturn(S07_AsyncRops_GetStatusAndAbort_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S07_AsyncRops_GetStatusAndAbort_TestSuite4CheckRequirementEnabledChecker5)));
                    if ((temp82 == 0)) {
                        this.Manager.Comment("reaching state \'S92\'");
                        Microsoft.Protocols.TestSuites.Common.TableStatus temp78;
                        Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp79;
                        this.Manager.Comment("executing step \'call RopAbort(out _)\'");
                        temp79 = this.IMS_OXCTABLAdapterInstance.RopAbort(out temp78);
                        this.Manager.Checkpoint("MS-OXCTABL_R839");
                        this.Manager.Comment("reaching state \'S116\'");
                        this.Manager.Comment("checking step \'return RopAbort/[out TblstatComplete]:ecUnableToAbort\'");
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.TableStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.TableStatus)(0)), temp78, "tableStatus of RopAbort, state S116");
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues.ecUnableToAbort, temp79, "return of RopAbort, state S116");
                        S07_AsyncRops_GetStatusAndAbort_TestSuiteS127();
                        goto label17;
                    }
                    if ((temp82 == 1)) {
                        this.Manager.Comment("reaching state \'S93\'");
                        Microsoft.Protocols.TestSuites.Common.TableStatus temp80;
                        Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp81;
                        this.Manager.Comment("executing step \'call RopAbort(out _)\'");
                        temp81 = this.IMS_OXCTABLAdapterInstance.RopAbort(out temp80);
                        this.Manager.Checkpoint("MS-OXCTABL_R839");
                        this.Manager.Comment("reaching state \'S117\'");
                        this.Manager.Comment("checking step \'return RopAbort/[out TblstatComplete]:ecUnableToAbort\'");
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.TableStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.TableStatus)(0)), temp80, "tableStatus of RopAbort, state S117");
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues.ecUnableToAbort, temp81, "return of RopAbort, state S117");
                        S07_AsyncRops_GetStatusAndAbort_TestSuiteS126();
                        goto label17;
                    }
                    throw new InvalidOperationException("never reached");
                label17:
;
                    goto label18;
                }
                throw new InvalidOperationException("never reached");
            label18:
;
                goto label19;
            }
            if ((temp84 == 1)) {
                this.Manager.Comment("reaching state \'S19\'");
                goto label19;
            }
            throw new InvalidOperationException("never reached");
        label19:
;
            this.Manager.EndTest();
        }
        
        private void MSOXCTABL_S07_AsyncRops_GetStatusAndAbort_TestSuite4CheckMAPIHTTPTransportSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S7");
        }
        
        private void MSOXCTABL_S07_AsyncRops_GetStatusAndAbort_TestSuite4CheckRequirementEnabledChecker(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S51");
        }
        
        private void MSOXCTABL_S07_AsyncRops_GetStatusAndAbort_TestSuite4CheckRequirementEnabledChecker1(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S72");
        }
        
        private void MSOXCTABL_S07_AsyncRops_GetStatusAndAbort_TestSuite4CheckRequirementEnabledChecker2(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S72");
        }
        
        private void MSOXCTABL_S07_AsyncRops_GetStatusAndAbort_TestSuite4CheckRequirementEnabledChecker3(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S51");
        }
        
        private void MSOXCTABL_S07_AsyncRops_GetStatusAndAbort_TestSuite4CheckRequirementEnabledChecker4(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S73");
        }
        
        private void MSOXCTABL_S07_AsyncRops_GetStatusAndAbort_TestSuite4CheckRequirementEnabledChecker5(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S73");
        }
        
        private void MSOXCTABL_S07_AsyncRops_GetStatusAndAbort_TestSuite4CheckMAPIHTTPTransportSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S7");
        }
        #endregion
        
        #region Test Starting in S8
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void MSOXCTABL_S07_AsyncRops_GetStatusAndAbort_TestSuite5() {
            this.Manager.BeginTest("MSOXCTABL_S07_AsyncRops_GetStatusAndAbort_TestSuite5");
            this.Manager.Comment("reaching state \'S8\'");
            bool temp85;
            this.Manager.Comment("executing step \'call CheckMAPIHTTPTransportSupported(out _)\'");
            this.IMS_OXCTABLAdapterInstance.CheckMAPIHTTPTransportSupported(out temp85);
            this.Manager.AddReturn(CheckMAPIHTTPTransportSupportedInfo, null, temp85);
            this.Manager.Comment("reaching state \'S9\'");
            int temp101 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S07_AsyncRops_GetStatusAndAbort_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCTABL_S07_AsyncRops_GetStatusAndAbort_TestSuite5CheckMAPIHTTPTransportSupportedChecker)), new ExpectedReturn(S07_AsyncRops_GetStatusAndAbort_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCTABL_S07_AsyncRops_GetStatusAndAbort_TestSuite5CheckMAPIHTTPTransportSupportedChecker1)));
            if ((temp101 == 0)) {
                this.Manager.Comment("reaching state \'S20\'");
                this.Manager.Comment("executing step \'call InitializeTable(CONTENT_TABLE)\'");
                this.IMS_OXCTABLAdapterInstance.InitializeTable(((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableType)(0)));
                this.Manager.Comment("reaching state \'S28\'");
                this.Manager.Comment("checking step \'return InitializeTable\'");
                this.Manager.Comment("reaching state \'S34\'");
                Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp86;
                this.Manager.Comment("executing step \'call RopSetColumns(1,False,False,True)\'");
                temp86 = this.IMS_OXCTABLAdapterInstance.RopSetColumns(1u, false, false, true);
                this.Manager.Checkpoint("MS-OXCTABL_R831");
                this.Manager.Checkpoint("MS-OXCTABL_R45");
                this.Manager.Comment("reaching state \'S40\'");
                this.Manager.Comment("checking step \'return RopSetColumns/success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp86, "return of RopSetColumns, state S40");
                this.Manager.Comment("reaching state \'S46\'");
                bool temp87;
                this.Manager.Comment("executing step \'call CheckRequirementEnabled(791,out _)\'");
                this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(791, out temp87);
                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp87);
                this.Manager.Comment("reaching state \'S52\'");
                int temp100 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S07_AsyncRops_GetStatusAndAbort_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S07_AsyncRops_GetStatusAndAbort_TestSuite5CheckRequirementEnabledChecker)), new ExpectedReturn(S07_AsyncRops_GetStatusAndAbort_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S07_AsyncRops_GetStatusAndAbort_TestSuite5CheckRequirementEnabledChecker3)));
                if ((temp100 == 0)) {
                    this.Manager.Comment("reaching state \'S62\'");
                    bool temp88;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(792,out _)\'");
                    this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(792, out temp88);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp88);
                    this.Manager.Comment("reaching state \'S74\'");
                    int temp93 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S07_AsyncRops_GetStatusAndAbort_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S07_AsyncRops_GetStatusAndAbort_TestSuite5CheckRequirementEnabledChecker1)), new ExpectedReturn(S07_AsyncRops_GetStatusAndAbort_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S07_AsyncRops_GetStatusAndAbort_TestSuite5CheckRequirementEnabledChecker2)));
                    if ((temp93 == 0)) {
                        this.Manager.Comment("reaching state \'S94\'");
                        Microsoft.Protocols.TestSuites.Common.TableStatus temp89;
                        Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp90;
                        this.Manager.Comment("executing step \'call RopGetStatus(out _)\'");
                        temp90 = this.IMS_OXCTABLAdapterInstance.RopGetStatus(out temp89);
                        this.Manager.Comment("reaching state \'S118\'");
                        this.Manager.Comment("checking step \'return RopGetStatus/[out TblstatComplete]:NotImplemented\'");
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.TableStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.TableStatus)(0)), temp89, "tableStatus of RopGetStatus, state S118");
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues.NotImplemented, temp90, "return of RopGetStatus, state S118");
                        S07_AsyncRops_GetStatusAndAbort_TestSuiteS137();
                        goto label20;
                    }
                    if ((temp93 == 1)) {
                        this.Manager.Comment("reaching state \'S95\'");
                        Microsoft.Protocols.TestSuites.Common.TableStatus temp91;
                        Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp92;
                        this.Manager.Comment("executing step \'call RopGetStatus(out _)\'");
                        temp92 = this.IMS_OXCTABLAdapterInstance.RopGetStatus(out temp91);
                        this.Manager.Checkpoint("MS-OXCTABL_R842");
                        this.Manager.Comment("reaching state \'S119\'");
                        this.Manager.Comment("checking step \'return RopGetStatus/[out TblstatComplete]:success\'");
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.TableStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.TableStatus)(0)), temp91, "tableStatus of RopGetStatus, state S119");
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp92, "return of RopGetStatus, state S119");
                        S07_AsyncRops_GetStatusAndAbort_TestSuiteS136();
                        goto label20;
                    }
                    throw new InvalidOperationException("never reached");
                label20:
;
                    goto label22;
                }
                if ((temp100 == 1)) {
                    this.Manager.Comment("reaching state \'S63\'");
                    bool temp94;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(792,out _)\'");
                    this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(792, out temp94);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp94);
                    this.Manager.Comment("reaching state \'S75\'");
                    int temp99 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S07_AsyncRops_GetStatusAndAbort_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S07_AsyncRops_GetStatusAndAbort_TestSuite5CheckRequirementEnabledChecker4)), new ExpectedReturn(S07_AsyncRops_GetStatusAndAbort_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S07_AsyncRops_GetStatusAndAbort_TestSuite5CheckRequirementEnabledChecker5)));
                    if ((temp99 == 0)) {
                        this.Manager.Comment("reaching state \'S96\'");
                        Microsoft.Protocols.TestSuites.Common.TableStatus temp95;
                        Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp96;
                        this.Manager.Comment("executing step \'call RopGetStatus(out _)\'");
                        temp96 = this.IMS_OXCTABLAdapterInstance.RopGetStatus(out temp95);
                        this.Manager.Checkpoint("MS-OXCTABL_R842");
                        this.Manager.Comment("reaching state \'S120\'");
                        this.Manager.Comment("checking step \'return RopGetStatus/[out TblstatComplete]:success\'");
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.TableStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.TableStatus)(0)), temp95, "tableStatus of RopGetStatus, state S120");
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp96, "return of RopGetStatus, state S120");
                        S07_AsyncRops_GetStatusAndAbort_TestSuiteS135();
                        goto label21;
                    }
                    if ((temp99 == 1)) {
                        this.Manager.Comment("reaching state \'S97\'");
                        Microsoft.Protocols.TestSuites.Common.TableStatus temp97;
                        Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp98;
                        this.Manager.Comment("executing step \'call RopGetStatus(out _)\'");
                        temp98 = this.IMS_OXCTABLAdapterInstance.RopGetStatus(out temp97);
                        this.Manager.Comment("reaching state \'S121\'");
                        this.Manager.Comment("checking step \'return RopGetStatus/[out TblstatComplete]:NotImplemented\'");
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.TableStatus>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.TableStatus)(0)), temp97, "tableStatus of RopGetStatus, state S121");
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues.NotImplemented, temp98, "return of RopGetStatus, state S121");
                        S07_AsyncRops_GetStatusAndAbort_TestSuiteS134();
                        goto label21;
                    }
                    throw new InvalidOperationException("never reached");
                label21:
;
                    goto label22;
                }
                throw new InvalidOperationException("never reached");
            label22:
;
                goto label23;
            }
            if ((temp101 == 1)) {
                this.Manager.Comment("reaching state \'S21\'");
                goto label23;
            }
            throw new InvalidOperationException("never reached");
        label23:
;
            this.Manager.EndTest();
        }
        
        private void MSOXCTABL_S07_AsyncRops_GetStatusAndAbort_TestSuite5CheckMAPIHTTPTransportSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S9");
        }
        
        private void MSOXCTABL_S07_AsyncRops_GetStatusAndAbort_TestSuite5CheckRequirementEnabledChecker(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S52");
        }
        
        private void MSOXCTABL_S07_AsyncRops_GetStatusAndAbort_TestSuite5CheckRequirementEnabledChecker1(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S74");
        }
        
        private void MSOXCTABL_S07_AsyncRops_GetStatusAndAbort_TestSuite5CheckRequirementEnabledChecker2(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S74");
        }
        
        private void MSOXCTABL_S07_AsyncRops_GetStatusAndAbort_TestSuite5CheckRequirementEnabledChecker3(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S52");
        }
        
        private void MSOXCTABL_S07_AsyncRops_GetStatusAndAbort_TestSuite5CheckRequirementEnabledChecker4(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S75");
        }
        
        private void MSOXCTABL_S07_AsyncRops_GetStatusAndAbort_TestSuite5CheckRequirementEnabledChecker5(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S75");
        }
        
        private void MSOXCTABL_S07_AsyncRops_GetStatusAndAbort_TestSuite5CheckMAPIHTTPTransportSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S9");
        }
        #endregion
    }
}
