//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18449
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Microsoft.Protocols.TestSuites.MS_OXCTABL {
    using System;
    using System.Collections.Generic;
    using System.Text;
    using System.Reflection;
    using Microsoft.SpecExplorer.Runtime.Testing;
    using Microsoft.Protocols.TestTools;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Spec Explorer", "3.5.3130.0")]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite : PtfTestClassBase {
        
        public S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite() {
            this.SetSwitch("ProceedControlTimeout", "100");
            this.SetSwitch("QuiescenceTimeout", "2000000");
        }
        
        #region Expect Delegates
        public delegate void CheckMAPIHTTPTransportSupportedDelegate1(bool isSupported);
        
        public delegate void RopQueryRowsResponseDelegate1(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger);
        
        public delegate void CheckRequirementEnabledDelegate1(bool enabled);
        #endregion
        
        #region Event Metadata
        static System.Reflection.MethodBase CheckMAPIHTTPTransportSupportedInfo = TestManagerHelpers.GetMethodInfo(typeof(Microsoft.Protocols.TestSuites.MS_OXCTABL.IMS_OXCTABLAdapter), "CheckMAPIHTTPTransportSupported", typeof(bool).MakeByRefType());
        
        static System.Reflection.MethodBase CheckRequirementEnabledInfo = TestManagerHelpers.GetMethodInfo(typeof(Microsoft.Protocols.TestSuites.MS_OXCTABL.IMS_OXCTABLAdapter), "CheckRequirementEnabled", typeof(int), typeof(bool).MakeByRefType());
        
        static System.Reflection.EventInfo RopQueryRowsResponseInfo = TestManagerHelpers.GetEventInfo(typeof(Microsoft.Protocols.TestSuites.MS_OXCTABL.IMS_OXCTABLAdapter), "RopQueryRowsResponse");
        #endregion
        
        #region Adapter Instances
        private Microsoft.Protocols.TestSuites.MS_OXCTABL.IMS_OXCTABLAdapter IMS_OXCTABLAdapterInstance;
        #endregion
        
        #region Class Initialization and Cleanup
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void ClassInitialize(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext context) {
            PtfTestClassBase.Initialize(context);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void ClassCleanup() {
            PtfTestClassBase.Cleanup();
        }
        #endregion
        
        #region Test Initialization and Cleanup
        protected override void TestInitialize() {
            this.InitializeTestManager();
            this.IMS_OXCTABLAdapterInstance = ((Microsoft.Protocols.TestSuites.MS_OXCTABL.IMS_OXCTABLAdapter)(this.Manager.GetAdapter(typeof(Microsoft.Protocols.TestSuites.MS_OXCTABL.IMS_OXCTABLAdapter))));
            this.Manager.Subscribe(RopQueryRowsResponseInfo, this.IMS_OXCTABLAdapterInstance);
        }
        
        protected override void TestCleanup() {
            base.TestCleanup();
            this.CleanupTestManager();
        }
        #endregion
        
        #region Test Starting in S0
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite() {
            this.Manager.BeginTest("MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite");
            this.Manager.Comment("reaching state \'S0\'");
            bool temp0;
            this.Manager.Comment("executing step \'call CheckMAPIHTTPTransportSupported(out _)\'");
            this.IMS_OXCTABLAdapterInstance.CheckMAPIHTTPTransportSupported(out temp0);
            this.Manager.AddReturn(CheckMAPIHTTPTransportSupportedInfo, null, temp0);
            this.Manager.Comment("reaching state \'S1\'");
            int temp153 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteCheckMAPIHTTPTransportSupportedChecker)), new ExpectedReturn(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteCheckMAPIHTTPTransportSupportedChecker1)));
            if ((temp153 == 0)) {
                this.Manager.Comment("reaching state \'S8\'");
                goto label47;
            }
            if ((temp153 == 1)) {
                this.Manager.Comment("reaching state \'S9\'");
                this.Manager.Comment("executing step \'call InitializeTable(CONTENT_TABLE)\'");
                this.IMS_OXCTABLAdapterInstance.InitializeTable(((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableType)(0)));
                this.Manager.Comment("reaching state \'S16\'");
                this.Manager.Comment("checking step \'return InitializeTable\'");
                this.Manager.Comment("reaching state \'S20\'");
                Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp1;
                this.Manager.Comment("executing step \'call RopSetColumns(1,False,False,False)\'");
                temp1 = this.IMS_OXCTABLAdapterInstance.RopSetColumns(1u, false, false, false);
                this.Manager.Checkpoint("MS-OXCTABL_R831");
                this.Manager.Checkpoint("MS-OXCTABL_R45");
                this.Manager.Comment("reaching state \'S24\'");
                this.Manager.Comment("checking step \'return RopSetColumns/success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp1, "return of RopSetColumns, state S24");
                this.Manager.Comment("reaching state \'S28\'");
                Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp2;
                this.Manager.Comment("executing step \'call RopSortTable(1,True,False,False,True,True,False,False)\'");
                temp2 = this.IMS_OXCTABLAdapterInstance.RopSortTable(1u, true, false, false, true, true, false, false);
                this.Manager.Checkpoint("MS-OXCTABL_R447");
                this.Manager.Comment("reaching state \'S32\'");
                this.Manager.Comment("checking step \'return RopSortTable/success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp2, "return of RopSortTable, state S32");
                S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS36();
                goto label47;
            }
            throw new InvalidOperationException("never reached");
        label47:
;
            this.Manager.EndTest();
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteCheckMAPIHTTPTransportSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S1");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteCheckMAPIHTTPTransportSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S1");
        }
        
        private void S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS36() {
            this.Manager.Comment("reaching state \'S36\'");
            bool temp3;
            this.Manager.Comment("executing step \'call CheckRequirementEnabled(768,out _)\'");
            this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(768, out temp3);
            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp3);
            this.Manager.Comment("reaching state \'S37\'");
            int temp152 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteCheckRequirementEnabledChecker)), new ExpectedReturn(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteCheckRequirementEnabledChecker15)));
            if ((temp152 == 0)) {
                this.Manager.Comment("reaching state \'S38\'");
                bool temp4;
                this.Manager.Comment("executing step \'call CheckRequirementEnabled(866,out _)\'");
                this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(866, out temp4);
                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp4);
                this.Manager.Comment("reaching state \'S40\'");
                int temp77 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteCheckRequirementEnabledChecker1)), new ExpectedReturn(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteCheckRequirementEnabledChecker8)));
                if ((temp77 == 0)) {
                    this.Manager.Comment("reaching state \'S42\'");
                    bool temp5;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(867,out _)\'");
                    this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(867, out temp5);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp5);
                    this.Manager.Comment("reaching state \'S46\'");
                    int temp40 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteCheckRequirementEnabledChecker2)), new ExpectedReturn(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteCheckRequirementEnabledChecker5)));
                    if ((temp40 == 0)) {
                        this.Manager.Comment("reaching state \'S50\'");
                        Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp6;
                        this.Manager.Comment("executing step \'call RopQueryRows(NoAdvance,True)\'");
                        temp6 = this.IMS_OXCTABLAdapterInstance.RopQueryRows(((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), true);
                        this.Manager.Checkpoint("MS-OXCTABL_R837");
                        this.Manager.Comment("reaching state \'S58\'");
                        this.Manager.Comment("checking step \'return RopQueryRows/success\'");
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp6, "return of RopQueryRows, state S58");
                        this.Manager.Comment("reaching state \'S66\'");
                        bool temp7;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(443,out _)\'");
                        this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(443, out temp7);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp7);
                        this.Manager.Comment("reaching state \'S74\'");
                        int temp22 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteCheckRequirementEnabledChecker3)), new ExpectedReturn(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteCheckRequirementEnabledChecker4)));
                        if ((temp22 == 0)) {
                            this.Manager.Comment("reaching state \'S82\'");
                            int temp14 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker7)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker8)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker9)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker10)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker11)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker12)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker13)));
                            if ((temp14 == 0)) {
                                S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS98();
                                goto label1;
                            }
                            if ((temp14 == 1)) {
                                S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS98();
                                goto label1;
                            }
                            if ((temp14 == 2)) {
                                S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS98();
                                goto label1;
                            }
                            if ((temp14 == 3)) {
                                S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS98();
                                goto label1;
                            }
                            if ((temp14 == 4)) {
                                S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS98();
                                goto label1;
                            }
                            if ((temp14 == 5)) {
                                S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS98();
                                goto label1;
                            }
                            if ((temp14 == 6)) {
                                S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS98();
                                goto label1;
                            }
                            if ((temp14 == 7)) {
                                S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS98();
                                goto label1;
                            }
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker7)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker8)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker9)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker10)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker11)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker12)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker13)));
                        label1:
;
                            goto label4;
                        }
                        if ((temp22 == 1)) {
                            this.Manager.Comment("reaching state \'S83\'");
                            int temp21 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker14)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker21)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker22)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker23)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker24)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker25)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker26)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker27)));
                            if ((temp21 == 0)) {
                                S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS99();
                                goto label3;
                            }
                            if ((temp21 == 1)) {
                                S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS99();
                                goto label3;
                            }
                            if ((temp21 == 2)) {
                                S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS99();
                                goto label3;
                            }
                            if ((temp21 == 3)) {
                                S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS99();
                                goto label3;
                            }
                            if ((temp21 == 4)) {
                                S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS99();
                                goto label3;
                            }
                            if ((temp21 == 5)) {
                                S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS99();
                                goto label3;
                            }
                            if ((temp21 == 6)) {
                                S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS99();
                                goto label3;
                            }
                            if ((temp21 == 7)) {
                                S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS99();
                                goto label3;
                            }
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker14)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker21)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker22)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker23)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker24)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker25)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker26)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker27)));
                        label3:
;
                            goto label4;
                        }
                        throw new InvalidOperationException("never reached");
                    label4:
;
                        goto label10;
                    }
                    if ((temp40 == 1)) {
                        this.Manager.Comment("reaching state \'S51\'");
                        Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp23;
                        this.Manager.Comment("executing step \'call RopQueryRows(NoAdvance,True)\'");
                        temp23 = this.IMS_OXCTABLAdapterInstance.RopQueryRows(((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), true);
                        this.Manager.Checkpoint("MS-OXCTABL_R837");
                        this.Manager.Comment("reaching state \'S59\'");
                        this.Manager.Comment("checking step \'return RopQueryRows/success\'");
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp23, "return of RopQueryRows, state S59");
                        this.Manager.Comment("reaching state \'S67\'");
                        bool temp24;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(443,out _)\'");
                        this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(443, out temp24);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp24);
                        this.Manager.Comment("reaching state \'S75\'");
                        int temp39 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteCheckRequirementEnabledChecker6)), new ExpectedReturn(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteCheckRequirementEnabledChecker7)));
                        if ((temp39 == 0)) {
                            this.Manager.Comment("reaching state \'S84\'");
                            int temp31 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker28)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker35)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker36)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker37)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker38)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker39)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker40)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker41)));
                            if ((temp31 == 0)) {
                                S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS100();
                                goto label6;
                            }
                            if ((temp31 == 1)) {
                                S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS100();
                                goto label6;
                            }
                            if ((temp31 == 2)) {
                                S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS100();
                                goto label6;
                            }
                            if ((temp31 == 3)) {
                                S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS100();
                                goto label6;
                            }
                            if ((temp31 == 4)) {
                                S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS100();
                                goto label6;
                            }
                            if ((temp31 == 5)) {
                                S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS100();
                                goto label6;
                            }
                            if ((temp31 == 6)) {
                                S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS100();
                                goto label6;
                            }
                            if ((temp31 == 7)) {
                                S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS100();
                                goto label6;
                            }
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker28)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker35)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker36)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker37)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker38)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker39)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker40)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker41)));
                        label6:
;
                            goto label9;
                        }
                        if ((temp39 == 1)) {
                            this.Manager.Comment("reaching state \'S85\'");
                            int temp38 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker42)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker49)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker50)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker51)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker52)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker53)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker54)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker55)));
                            if ((temp38 == 0)) {
                                S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS101();
                                goto label8;
                            }
                            if ((temp38 == 1)) {
                                S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS101();
                                goto label8;
                            }
                            if ((temp38 == 2)) {
                                S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS101();
                                goto label8;
                            }
                            if ((temp38 == 3)) {
                                S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS101();
                                goto label8;
                            }
                            if ((temp38 == 4)) {
                                S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS101();
                                goto label8;
                            }
                            if ((temp38 == 5)) {
                                S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS101();
                                goto label8;
                            }
                            if ((temp38 == 6)) {
                                S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS101();
                                goto label8;
                            }
                            if ((temp38 == 7)) {
                                S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS101();
                                goto label8;
                            }
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker42)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker49)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker50)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker51)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker52)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker53)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker54)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker55)));
                        label8:
;
                            goto label9;
                        }
                        throw new InvalidOperationException("never reached");
                    label9:
;
                        goto label10;
                    }
                    throw new InvalidOperationException("never reached");
                label10:
;
                    goto label22;
                }
                if ((temp77 == 1)) {
                    this.Manager.Comment("reaching state \'S43\'");
                    bool temp41;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(867,out _)\'");
                    this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(867, out temp41);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp41);
                    this.Manager.Comment("reaching state \'S47\'");
                    int temp76 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteCheckRequirementEnabledChecker9)), new ExpectedReturn(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteCheckRequirementEnabledChecker12)));
                    if ((temp76 == 0)) {
                        this.Manager.Comment("reaching state \'S52\'");
                        Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp42;
                        this.Manager.Comment("executing step \'call RopQueryRows(NoAdvance,True)\'");
                        temp42 = this.IMS_OXCTABLAdapterInstance.RopQueryRows(((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), true);
                        this.Manager.Checkpoint("MS-OXCTABL_R837");
                        this.Manager.Comment("reaching state \'S60\'");
                        this.Manager.Comment("checking step \'return RopQueryRows/success\'");
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp42, "return of RopQueryRows, state S60");
                        this.Manager.Comment("reaching state \'S68\'");
                        bool temp43;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(443,out _)\'");
                        this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(443, out temp43);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp43);
                        this.Manager.Comment("reaching state \'S76\'");
                        int temp58 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteCheckRequirementEnabledChecker10)), new ExpectedReturn(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteCheckRequirementEnabledChecker11)));
                        if ((temp58 == 0)) {
                            this.Manager.Comment("reaching state \'S86\'");
                            int temp50 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker56)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker63)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker64)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker65)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker66)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker67)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker68)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker69)));
                            if ((temp50 == 0)) {
                                S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS102();
                                goto label12;
                            }
                            if ((temp50 == 1)) {
                                S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS102();
                                goto label12;
                            }
                            if ((temp50 == 2)) {
                                S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS102();
                                goto label12;
                            }
                            if ((temp50 == 3)) {
                                S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS102();
                                goto label12;
                            }
                            if ((temp50 == 4)) {
                                S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS102();
                                goto label12;
                            }
                            if ((temp50 == 5)) {
                                S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS102();
                                goto label12;
                            }
                            if ((temp50 == 6)) {
                                S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS102();
                                goto label12;
                            }
                            if ((temp50 == 7)) {
                                S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS102();
                                goto label12;
                            }
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker56)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker63)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker64)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker65)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker66)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker67)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker68)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker69)));
                        label12:
;
                            goto label15;
                        }
                        if ((temp58 == 1)) {
                            this.Manager.Comment("reaching state \'S87\'");
                            int temp57 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker70)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker77)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker78)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker79)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker80)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker81)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker82)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker83)));
                            if ((temp57 == 0)) {
                                S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS103();
                                goto label14;
                            }
                            if ((temp57 == 1)) {
                                S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS103();
                                goto label14;
                            }
                            if ((temp57 == 2)) {
                                S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS103();
                                goto label14;
                            }
                            if ((temp57 == 3)) {
                                S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS103();
                                goto label14;
                            }
                            if ((temp57 == 4)) {
                                S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS103();
                                goto label14;
                            }
                            if ((temp57 == 5)) {
                                S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS103();
                                goto label14;
                            }
                            if ((temp57 == 6)) {
                                S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS103();
                                goto label14;
                            }
                            if ((temp57 == 7)) {
                                S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS103();
                                goto label14;
                            }
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker70)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker77)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker78)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker79)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker80)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker81)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker82)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker83)));
                        label14:
;
                            goto label15;
                        }
                        throw new InvalidOperationException("never reached");
                    label15:
;
                        goto label21;
                    }
                    if ((temp76 == 1)) {
                        this.Manager.Comment("reaching state \'S53\'");
                        Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp59;
                        this.Manager.Comment("executing step \'call RopQueryRows(NoAdvance,True)\'");
                        temp59 = this.IMS_OXCTABLAdapterInstance.RopQueryRows(((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), true);
                        this.Manager.Checkpoint("MS-OXCTABL_R837");
                        this.Manager.Comment("reaching state \'S61\'");
                        this.Manager.Comment("checking step \'return RopQueryRows/success\'");
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp59, "return of RopQueryRows, state S61");
                        this.Manager.Comment("reaching state \'S69\'");
                        bool temp60;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(443,out _)\'");
                        this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(443, out temp60);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp60);
                        this.Manager.Comment("reaching state \'S77\'");
                        int temp75 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteCheckRequirementEnabledChecker13)), new ExpectedReturn(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteCheckRequirementEnabledChecker14)));
                        if ((temp75 == 0)) {
                            this.Manager.Comment("reaching state \'S88\'");
                            int temp67 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker84)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker91)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker92)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker93)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker94)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker95)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker96)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker97)));
                            if ((temp67 == 0)) {
                                S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS104();
                                goto label17;
                            }
                            if ((temp67 == 1)) {
                                S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS104();
                                goto label17;
                            }
                            if ((temp67 == 2)) {
                                S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS104();
                                goto label17;
                            }
                            if ((temp67 == 3)) {
                                S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS104();
                                goto label17;
                            }
                            if ((temp67 == 4)) {
                                S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS104();
                                goto label17;
                            }
                            if ((temp67 == 5)) {
                                S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS104();
                                goto label17;
                            }
                            if ((temp67 == 6)) {
                                S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS104();
                                goto label17;
                            }
                            if ((temp67 == 7)) {
                                S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS104();
                                goto label17;
                            }
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker84)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker91)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker92)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker93)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker94)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker95)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker96)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker97)));
                        label17:
;
                            goto label20;
                        }
                        if ((temp75 == 1)) {
                            this.Manager.Comment("reaching state \'S89\'");
                            int temp74 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker98)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker105)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker106)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker107)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker108)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker109)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker110)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker111)));
                            if ((temp74 == 0)) {
                                S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS105();
                                goto label19;
                            }
                            if ((temp74 == 1)) {
                                S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS105();
                                goto label19;
                            }
                            if ((temp74 == 2)) {
                                S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS105();
                                goto label19;
                            }
                            if ((temp74 == 3)) {
                                S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS105();
                                goto label19;
                            }
                            if ((temp74 == 4)) {
                                S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS105();
                                goto label19;
                            }
                            if ((temp74 == 5)) {
                                S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS105();
                                goto label19;
                            }
                            if ((temp74 == 6)) {
                                S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS105();
                                goto label19;
                            }
                            if ((temp74 == 7)) {
                                S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS105();
                                goto label19;
                            }
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker98)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker105)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker106)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker107)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker108)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker109)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker110)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker111)));
                        label19:
;
                            goto label20;
                        }
                        throw new InvalidOperationException("never reached");
                    label20:
;
                        goto label21;
                    }
                    throw new InvalidOperationException("never reached");
                label21:
;
                    goto label22;
                }
                throw new InvalidOperationException("never reached");
            label22:
;
                goto label46;
            }
            if ((temp152 == 1)) {
                this.Manager.Comment("reaching state \'S39\'");
                bool temp78;
                this.Manager.Comment("executing step \'call CheckRequirementEnabled(866,out _)\'");
                this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(866, out temp78);
                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp78);
                this.Manager.Comment("reaching state \'S41\'");
                int temp151 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteCheckRequirementEnabledChecker16)), new ExpectedReturn(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteCheckRequirementEnabledChecker23)));
                if ((temp151 == 0)) {
                    this.Manager.Comment("reaching state \'S44\'");
                    bool temp79;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(867,out _)\'");
                    this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(867, out temp79);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp79);
                    this.Manager.Comment("reaching state \'S48\'");
                    int temp114 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteCheckRequirementEnabledChecker17)), new ExpectedReturn(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteCheckRequirementEnabledChecker20)));
                    if ((temp114 == 0)) {
                        this.Manager.Comment("reaching state \'S54\'");
                        Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp80;
                        this.Manager.Comment("executing step \'call RopQueryRows(NoAdvance,True)\'");
                        temp80 = this.IMS_OXCTABLAdapterInstance.RopQueryRows(((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), true);
                        this.Manager.Checkpoint("MS-OXCTABL_R837");
                        this.Manager.Comment("reaching state \'S62\'");
                        this.Manager.Comment("checking step \'return RopQueryRows/success\'");
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp80, "return of RopQueryRows, state S62");
                        this.Manager.Comment("reaching state \'S70\'");
                        bool temp81;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(443,out _)\'");
                        this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(443, out temp81);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp81);
                        this.Manager.Comment("reaching state \'S78\'");
                        int temp96 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteCheckRequirementEnabledChecker18)), new ExpectedReturn(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteCheckRequirementEnabledChecker19)));
                        if ((temp96 == 0)) {
                            this.Manager.Comment("reaching state \'S90\'");
                            int temp88 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker112)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker119)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker120)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker121)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker122)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker123)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker124)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker125)));
                            if ((temp88 == 0)) {
                                S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS106();
                                goto label24;
                            }
                            if ((temp88 == 1)) {
                                S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS106();
                                goto label24;
                            }
                            if ((temp88 == 2)) {
                                S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS106();
                                goto label24;
                            }
                            if ((temp88 == 3)) {
                                S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS106();
                                goto label24;
                            }
                            if ((temp88 == 4)) {
                                S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS106();
                                goto label24;
                            }
                            if ((temp88 == 5)) {
                                S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS106();
                                goto label24;
                            }
                            if ((temp88 == 6)) {
                                S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS106();
                                goto label24;
                            }
                            if ((temp88 == 7)) {
                                S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS106();
                                goto label24;
                            }
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker112)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker119)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker120)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker121)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker122)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker123)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker124)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker125)));
                        label24:
;
                            goto label27;
                        }
                        if ((temp96 == 1)) {
                            this.Manager.Comment("reaching state \'S91\'");
                            int temp95 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker126)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker133)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker134)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker135)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker136)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker137)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker138)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker139)));
                            if ((temp95 == 0)) {
                                S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS107();
                                goto label26;
                            }
                            if ((temp95 == 1)) {
                                S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS107();
                                goto label26;
                            }
                            if ((temp95 == 2)) {
                                S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS107();
                                goto label26;
                            }
                            if ((temp95 == 3)) {
                                S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS107();
                                goto label26;
                            }
                            if ((temp95 == 4)) {
                                S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS107();
                                goto label26;
                            }
                            if ((temp95 == 5)) {
                                S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS107();
                                goto label26;
                            }
                            if ((temp95 == 6)) {
                                S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS107();
                                goto label26;
                            }
                            if ((temp95 == 7)) {
                                S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS107();
                                goto label26;
                            }
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker126)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker133)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker134)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker135)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker136)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker137)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker138)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker139)));
                        label26:
;
                            goto label27;
                        }
                        throw new InvalidOperationException("never reached");
                    label27:
;
                        goto label33;
                    }
                    if ((temp114 == 1)) {
                        this.Manager.Comment("reaching state \'S55\'");
                        Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp97;
                        this.Manager.Comment("executing step \'call RopQueryRows(NoAdvance,True)\'");
                        temp97 = this.IMS_OXCTABLAdapterInstance.RopQueryRows(((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), true);
                        this.Manager.Checkpoint("MS-OXCTABL_R837");
                        this.Manager.Comment("reaching state \'S63\'");
                        this.Manager.Comment("checking step \'return RopQueryRows/success\'");
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp97, "return of RopQueryRows, state S63");
                        this.Manager.Comment("reaching state \'S71\'");
                        bool temp98;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(443,out _)\'");
                        this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(443, out temp98);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp98);
                        this.Manager.Comment("reaching state \'S79\'");
                        int temp113 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteCheckRequirementEnabledChecker21)), new ExpectedReturn(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteCheckRequirementEnabledChecker22)));
                        if ((temp113 == 0)) {
                            this.Manager.Comment("reaching state \'S92\'");
                            int temp105 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker140)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker147)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker148)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker149)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker150)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker151)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker152)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker153)));
                            if ((temp105 == 0)) {
                                S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS108();
                                goto label29;
                            }
                            if ((temp105 == 1)) {
                                S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS108();
                                goto label29;
                            }
                            if ((temp105 == 2)) {
                                S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS108();
                                goto label29;
                            }
                            if ((temp105 == 3)) {
                                S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS108();
                                goto label29;
                            }
                            if ((temp105 == 4)) {
                                S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS108();
                                goto label29;
                            }
                            if ((temp105 == 5)) {
                                S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS108();
                                goto label29;
                            }
                            if ((temp105 == 6)) {
                                S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS108();
                                goto label29;
                            }
                            if ((temp105 == 7)) {
                                S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS108();
                                goto label29;
                            }
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker140)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker147)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker148)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker149)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker150)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker151)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker152)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker153)));
                        label29:
;
                            goto label32;
                        }
                        if ((temp113 == 1)) {
                            this.Manager.Comment("reaching state \'S93\'");
                            int temp112 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker154)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker161)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker162)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker163)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker164)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker165)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker166)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker167)));
                            if ((temp112 == 0)) {
                                S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS109();
                                goto label31;
                            }
                            if ((temp112 == 1)) {
                                S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS109();
                                goto label31;
                            }
                            if ((temp112 == 2)) {
                                S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS109();
                                goto label31;
                            }
                            if ((temp112 == 3)) {
                                S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS109();
                                goto label31;
                            }
                            if ((temp112 == 4)) {
                                S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS109();
                                goto label31;
                            }
                            if ((temp112 == 5)) {
                                S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS109();
                                goto label31;
                            }
                            if ((temp112 == 6)) {
                                S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS109();
                                goto label31;
                            }
                            if ((temp112 == 7)) {
                                S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS109();
                                goto label31;
                            }
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker154)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker161)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker162)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker163)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker164)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker165)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker166)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker167)));
                        label31:
;
                            goto label32;
                        }
                        throw new InvalidOperationException("never reached");
                    label32:
;
                        goto label33;
                    }
                    throw new InvalidOperationException("never reached");
                label33:
;
                    goto label45;
                }
                if ((temp151 == 1)) {
                    this.Manager.Comment("reaching state \'S45\'");
                    bool temp115;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(867,out _)\'");
                    this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(867, out temp115);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp115);
                    this.Manager.Comment("reaching state \'S49\'");
                    int temp150 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteCheckRequirementEnabledChecker24)), new ExpectedReturn(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteCheckRequirementEnabledChecker27)));
                    if ((temp150 == 0)) {
                        this.Manager.Comment("reaching state \'S56\'");
                        Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp116;
                        this.Manager.Comment("executing step \'call RopQueryRows(NoAdvance,True)\'");
                        temp116 = this.IMS_OXCTABLAdapterInstance.RopQueryRows(((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), true);
                        this.Manager.Checkpoint("MS-OXCTABL_R837");
                        this.Manager.Comment("reaching state \'S64\'");
                        this.Manager.Comment("checking step \'return RopQueryRows/success\'");
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp116, "return of RopQueryRows, state S64");
                        this.Manager.Comment("reaching state \'S72\'");
                        bool temp117;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(443,out _)\'");
                        this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(443, out temp117);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp117);
                        this.Manager.Comment("reaching state \'S80\'");
                        int temp132 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteCheckRequirementEnabledChecker25)), new ExpectedReturn(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteCheckRequirementEnabledChecker26)));
                        if ((temp132 == 0)) {
                            this.Manager.Comment("reaching state \'S94\'");
                            int temp124 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker168)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker175)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker176)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker177)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker178)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker179)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker180)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker181)));
                            if ((temp124 == 0)) {
                                S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS110();
                                goto label35;
                            }
                            if ((temp124 == 1)) {
                                S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS110();
                                goto label35;
                            }
                            if ((temp124 == 2)) {
                                S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS110();
                                goto label35;
                            }
                            if ((temp124 == 3)) {
                                S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS110();
                                goto label35;
                            }
                            if ((temp124 == 4)) {
                                S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS110();
                                goto label35;
                            }
                            if ((temp124 == 5)) {
                                S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS110();
                                goto label35;
                            }
                            if ((temp124 == 6)) {
                                S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS110();
                                goto label35;
                            }
                            if ((temp124 == 7)) {
                                S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS110();
                                goto label35;
                            }
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker168)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker175)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker176)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker177)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker178)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker179)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker180)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker181)));
                        label35:
;
                            goto label38;
                        }
                        if ((temp132 == 1)) {
                            this.Manager.Comment("reaching state \'S95\'");
                            int temp131 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker182)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker189)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker190)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker191)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker192)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker193)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker194)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker195)));
                            if ((temp131 == 0)) {
                                S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS111();
                                goto label37;
                            }
                            if ((temp131 == 1)) {
                                S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS111();
                                goto label37;
                            }
                            if ((temp131 == 2)) {
                                S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS111();
                                goto label37;
                            }
                            if ((temp131 == 3)) {
                                S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS111();
                                goto label37;
                            }
                            if ((temp131 == 4)) {
                                S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS111();
                                goto label37;
                            }
                            if ((temp131 == 5)) {
                                S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS111();
                                goto label37;
                            }
                            if ((temp131 == 6)) {
                                S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS111();
                                goto label37;
                            }
                            if ((temp131 == 7)) {
                                S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS111();
                                goto label37;
                            }
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker182)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker189)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker190)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker191)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker192)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker193)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker194)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker195)));
                        label37:
;
                            goto label38;
                        }
                        throw new InvalidOperationException("never reached");
                    label38:
;
                        goto label44;
                    }
                    if ((temp150 == 1)) {
                        this.Manager.Comment("reaching state \'S57\'");
                        Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp133;
                        this.Manager.Comment("executing step \'call RopQueryRows(NoAdvance,True)\'");
                        temp133 = this.IMS_OXCTABLAdapterInstance.RopQueryRows(((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), true);
                        this.Manager.Checkpoint("MS-OXCTABL_R837");
                        this.Manager.Comment("reaching state \'S65\'");
                        this.Manager.Comment("checking step \'return RopQueryRows/success\'");
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp133, "return of RopQueryRows, state S65");
                        this.Manager.Comment("reaching state \'S73\'");
                        bool temp134;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(443,out _)\'");
                        this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(443, out temp134);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp134);
                        this.Manager.Comment("reaching state \'S81\'");
                        int temp149 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteCheckRequirementEnabledChecker28)), new ExpectedReturn(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteCheckRequirementEnabledChecker29)));
                        if ((temp149 == 0)) {
                            this.Manager.Comment("reaching state \'S96\'");
                            int temp141 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker196)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker203)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker204)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker205)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker206)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker207)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker208)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker209)));
                            if ((temp141 == 0)) {
                                S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS112();
                                goto label40;
                            }
                            if ((temp141 == 1)) {
                                S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS112();
                                goto label40;
                            }
                            if ((temp141 == 2)) {
                                S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS112();
                                goto label40;
                            }
                            if ((temp141 == 3)) {
                                S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS112();
                                goto label40;
                            }
                            if ((temp141 == 4)) {
                                S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS112();
                                goto label40;
                            }
                            if ((temp141 == 5)) {
                                S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS112();
                                goto label40;
                            }
                            if ((temp141 == 6)) {
                                S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS112();
                                goto label40;
                            }
                            if ((temp141 == 7)) {
                                S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS112();
                                goto label40;
                            }
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker196)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker203)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker204)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker205)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker206)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker207)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker208)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker209)));
                        label40:
;
                            goto label43;
                        }
                        if ((temp149 == 1)) {
                            this.Manager.Comment("reaching state \'S97\'");
                            int temp148 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker210)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker217)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker218)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker219)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker220)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker221)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker222)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker223)));
                            if ((temp148 == 0)) {
                                S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS113();
                                goto label42;
                            }
                            if ((temp148 == 1)) {
                                S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS113();
                                goto label42;
                            }
                            if ((temp148 == 2)) {
                                S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS113();
                                goto label42;
                            }
                            if ((temp148 == 3)) {
                                S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS113();
                                goto label42;
                            }
                            if ((temp148 == 4)) {
                                S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS113();
                                goto label42;
                            }
                            if ((temp148 == 5)) {
                                S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS113();
                                goto label42;
                            }
                            if ((temp148 == 6)) {
                                S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS113();
                                goto label42;
                            }
                            if ((temp148 == 7)) {
                                S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS113();
                                goto label42;
                            }
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker210)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker217)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker218)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker219)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker220)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker221)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker222)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker223)));
                        label42:
;
                            goto label43;
                        }
                        throw new InvalidOperationException("never reached");
                    label43:
;
                        goto label44;
                    }
                    throw new InvalidOperationException("never reached");
                label44:
;
                    goto label45;
                }
                throw new InvalidOperationException("never reached");
            label45:
;
                goto label46;
            }
            throw new InvalidOperationException("never reached");
        label46:
;
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteCheckRequirementEnabledChecker(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S37");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteCheckRequirementEnabledChecker1(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S40");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteCheckRequirementEnabledChecker2(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S46");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteCheckRequirementEnabledChecker3(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S74");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,SORTTABLE,True,Fal" +
                    "se,True,True,BOOKMARK_BEGINNING,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S82");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S82");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S82");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S82");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S82");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S82");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S82");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S82");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(0)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S82");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S82");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R27, MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77, MS-OXCTABL_R119, MS-OXCTABL_R437, MS-OXCTABL_R438, MS-OXCTABL_R443");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R27");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
            this.Manager.Checkpoint("MS-OXCTABL_R119");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R438");
            this.Manager.Checkpoint("MS-OXCTABL_R443");
        }
        
        private void S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS98() {
            this.Manager.Comment("reaching state \'S98\'");
            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp8;
            this.Manager.Comment("executing step \'call RopSetColumns(2,False,False,False)\'");
            temp8 = this.IMS_OXCTABLAdapterInstance.RopSetColumns(2u, false, false, false);
            this.Manager.Checkpoint("MS-OXCTABL_R831");
            this.Manager.Checkpoint("MS-OXCTABL_R45");
            this.Manager.Comment("reaching state \'S114\'");
            this.Manager.Comment("checking step \'return RopSetColumns/success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp8, "return of RopSetColumns, state S114");
            this.Manager.Comment("reaching state \'S130\'");
            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp9;
            this.Manager.Comment("executing step \'call RopSortTable(2,False,True,False,True,False,True,False)\'");
            temp9 = this.IMS_OXCTABLAdapterInstance.RopSortTable(2u, false, true, false, true, false, true, false);
            this.Manager.Checkpoint("MS-OXCTABL_R447");
            this.Manager.Comment("reaching state \'S146\'");
            this.Manager.Comment("checking step \'return RopSortTable/ecNullObject\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues.ecNullObject, temp9, "return of RopSortTable, state S146");
            this.Manager.Comment("reaching state \'S162\'");
            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp10;
            this.Manager.Comment("executing step \'call RopQueryRows(Advance,True)\'");
            temp10 = this.IMS_OXCTABLAdapterInstance.RopQueryRows(((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), true);
            this.Manager.Checkpoint("MS-OXCTABL_R837");
            this.Manager.Comment("reaching state \'S178\'");
            this.Manager.Comment("checking step \'return RopQueryRows/success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp10, "return of RopQueryRows, state S178");
            this.Manager.Comment("reaching state \'S194\'");
            int temp13 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker1)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker3)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker4)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker5)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker6)));
            if ((temp13 == 0)) {
                S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS210();
                goto label0;
            }
            if ((temp13 == 1)) {
                S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS210();
                goto label0;
            }
            if ((temp13 == 2)) {
                S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS210();
                goto label0;
            }
            if ((temp13 == 3)) {
                S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS210();
                goto label0;
            }
            if ((temp13 == 4)) {
                S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS210();
                goto label0;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker1)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker3)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker4)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker5)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker6)));
        label0:
;
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker1(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SORTTABLE,True,True," +
                    "False,True,BOOKMARK_CURRENT,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S194");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S194");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S194");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S194");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S194");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S194");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S194");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S194");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S194");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S194");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71," +
                        " MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
        }
        
        private void S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS210() {
            this.Manager.Comment("reaching state \'S210\'");
            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp11;
            this.Manager.Comment("executing step \'call RopSortTable(3,True,True,False,True,True,False,False)\'");
            temp11 = this.IMS_OXCTABLAdapterInstance.RopSortTable(3u, true, true, false, true, true, false, false);
            this.Manager.Checkpoint("MS-OXCTABL_R447");
            this.Manager.Comment("reaching state \'S226\'");
            this.Manager.Comment("checking step \'return RopSortTable/success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp11, "return of RopSortTable, state S226");
            this.Manager.Comment("reaching state \'S242\'");
            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp12;
            this.Manager.Comment("executing step \'call RopQueryRows(Advance,True)\'");
            temp12 = this.IMS_OXCTABLAdapterInstance.RopQueryRows(((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), true);
            this.Manager.Checkpoint("MS-OXCTABL_R837");
            this.Manager.Comment("reaching state \'S258\'");
            this.Manager.Comment("checking step \'return RopQueryRows/success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp12, "return of RopQueryRows, state S258");
            this.Manager.Comment("reaching state \'S274\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker2))) != -1)) {
                this.Manager.Comment("reaching state \'S290\'");
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker2)));
            }
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker2(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SORTTABLE,True,True," +
                    "True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S274");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S274");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S274");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S274");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S274");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S274");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S274");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S274");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S274");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S274");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, MS-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77, MS-OXCTABL_R119, MS-OXCTABL_R437, MS-OXCTABL_R438, MS-OXCTABL_R443");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
            this.Manager.Checkpoint("MS-OXCTABL_R119");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R438");
            this.Manager.Checkpoint("MS-OXCTABL_R443");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker3(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SORTTABLE,True,True," +
                    "False,True,BOOKMARK_CUSTOM,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S194");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S194");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S194");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S194");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S194");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S194");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S194");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S194");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_CUSTOM, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S194");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S194");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71," +
                        " MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker4(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SORTTABLE,True,True," +
                    "False,True,BOOKMARK_END,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S194");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S194");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S194");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S194");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S194");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S194");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S194");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S194");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_END, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S194");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S194");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R29, MS-OXCTABL_R725, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66" +
                        ", MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77" +
                        "");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R29");
            this.Manager.Checkpoint("MS-OXCTABL_R725");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker5(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SORTTABLE,True,True," +
                    "False,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S194");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S194");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S194");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S194");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S194");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S194");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S194");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S194");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S194");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S194");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66" +
                        ", MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77" +
                        "");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker6(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SORTTABLE,True,True," +
                    "False,True,BOOKMARK_BEGINNING,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S194");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S194");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S194");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S194");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S194");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S194");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S194");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S194");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(0)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S194");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S194");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71," +
                        " MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker7(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,SORTTABLE,True,Fal" +
                    "se,True,True,BOOKMARK_BEGINNING,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S82");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S82");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S82");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S82");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S82");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S82");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S82");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S82");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(0)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S82");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S82");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R27, MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77, MS-OXCTABL_R119, MS-OXCTABL_R437, MS-OXCTABL_R438, MS-OXCTABL_R443");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R27");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
            this.Manager.Checkpoint("MS-OXCTABL_R119");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R438");
            this.Manager.Checkpoint("MS-OXCTABL_R443");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker8(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,SORTTABLE,True,Fal" +
                    "se,True,True,BOOKMARK_END,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S82");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S82");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S82");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S82");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S82");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S82");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S82");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S82");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_END, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S82");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S82");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77, MS-OXCTABL_R119, MS-OXCTABL_R437, MS-OXCTABL_R438, MS-OXCTABL_R443");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
            this.Manager.Checkpoint("MS-OXCTABL_R119");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R438");
            this.Manager.Checkpoint("MS-OXCTABL_R443");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker9(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,SORTTABLE,True,Fal" +
                    "se,True,True,BOOKMARK_END,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S82");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S82");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S82");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S82");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S82");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S82");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S82");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S82");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_END, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S82");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S82");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77, MS-OXCTABL_R119, MS-OXCTABL_R437, MS-OXCTABL_R438, MS-OXCTABL_R443");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
            this.Manager.Checkpoint("MS-OXCTABL_R119");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R438");
            this.Manager.Checkpoint("MS-OXCTABL_R443");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker10(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,SORTTABLE,True,Fal" +
                    "se,True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S82");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S82");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S82");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S82");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S82");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S82");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S82");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S82");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S82");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S82");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77, MS-OXCTABL_R119, MS-OXCTABL_R437, MS-OXCTABL_R438, MS-OXCTABL_R443");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
            this.Manager.Checkpoint("MS-OXCTABL_R119");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R438");
            this.Manager.Checkpoint("MS-OXCTABL_R443");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker11(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,SORTTABLE,True,Fal" +
                    "se,True,True,BOOKMARK_CUSTOM,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S82");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S82");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S82");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S82");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S82");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S82");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S82");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S82");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_CUSTOM, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S82");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S82");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77, MS-OXCTABL_R119, MS-OXCTABL_R437, MS-OXCTABL_R438, MS-OXCTABL_R443");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
            this.Manager.Checkpoint("MS-OXCTABL_R119");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R438");
            this.Manager.Checkpoint("MS-OXCTABL_R443");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker12(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,SORTTABLE,True,Fal" +
                    "se,True,True,BOOKMARK_CUSTOM,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S82");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S82");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S82");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S82");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S82");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S82");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S82");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S82");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_CUSTOM, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S82");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S82");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77, MS-OXCTABL_R119, MS-OXCTABL_R437, MS-OXCTABL_R438, MS-OXCTABL_R443");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
            this.Manager.Checkpoint("MS-OXCTABL_R119");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R438");
            this.Manager.Checkpoint("MS-OXCTABL_R443");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker13(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,SORTTABLE,True,Fal" +
                    "se,True,True,BOOKMARK_CURRENT,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S82");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S82");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S82");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S82");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S82");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S82");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S82");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S82");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S82");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S82");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77, MS-OXCTABL_R119, MS-OXCTABL_R437, MS-OXCTABL_R438, MS-OXCTABL_R443");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
            this.Manager.Checkpoint("MS-OXCTABL_R119");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R438");
            this.Manager.Checkpoint("MS-OXCTABL_R443");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteCheckRequirementEnabledChecker4(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S74");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker14(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,SORTTABLE,True,Fal" +
                    "se,True,True,BOOKMARK_BEGINNING,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S83");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S83");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S83");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S83");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S83");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S83");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S83");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S83");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(0)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S83");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S83");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R27, MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77, MS-OXCTABL_R119, MS-OXCTABL_R437, MS-OXCTABL_R438");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R27");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
            this.Manager.Checkpoint("MS-OXCTABL_R119");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R438");
        }
        
        private void S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS99() {
            this.Manager.Comment("reaching state \'S99\'");
            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp15;
            this.Manager.Comment("executing step \'call RopSetColumns(2,False,False,False)\'");
            temp15 = this.IMS_OXCTABLAdapterInstance.RopSetColumns(2u, false, false, false);
            this.Manager.Checkpoint("MS-OXCTABL_R831");
            this.Manager.Checkpoint("MS-OXCTABL_R45");
            this.Manager.Comment("reaching state \'S115\'");
            this.Manager.Comment("checking step \'return RopSetColumns/success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp15, "return of RopSetColumns, state S115");
            this.Manager.Comment("reaching state \'S131\'");
            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp16;
            this.Manager.Comment("executing step \'call RopSortTable(2,False,True,False,True,False,True,False)\'");
            temp16 = this.IMS_OXCTABLAdapterInstance.RopSortTable(2u, false, true, false, true, false, true, false);
            this.Manager.Checkpoint("MS-OXCTABL_R447");
            this.Manager.Comment("reaching state \'S147\'");
            this.Manager.Comment("checking step \'return RopSortTable/ecNullObject\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues.ecNullObject, temp16, "return of RopSortTable, state S147");
            this.Manager.Comment("reaching state \'S163\'");
            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp17;
            this.Manager.Comment("executing step \'call RopQueryRows(Advance,True)\'");
            temp17 = this.IMS_OXCTABLAdapterInstance.RopQueryRows(((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), true);
            this.Manager.Checkpoint("MS-OXCTABL_R837");
            this.Manager.Comment("reaching state \'S179\'");
            this.Manager.Comment("checking step \'return RopQueryRows/success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp17, "return of RopQueryRows, state S179");
            this.Manager.Comment("reaching state \'S195\'");
            int temp20 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker15)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker17)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker18)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker19)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker20)));
            if ((temp20 == 0)) {
                S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS211();
                goto label2;
            }
            if ((temp20 == 1)) {
                S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS211();
                goto label2;
            }
            if ((temp20 == 2)) {
                S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS211();
                goto label2;
            }
            if ((temp20 == 3)) {
                S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS211();
                goto label2;
            }
            if ((temp20 == 4)) {
                S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS211();
                goto label2;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker15)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker17)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker18)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker19)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker20)));
        label2:
;
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker15(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SORTTABLE,True,True," +
                    "False,True,BOOKMARK_CURRENT,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S195");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S195");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S195");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S195");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S195");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S195");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S195");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S195");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S195");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S195");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71," +
                        " MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
        }
        
        private void S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS211() {
            this.Manager.Comment("reaching state \'S211\'");
            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp18;
            this.Manager.Comment("executing step \'call RopSortTable(3,True,True,False,True,True,False,False)\'");
            temp18 = this.IMS_OXCTABLAdapterInstance.RopSortTable(3u, true, true, false, true, true, false, false);
            this.Manager.Checkpoint("MS-OXCTABL_R447");
            this.Manager.Comment("reaching state \'S227\'");
            this.Manager.Comment("checking step \'return RopSortTable/success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp18, "return of RopSortTable, state S227");
            this.Manager.Comment("reaching state \'S243\'");
            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp19;
            this.Manager.Comment("executing step \'call RopQueryRows(Advance,True)\'");
            temp19 = this.IMS_OXCTABLAdapterInstance.RopQueryRows(((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), true);
            this.Manager.Checkpoint("MS-OXCTABL_R837");
            this.Manager.Comment("reaching state \'S259\'");
            this.Manager.Comment("checking step \'return RopQueryRows/success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp19, "return of RopQueryRows, state S259");
            this.Manager.Comment("reaching state \'S275\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker16))) != -1)) {
                this.Manager.Comment("reaching state \'S291\'");
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker16)));
            }
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker16(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SORTTABLE,True,True," +
                    "True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S275");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S275");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S275");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S275");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S275");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S275");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S275");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S275");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S275");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S275");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, MS-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77, MS-OXCTABL_R119, MS-OXCTABL_R437, MS-OXCTABL_R438");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
            this.Manager.Checkpoint("MS-OXCTABL_R119");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R438");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker17(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SORTTABLE,True,True," +
                    "False,True,BOOKMARK_CUSTOM,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S195");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S195");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S195");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S195");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S195");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S195");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S195");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S195");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_CUSTOM, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S195");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S195");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71," +
                        " MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker18(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SORTTABLE,True,True," +
                    "False,True,BOOKMARK_END,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S195");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S195");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S195");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S195");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S195");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S195");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S195");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S195");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_END, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S195");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S195");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R29, MS-OXCTABL_R725, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66" +
                        ", MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77" +
                        "");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R29");
            this.Manager.Checkpoint("MS-OXCTABL_R725");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker19(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SORTTABLE,True,True," +
                    "False,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S195");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S195");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S195");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S195");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S195");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S195");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S195");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S195");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S195");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S195");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66" +
                        ", MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77" +
                        "");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker20(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SORTTABLE,True,True," +
                    "False,True,BOOKMARK_BEGINNING,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S195");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S195");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S195");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S195");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S195");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S195");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S195");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S195");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(0)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S195");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S195");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71," +
                        " MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker21(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,SORTTABLE,True,Fal" +
                    "se,True,True,BOOKMARK_BEGINNING,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S83");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S83");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S83");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S83");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S83");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S83");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S83");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S83");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(0)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S83");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S83");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R27, MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77, MS-OXCTABL_R119, MS-OXCTABL_R437, MS-OXCTABL_R438");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R27");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
            this.Manager.Checkpoint("MS-OXCTABL_R119");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R438");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker22(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,SORTTABLE,True,Fal" +
                    "se,True,True,BOOKMARK_END,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S83");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S83");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S83");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S83");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S83");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S83");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S83");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S83");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_END, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S83");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S83");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77, MS-OXCTABL_R119, MS-OXCTABL_R437, MS-OXCTABL_R438");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
            this.Manager.Checkpoint("MS-OXCTABL_R119");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R438");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker23(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,SORTTABLE,True,Fal" +
                    "se,True,True,BOOKMARK_END,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S83");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S83");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S83");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S83");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S83");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S83");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S83");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S83");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_END, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S83");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S83");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77, MS-OXCTABL_R119, MS-OXCTABL_R437, MS-OXCTABL_R438");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
            this.Manager.Checkpoint("MS-OXCTABL_R119");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R438");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker24(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,SORTTABLE,True,Fal" +
                    "se,True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S83");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S83");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S83");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S83");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S83");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S83");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S83");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S83");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S83");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S83");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77, MS-OXCTABL_R119, MS-OXCTABL_R437, MS-OXCTABL_R438");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
            this.Manager.Checkpoint("MS-OXCTABL_R119");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R438");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker25(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,SORTTABLE,True,Fal" +
                    "se,True,True,BOOKMARK_CUSTOM,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S83");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S83");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S83");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S83");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S83");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S83");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S83");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S83");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_CUSTOM, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S83");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S83");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77, MS-OXCTABL_R119, MS-OXCTABL_R437, MS-OXCTABL_R438");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
            this.Manager.Checkpoint("MS-OXCTABL_R119");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R438");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker26(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,SORTTABLE,True,Fal" +
                    "se,True,True,BOOKMARK_CUSTOM,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S83");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S83");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S83");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S83");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S83");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S83");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S83");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S83");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_CUSTOM, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S83");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S83");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77, MS-OXCTABL_R119, MS-OXCTABL_R437, MS-OXCTABL_R438");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
            this.Manager.Checkpoint("MS-OXCTABL_R119");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R438");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker27(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,SORTTABLE,True,Fal" +
                    "se,True,True,BOOKMARK_CURRENT,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S83");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S83");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S83");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S83");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S83");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S83");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S83");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S83");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S83");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S83");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77, MS-OXCTABL_R119, MS-OXCTABL_R437, MS-OXCTABL_R438");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
            this.Manager.Checkpoint("MS-OXCTABL_R119");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R438");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteCheckRequirementEnabledChecker5(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S46");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteCheckRequirementEnabledChecker6(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S75");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker28(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,SORTTABLE,True,Fal" +
                    "se,True,True,BOOKMARK_BEGINNING,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S84");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S84");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S84");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S84");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S84");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S84");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S84");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S84");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(0)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S84");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S84");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R27, MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77, MS-OXCTABL_R119, MS-OXCTABL_R437, MS-OXCTABL_R438, MS-OXCTABL_R443");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R27");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
            this.Manager.Checkpoint("MS-OXCTABL_R119");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R438");
            this.Manager.Checkpoint("MS-OXCTABL_R443");
        }
        
        private void S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS100() {
            this.Manager.Comment("reaching state \'S100\'");
            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp25;
            this.Manager.Comment("executing step \'call RopSetColumns(2,False,False,False)\'");
            temp25 = this.IMS_OXCTABLAdapterInstance.RopSetColumns(2u, false, false, false);
            this.Manager.Checkpoint("MS-OXCTABL_R831");
            this.Manager.Checkpoint("MS-OXCTABL_R45");
            this.Manager.Comment("reaching state \'S116\'");
            this.Manager.Comment("checking step \'return RopSetColumns/success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp25, "return of RopSetColumns, state S116");
            this.Manager.Comment("reaching state \'S132\'");
            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp26;
            this.Manager.Comment("executing step \'call RopSortTable(2,False,True,False,True,False,True,False)\'");
            temp26 = this.IMS_OXCTABLAdapterInstance.RopSortTable(2u, false, true, false, true, false, true, false);
            this.Manager.Checkpoint("MS-OXCTABL_R447");
            this.Manager.Comment("reaching state \'S148\'");
            this.Manager.Comment("checking step \'return RopSortTable/ecNullObject\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues.ecNullObject, temp26, "return of RopSortTable, state S148");
            this.Manager.Comment("reaching state \'S164\'");
            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp27;
            this.Manager.Comment("executing step \'call RopQueryRows(Advance,True)\'");
            temp27 = this.IMS_OXCTABLAdapterInstance.RopQueryRows(((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), true);
            this.Manager.Checkpoint("MS-OXCTABL_R837");
            this.Manager.Comment("reaching state \'S180\'");
            this.Manager.Comment("checking step \'return RopQueryRows/success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp27, "return of RopQueryRows, state S180");
            this.Manager.Comment("reaching state \'S196\'");
            int temp30 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker29)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker31)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker32)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker33)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker34)));
            if ((temp30 == 0)) {
                S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS212();
                goto label5;
            }
            if ((temp30 == 1)) {
                S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS212();
                goto label5;
            }
            if ((temp30 == 2)) {
                S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS212();
                goto label5;
            }
            if ((temp30 == 3)) {
                S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS212();
                goto label5;
            }
            if ((temp30 == 4)) {
                S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS212();
                goto label5;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker29)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker31)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker32)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker33)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker34)));
        label5:
;
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker29(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SORTTABLE,True,True," +
                    "False,True,BOOKMARK_CURRENT,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S196");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S196");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S196");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S196");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S196");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S196");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S196");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S196");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S196");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S196");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71," +
                        " MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
        }
        
        private void S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS212() {
            this.Manager.Comment("reaching state \'S212\'");
            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp28;
            this.Manager.Comment("executing step \'call RopSortTable(3,True,True,False,True,True,False,False)\'");
            temp28 = this.IMS_OXCTABLAdapterInstance.RopSortTable(3u, true, true, false, true, true, false, false);
            this.Manager.Checkpoint("MS-OXCTABL_R447");
            this.Manager.Comment("reaching state \'S228\'");
            this.Manager.Comment("checking step \'return RopSortTable/success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp28, "return of RopSortTable, state S228");
            this.Manager.Comment("reaching state \'S244\'");
            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp29;
            this.Manager.Comment("executing step \'call RopQueryRows(Advance,True)\'");
            temp29 = this.IMS_OXCTABLAdapterInstance.RopQueryRows(((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), true);
            this.Manager.Checkpoint("MS-OXCTABL_R837");
            this.Manager.Comment("reaching state \'S260\'");
            this.Manager.Comment("checking step \'return RopQueryRows/success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp29, "return of RopQueryRows, state S260");
            this.Manager.Comment("reaching state \'S276\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker30))) != -1)) {
                this.Manager.Comment("reaching state \'S292\'");
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker30)));
            }
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker30(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SORTTABLE,True,True," +
                    "True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S276");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S276");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S276");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S276");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S276");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S276");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S276");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S276");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S276");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S276");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, MS-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77, MS-OXCTABL_R119, MS-OXCTABL_R437, MS-OXCTABL_R438, MS-OXCTABL_R443");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
            this.Manager.Checkpoint("MS-OXCTABL_R119");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R438");
            this.Manager.Checkpoint("MS-OXCTABL_R443");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker31(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SORTTABLE,True,True," +
                    "False,True,BOOKMARK_CUSTOM,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S196");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S196");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S196");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S196");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S196");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S196");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S196");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S196");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_CUSTOM, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S196");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S196");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71," +
                        " MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker32(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SORTTABLE,True,True," +
                    "False,True,BOOKMARK_END,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S196");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S196");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S196");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S196");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S196");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S196");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S196");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S196");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_END, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S196");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S196");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R29, MS-OXCTABL_R725, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66" +
                        ", MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77" +
                        "");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R29");
            this.Manager.Checkpoint("MS-OXCTABL_R725");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker33(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SORTTABLE,True,True," +
                    "False,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S196");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S196");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S196");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S196");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S196");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S196");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S196");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S196");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S196");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S196");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66" +
                        ", MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77" +
                        "");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker34(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SORTTABLE,True,True," +
                    "False,True,BOOKMARK_BEGINNING,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S196");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S196");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S196");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S196");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S196");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S196");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S196");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S196");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(0)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S196");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S196");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71," +
                        " MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker35(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,SORTTABLE,True,Fal" +
                    "se,True,True,BOOKMARK_BEGINNING,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S84");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S84");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S84");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S84");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S84");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S84");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S84");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S84");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(0)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S84");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S84");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R27, MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77, MS-OXCTABL_R119, MS-OXCTABL_R437, MS-OXCTABL_R438, MS-OXCTABL_R443");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R27");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
            this.Manager.Checkpoint("MS-OXCTABL_R119");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R438");
            this.Manager.Checkpoint("MS-OXCTABL_R443");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker36(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,SORTTABLE,True,Fal" +
                    "se,True,True,BOOKMARK_END,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S84");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S84");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S84");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S84");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S84");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S84");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S84");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S84");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_END, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S84");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S84");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77, MS-OXCTABL_R119, MS-OXCTABL_R437, MS-OXCTABL_R438, MS-OXCTABL_R443");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
            this.Manager.Checkpoint("MS-OXCTABL_R119");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R438");
            this.Manager.Checkpoint("MS-OXCTABL_R443");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker37(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,SORTTABLE,True,Fal" +
                    "se,True,True,BOOKMARK_END,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S84");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S84");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S84");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S84");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S84");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S84");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S84");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S84");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_END, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S84");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S84");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77, MS-OXCTABL_R119, MS-OXCTABL_R437, MS-OXCTABL_R438, MS-OXCTABL_R443");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
            this.Manager.Checkpoint("MS-OXCTABL_R119");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R438");
            this.Manager.Checkpoint("MS-OXCTABL_R443");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker38(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,SORTTABLE,True,Fal" +
                    "se,True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S84");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S84");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S84");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S84");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S84");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S84");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S84");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S84");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S84");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S84");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77, MS-OXCTABL_R119, MS-OXCTABL_R437, MS-OXCTABL_R438, MS-OXCTABL_R443");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
            this.Manager.Checkpoint("MS-OXCTABL_R119");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R438");
            this.Manager.Checkpoint("MS-OXCTABL_R443");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker39(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,SORTTABLE,True,Fal" +
                    "se,True,True,BOOKMARK_CUSTOM,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S84");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S84");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S84");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S84");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S84");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S84");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S84");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S84");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_CUSTOM, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S84");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S84");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77, MS-OXCTABL_R119, MS-OXCTABL_R437, MS-OXCTABL_R438, MS-OXCTABL_R443");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
            this.Manager.Checkpoint("MS-OXCTABL_R119");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R438");
            this.Manager.Checkpoint("MS-OXCTABL_R443");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker40(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,SORTTABLE,True,Fal" +
                    "se,True,True,BOOKMARK_CUSTOM,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S84");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S84");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S84");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S84");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S84");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S84");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S84");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S84");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_CUSTOM, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S84");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S84");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77, MS-OXCTABL_R119, MS-OXCTABL_R437, MS-OXCTABL_R438, MS-OXCTABL_R443");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
            this.Manager.Checkpoint("MS-OXCTABL_R119");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R438");
            this.Manager.Checkpoint("MS-OXCTABL_R443");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker41(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,SORTTABLE,True,Fal" +
                    "se,True,True,BOOKMARK_CURRENT,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S84");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S84");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S84");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S84");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S84");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S84");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S84");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S84");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S84");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S84");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77, MS-OXCTABL_R119, MS-OXCTABL_R437, MS-OXCTABL_R438, MS-OXCTABL_R443");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
            this.Manager.Checkpoint("MS-OXCTABL_R119");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R438");
            this.Manager.Checkpoint("MS-OXCTABL_R443");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteCheckRequirementEnabledChecker7(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S75");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker42(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,SORTTABLE,True,Fal" +
                    "se,True,True,BOOKMARK_BEGINNING,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S85");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S85");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S85");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S85");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S85");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S85");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S85");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S85");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(0)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S85");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S85");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R27, MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77, MS-OXCTABL_R119, MS-OXCTABL_R437, MS-OXCTABL_R438");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R27");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
            this.Manager.Checkpoint("MS-OXCTABL_R119");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R438");
        }
        
        private void S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS101() {
            this.Manager.Comment("reaching state \'S101\'");
            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp32;
            this.Manager.Comment("executing step \'call RopSetColumns(2,False,False,False)\'");
            temp32 = this.IMS_OXCTABLAdapterInstance.RopSetColumns(2u, false, false, false);
            this.Manager.Checkpoint("MS-OXCTABL_R831");
            this.Manager.Checkpoint("MS-OXCTABL_R45");
            this.Manager.Comment("reaching state \'S117\'");
            this.Manager.Comment("checking step \'return RopSetColumns/success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp32, "return of RopSetColumns, state S117");
            this.Manager.Comment("reaching state \'S133\'");
            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp33;
            this.Manager.Comment("executing step \'call RopSortTable(2,False,True,False,True,False,True,False)\'");
            temp33 = this.IMS_OXCTABLAdapterInstance.RopSortTable(2u, false, true, false, true, false, true, false);
            this.Manager.Checkpoint("MS-OXCTABL_R447");
            this.Manager.Comment("reaching state \'S149\'");
            this.Manager.Comment("checking step \'return RopSortTable/ecNullObject\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues.ecNullObject, temp33, "return of RopSortTable, state S149");
            this.Manager.Comment("reaching state \'S165\'");
            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp34;
            this.Manager.Comment("executing step \'call RopQueryRows(Advance,True)\'");
            temp34 = this.IMS_OXCTABLAdapterInstance.RopQueryRows(((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), true);
            this.Manager.Checkpoint("MS-OXCTABL_R837");
            this.Manager.Comment("reaching state \'S181\'");
            this.Manager.Comment("checking step \'return RopQueryRows/success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp34, "return of RopQueryRows, state S181");
            this.Manager.Comment("reaching state \'S197\'");
            int temp37 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker43)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker45)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker46)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker47)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker48)));
            if ((temp37 == 0)) {
                S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS213();
                goto label7;
            }
            if ((temp37 == 1)) {
                S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS213();
                goto label7;
            }
            if ((temp37 == 2)) {
                S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS213();
                goto label7;
            }
            if ((temp37 == 3)) {
                S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS213();
                goto label7;
            }
            if ((temp37 == 4)) {
                S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS213();
                goto label7;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker43)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker45)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker46)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker47)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker48)));
        label7:
;
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker43(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SORTTABLE,True,True," +
                    "False,True,BOOKMARK_CURRENT,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S197");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S197");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S197");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S197");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S197");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S197");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S197");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S197");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S197");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S197");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71," +
                        " MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
        }
        
        private void S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS213() {
            this.Manager.Comment("reaching state \'S213\'");
            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp35;
            this.Manager.Comment("executing step \'call RopSortTable(3,True,True,False,True,True,False,False)\'");
            temp35 = this.IMS_OXCTABLAdapterInstance.RopSortTable(3u, true, true, false, true, true, false, false);
            this.Manager.Checkpoint("MS-OXCTABL_R447");
            this.Manager.Comment("reaching state \'S229\'");
            this.Manager.Comment("checking step \'return RopSortTable/success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp35, "return of RopSortTable, state S229");
            this.Manager.Comment("reaching state \'S245\'");
            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp36;
            this.Manager.Comment("executing step \'call RopQueryRows(Advance,True)\'");
            temp36 = this.IMS_OXCTABLAdapterInstance.RopQueryRows(((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), true);
            this.Manager.Checkpoint("MS-OXCTABL_R837");
            this.Manager.Comment("reaching state \'S261\'");
            this.Manager.Comment("checking step \'return RopQueryRows/success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp36, "return of RopQueryRows, state S261");
            this.Manager.Comment("reaching state \'S277\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker44))) != -1)) {
                this.Manager.Comment("reaching state \'S293\'");
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker44)));
            }
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker44(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SORTTABLE,True,True," +
                    "True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S277");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S277");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S277");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S277");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S277");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S277");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S277");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S277");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S277");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S277");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, MS-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77, MS-OXCTABL_R119, MS-OXCTABL_R437, MS-OXCTABL_R438");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
            this.Manager.Checkpoint("MS-OXCTABL_R119");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R438");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker45(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SORTTABLE,True,True," +
                    "False,True,BOOKMARK_CUSTOM,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S197");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S197");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S197");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S197");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S197");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S197");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S197");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S197");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_CUSTOM, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S197");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S197");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71," +
                        " MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker46(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SORTTABLE,True,True," +
                    "False,True,BOOKMARK_END,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S197");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S197");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S197");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S197");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S197");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S197");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S197");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S197");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_END, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S197");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S197");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R29, MS-OXCTABL_R725, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66" +
                        ", MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77" +
                        "");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R29");
            this.Manager.Checkpoint("MS-OXCTABL_R725");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker47(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SORTTABLE,True,True," +
                    "False,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S197");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S197");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S197");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S197");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S197");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S197");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S197");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S197");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S197");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S197");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66" +
                        ", MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77" +
                        "");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker48(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SORTTABLE,True,True," +
                    "False,True,BOOKMARK_BEGINNING,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S197");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S197");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S197");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S197");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S197");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S197");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S197");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S197");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(0)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S197");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S197");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71," +
                        " MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker49(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,SORTTABLE,True,Fal" +
                    "se,True,True,BOOKMARK_BEGINNING,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S85");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S85");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S85");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S85");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S85");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S85");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S85");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S85");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(0)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S85");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S85");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R27, MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77, MS-OXCTABL_R119, MS-OXCTABL_R437, MS-OXCTABL_R438");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R27");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
            this.Manager.Checkpoint("MS-OXCTABL_R119");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R438");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker50(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,SORTTABLE,True,Fal" +
                    "se,True,True,BOOKMARK_END,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S85");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S85");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S85");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S85");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S85");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S85");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S85");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S85");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_END, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S85");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S85");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77, MS-OXCTABL_R119, MS-OXCTABL_R437, MS-OXCTABL_R438");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
            this.Manager.Checkpoint("MS-OXCTABL_R119");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R438");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker51(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,SORTTABLE,True,Fal" +
                    "se,True,True,BOOKMARK_END,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S85");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S85");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S85");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S85");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S85");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S85");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S85");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S85");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_END, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S85");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S85");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77, MS-OXCTABL_R119, MS-OXCTABL_R437, MS-OXCTABL_R438");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
            this.Manager.Checkpoint("MS-OXCTABL_R119");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R438");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker52(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,SORTTABLE,True,Fal" +
                    "se,True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S85");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S85");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S85");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S85");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S85");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S85");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S85");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S85");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S85");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S85");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77, MS-OXCTABL_R119, MS-OXCTABL_R437, MS-OXCTABL_R438");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
            this.Manager.Checkpoint("MS-OXCTABL_R119");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R438");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker53(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,SORTTABLE,True,Fal" +
                    "se,True,True,BOOKMARK_CUSTOM,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S85");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S85");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S85");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S85");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S85");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S85");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S85");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S85");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_CUSTOM, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S85");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S85");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77, MS-OXCTABL_R119, MS-OXCTABL_R437, MS-OXCTABL_R438");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
            this.Manager.Checkpoint("MS-OXCTABL_R119");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R438");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker54(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,SORTTABLE,True,Fal" +
                    "se,True,True,BOOKMARK_CUSTOM,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S85");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S85");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S85");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S85");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S85");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S85");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S85");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S85");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_CUSTOM, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S85");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S85");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77, MS-OXCTABL_R119, MS-OXCTABL_R437, MS-OXCTABL_R438");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
            this.Manager.Checkpoint("MS-OXCTABL_R119");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R438");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker55(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,SORTTABLE,True,Fal" +
                    "se,True,True,BOOKMARK_CURRENT,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S85");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S85");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S85");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S85");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S85");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S85");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S85");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S85");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S85");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S85");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77, MS-OXCTABL_R119, MS-OXCTABL_R437, MS-OXCTABL_R438");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
            this.Manager.Checkpoint("MS-OXCTABL_R119");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R438");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteCheckRequirementEnabledChecker8(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S40");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteCheckRequirementEnabledChecker9(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S47");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteCheckRequirementEnabledChecker10(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S76");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker56(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,SORTTABLE,True,Fal" +
                    "se,True,True,BOOKMARK_END,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S86");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S86");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S86");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S86");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S86");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S86");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S86");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S86");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_END, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S86");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S86");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77, MS-OXCTABL_R119, MS-OXCTABL_R437, MS-OXCTABL_R438");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
            this.Manager.Checkpoint("MS-OXCTABL_R119");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R438");
        }
        
        private void S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS102() {
            this.Manager.Comment("reaching state \'S102\'");
            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp44;
            this.Manager.Comment("executing step \'call RopSetColumns(2,False,False,False)\'");
            temp44 = this.IMS_OXCTABLAdapterInstance.RopSetColumns(2u, false, false, false);
            this.Manager.Checkpoint("MS-OXCTABL_R831");
            this.Manager.Checkpoint("MS-OXCTABL_R45");
            this.Manager.Comment("reaching state \'S118\'");
            this.Manager.Comment("checking step \'return RopSetColumns/success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp44, "return of RopSetColumns, state S118");
            this.Manager.Comment("reaching state \'S134\'");
            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp45;
            this.Manager.Comment("executing step \'call RopSortTable(2,False,True,False,True,False,True,False)\'");
            temp45 = this.IMS_OXCTABLAdapterInstance.RopSortTable(2u, false, true, false, true, false, true, false);
            this.Manager.Checkpoint("MS-OXCTABL_R447");
            this.Manager.Comment("reaching state \'S150\'");
            this.Manager.Comment("checking step \'return RopSortTable/ecNullObject\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues.ecNullObject, temp45, "return of RopSortTable, state S150");
            this.Manager.Comment("reaching state \'S166\'");
            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp46;
            this.Manager.Comment("executing step \'call RopQueryRows(Advance,True)\'");
            temp46 = this.IMS_OXCTABLAdapterInstance.RopQueryRows(((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), true);
            this.Manager.Checkpoint("MS-OXCTABL_R837");
            this.Manager.Comment("reaching state \'S182\'");
            this.Manager.Comment("checking step \'return RopQueryRows/success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp46, "return of RopQueryRows, state S182");
            this.Manager.Comment("reaching state \'S198\'");
            int temp49 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker57)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker59)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker60)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker61)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker62)));
            if ((temp49 == 0)) {
                S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS214();
                goto label11;
            }
            if ((temp49 == 1)) {
                S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS214();
                goto label11;
            }
            if ((temp49 == 2)) {
                S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS214();
                goto label11;
            }
            if ((temp49 == 3)) {
                S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS214();
                goto label11;
            }
            if ((temp49 == 4)) {
                S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS214();
                goto label11;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker57)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker59)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker60)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker61)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker62)));
        label11:
;
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker57(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SORTTABLE,True,True," +
                    "False,True,BOOKMARK_CURRENT,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S198");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S198");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S198");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S198");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S198");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S198");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S198");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S198");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S198");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S198");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71," +
                        " MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
        }
        
        private void S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS214() {
            this.Manager.Comment("reaching state \'S214\'");
            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp47;
            this.Manager.Comment("executing step \'call RopSortTable(3,True,True,False,True,True,False,False)\'");
            temp47 = this.IMS_OXCTABLAdapterInstance.RopSortTable(3u, true, true, false, true, true, false, false);
            this.Manager.Checkpoint("MS-OXCTABL_R447");
            this.Manager.Comment("reaching state \'S230\'");
            this.Manager.Comment("checking step \'return RopSortTable/success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp47, "return of RopSortTable, state S230");
            this.Manager.Comment("reaching state \'S246\'");
            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp48;
            this.Manager.Comment("executing step \'call RopQueryRows(Advance,True)\'");
            temp48 = this.IMS_OXCTABLAdapterInstance.RopQueryRows(((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), true);
            this.Manager.Checkpoint("MS-OXCTABL_R837");
            this.Manager.Comment("reaching state \'S262\'");
            this.Manager.Comment("checking step \'return RopQueryRows/success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp48, "return of RopQueryRows, state S262");
            this.Manager.Comment("reaching state \'S278\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker58))) != -1)) {
                this.Manager.Comment("reaching state \'S294\'");
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker58)));
            }
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker58(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SORTTABLE,True,True," +
                    "True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S278");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S278");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S278");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S278");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S278");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S278");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S278");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S278");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S278");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S278");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, MS-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77, MS-OXCTABL_R119, MS-OXCTABL_R437, MS-OXCTABL_R438");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
            this.Manager.Checkpoint("MS-OXCTABL_R119");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R438");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker59(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SORTTABLE,True,True," +
                    "False,True,BOOKMARK_CUSTOM,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S198");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S198");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S198");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S198");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S198");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S198");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S198");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S198");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_CUSTOM, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S198");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S198");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71," +
                        " MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker60(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SORTTABLE,True,True," +
                    "False,True,BOOKMARK_END,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S198");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S198");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S198");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S198");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S198");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S198");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S198");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S198");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_END, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S198");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S198");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R29, MS-OXCTABL_R725, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66" +
                        ", MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77" +
                        "");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R29");
            this.Manager.Checkpoint("MS-OXCTABL_R725");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker61(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SORTTABLE,True,True," +
                    "False,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S198");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S198");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S198");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S198");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S198");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S198");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S198");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S198");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S198");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S198");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66" +
                        ", MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77" +
                        "");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker62(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SORTTABLE,True,True," +
                    "False,True,BOOKMARK_BEGINNING,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S198");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S198");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S198");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S198");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S198");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S198");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S198");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S198");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(0)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S198");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S198");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71," +
                        " MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker63(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,SORTTABLE,True,Fal" +
                    "se,True,True,BOOKMARK_BEGINNING,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S86");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S86");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S86");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S86");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S86");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S86");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S86");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S86");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(0)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S86");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S86");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R27, MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77, MS-OXCTABL_R119, MS-OXCTABL_R437, MS-OXCTABL_R438");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R27");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
            this.Manager.Checkpoint("MS-OXCTABL_R119");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R438");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker64(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,SORTTABLE,True,Fal" +
                    "se,True,True,BOOKMARK_END,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S86");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S86");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S86");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S86");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S86");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S86");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S86");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S86");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_END, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S86");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S86");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77, MS-OXCTABL_R119, MS-OXCTABL_R437, MS-OXCTABL_R438");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
            this.Manager.Checkpoint("MS-OXCTABL_R119");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R438");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker65(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,SORTTABLE,True,Fal" +
                    "se,True,True,BOOKMARK_BEGINNING,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S86");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S86");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S86");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S86");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S86");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S86");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S86");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S86");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(0)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S86");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S86");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R27, MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77, MS-OXCTABL_R119, MS-OXCTABL_R437, MS-OXCTABL_R438");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R27");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
            this.Manager.Checkpoint("MS-OXCTABL_R119");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R438");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker66(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,SORTTABLE,True,Fal" +
                    "se,True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S86");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S86");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S86");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S86");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S86");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S86");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S86");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S86");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S86");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S86");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77, MS-OXCTABL_R119, MS-OXCTABL_R437, MS-OXCTABL_R438");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
            this.Manager.Checkpoint("MS-OXCTABL_R119");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R438");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker67(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,SORTTABLE,True,Fal" +
                    "se,True,True,BOOKMARK_CUSTOM,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S86");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S86");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S86");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S86");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S86");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S86");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S86");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S86");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_CUSTOM, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S86");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S86");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77, MS-OXCTABL_R119, MS-OXCTABL_R437, MS-OXCTABL_R438");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
            this.Manager.Checkpoint("MS-OXCTABL_R119");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R438");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker68(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,SORTTABLE,True,Fal" +
                    "se,True,True,BOOKMARK_CUSTOM,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S86");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S86");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S86");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S86");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S86");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S86");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S86");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S86");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_CUSTOM, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S86");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S86");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77, MS-OXCTABL_R119, MS-OXCTABL_R437, MS-OXCTABL_R438");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
            this.Manager.Checkpoint("MS-OXCTABL_R119");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R438");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker69(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,SORTTABLE,True,Fal" +
                    "se,True,True,BOOKMARK_CURRENT,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S86");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S86");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S86");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S86");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S86");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S86");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S86");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S86");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S86");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S86");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77, MS-OXCTABL_R119, MS-OXCTABL_R437, MS-OXCTABL_R438");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
            this.Manager.Checkpoint("MS-OXCTABL_R119");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R438");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteCheckRequirementEnabledChecker11(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S76");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker70(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,SORTTABLE,True,Fal" +
                    "se,True,True,BOOKMARK_CUSTOM,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S87");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S87");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S87");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S87");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S87");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S87");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S87");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S87");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_CUSTOM, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S87");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S87");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77, MS-OXCTABL_R119, MS-OXCTABL_R437, MS-OXCTABL_R438, MS-OXCTABL_R443");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
            this.Manager.Checkpoint("MS-OXCTABL_R119");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R438");
            this.Manager.Checkpoint("MS-OXCTABL_R443");
        }
        
        private void S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS103() {
            this.Manager.Comment("reaching state \'S103\'");
            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp51;
            this.Manager.Comment("executing step \'call RopSetColumns(2,False,False,False)\'");
            temp51 = this.IMS_OXCTABLAdapterInstance.RopSetColumns(2u, false, false, false);
            this.Manager.Checkpoint("MS-OXCTABL_R831");
            this.Manager.Checkpoint("MS-OXCTABL_R45");
            this.Manager.Comment("reaching state \'S119\'");
            this.Manager.Comment("checking step \'return RopSetColumns/success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp51, "return of RopSetColumns, state S119");
            this.Manager.Comment("reaching state \'S135\'");
            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp52;
            this.Manager.Comment("executing step \'call RopSortTable(2,False,True,False,True,False,True,False)\'");
            temp52 = this.IMS_OXCTABLAdapterInstance.RopSortTable(2u, false, true, false, true, false, true, false);
            this.Manager.Checkpoint("MS-OXCTABL_R447");
            this.Manager.Comment("reaching state \'S151\'");
            this.Manager.Comment("checking step \'return RopSortTable/ecNullObject\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues.ecNullObject, temp52, "return of RopSortTable, state S151");
            this.Manager.Comment("reaching state \'S167\'");
            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp53;
            this.Manager.Comment("executing step \'call RopQueryRows(Advance,True)\'");
            temp53 = this.IMS_OXCTABLAdapterInstance.RopQueryRows(((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), true);
            this.Manager.Checkpoint("MS-OXCTABL_R837");
            this.Manager.Comment("reaching state \'S183\'");
            this.Manager.Comment("checking step \'return RopQueryRows/success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp53, "return of RopQueryRows, state S183");
            this.Manager.Comment("reaching state \'S199\'");
            int temp56 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker71)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker73)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker74)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker75)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker76)));
            if ((temp56 == 0)) {
                S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS215();
                goto label13;
            }
            if ((temp56 == 1)) {
                S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS215();
                goto label13;
            }
            if ((temp56 == 2)) {
                S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS215();
                goto label13;
            }
            if ((temp56 == 3)) {
                S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS215();
                goto label13;
            }
            if ((temp56 == 4)) {
                S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS215();
                goto label13;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker71)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker73)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker74)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker75)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker76)));
        label13:
;
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker71(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SORTTABLE,True,True," +
                    "False,True,BOOKMARK_CURRENT,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S199");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S199");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S199");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S199");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S199");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S199");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S199");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S199");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S199");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S199");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71," +
                        " MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
        }
        
        private void S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS215() {
            this.Manager.Comment("reaching state \'S215\'");
            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp54;
            this.Manager.Comment("executing step \'call RopSortTable(3,True,True,False,True,True,False,False)\'");
            temp54 = this.IMS_OXCTABLAdapterInstance.RopSortTable(3u, true, true, false, true, true, false, false);
            this.Manager.Checkpoint("MS-OXCTABL_R447");
            this.Manager.Comment("reaching state \'S231\'");
            this.Manager.Comment("checking step \'return RopSortTable/success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp54, "return of RopSortTable, state S231");
            this.Manager.Comment("reaching state \'S247\'");
            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp55;
            this.Manager.Comment("executing step \'call RopQueryRows(Advance,True)\'");
            temp55 = this.IMS_OXCTABLAdapterInstance.RopQueryRows(((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), true);
            this.Manager.Checkpoint("MS-OXCTABL_R837");
            this.Manager.Comment("reaching state \'S263\'");
            this.Manager.Comment("checking step \'return RopQueryRows/success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp55, "return of RopQueryRows, state S263");
            this.Manager.Comment("reaching state \'S279\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker72))) != -1)) {
                this.Manager.Comment("reaching state \'S295\'");
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker72)));
            }
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker72(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SORTTABLE,True,True," +
                    "True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S279");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S279");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S279");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S279");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S279");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S279");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S279");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S279");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S279");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S279");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, MS-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77, MS-OXCTABL_R119, MS-OXCTABL_R437, MS-OXCTABL_R438, MS-OXCTABL_R443");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
            this.Manager.Checkpoint("MS-OXCTABL_R119");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R438");
            this.Manager.Checkpoint("MS-OXCTABL_R443");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker73(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SORTTABLE,True,True," +
                    "False,True,BOOKMARK_CUSTOM,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S199");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S199");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S199");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S199");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S199");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S199");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S199");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S199");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_CUSTOM, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S199");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S199");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71," +
                        " MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker74(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SORTTABLE,True,True," +
                    "False,True,BOOKMARK_END,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S199");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S199");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S199");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S199");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S199");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S199");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S199");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S199");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_END, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S199");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S199");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R29, MS-OXCTABL_R725, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66" +
                        ", MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77" +
                        "");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R29");
            this.Manager.Checkpoint("MS-OXCTABL_R725");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker75(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SORTTABLE,True,True," +
                    "False,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S199");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S199");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S199");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S199");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S199");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S199");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S199");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S199");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S199");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S199");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66" +
                        ", MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77" +
                        "");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker76(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SORTTABLE,True,True," +
                    "False,True,BOOKMARK_BEGINNING,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S199");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S199");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S199");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S199");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S199");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S199");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S199");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S199");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(0)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S199");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S199");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71," +
                        " MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker77(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,SORTTABLE,True,Fal" +
                    "se,True,True,BOOKMARK_END,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S87");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S87");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S87");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S87");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S87");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S87");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S87");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S87");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_END, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S87");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S87");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77, MS-OXCTABL_R119, MS-OXCTABL_R437, MS-OXCTABL_R438, MS-OXCTABL_R443");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
            this.Manager.Checkpoint("MS-OXCTABL_R119");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R438");
            this.Manager.Checkpoint("MS-OXCTABL_R443");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker78(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,SORTTABLE,True,Fal" +
                    "se,True,True,BOOKMARK_CUSTOM,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S87");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S87");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S87");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S87");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S87");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S87");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S87");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S87");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_CUSTOM, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S87");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S87");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77, MS-OXCTABL_R119, MS-OXCTABL_R437, MS-OXCTABL_R438, MS-OXCTABL_R443");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
            this.Manager.Checkpoint("MS-OXCTABL_R119");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R438");
            this.Manager.Checkpoint("MS-OXCTABL_R443");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker79(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,SORTTABLE,True,Fal" +
                    "se,True,True,BOOKMARK_END,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S87");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S87");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S87");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S87");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S87");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S87");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S87");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S87");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_END, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S87");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S87");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77, MS-OXCTABL_R119, MS-OXCTABL_R437, MS-OXCTABL_R438, MS-OXCTABL_R443");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
            this.Manager.Checkpoint("MS-OXCTABL_R119");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R438");
            this.Manager.Checkpoint("MS-OXCTABL_R443");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker80(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,SORTTABLE,True,Fal" +
                    "se,True,True,BOOKMARK_BEGINNING,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S87");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S87");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S87");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S87");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S87");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S87");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S87");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S87");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(0)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S87");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S87");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R27, MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77, MS-OXCTABL_R119, MS-OXCTABL_R437, MS-OXCTABL_R438, MS-OXCTABL_R443");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R27");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
            this.Manager.Checkpoint("MS-OXCTABL_R119");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R438");
            this.Manager.Checkpoint("MS-OXCTABL_R443");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker81(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,SORTTABLE,True,Fal" +
                    "se,True,True,BOOKMARK_BEGINNING,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S87");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S87");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S87");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S87");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S87");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S87");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S87");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S87");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(0)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S87");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S87");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R27, MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77, MS-OXCTABL_R119, MS-OXCTABL_R437, MS-OXCTABL_R438, MS-OXCTABL_R443");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R27");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
            this.Manager.Checkpoint("MS-OXCTABL_R119");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R438");
            this.Manager.Checkpoint("MS-OXCTABL_R443");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker82(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,SORTTABLE,True,Fal" +
                    "se,True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S87");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S87");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S87");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S87");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S87");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S87");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S87");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S87");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S87");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S87");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77, MS-OXCTABL_R119, MS-OXCTABL_R437, MS-OXCTABL_R438, MS-OXCTABL_R443");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
            this.Manager.Checkpoint("MS-OXCTABL_R119");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R438");
            this.Manager.Checkpoint("MS-OXCTABL_R443");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker83(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,SORTTABLE,True,Fal" +
                    "se,True,True,BOOKMARK_CURRENT,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S87");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S87");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S87");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S87");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S87");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S87");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S87");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S87");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S87");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S87");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77, MS-OXCTABL_R119, MS-OXCTABL_R437, MS-OXCTABL_R438, MS-OXCTABL_R443");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
            this.Manager.Checkpoint("MS-OXCTABL_R119");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R438");
            this.Manager.Checkpoint("MS-OXCTABL_R443");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteCheckRequirementEnabledChecker12(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S47");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteCheckRequirementEnabledChecker13(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S77");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker84(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,SORTTABLE,True,Fal" +
                    "se,True,True,BOOKMARK_BEGINNING,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S88");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S88");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S88");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S88");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S88");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S88");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S88");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S88");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(0)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S88");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S88");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R27, MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77, MS-OXCTABL_R119, MS-OXCTABL_R437, MS-OXCTABL_R438");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R27");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
            this.Manager.Checkpoint("MS-OXCTABL_R119");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R438");
        }
        
        private void S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS104() {
            this.Manager.Comment("reaching state \'S104\'");
            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp61;
            this.Manager.Comment("executing step \'call RopSetColumns(2,False,False,False)\'");
            temp61 = this.IMS_OXCTABLAdapterInstance.RopSetColumns(2u, false, false, false);
            this.Manager.Checkpoint("MS-OXCTABL_R831");
            this.Manager.Checkpoint("MS-OXCTABL_R45");
            this.Manager.Comment("reaching state \'S120\'");
            this.Manager.Comment("checking step \'return RopSetColumns/success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp61, "return of RopSetColumns, state S120");
            this.Manager.Comment("reaching state \'S136\'");
            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp62;
            this.Manager.Comment("executing step \'call RopSortTable(2,False,True,False,True,False,True,False)\'");
            temp62 = this.IMS_OXCTABLAdapterInstance.RopSortTable(2u, false, true, false, true, false, true, false);
            this.Manager.Checkpoint("MS-OXCTABL_R447");
            this.Manager.Comment("reaching state \'S152\'");
            this.Manager.Comment("checking step \'return RopSortTable/ecNullObject\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues.ecNullObject, temp62, "return of RopSortTable, state S152");
            this.Manager.Comment("reaching state \'S168\'");
            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp63;
            this.Manager.Comment("executing step \'call RopQueryRows(Advance,True)\'");
            temp63 = this.IMS_OXCTABLAdapterInstance.RopQueryRows(((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), true);
            this.Manager.Checkpoint("MS-OXCTABL_R837");
            this.Manager.Comment("reaching state \'S184\'");
            this.Manager.Comment("checking step \'return RopQueryRows/success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp63, "return of RopQueryRows, state S184");
            this.Manager.Comment("reaching state \'S200\'");
            int temp66 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker85)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker87)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker88)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker89)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker90)));
            if ((temp66 == 0)) {
                S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS216();
                goto label16;
            }
            if ((temp66 == 1)) {
                S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS216();
                goto label16;
            }
            if ((temp66 == 2)) {
                S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS216();
                goto label16;
            }
            if ((temp66 == 3)) {
                S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS216();
                goto label16;
            }
            if ((temp66 == 4)) {
                S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS216();
                goto label16;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker85)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker87)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker88)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker89)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker90)));
        label16:
;
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker85(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SORTTABLE,True,True," +
                    "False,True,BOOKMARK_CURRENT,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S200");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S200");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S200");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S200");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S200");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S200");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S200");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S200");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S200");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S200");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71," +
                        " MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
        }
        
        private void S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS216() {
            this.Manager.Comment("reaching state \'S216\'");
            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp64;
            this.Manager.Comment("executing step \'call RopSortTable(3,True,True,False,True,True,False,False)\'");
            temp64 = this.IMS_OXCTABLAdapterInstance.RopSortTable(3u, true, true, false, true, true, false, false);
            this.Manager.Checkpoint("MS-OXCTABL_R447");
            this.Manager.Comment("reaching state \'S232\'");
            this.Manager.Comment("checking step \'return RopSortTable/success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp64, "return of RopSortTable, state S232");
            this.Manager.Comment("reaching state \'S248\'");
            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp65;
            this.Manager.Comment("executing step \'call RopQueryRows(Advance,True)\'");
            temp65 = this.IMS_OXCTABLAdapterInstance.RopQueryRows(((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), true);
            this.Manager.Checkpoint("MS-OXCTABL_R837");
            this.Manager.Comment("reaching state \'S264\'");
            this.Manager.Comment("checking step \'return RopQueryRows/success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp65, "return of RopQueryRows, state S264");
            this.Manager.Comment("reaching state \'S280\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker86))) != -1)) {
                this.Manager.Comment("reaching state \'S296\'");
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker86)));
            }
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker86(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SORTTABLE,True,True," +
                    "True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S280");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S280");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S280");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S280");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S280");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S280");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S280");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S280");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S280");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S280");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, MS-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77, MS-OXCTABL_R119, MS-OXCTABL_R437, MS-OXCTABL_R438");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
            this.Manager.Checkpoint("MS-OXCTABL_R119");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R438");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker87(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SORTTABLE,True,True," +
                    "False,True,BOOKMARK_CUSTOM,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S200");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S200");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S200");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S200");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S200");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S200");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S200");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S200");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_CUSTOM, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S200");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S200");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71," +
                        " MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker88(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SORTTABLE,True,True," +
                    "False,True,BOOKMARK_END,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S200");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S200");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S200");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S200");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S200");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S200");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S200");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S200");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_END, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S200");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S200");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R29, MS-OXCTABL_R725, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66" +
                        ", MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77" +
                        "");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R29");
            this.Manager.Checkpoint("MS-OXCTABL_R725");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker89(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SORTTABLE,True,True," +
                    "False,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S200");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S200");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S200");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S200");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S200");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S200");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S200");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S200");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S200");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S200");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66" +
                        ", MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77" +
                        "");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker90(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SORTTABLE,True,True," +
                    "False,True,BOOKMARK_BEGINNING,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S200");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S200");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S200");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S200");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S200");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S200");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S200");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S200");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(0)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S200");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S200");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71," +
                        " MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker91(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,SORTTABLE,True,Fal" +
                    "se,True,True,BOOKMARK_BEGINNING,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S88");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S88");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S88");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S88");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S88");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S88");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S88");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S88");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(0)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S88");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S88");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R27, MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77, MS-OXCTABL_R119, MS-OXCTABL_R437, MS-OXCTABL_R438");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R27");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
            this.Manager.Checkpoint("MS-OXCTABL_R119");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R438");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker92(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,SORTTABLE,True,Fal" +
                    "se,True,True,BOOKMARK_END,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S88");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S88");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S88");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S88");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S88");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S88");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S88");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S88");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_END, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S88");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S88");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77, MS-OXCTABL_R119, MS-OXCTABL_R437, MS-OXCTABL_R438");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
            this.Manager.Checkpoint("MS-OXCTABL_R119");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R438");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker93(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,SORTTABLE,True,Fal" +
                    "se,True,True,BOOKMARK_END,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S88");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S88");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S88");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S88");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S88");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S88");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S88");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S88");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_END, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S88");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S88");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77, MS-OXCTABL_R119, MS-OXCTABL_R437, MS-OXCTABL_R438");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
            this.Manager.Checkpoint("MS-OXCTABL_R119");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R438");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker94(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,SORTTABLE,True,Fal" +
                    "se,True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S88");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S88");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S88");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S88");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S88");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S88");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S88");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S88");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S88");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S88");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77, MS-OXCTABL_R119, MS-OXCTABL_R437, MS-OXCTABL_R438");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
            this.Manager.Checkpoint("MS-OXCTABL_R119");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R438");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker95(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,SORTTABLE,True,Fal" +
                    "se,True,True,BOOKMARK_CUSTOM,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S88");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S88");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S88");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S88");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S88");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S88");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S88");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S88");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_CUSTOM, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S88");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S88");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77, MS-OXCTABL_R119, MS-OXCTABL_R437, MS-OXCTABL_R438");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
            this.Manager.Checkpoint("MS-OXCTABL_R119");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R438");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker96(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,SORTTABLE,True,Fal" +
                    "se,True,True,BOOKMARK_CUSTOM,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S88");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S88");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S88");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S88");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S88");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S88");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S88");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S88");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_CUSTOM, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S88");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S88");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77, MS-OXCTABL_R119, MS-OXCTABL_R437, MS-OXCTABL_R438");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
            this.Manager.Checkpoint("MS-OXCTABL_R119");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R438");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker97(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,SORTTABLE,True,Fal" +
                    "se,True,True,BOOKMARK_CURRENT,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S88");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S88");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S88");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S88");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S88");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S88");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S88");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S88");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S88");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S88");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77, MS-OXCTABL_R119, MS-OXCTABL_R437, MS-OXCTABL_R438");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
            this.Manager.Checkpoint("MS-OXCTABL_R119");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R438");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteCheckRequirementEnabledChecker14(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S77");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker98(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,SORTTABLE,True,Fal" +
                    "se,True,True,BOOKMARK_BEGINNING,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S89");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S89");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S89");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S89");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S89");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S89");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S89");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S89");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(0)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S89");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S89");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R27, MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77, MS-OXCTABL_R119, MS-OXCTABL_R437, MS-OXCTABL_R438, MS-OXCTABL_R443");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R27");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
            this.Manager.Checkpoint("MS-OXCTABL_R119");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R438");
            this.Manager.Checkpoint("MS-OXCTABL_R443");
        }
        
        private void S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS105() {
            this.Manager.Comment("reaching state \'S105\'");
            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp68;
            this.Manager.Comment("executing step \'call RopSetColumns(2,False,False,False)\'");
            temp68 = this.IMS_OXCTABLAdapterInstance.RopSetColumns(2u, false, false, false);
            this.Manager.Checkpoint("MS-OXCTABL_R831");
            this.Manager.Checkpoint("MS-OXCTABL_R45");
            this.Manager.Comment("reaching state \'S121\'");
            this.Manager.Comment("checking step \'return RopSetColumns/success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp68, "return of RopSetColumns, state S121");
            this.Manager.Comment("reaching state \'S137\'");
            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp69;
            this.Manager.Comment("executing step \'call RopSortTable(2,False,True,False,True,False,True,False)\'");
            temp69 = this.IMS_OXCTABLAdapterInstance.RopSortTable(2u, false, true, false, true, false, true, false);
            this.Manager.Checkpoint("MS-OXCTABL_R447");
            this.Manager.Comment("reaching state \'S153\'");
            this.Manager.Comment("checking step \'return RopSortTable/ecNullObject\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues.ecNullObject, temp69, "return of RopSortTable, state S153");
            this.Manager.Comment("reaching state \'S169\'");
            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp70;
            this.Manager.Comment("executing step \'call RopQueryRows(Advance,True)\'");
            temp70 = this.IMS_OXCTABLAdapterInstance.RopQueryRows(((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), true);
            this.Manager.Checkpoint("MS-OXCTABL_R837");
            this.Manager.Comment("reaching state \'S185\'");
            this.Manager.Comment("checking step \'return RopQueryRows/success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp70, "return of RopQueryRows, state S185");
            this.Manager.Comment("reaching state \'S201\'");
            int temp73 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker99)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker101)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker102)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker103)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker104)));
            if ((temp73 == 0)) {
                S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS217();
                goto label18;
            }
            if ((temp73 == 1)) {
                S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS217();
                goto label18;
            }
            if ((temp73 == 2)) {
                S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS217();
                goto label18;
            }
            if ((temp73 == 3)) {
                S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS217();
                goto label18;
            }
            if ((temp73 == 4)) {
                S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS217();
                goto label18;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker99)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker101)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker102)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker103)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker104)));
        label18:
;
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker99(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SORTTABLE,True,True," +
                    "False,True,BOOKMARK_CURRENT,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S201");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S201");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S201");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S201");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S201");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S201");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S201");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S201");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S201");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S201");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71," +
                        " MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
        }
        
        private void S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS217() {
            this.Manager.Comment("reaching state \'S217\'");
            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp71;
            this.Manager.Comment("executing step \'call RopSortTable(3,True,True,False,True,True,False,False)\'");
            temp71 = this.IMS_OXCTABLAdapterInstance.RopSortTable(3u, true, true, false, true, true, false, false);
            this.Manager.Checkpoint("MS-OXCTABL_R447");
            this.Manager.Comment("reaching state \'S233\'");
            this.Manager.Comment("checking step \'return RopSortTable/success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp71, "return of RopSortTable, state S233");
            this.Manager.Comment("reaching state \'S249\'");
            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp72;
            this.Manager.Comment("executing step \'call RopQueryRows(Advance,True)\'");
            temp72 = this.IMS_OXCTABLAdapterInstance.RopQueryRows(((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), true);
            this.Manager.Checkpoint("MS-OXCTABL_R837");
            this.Manager.Comment("reaching state \'S265\'");
            this.Manager.Comment("checking step \'return RopQueryRows/success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp72, "return of RopQueryRows, state S265");
            this.Manager.Comment("reaching state \'S281\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker100))) != -1)) {
                this.Manager.Comment("reaching state \'S297\'");
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker100)));
            }
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker100(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SORTTABLE,True,True," +
                    "True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S281");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S281");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S281");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S281");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S281");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S281");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S281");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S281");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S281");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S281");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, MS-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77, MS-OXCTABL_R119, MS-OXCTABL_R437, MS-OXCTABL_R438, MS-OXCTABL_R443");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
            this.Manager.Checkpoint("MS-OXCTABL_R119");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R438");
            this.Manager.Checkpoint("MS-OXCTABL_R443");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker101(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SORTTABLE,True,True," +
                    "False,True,BOOKMARK_CUSTOM,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S201");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S201");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S201");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S201");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S201");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S201");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S201");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S201");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_CUSTOM, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S201");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S201");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71," +
                        " MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker102(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SORTTABLE,True,True," +
                    "False,True,BOOKMARK_END,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S201");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S201");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S201");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S201");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S201");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S201");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S201");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S201");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_END, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S201");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S201");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R29, MS-OXCTABL_R725, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66" +
                        ", MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77" +
                        "");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R29");
            this.Manager.Checkpoint("MS-OXCTABL_R725");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker103(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SORTTABLE,True,True," +
                    "False,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S201");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S201");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S201");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S201");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S201");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S201");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S201");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S201");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S201");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S201");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66" +
                        ", MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77" +
                        "");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker104(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SORTTABLE,True,True," +
                    "False,True,BOOKMARK_BEGINNING,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S201");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S201");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S201");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S201");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S201");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S201");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S201");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S201");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(0)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S201");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S201");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71," +
                        " MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker105(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,SORTTABLE,True,Fal" +
                    "se,True,True,BOOKMARK_BEGINNING,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S89");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S89");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S89");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S89");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S89");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S89");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S89");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S89");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(0)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S89");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S89");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R27, MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77, MS-OXCTABL_R119, MS-OXCTABL_R437, MS-OXCTABL_R438, MS-OXCTABL_R443");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R27");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
            this.Manager.Checkpoint("MS-OXCTABL_R119");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R438");
            this.Manager.Checkpoint("MS-OXCTABL_R443");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker106(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,SORTTABLE,True,Fal" +
                    "se,True,True,BOOKMARK_END,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S89");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S89");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S89");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S89");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S89");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S89");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S89");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S89");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_END, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S89");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S89");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77, MS-OXCTABL_R119, MS-OXCTABL_R437, MS-OXCTABL_R438, MS-OXCTABL_R443");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
            this.Manager.Checkpoint("MS-OXCTABL_R119");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R438");
            this.Manager.Checkpoint("MS-OXCTABL_R443");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker107(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,SORTTABLE,True,Fal" +
                    "se,True,True,BOOKMARK_END,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S89");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S89");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S89");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S89");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S89");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S89");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S89");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S89");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_END, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S89");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S89");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77, MS-OXCTABL_R119, MS-OXCTABL_R437, MS-OXCTABL_R438, MS-OXCTABL_R443");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
            this.Manager.Checkpoint("MS-OXCTABL_R119");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R438");
            this.Manager.Checkpoint("MS-OXCTABL_R443");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker108(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,SORTTABLE,True,Fal" +
                    "se,True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S89");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S89");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S89");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S89");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S89");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S89");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S89");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S89");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S89");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S89");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77, MS-OXCTABL_R119, MS-OXCTABL_R437, MS-OXCTABL_R438, MS-OXCTABL_R443");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
            this.Manager.Checkpoint("MS-OXCTABL_R119");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R438");
            this.Manager.Checkpoint("MS-OXCTABL_R443");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker109(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,SORTTABLE,True,Fal" +
                    "se,True,True,BOOKMARK_CUSTOM,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S89");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S89");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S89");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S89");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S89");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S89");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S89");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S89");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_CUSTOM, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S89");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S89");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77, MS-OXCTABL_R119, MS-OXCTABL_R437, MS-OXCTABL_R438, MS-OXCTABL_R443");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
            this.Manager.Checkpoint("MS-OXCTABL_R119");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R438");
            this.Manager.Checkpoint("MS-OXCTABL_R443");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker110(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,SORTTABLE,True,Fal" +
                    "se,True,True,BOOKMARK_CUSTOM,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S89");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S89");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S89");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S89");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S89");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S89");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S89");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S89");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_CUSTOM, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S89");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S89");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77, MS-OXCTABL_R119, MS-OXCTABL_R437, MS-OXCTABL_R438, MS-OXCTABL_R443");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
            this.Manager.Checkpoint("MS-OXCTABL_R119");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R438");
            this.Manager.Checkpoint("MS-OXCTABL_R443");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker111(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,SORTTABLE,True,Fal" +
                    "se,True,True,BOOKMARK_CURRENT,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S89");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S89");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S89");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S89");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S89");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S89");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S89");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S89");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S89");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S89");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77, MS-OXCTABL_R119, MS-OXCTABL_R437, MS-OXCTABL_R438, MS-OXCTABL_R443");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
            this.Manager.Checkpoint("MS-OXCTABL_R119");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R438");
            this.Manager.Checkpoint("MS-OXCTABL_R443");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteCheckRequirementEnabledChecker15(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S37");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteCheckRequirementEnabledChecker16(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S41");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteCheckRequirementEnabledChecker17(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S48");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteCheckRequirementEnabledChecker18(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S78");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker112(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,SORTTABLE,True,Fal" +
                    "se,True,True,BOOKMARK_BEGINNING,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S90");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S90");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S90");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S90");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S90");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S90");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S90");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S90");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(0)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S90");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S90");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R27, MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77, MS-OXCTABL_R119, MS-OXCTABL_R437, MS-OXCTABL_R438");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R27");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
            this.Manager.Checkpoint("MS-OXCTABL_R119");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R438");
        }
        
        private void S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS106() {
            this.Manager.Comment("reaching state \'S106\'");
            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp82;
            this.Manager.Comment("executing step \'call RopSetColumns(2,False,False,False)\'");
            temp82 = this.IMS_OXCTABLAdapterInstance.RopSetColumns(2u, false, false, false);
            this.Manager.Checkpoint("MS-OXCTABL_R831");
            this.Manager.Checkpoint("MS-OXCTABL_R45");
            this.Manager.Comment("reaching state \'S122\'");
            this.Manager.Comment("checking step \'return RopSetColumns/success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp82, "return of RopSetColumns, state S122");
            this.Manager.Comment("reaching state \'S138\'");
            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp83;
            this.Manager.Comment("executing step \'call RopSortTable(2,False,True,False,True,False,True,False)\'");
            temp83 = this.IMS_OXCTABLAdapterInstance.RopSortTable(2u, false, true, false, true, false, true, false);
            this.Manager.Checkpoint("MS-OXCTABL_R447");
            this.Manager.Comment("reaching state \'S154\'");
            this.Manager.Comment("checking step \'return RopSortTable/ecNullObject\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues.ecNullObject, temp83, "return of RopSortTable, state S154");
            this.Manager.Comment("reaching state \'S170\'");
            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp84;
            this.Manager.Comment("executing step \'call RopQueryRows(Advance,True)\'");
            temp84 = this.IMS_OXCTABLAdapterInstance.RopQueryRows(((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), true);
            this.Manager.Checkpoint("MS-OXCTABL_R837");
            this.Manager.Comment("reaching state \'S186\'");
            this.Manager.Comment("checking step \'return RopQueryRows/success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp84, "return of RopQueryRows, state S186");
            this.Manager.Comment("reaching state \'S202\'");
            int temp87 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker113)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker115)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker116)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker117)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker118)));
            if ((temp87 == 0)) {
                S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS218();
                goto label23;
            }
            if ((temp87 == 1)) {
                S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS218();
                goto label23;
            }
            if ((temp87 == 2)) {
                S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS218();
                goto label23;
            }
            if ((temp87 == 3)) {
                S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS218();
                goto label23;
            }
            if ((temp87 == 4)) {
                S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS218();
                goto label23;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker113)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker115)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker116)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker117)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker118)));
        label23:
;
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker113(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SORTTABLE,True,True," +
                    "False,True,BOOKMARK_CURRENT,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S202");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S202");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S202");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S202");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S202");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S202");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S202");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S202");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S202");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S202");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71," +
                        " MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
        }
        
        private void S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS218() {
            this.Manager.Comment("reaching state \'S218\'");
            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp85;
            this.Manager.Comment("executing step \'call RopSortTable(3,True,True,False,True,True,False,False)\'");
            temp85 = this.IMS_OXCTABLAdapterInstance.RopSortTable(3u, true, true, false, true, true, false, false);
            this.Manager.Checkpoint("MS-OXCTABL_R447");
            this.Manager.Comment("reaching state \'S234\'");
            this.Manager.Comment("checking step \'return RopSortTable/success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp85, "return of RopSortTable, state S234");
            this.Manager.Comment("reaching state \'S250\'");
            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp86;
            this.Manager.Comment("executing step \'call RopQueryRows(Advance,True)\'");
            temp86 = this.IMS_OXCTABLAdapterInstance.RopQueryRows(((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), true);
            this.Manager.Checkpoint("MS-OXCTABL_R837");
            this.Manager.Comment("reaching state \'S266\'");
            this.Manager.Comment("checking step \'return RopQueryRows/success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp86, "return of RopQueryRows, state S266");
            this.Manager.Comment("reaching state \'S282\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker114))) != -1)) {
                this.Manager.Comment("reaching state \'S298\'");
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker114)));
            }
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker114(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SORTTABLE,True,True," +
                    "True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S282");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S282");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S282");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S282");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S282");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S282");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S282");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S282");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S282");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S282");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, MS-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77, MS-OXCTABL_R119, MS-OXCTABL_R437, MS-OXCTABL_R438");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
            this.Manager.Checkpoint("MS-OXCTABL_R119");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R438");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker115(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SORTTABLE,True,True," +
                    "False,True,BOOKMARK_CUSTOM,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S202");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S202");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S202");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S202");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S202");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S202");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S202");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S202");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_CUSTOM, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S202");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S202");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71," +
                        " MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker116(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SORTTABLE,True,True," +
                    "False,True,BOOKMARK_END,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S202");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S202");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S202");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S202");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S202");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S202");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S202");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S202");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_END, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S202");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S202");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R29, MS-OXCTABL_R725, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66" +
                        ", MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77" +
                        "");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R29");
            this.Manager.Checkpoint("MS-OXCTABL_R725");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker117(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SORTTABLE,True,True," +
                    "False,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S202");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S202");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S202");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S202");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S202");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S202");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S202");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S202");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S202");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S202");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66" +
                        ", MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77" +
                        "");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker118(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SORTTABLE,True,True," +
                    "False,True,BOOKMARK_BEGINNING,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S202");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S202");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S202");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S202");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S202");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S202");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S202");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S202");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(0)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S202");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S202");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71," +
                        " MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker119(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,SORTTABLE,True,Fal" +
                    "se,True,True,BOOKMARK_BEGINNING,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S90");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S90");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S90");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S90");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S90");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S90");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S90");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S90");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(0)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S90");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S90");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R27, MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77, MS-OXCTABL_R119, MS-OXCTABL_R437, MS-OXCTABL_R438");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R27");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
            this.Manager.Checkpoint("MS-OXCTABL_R119");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R438");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker120(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,SORTTABLE,True,Fal" +
                    "se,True,True,BOOKMARK_END,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S90");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S90");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S90");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S90");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S90");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S90");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S90");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S90");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_END, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S90");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S90");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77, MS-OXCTABL_R119, MS-OXCTABL_R437, MS-OXCTABL_R438");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
            this.Manager.Checkpoint("MS-OXCTABL_R119");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R438");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker121(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,SORTTABLE,True,Fal" +
                    "se,True,True,BOOKMARK_END,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S90");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S90");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S90");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S90");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S90");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S90");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S90");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S90");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_END, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S90");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S90");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77, MS-OXCTABL_R119, MS-OXCTABL_R437, MS-OXCTABL_R438");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
            this.Manager.Checkpoint("MS-OXCTABL_R119");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R438");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker122(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,SORTTABLE,True,Fal" +
                    "se,True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S90");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S90");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S90");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S90");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S90");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S90");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S90");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S90");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S90");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S90");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77, MS-OXCTABL_R119, MS-OXCTABL_R437, MS-OXCTABL_R438");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
            this.Manager.Checkpoint("MS-OXCTABL_R119");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R438");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker123(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,SORTTABLE,True,Fal" +
                    "se,True,True,BOOKMARK_CUSTOM,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S90");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S90");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S90");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S90");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S90");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S90");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S90");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S90");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_CUSTOM, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S90");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S90");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77, MS-OXCTABL_R119, MS-OXCTABL_R437, MS-OXCTABL_R438");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
            this.Manager.Checkpoint("MS-OXCTABL_R119");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R438");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker124(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,SORTTABLE,True,Fal" +
                    "se,True,True,BOOKMARK_CUSTOM,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S90");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S90");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S90");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S90");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S90");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S90");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S90");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S90");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_CUSTOM, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S90");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S90");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77, MS-OXCTABL_R119, MS-OXCTABL_R437, MS-OXCTABL_R438");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
            this.Manager.Checkpoint("MS-OXCTABL_R119");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R438");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker125(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,SORTTABLE,True,Fal" +
                    "se,True,True,BOOKMARK_CURRENT,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S90");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S90");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S90");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S90");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S90");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S90");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S90");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S90");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S90");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S90");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77, MS-OXCTABL_R119, MS-OXCTABL_R437, MS-OXCTABL_R438");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
            this.Manager.Checkpoint("MS-OXCTABL_R119");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R438");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteCheckRequirementEnabledChecker19(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S78");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker126(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,SORTTABLE,True,Fal" +
                    "se,True,True,BOOKMARK_BEGINNING,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S91");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S91");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S91");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S91");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S91");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S91");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S91");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S91");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(0)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S91");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S91");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R27, MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77, MS-OXCTABL_R119, MS-OXCTABL_R437, MS-OXCTABL_R438, MS-OXCTABL_R443");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R27");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
            this.Manager.Checkpoint("MS-OXCTABL_R119");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R438");
            this.Manager.Checkpoint("MS-OXCTABL_R443");
        }
        
        private void S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS107() {
            this.Manager.Comment("reaching state \'S107\'");
            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp89;
            this.Manager.Comment("executing step \'call RopSetColumns(2,False,False,False)\'");
            temp89 = this.IMS_OXCTABLAdapterInstance.RopSetColumns(2u, false, false, false);
            this.Manager.Checkpoint("MS-OXCTABL_R831");
            this.Manager.Checkpoint("MS-OXCTABL_R45");
            this.Manager.Comment("reaching state \'S123\'");
            this.Manager.Comment("checking step \'return RopSetColumns/success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp89, "return of RopSetColumns, state S123");
            this.Manager.Comment("reaching state \'S139\'");
            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp90;
            this.Manager.Comment("executing step \'call RopSortTable(2,False,True,False,True,False,True,False)\'");
            temp90 = this.IMS_OXCTABLAdapterInstance.RopSortTable(2u, false, true, false, true, false, true, false);
            this.Manager.Checkpoint("MS-OXCTABL_R447");
            this.Manager.Comment("reaching state \'S155\'");
            this.Manager.Comment("checking step \'return RopSortTable/ecNullObject\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues.ecNullObject, temp90, "return of RopSortTable, state S155");
            this.Manager.Comment("reaching state \'S171\'");
            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp91;
            this.Manager.Comment("executing step \'call RopQueryRows(Advance,True)\'");
            temp91 = this.IMS_OXCTABLAdapterInstance.RopQueryRows(((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), true);
            this.Manager.Checkpoint("MS-OXCTABL_R837");
            this.Manager.Comment("reaching state \'S187\'");
            this.Manager.Comment("checking step \'return RopQueryRows/success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp91, "return of RopQueryRows, state S187");
            this.Manager.Comment("reaching state \'S203\'");
            int temp94 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker127)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker129)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker130)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker131)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker132)));
            if ((temp94 == 0)) {
                S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS219();
                goto label25;
            }
            if ((temp94 == 1)) {
                S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS219();
                goto label25;
            }
            if ((temp94 == 2)) {
                S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS219();
                goto label25;
            }
            if ((temp94 == 3)) {
                S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS219();
                goto label25;
            }
            if ((temp94 == 4)) {
                S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS219();
                goto label25;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker127)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker129)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker130)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker131)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker132)));
        label25:
;
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker127(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SORTTABLE,True,True," +
                    "False,True,BOOKMARK_CURRENT,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S203");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S203");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S203");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S203");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S203");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S203");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S203");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S203");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S203");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S203");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71," +
                        " MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
        }
        
        private void S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS219() {
            this.Manager.Comment("reaching state \'S219\'");
            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp92;
            this.Manager.Comment("executing step \'call RopSortTable(3,True,True,False,True,True,False,False)\'");
            temp92 = this.IMS_OXCTABLAdapterInstance.RopSortTable(3u, true, true, false, true, true, false, false);
            this.Manager.Checkpoint("MS-OXCTABL_R447");
            this.Manager.Comment("reaching state \'S235\'");
            this.Manager.Comment("checking step \'return RopSortTable/success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp92, "return of RopSortTable, state S235");
            this.Manager.Comment("reaching state \'S251\'");
            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp93;
            this.Manager.Comment("executing step \'call RopQueryRows(Advance,True)\'");
            temp93 = this.IMS_OXCTABLAdapterInstance.RopQueryRows(((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), true);
            this.Manager.Checkpoint("MS-OXCTABL_R837");
            this.Manager.Comment("reaching state \'S267\'");
            this.Manager.Comment("checking step \'return RopQueryRows/success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp93, "return of RopQueryRows, state S267");
            this.Manager.Comment("reaching state \'S283\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker128))) != -1)) {
                this.Manager.Comment("reaching state \'S299\'");
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker128)));
            }
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker128(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SORTTABLE,True,True," +
                    "True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S283");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S283");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S283");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S283");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S283");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S283");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S283");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S283");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S283");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S283");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, MS-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77, MS-OXCTABL_R119, MS-OXCTABL_R437, MS-OXCTABL_R438, MS-OXCTABL_R443");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
            this.Manager.Checkpoint("MS-OXCTABL_R119");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R438");
            this.Manager.Checkpoint("MS-OXCTABL_R443");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker129(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SORTTABLE,True,True," +
                    "False,True,BOOKMARK_CUSTOM,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S203");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S203");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S203");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S203");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S203");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S203");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S203");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S203");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_CUSTOM, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S203");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S203");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71," +
                        " MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker130(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SORTTABLE,True,True," +
                    "False,True,BOOKMARK_END,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S203");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S203");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S203");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S203");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S203");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S203");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S203");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S203");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_END, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S203");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S203");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R29, MS-OXCTABL_R725, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66" +
                        ", MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77" +
                        "");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R29");
            this.Manager.Checkpoint("MS-OXCTABL_R725");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker131(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SORTTABLE,True,True," +
                    "False,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S203");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S203");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S203");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S203");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S203");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S203");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S203");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S203");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S203");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S203");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66" +
                        ", MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77" +
                        "");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker132(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SORTTABLE,True,True," +
                    "False,True,BOOKMARK_BEGINNING,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S203");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S203");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S203");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S203");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S203");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S203");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S203");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S203");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(0)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S203");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S203");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71," +
                        " MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker133(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,SORTTABLE,True,Fal" +
                    "se,True,True,BOOKMARK_BEGINNING,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S91");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S91");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S91");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S91");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S91");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S91");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S91");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S91");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(0)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S91");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S91");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R27, MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77, MS-OXCTABL_R119, MS-OXCTABL_R437, MS-OXCTABL_R438, MS-OXCTABL_R443");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R27");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
            this.Manager.Checkpoint("MS-OXCTABL_R119");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R438");
            this.Manager.Checkpoint("MS-OXCTABL_R443");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker134(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,SORTTABLE,True,Fal" +
                    "se,True,True,BOOKMARK_END,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S91");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S91");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S91");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S91");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S91");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S91");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S91");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S91");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_END, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S91");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S91");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77, MS-OXCTABL_R119, MS-OXCTABL_R437, MS-OXCTABL_R438, MS-OXCTABL_R443");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
            this.Manager.Checkpoint("MS-OXCTABL_R119");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R438");
            this.Manager.Checkpoint("MS-OXCTABL_R443");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker135(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,SORTTABLE,True,Fal" +
                    "se,True,True,BOOKMARK_END,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S91");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S91");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S91");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S91");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S91");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S91");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S91");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S91");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_END, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S91");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S91");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77, MS-OXCTABL_R119, MS-OXCTABL_R437, MS-OXCTABL_R438, MS-OXCTABL_R443");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
            this.Manager.Checkpoint("MS-OXCTABL_R119");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R438");
            this.Manager.Checkpoint("MS-OXCTABL_R443");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker136(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,SORTTABLE,True,Fal" +
                    "se,True,True,BOOKMARK_CUSTOM,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S91");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S91");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S91");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S91");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S91");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S91");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S91");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S91");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_CUSTOM, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S91");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S91");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77, MS-OXCTABL_R119, MS-OXCTABL_R437, MS-OXCTABL_R438, MS-OXCTABL_R443");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
            this.Manager.Checkpoint("MS-OXCTABL_R119");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R438");
            this.Manager.Checkpoint("MS-OXCTABL_R443");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker137(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,SORTTABLE,True,Fal" +
                    "se,True,True,BOOKMARK_CUSTOM,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S91");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S91");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S91");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S91");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S91");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S91");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S91");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S91");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_CUSTOM, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S91");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S91");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77, MS-OXCTABL_R119, MS-OXCTABL_R437, MS-OXCTABL_R438, MS-OXCTABL_R443");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
            this.Manager.Checkpoint("MS-OXCTABL_R119");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R438");
            this.Manager.Checkpoint("MS-OXCTABL_R443");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker138(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,SORTTABLE,True,Fal" +
                    "se,True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S91");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S91");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S91");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S91");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S91");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S91");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S91");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S91");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S91");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S91");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77, MS-OXCTABL_R119, MS-OXCTABL_R437, MS-OXCTABL_R438, MS-OXCTABL_R443");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
            this.Manager.Checkpoint("MS-OXCTABL_R119");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R438");
            this.Manager.Checkpoint("MS-OXCTABL_R443");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker139(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,SORTTABLE,True,Fal" +
                    "se,True,True,BOOKMARK_CURRENT,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S91");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S91");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S91");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S91");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S91");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S91");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S91");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S91");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S91");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S91");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77, MS-OXCTABL_R119, MS-OXCTABL_R437, MS-OXCTABL_R438, MS-OXCTABL_R443");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
            this.Manager.Checkpoint("MS-OXCTABL_R119");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R438");
            this.Manager.Checkpoint("MS-OXCTABL_R443");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteCheckRequirementEnabledChecker20(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S48");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteCheckRequirementEnabledChecker21(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S79");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker140(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,SORTTABLE,True,Fal" +
                    "se,True,True,BOOKMARK_BEGINNING,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S92");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S92");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S92");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S92");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S92");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S92");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S92");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S92");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(0)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S92");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S92");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R27, MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77, MS-OXCTABL_R119, MS-OXCTABL_R437, MS-OXCTABL_R438, MS-OXCTABL_R443");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R27");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
            this.Manager.Checkpoint("MS-OXCTABL_R119");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R438");
            this.Manager.Checkpoint("MS-OXCTABL_R443");
        }
        
        private void S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS108() {
            this.Manager.Comment("reaching state \'S108\'");
            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp99;
            this.Manager.Comment("executing step \'call RopSetColumns(2,False,False,False)\'");
            temp99 = this.IMS_OXCTABLAdapterInstance.RopSetColumns(2u, false, false, false);
            this.Manager.Checkpoint("MS-OXCTABL_R831");
            this.Manager.Checkpoint("MS-OXCTABL_R45");
            this.Manager.Comment("reaching state \'S124\'");
            this.Manager.Comment("checking step \'return RopSetColumns/success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp99, "return of RopSetColumns, state S124");
            this.Manager.Comment("reaching state \'S140\'");
            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp100;
            this.Manager.Comment("executing step \'call RopSortTable(2,False,True,False,True,False,True,False)\'");
            temp100 = this.IMS_OXCTABLAdapterInstance.RopSortTable(2u, false, true, false, true, false, true, false);
            this.Manager.Checkpoint("MS-OXCTABL_R447");
            this.Manager.Comment("reaching state \'S156\'");
            this.Manager.Comment("checking step \'return RopSortTable/ecNullObject\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues.ecNullObject, temp100, "return of RopSortTable, state S156");
            this.Manager.Comment("reaching state \'S172\'");
            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp101;
            this.Manager.Comment("executing step \'call RopQueryRows(Advance,True)\'");
            temp101 = this.IMS_OXCTABLAdapterInstance.RopQueryRows(((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), true);
            this.Manager.Checkpoint("MS-OXCTABL_R837");
            this.Manager.Comment("reaching state \'S188\'");
            this.Manager.Comment("checking step \'return RopQueryRows/success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp101, "return of RopQueryRows, state S188");
            this.Manager.Comment("reaching state \'S204\'");
            int temp104 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker141)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker143)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker144)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker145)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker146)));
            if ((temp104 == 0)) {
                S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS220();
                goto label28;
            }
            if ((temp104 == 1)) {
                S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS220();
                goto label28;
            }
            if ((temp104 == 2)) {
                S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS220();
                goto label28;
            }
            if ((temp104 == 3)) {
                S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS220();
                goto label28;
            }
            if ((temp104 == 4)) {
                S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS220();
                goto label28;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker141)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker143)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker144)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker145)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker146)));
        label28:
;
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker141(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SORTTABLE,True,True," +
                    "False,True,BOOKMARK_CURRENT,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S204");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S204");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S204");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S204");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S204");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S204");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S204");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S204");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S204");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S204");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71," +
                        " MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
        }
        
        private void S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS220() {
            this.Manager.Comment("reaching state \'S220\'");
            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp102;
            this.Manager.Comment("executing step \'call RopSortTable(3,True,True,False,True,True,False,False)\'");
            temp102 = this.IMS_OXCTABLAdapterInstance.RopSortTable(3u, true, true, false, true, true, false, false);
            this.Manager.Checkpoint("MS-OXCTABL_R447");
            this.Manager.Comment("reaching state \'S236\'");
            this.Manager.Comment("checking step \'return RopSortTable/success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp102, "return of RopSortTable, state S236");
            this.Manager.Comment("reaching state \'S252\'");
            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp103;
            this.Manager.Comment("executing step \'call RopQueryRows(Advance,True)\'");
            temp103 = this.IMS_OXCTABLAdapterInstance.RopQueryRows(((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), true);
            this.Manager.Checkpoint("MS-OXCTABL_R837");
            this.Manager.Comment("reaching state \'S268\'");
            this.Manager.Comment("checking step \'return RopQueryRows/success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp103, "return of RopQueryRows, state S268");
            this.Manager.Comment("reaching state \'S284\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker142))) != -1)) {
                this.Manager.Comment("reaching state \'S300\'");
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker142)));
            }
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker142(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SORTTABLE,True,True," +
                    "True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S284");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S284");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S284");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S284");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S284");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S284");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S284");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S284");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S284");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S284");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, MS-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77, MS-OXCTABL_R119, MS-OXCTABL_R437, MS-OXCTABL_R438, MS-OXCTABL_R443");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
            this.Manager.Checkpoint("MS-OXCTABL_R119");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R438");
            this.Manager.Checkpoint("MS-OXCTABL_R443");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker143(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SORTTABLE,True,True," +
                    "False,True,BOOKMARK_CUSTOM,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S204");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S204");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S204");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S204");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S204");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S204");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S204");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S204");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_CUSTOM, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S204");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S204");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71," +
                        " MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker144(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SORTTABLE,True,True," +
                    "False,True,BOOKMARK_END,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S204");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S204");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S204");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S204");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S204");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S204");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S204");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S204");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_END, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S204");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S204");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R29, MS-OXCTABL_R725, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66" +
                        ", MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77" +
                        "");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R29");
            this.Manager.Checkpoint("MS-OXCTABL_R725");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker145(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SORTTABLE,True,True," +
                    "False,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S204");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S204");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S204");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S204");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S204");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S204");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S204");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S204");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S204");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S204");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66" +
                        ", MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77" +
                        "");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker146(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SORTTABLE,True,True," +
                    "False,True,BOOKMARK_BEGINNING,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S204");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S204");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S204");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S204");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S204");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S204");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S204");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S204");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(0)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S204");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S204");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71," +
                        " MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker147(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,SORTTABLE,True,Fal" +
                    "se,True,True,BOOKMARK_BEGINNING,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S92");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S92");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S92");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S92");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S92");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S92");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S92");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S92");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(0)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S92");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S92");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R27, MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77, MS-OXCTABL_R119, MS-OXCTABL_R437, MS-OXCTABL_R438, MS-OXCTABL_R443");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R27");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
            this.Manager.Checkpoint("MS-OXCTABL_R119");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R438");
            this.Manager.Checkpoint("MS-OXCTABL_R443");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker148(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,SORTTABLE,True,Fal" +
                    "se,True,True,BOOKMARK_END,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S92");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S92");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S92");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S92");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S92");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S92");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S92");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S92");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_END, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S92");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S92");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77, MS-OXCTABL_R119, MS-OXCTABL_R437, MS-OXCTABL_R438, MS-OXCTABL_R443");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
            this.Manager.Checkpoint("MS-OXCTABL_R119");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R438");
            this.Manager.Checkpoint("MS-OXCTABL_R443");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker149(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,SORTTABLE,True,Fal" +
                    "se,True,True,BOOKMARK_END,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S92");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S92");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S92");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S92");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S92");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S92");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S92");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S92");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_END, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S92");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S92");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77, MS-OXCTABL_R119, MS-OXCTABL_R437, MS-OXCTABL_R438, MS-OXCTABL_R443");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
            this.Manager.Checkpoint("MS-OXCTABL_R119");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R438");
            this.Manager.Checkpoint("MS-OXCTABL_R443");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker150(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,SORTTABLE,True,Fal" +
                    "se,True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S92");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S92");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S92");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S92");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S92");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S92");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S92");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S92");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S92");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S92");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77, MS-OXCTABL_R119, MS-OXCTABL_R437, MS-OXCTABL_R438, MS-OXCTABL_R443");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
            this.Manager.Checkpoint("MS-OXCTABL_R119");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R438");
            this.Manager.Checkpoint("MS-OXCTABL_R443");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker151(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,SORTTABLE,True,Fal" +
                    "se,True,True,BOOKMARK_CUSTOM,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S92");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S92");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S92");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S92");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S92");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S92");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S92");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S92");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_CUSTOM, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S92");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S92");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77, MS-OXCTABL_R119, MS-OXCTABL_R437, MS-OXCTABL_R438, MS-OXCTABL_R443");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
            this.Manager.Checkpoint("MS-OXCTABL_R119");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R438");
            this.Manager.Checkpoint("MS-OXCTABL_R443");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker152(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,SORTTABLE,True,Fal" +
                    "se,True,True,BOOKMARK_CUSTOM,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S92");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S92");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S92");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S92");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S92");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S92");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S92");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S92");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_CUSTOM, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S92");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S92");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77, MS-OXCTABL_R119, MS-OXCTABL_R437, MS-OXCTABL_R438, MS-OXCTABL_R443");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
            this.Manager.Checkpoint("MS-OXCTABL_R119");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R438");
            this.Manager.Checkpoint("MS-OXCTABL_R443");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker153(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,SORTTABLE,True,Fal" +
                    "se,True,True,BOOKMARK_CURRENT,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S92");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S92");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S92");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S92");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S92");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S92");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S92");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S92");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S92");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S92");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77, MS-OXCTABL_R119, MS-OXCTABL_R437, MS-OXCTABL_R438, MS-OXCTABL_R443");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
            this.Manager.Checkpoint("MS-OXCTABL_R119");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R438");
            this.Manager.Checkpoint("MS-OXCTABL_R443");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteCheckRequirementEnabledChecker22(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S79");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker154(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,SORTTABLE,True,Fal" +
                    "se,True,True,BOOKMARK_BEGINNING,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S93");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S93");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S93");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S93");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S93");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S93");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S93");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S93");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(0)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S93");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S93");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R27, MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77, MS-OXCTABL_R119, MS-OXCTABL_R437, MS-OXCTABL_R438");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R27");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
            this.Manager.Checkpoint("MS-OXCTABL_R119");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R438");
        }
        
        private void S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS109() {
            this.Manager.Comment("reaching state \'S109\'");
            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp106;
            this.Manager.Comment("executing step \'call RopSetColumns(2,False,False,False)\'");
            temp106 = this.IMS_OXCTABLAdapterInstance.RopSetColumns(2u, false, false, false);
            this.Manager.Checkpoint("MS-OXCTABL_R831");
            this.Manager.Checkpoint("MS-OXCTABL_R45");
            this.Manager.Comment("reaching state \'S125\'");
            this.Manager.Comment("checking step \'return RopSetColumns/success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp106, "return of RopSetColumns, state S125");
            this.Manager.Comment("reaching state \'S141\'");
            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp107;
            this.Manager.Comment("executing step \'call RopSortTable(2,False,True,False,True,False,True,False)\'");
            temp107 = this.IMS_OXCTABLAdapterInstance.RopSortTable(2u, false, true, false, true, false, true, false);
            this.Manager.Checkpoint("MS-OXCTABL_R447");
            this.Manager.Comment("reaching state \'S157\'");
            this.Manager.Comment("checking step \'return RopSortTable/ecNullObject\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues.ecNullObject, temp107, "return of RopSortTable, state S157");
            this.Manager.Comment("reaching state \'S173\'");
            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp108;
            this.Manager.Comment("executing step \'call RopQueryRows(Advance,True)\'");
            temp108 = this.IMS_OXCTABLAdapterInstance.RopQueryRows(((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), true);
            this.Manager.Checkpoint("MS-OXCTABL_R837");
            this.Manager.Comment("reaching state \'S189\'");
            this.Manager.Comment("checking step \'return RopQueryRows/success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp108, "return of RopQueryRows, state S189");
            this.Manager.Comment("reaching state \'S205\'");
            int temp111 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker155)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker157)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker158)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker159)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker160)));
            if ((temp111 == 0)) {
                S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS221();
                goto label30;
            }
            if ((temp111 == 1)) {
                S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS221();
                goto label30;
            }
            if ((temp111 == 2)) {
                S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS221();
                goto label30;
            }
            if ((temp111 == 3)) {
                S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS221();
                goto label30;
            }
            if ((temp111 == 4)) {
                S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS221();
                goto label30;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker155)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker157)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker158)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker159)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker160)));
        label30:
;
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker155(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SORTTABLE,True,True," +
                    "False,True,BOOKMARK_CURRENT,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S205");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S205");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S205");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S205");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S205");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S205");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S205");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S205");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S205");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S205");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71," +
                        " MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
        }
        
        private void S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS221() {
            this.Manager.Comment("reaching state \'S221\'");
            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp109;
            this.Manager.Comment("executing step \'call RopSortTable(3,True,True,False,True,True,False,False)\'");
            temp109 = this.IMS_OXCTABLAdapterInstance.RopSortTable(3u, true, true, false, true, true, false, false);
            this.Manager.Checkpoint("MS-OXCTABL_R447");
            this.Manager.Comment("reaching state \'S237\'");
            this.Manager.Comment("checking step \'return RopSortTable/success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp109, "return of RopSortTable, state S237");
            this.Manager.Comment("reaching state \'S253\'");
            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp110;
            this.Manager.Comment("executing step \'call RopQueryRows(Advance,True)\'");
            temp110 = this.IMS_OXCTABLAdapterInstance.RopQueryRows(((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), true);
            this.Manager.Checkpoint("MS-OXCTABL_R837");
            this.Manager.Comment("reaching state \'S269\'");
            this.Manager.Comment("checking step \'return RopQueryRows/success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp110, "return of RopQueryRows, state S269");
            this.Manager.Comment("reaching state \'S285\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker156))) != -1)) {
                this.Manager.Comment("reaching state \'S301\'");
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker156)));
            }
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker156(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SORTTABLE,True,True," +
                    "True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S285");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S285");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S285");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S285");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S285");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S285");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S285");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S285");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S285");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S285");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, MS-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77, MS-OXCTABL_R119, MS-OXCTABL_R437, MS-OXCTABL_R438");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
            this.Manager.Checkpoint("MS-OXCTABL_R119");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R438");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker157(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SORTTABLE,True,True," +
                    "False,True,BOOKMARK_CUSTOM,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S205");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S205");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S205");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S205");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S205");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S205");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S205");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S205");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_CUSTOM, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S205");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S205");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71," +
                        " MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker158(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SORTTABLE,True,True," +
                    "False,True,BOOKMARK_END,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S205");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S205");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S205");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S205");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S205");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S205");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S205");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S205");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_END, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S205");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S205");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R29, MS-OXCTABL_R725, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66" +
                        ", MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77" +
                        "");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R29");
            this.Manager.Checkpoint("MS-OXCTABL_R725");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker159(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SORTTABLE,True,True," +
                    "False,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S205");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S205");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S205");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S205");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S205");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S205");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S205");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S205");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S205");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S205");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66" +
                        ", MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77" +
                        "");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker160(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SORTTABLE,True,True," +
                    "False,True,BOOKMARK_BEGINNING,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S205");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S205");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S205");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S205");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S205");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S205");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S205");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S205");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(0)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S205");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S205");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71," +
                        " MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker161(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,SORTTABLE,True,Fal" +
                    "se,True,True,BOOKMARK_BEGINNING,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S93");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S93");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S93");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S93");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S93");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S93");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S93");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S93");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(0)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S93");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S93");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R27, MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77, MS-OXCTABL_R119, MS-OXCTABL_R437, MS-OXCTABL_R438");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R27");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
            this.Manager.Checkpoint("MS-OXCTABL_R119");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R438");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker162(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,SORTTABLE,True,Fal" +
                    "se,True,True,BOOKMARK_END,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S93");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S93");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S93");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S93");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S93");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S93");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S93");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S93");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_END, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S93");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S93");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77, MS-OXCTABL_R119, MS-OXCTABL_R437, MS-OXCTABL_R438");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
            this.Manager.Checkpoint("MS-OXCTABL_R119");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R438");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker163(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,SORTTABLE,True,Fal" +
                    "se,True,True,BOOKMARK_END,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S93");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S93");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S93");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S93");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S93");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S93");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S93");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S93");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_END, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S93");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S93");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77, MS-OXCTABL_R119, MS-OXCTABL_R437, MS-OXCTABL_R438");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
            this.Manager.Checkpoint("MS-OXCTABL_R119");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R438");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker164(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,SORTTABLE,True,Fal" +
                    "se,True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S93");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S93");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S93");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S93");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S93");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S93");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S93");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S93");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S93");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S93");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77, MS-OXCTABL_R119, MS-OXCTABL_R437, MS-OXCTABL_R438");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
            this.Manager.Checkpoint("MS-OXCTABL_R119");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R438");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker165(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,SORTTABLE,True,Fal" +
                    "se,True,True,BOOKMARK_CUSTOM,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S93");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S93");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S93");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S93");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S93");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S93");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S93");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S93");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_CUSTOM, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S93");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S93");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77, MS-OXCTABL_R119, MS-OXCTABL_R437, MS-OXCTABL_R438");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
            this.Manager.Checkpoint("MS-OXCTABL_R119");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R438");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker166(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,SORTTABLE,True,Fal" +
                    "se,True,True,BOOKMARK_CUSTOM,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S93");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S93");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S93");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S93");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S93");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S93");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S93");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S93");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_CUSTOM, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S93");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S93");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77, MS-OXCTABL_R119, MS-OXCTABL_R437, MS-OXCTABL_R438");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
            this.Manager.Checkpoint("MS-OXCTABL_R119");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R438");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker167(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,SORTTABLE,True,Fal" +
                    "se,True,True,BOOKMARK_CURRENT,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S93");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S93");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S93");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S93");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S93");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S93");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S93");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S93");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S93");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S93");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77, MS-OXCTABL_R119, MS-OXCTABL_R437, MS-OXCTABL_R438");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
            this.Manager.Checkpoint("MS-OXCTABL_R119");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R438");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteCheckRequirementEnabledChecker23(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S41");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteCheckRequirementEnabledChecker24(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S49");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteCheckRequirementEnabledChecker25(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S80");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker168(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,SORTTABLE,True,Fal" +
                    "se,True,True,BOOKMARK_BEGINNING,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S94");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S94");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S94");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S94");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S94");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S94");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S94");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S94");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(0)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S94");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S94");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R27, MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77, MS-OXCTABL_R119, MS-OXCTABL_R437, MS-OXCTABL_R438");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R27");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
            this.Manager.Checkpoint("MS-OXCTABL_R119");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R438");
        }
        
        private void S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS110() {
            this.Manager.Comment("reaching state \'S110\'");
            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp118;
            this.Manager.Comment("executing step \'call RopSetColumns(2,False,False,False)\'");
            temp118 = this.IMS_OXCTABLAdapterInstance.RopSetColumns(2u, false, false, false);
            this.Manager.Checkpoint("MS-OXCTABL_R831");
            this.Manager.Checkpoint("MS-OXCTABL_R45");
            this.Manager.Comment("reaching state \'S126\'");
            this.Manager.Comment("checking step \'return RopSetColumns/success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp118, "return of RopSetColumns, state S126");
            this.Manager.Comment("reaching state \'S142\'");
            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp119;
            this.Manager.Comment("executing step \'call RopSortTable(2,False,True,False,True,False,True,False)\'");
            temp119 = this.IMS_OXCTABLAdapterInstance.RopSortTable(2u, false, true, false, true, false, true, false);
            this.Manager.Checkpoint("MS-OXCTABL_R447");
            this.Manager.Comment("reaching state \'S158\'");
            this.Manager.Comment("checking step \'return RopSortTable/ecNullObject\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues.ecNullObject, temp119, "return of RopSortTable, state S158");
            this.Manager.Comment("reaching state \'S174\'");
            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp120;
            this.Manager.Comment("executing step \'call RopQueryRows(Advance,True)\'");
            temp120 = this.IMS_OXCTABLAdapterInstance.RopQueryRows(((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), true);
            this.Manager.Checkpoint("MS-OXCTABL_R837");
            this.Manager.Comment("reaching state \'S190\'");
            this.Manager.Comment("checking step \'return RopQueryRows/success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp120, "return of RopQueryRows, state S190");
            this.Manager.Comment("reaching state \'S206\'");
            int temp123 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker169)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker171)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker172)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker173)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker174)));
            if ((temp123 == 0)) {
                S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS222();
                goto label34;
            }
            if ((temp123 == 1)) {
                S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS222();
                goto label34;
            }
            if ((temp123 == 2)) {
                S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS222();
                goto label34;
            }
            if ((temp123 == 3)) {
                S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS222();
                goto label34;
            }
            if ((temp123 == 4)) {
                S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS222();
                goto label34;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker169)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker171)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker172)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker173)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker174)));
        label34:
;
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker169(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SORTTABLE,True,True," +
                    "False,True,BOOKMARK_CURRENT,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S206");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S206");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S206");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S206");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S206");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S206");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S206");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S206");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S206");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S206");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71," +
                        " MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
        }
        
        private void S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS222() {
            this.Manager.Comment("reaching state \'S222\'");
            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp121;
            this.Manager.Comment("executing step \'call RopSortTable(3,True,True,False,True,True,False,False)\'");
            temp121 = this.IMS_OXCTABLAdapterInstance.RopSortTable(3u, true, true, false, true, true, false, false);
            this.Manager.Checkpoint("MS-OXCTABL_R447");
            this.Manager.Comment("reaching state \'S238\'");
            this.Manager.Comment("checking step \'return RopSortTable/success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp121, "return of RopSortTable, state S238");
            this.Manager.Comment("reaching state \'S254\'");
            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp122;
            this.Manager.Comment("executing step \'call RopQueryRows(Advance,True)\'");
            temp122 = this.IMS_OXCTABLAdapterInstance.RopQueryRows(((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), true);
            this.Manager.Checkpoint("MS-OXCTABL_R837");
            this.Manager.Comment("reaching state \'S270\'");
            this.Manager.Comment("checking step \'return RopQueryRows/success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp122, "return of RopQueryRows, state S270");
            this.Manager.Comment("reaching state \'S286\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker170))) != -1)) {
                this.Manager.Comment("reaching state \'S302\'");
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker170)));
            }
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker170(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SORTTABLE,True,True," +
                    "True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S286");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S286");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S286");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S286");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S286");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S286");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S286");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S286");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S286");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S286");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, MS-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77, MS-OXCTABL_R119, MS-OXCTABL_R437, MS-OXCTABL_R438");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
            this.Manager.Checkpoint("MS-OXCTABL_R119");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R438");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker171(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SORTTABLE,True,True," +
                    "False,True,BOOKMARK_CUSTOM,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S206");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S206");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S206");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S206");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S206");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S206");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S206");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S206");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_CUSTOM, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S206");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S206");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71," +
                        " MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker172(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SORTTABLE,True,True," +
                    "False,True,BOOKMARK_END,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S206");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S206");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S206");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S206");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S206");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S206");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S206");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S206");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_END, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S206");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S206");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R29, MS-OXCTABL_R725, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66" +
                        ", MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77" +
                        "");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R29");
            this.Manager.Checkpoint("MS-OXCTABL_R725");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker173(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SORTTABLE,True,True," +
                    "False,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S206");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S206");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S206");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S206");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S206");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S206");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S206");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S206");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S206");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S206");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66" +
                        ", MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77" +
                        "");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker174(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SORTTABLE,True,True," +
                    "False,True,BOOKMARK_BEGINNING,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S206");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S206");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S206");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S206");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S206");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S206");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S206");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S206");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(0)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S206");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S206");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71," +
                        " MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker175(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,SORTTABLE,True,Fal" +
                    "se,True,True,BOOKMARK_BEGINNING,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S94");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S94");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S94");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S94");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S94");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S94");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S94");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S94");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(0)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S94");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S94");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R27, MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77, MS-OXCTABL_R119, MS-OXCTABL_R437, MS-OXCTABL_R438");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R27");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
            this.Manager.Checkpoint("MS-OXCTABL_R119");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R438");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker176(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,SORTTABLE,True,Fal" +
                    "se,True,True,BOOKMARK_END,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S94");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S94");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S94");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S94");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S94");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S94");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S94");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S94");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_END, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S94");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S94");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77, MS-OXCTABL_R119, MS-OXCTABL_R437, MS-OXCTABL_R438");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
            this.Manager.Checkpoint("MS-OXCTABL_R119");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R438");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker177(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,SORTTABLE,True,Fal" +
                    "se,True,True,BOOKMARK_END,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S94");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S94");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S94");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S94");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S94");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S94");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S94");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S94");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_END, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S94");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S94");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77, MS-OXCTABL_R119, MS-OXCTABL_R437, MS-OXCTABL_R438");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
            this.Manager.Checkpoint("MS-OXCTABL_R119");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R438");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker178(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,SORTTABLE,True,Fal" +
                    "se,True,True,BOOKMARK_CUSTOM,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S94");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S94");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S94");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S94");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S94");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S94");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S94");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S94");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_CUSTOM, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S94");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S94");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77, MS-OXCTABL_R119, MS-OXCTABL_R437, MS-OXCTABL_R438");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
            this.Manager.Checkpoint("MS-OXCTABL_R119");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R438");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker179(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,SORTTABLE,True,Fal" +
                    "se,True,True,BOOKMARK_CUSTOM,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S94");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S94");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S94");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S94");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S94");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S94");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S94");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S94");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_CUSTOM, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S94");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S94");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77, MS-OXCTABL_R119, MS-OXCTABL_R437, MS-OXCTABL_R438");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
            this.Manager.Checkpoint("MS-OXCTABL_R119");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R438");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker180(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,SORTTABLE,True,Fal" +
                    "se,True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S94");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S94");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S94");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S94");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S94");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S94");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S94");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S94");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S94");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S94");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77, MS-OXCTABL_R119, MS-OXCTABL_R437, MS-OXCTABL_R438");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
            this.Manager.Checkpoint("MS-OXCTABL_R119");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R438");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker181(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,SORTTABLE,True,Fal" +
                    "se,True,True,BOOKMARK_CURRENT,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S94");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S94");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S94");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S94");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S94");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S94");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S94");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S94");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S94");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S94");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77, MS-OXCTABL_R119, MS-OXCTABL_R437, MS-OXCTABL_R438");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
            this.Manager.Checkpoint("MS-OXCTABL_R119");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R438");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteCheckRequirementEnabledChecker26(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S80");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker182(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,SORTTABLE,True,Fal" +
                    "se,True,True,BOOKMARK_END,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S95");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S95");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S95");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S95");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S95");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S95");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S95");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S95");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_END, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S95");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S95");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77, MS-OXCTABL_R119, MS-OXCTABL_R437, MS-OXCTABL_R438, MS-OXCTABL_R443");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
            this.Manager.Checkpoint("MS-OXCTABL_R119");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R438");
            this.Manager.Checkpoint("MS-OXCTABL_R443");
        }
        
        private void S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS111() {
            this.Manager.Comment("reaching state \'S111\'");
            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp125;
            this.Manager.Comment("executing step \'call RopSetColumns(2,False,False,False)\'");
            temp125 = this.IMS_OXCTABLAdapterInstance.RopSetColumns(2u, false, false, false);
            this.Manager.Checkpoint("MS-OXCTABL_R831");
            this.Manager.Checkpoint("MS-OXCTABL_R45");
            this.Manager.Comment("reaching state \'S127\'");
            this.Manager.Comment("checking step \'return RopSetColumns/success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp125, "return of RopSetColumns, state S127");
            this.Manager.Comment("reaching state \'S143\'");
            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp126;
            this.Manager.Comment("executing step \'call RopSortTable(2,False,True,False,True,False,True,False)\'");
            temp126 = this.IMS_OXCTABLAdapterInstance.RopSortTable(2u, false, true, false, true, false, true, false);
            this.Manager.Checkpoint("MS-OXCTABL_R447");
            this.Manager.Comment("reaching state \'S159\'");
            this.Manager.Comment("checking step \'return RopSortTable/ecNullObject\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues.ecNullObject, temp126, "return of RopSortTable, state S159");
            this.Manager.Comment("reaching state \'S175\'");
            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp127;
            this.Manager.Comment("executing step \'call RopQueryRows(Advance,True)\'");
            temp127 = this.IMS_OXCTABLAdapterInstance.RopQueryRows(((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), true);
            this.Manager.Checkpoint("MS-OXCTABL_R837");
            this.Manager.Comment("reaching state \'S191\'");
            this.Manager.Comment("checking step \'return RopQueryRows/success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp127, "return of RopQueryRows, state S191");
            this.Manager.Comment("reaching state \'S207\'");
            int temp130 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker183)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker185)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker186)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker187)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker188)));
            if ((temp130 == 0)) {
                S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS223();
                goto label36;
            }
            if ((temp130 == 1)) {
                S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS223();
                goto label36;
            }
            if ((temp130 == 2)) {
                S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS223();
                goto label36;
            }
            if ((temp130 == 3)) {
                S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS223();
                goto label36;
            }
            if ((temp130 == 4)) {
                S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS223();
                goto label36;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker183)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker185)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker186)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker187)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker188)));
        label36:
;
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker183(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SORTTABLE,True,True," +
                    "False,True,BOOKMARK_CURRENT,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S207");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S207");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S207");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S207");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S207");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S207");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S207");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S207");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S207");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S207");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71," +
                        " MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
        }
        
        private void S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS223() {
            this.Manager.Comment("reaching state \'S223\'");
            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp128;
            this.Manager.Comment("executing step \'call RopSortTable(3,True,True,False,True,True,False,False)\'");
            temp128 = this.IMS_OXCTABLAdapterInstance.RopSortTable(3u, true, true, false, true, true, false, false);
            this.Manager.Checkpoint("MS-OXCTABL_R447");
            this.Manager.Comment("reaching state \'S239\'");
            this.Manager.Comment("checking step \'return RopSortTable/success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp128, "return of RopSortTable, state S239");
            this.Manager.Comment("reaching state \'S255\'");
            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp129;
            this.Manager.Comment("executing step \'call RopQueryRows(Advance,True)\'");
            temp129 = this.IMS_OXCTABLAdapterInstance.RopQueryRows(((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), true);
            this.Manager.Checkpoint("MS-OXCTABL_R837");
            this.Manager.Comment("reaching state \'S271\'");
            this.Manager.Comment("checking step \'return RopQueryRows/success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp129, "return of RopQueryRows, state S271");
            this.Manager.Comment("reaching state \'S287\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker184))) != -1)) {
                this.Manager.Comment("reaching state \'S303\'");
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker184)));
            }
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker184(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SORTTABLE,True,True," +
                    "True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S287");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S287");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S287");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S287");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S287");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S287");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S287");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S287");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S287");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S287");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, MS-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77, MS-OXCTABL_R119, MS-OXCTABL_R437, MS-OXCTABL_R438, MS-OXCTABL_R443");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
            this.Manager.Checkpoint("MS-OXCTABL_R119");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R438");
            this.Manager.Checkpoint("MS-OXCTABL_R443");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker185(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SORTTABLE,True,True," +
                    "False,True,BOOKMARK_CUSTOM,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S207");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S207");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S207");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S207");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S207");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S207");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S207");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S207");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_CUSTOM, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S207");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S207");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71," +
                        " MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker186(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SORTTABLE,True,True," +
                    "False,True,BOOKMARK_END,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S207");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S207");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S207");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S207");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S207");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S207");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S207");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S207");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_END, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S207");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S207");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R29, MS-OXCTABL_R725, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66" +
                        ", MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77" +
                        "");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R29");
            this.Manager.Checkpoint("MS-OXCTABL_R725");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker187(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SORTTABLE,True,True," +
                    "False,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S207");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S207");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S207");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S207");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S207");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S207");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S207");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S207");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S207");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S207");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66" +
                        ", MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77" +
                        "");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker188(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SORTTABLE,True,True," +
                    "False,True,BOOKMARK_BEGINNING,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S207");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S207");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S207");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S207");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S207");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S207");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S207");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S207");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(0)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S207");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S207");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71," +
                        " MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker189(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,SORTTABLE,True,Fal" +
                    "se,True,True,BOOKMARK_BEGINNING,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S95");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S95");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S95");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S95");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S95");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S95");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S95");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S95");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(0)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S95");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S95");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R27, MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77, MS-OXCTABL_R119, MS-OXCTABL_R437, MS-OXCTABL_R438, MS-OXCTABL_R443");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R27");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
            this.Manager.Checkpoint("MS-OXCTABL_R119");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R438");
            this.Manager.Checkpoint("MS-OXCTABL_R443");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker190(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,SORTTABLE,True,Fal" +
                    "se,True,True,BOOKMARK_END,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S95");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S95");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S95");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S95");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S95");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S95");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S95");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S95");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_END, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S95");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S95");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77, MS-OXCTABL_R119, MS-OXCTABL_R437, MS-OXCTABL_R438, MS-OXCTABL_R443");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
            this.Manager.Checkpoint("MS-OXCTABL_R119");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R438");
            this.Manager.Checkpoint("MS-OXCTABL_R443");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker191(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,SORTTABLE,True,Fal" +
                    "se,True,True,BOOKMARK_BEGINNING,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S95");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S95");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S95");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S95");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S95");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S95");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S95");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S95");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(0)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S95");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S95");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R27, MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77, MS-OXCTABL_R119, MS-OXCTABL_R437, MS-OXCTABL_R438, MS-OXCTABL_R443");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R27");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
            this.Manager.Checkpoint("MS-OXCTABL_R119");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R438");
            this.Manager.Checkpoint("MS-OXCTABL_R443");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker192(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,SORTTABLE,True,Fal" +
                    "se,True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S95");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S95");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S95");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S95");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S95");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S95");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S95");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S95");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S95");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S95");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77, MS-OXCTABL_R119, MS-OXCTABL_R437, MS-OXCTABL_R438, MS-OXCTABL_R443");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
            this.Manager.Checkpoint("MS-OXCTABL_R119");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R438");
            this.Manager.Checkpoint("MS-OXCTABL_R443");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker193(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,SORTTABLE,True,Fal" +
                    "se,True,True,BOOKMARK_CUSTOM,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S95");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S95");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S95");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S95");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S95");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S95");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S95");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S95");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_CUSTOM, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S95");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S95");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77, MS-OXCTABL_R119, MS-OXCTABL_R437, MS-OXCTABL_R438, MS-OXCTABL_R443");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
            this.Manager.Checkpoint("MS-OXCTABL_R119");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R438");
            this.Manager.Checkpoint("MS-OXCTABL_R443");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker194(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,SORTTABLE,True,Fal" +
                    "se,True,True,BOOKMARK_CUSTOM,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S95");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S95");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S95");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S95");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S95");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S95");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S95");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S95");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_CUSTOM, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S95");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S95");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77, MS-OXCTABL_R119, MS-OXCTABL_R437, MS-OXCTABL_R438, MS-OXCTABL_R443");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
            this.Manager.Checkpoint("MS-OXCTABL_R119");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R438");
            this.Manager.Checkpoint("MS-OXCTABL_R443");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker195(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,SORTTABLE,True,Fal" +
                    "se,True,True,BOOKMARK_CURRENT,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S95");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S95");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S95");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S95");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S95");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S95");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S95");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S95");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S95");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S95");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77, MS-OXCTABL_R119, MS-OXCTABL_R437, MS-OXCTABL_R438, MS-OXCTABL_R443");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
            this.Manager.Checkpoint("MS-OXCTABL_R119");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R438");
            this.Manager.Checkpoint("MS-OXCTABL_R443");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteCheckRequirementEnabledChecker27(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S49");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteCheckRequirementEnabledChecker28(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S81");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker196(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,SORTTABLE,True,Fal" +
                    "se,True,True,BOOKMARK_END,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S96");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S96");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S96");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S96");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S96");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S96");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S96");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S96");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_END, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S96");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S96");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77, MS-OXCTABL_R119, MS-OXCTABL_R437, MS-OXCTABL_R438, MS-OXCTABL_R443");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
            this.Manager.Checkpoint("MS-OXCTABL_R119");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R438");
            this.Manager.Checkpoint("MS-OXCTABL_R443");
        }
        
        private void S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS112() {
            this.Manager.Comment("reaching state \'S112\'");
            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp135;
            this.Manager.Comment("executing step \'call RopSetColumns(2,False,False,False)\'");
            temp135 = this.IMS_OXCTABLAdapterInstance.RopSetColumns(2u, false, false, false);
            this.Manager.Checkpoint("MS-OXCTABL_R831");
            this.Manager.Checkpoint("MS-OXCTABL_R45");
            this.Manager.Comment("reaching state \'S128\'");
            this.Manager.Comment("checking step \'return RopSetColumns/success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp135, "return of RopSetColumns, state S128");
            this.Manager.Comment("reaching state \'S144\'");
            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp136;
            this.Manager.Comment("executing step \'call RopSortTable(2,False,True,False,True,False,True,False)\'");
            temp136 = this.IMS_OXCTABLAdapterInstance.RopSortTable(2u, false, true, false, true, false, true, false);
            this.Manager.Checkpoint("MS-OXCTABL_R447");
            this.Manager.Comment("reaching state \'S160\'");
            this.Manager.Comment("checking step \'return RopSortTable/ecNullObject\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues.ecNullObject, temp136, "return of RopSortTable, state S160");
            this.Manager.Comment("reaching state \'S176\'");
            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp137;
            this.Manager.Comment("executing step \'call RopQueryRows(Advance,True)\'");
            temp137 = this.IMS_OXCTABLAdapterInstance.RopQueryRows(((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), true);
            this.Manager.Checkpoint("MS-OXCTABL_R837");
            this.Manager.Comment("reaching state \'S192\'");
            this.Manager.Comment("checking step \'return RopQueryRows/success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp137, "return of RopQueryRows, state S192");
            this.Manager.Comment("reaching state \'S208\'");
            int temp140 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker197)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker199)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker200)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker201)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker202)));
            if ((temp140 == 0)) {
                S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS224();
                goto label39;
            }
            if ((temp140 == 1)) {
                S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS224();
                goto label39;
            }
            if ((temp140 == 2)) {
                S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS224();
                goto label39;
            }
            if ((temp140 == 3)) {
                S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS224();
                goto label39;
            }
            if ((temp140 == 4)) {
                S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS224();
                goto label39;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker197)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker199)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker200)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker201)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker202)));
        label39:
;
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker197(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SORTTABLE,True,True," +
                    "False,True,BOOKMARK_CURRENT,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S208");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S208");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S208");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S208");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S208");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S208");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S208");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S208");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S208");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S208");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71," +
                        " MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
        }
        
        private void S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS224() {
            this.Manager.Comment("reaching state \'S224\'");
            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp138;
            this.Manager.Comment("executing step \'call RopSortTable(3,True,True,False,True,True,False,False)\'");
            temp138 = this.IMS_OXCTABLAdapterInstance.RopSortTable(3u, true, true, false, true, true, false, false);
            this.Manager.Checkpoint("MS-OXCTABL_R447");
            this.Manager.Comment("reaching state \'S240\'");
            this.Manager.Comment("checking step \'return RopSortTable/success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp138, "return of RopSortTable, state S240");
            this.Manager.Comment("reaching state \'S256\'");
            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp139;
            this.Manager.Comment("executing step \'call RopQueryRows(Advance,True)\'");
            temp139 = this.IMS_OXCTABLAdapterInstance.RopQueryRows(((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), true);
            this.Manager.Checkpoint("MS-OXCTABL_R837");
            this.Manager.Comment("reaching state \'S272\'");
            this.Manager.Comment("checking step \'return RopQueryRows/success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp139, "return of RopQueryRows, state S272");
            this.Manager.Comment("reaching state \'S288\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker198))) != -1)) {
                this.Manager.Comment("reaching state \'S304\'");
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker198)));
            }
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker198(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SORTTABLE,True,True," +
                    "True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S288");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S288");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S288");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S288");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S288");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S288");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S288");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S288");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S288");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S288");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, MS-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77, MS-OXCTABL_R119, MS-OXCTABL_R437, MS-OXCTABL_R438, MS-OXCTABL_R443");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
            this.Manager.Checkpoint("MS-OXCTABL_R119");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R438");
            this.Manager.Checkpoint("MS-OXCTABL_R443");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker199(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SORTTABLE,True,True," +
                    "False,True,BOOKMARK_CUSTOM,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S208");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S208");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S208");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S208");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S208");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S208");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S208");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S208");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_CUSTOM, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S208");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S208");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71," +
                        " MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker200(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SORTTABLE,True,True," +
                    "False,True,BOOKMARK_END,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S208");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S208");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S208");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S208");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S208");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S208");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S208");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S208");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_END, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S208");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S208");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R29, MS-OXCTABL_R725, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66" +
                        ", MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77" +
                        "");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R29");
            this.Manager.Checkpoint("MS-OXCTABL_R725");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker201(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SORTTABLE,True,True," +
                    "False,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S208");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S208");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S208");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S208");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S208");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S208");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S208");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S208");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S208");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S208");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66" +
                        ", MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77" +
                        "");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker202(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SORTTABLE,True,True," +
                    "False,True,BOOKMARK_BEGINNING,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S208");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S208");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S208");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S208");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S208");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S208");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S208");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S208");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(0)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S208");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S208");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71," +
                        " MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker203(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,SORTTABLE,True,Fal" +
                    "se,True,True,BOOKMARK_BEGINNING,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S96");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S96");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S96");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S96");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S96");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S96");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S96");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S96");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(0)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S96");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S96");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R27, MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77, MS-OXCTABL_R119, MS-OXCTABL_R437, MS-OXCTABL_R438, MS-OXCTABL_R443");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R27");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
            this.Manager.Checkpoint("MS-OXCTABL_R119");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R438");
            this.Manager.Checkpoint("MS-OXCTABL_R443");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker204(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,SORTTABLE,True,Fal" +
                    "se,True,True,BOOKMARK_END,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S96");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S96");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S96");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S96");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S96");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S96");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S96");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S96");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_END, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S96");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S96");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77, MS-OXCTABL_R119, MS-OXCTABL_R437, MS-OXCTABL_R438, MS-OXCTABL_R443");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
            this.Manager.Checkpoint("MS-OXCTABL_R119");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R438");
            this.Manager.Checkpoint("MS-OXCTABL_R443");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker205(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,SORTTABLE,True,Fal" +
                    "se,True,True,BOOKMARK_BEGINNING,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S96");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S96");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S96");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S96");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S96");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S96");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S96");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S96");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(0)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S96");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S96");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R27, MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77, MS-OXCTABL_R119, MS-OXCTABL_R437, MS-OXCTABL_R438, MS-OXCTABL_R443");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R27");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
            this.Manager.Checkpoint("MS-OXCTABL_R119");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R438");
            this.Manager.Checkpoint("MS-OXCTABL_R443");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker206(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,SORTTABLE,True,Fal" +
                    "se,True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S96");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S96");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S96");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S96");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S96");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S96");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S96");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S96");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S96");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S96");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77, MS-OXCTABL_R119, MS-OXCTABL_R437, MS-OXCTABL_R438, MS-OXCTABL_R443");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
            this.Manager.Checkpoint("MS-OXCTABL_R119");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R438");
            this.Manager.Checkpoint("MS-OXCTABL_R443");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker207(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,SORTTABLE,True,Fal" +
                    "se,True,True,BOOKMARK_CUSTOM,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S96");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S96");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S96");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S96");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S96");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S96");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S96");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S96");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_CUSTOM, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S96");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S96");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77, MS-OXCTABL_R119, MS-OXCTABL_R437, MS-OXCTABL_R438, MS-OXCTABL_R443");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
            this.Manager.Checkpoint("MS-OXCTABL_R119");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R438");
            this.Manager.Checkpoint("MS-OXCTABL_R443");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker208(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,SORTTABLE,True,Fal" +
                    "se,True,True,BOOKMARK_CUSTOM,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S96");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S96");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S96");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S96");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S96");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S96");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S96");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S96");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_CUSTOM, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S96");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S96");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77, MS-OXCTABL_R119, MS-OXCTABL_R437, MS-OXCTABL_R438, MS-OXCTABL_R443");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
            this.Manager.Checkpoint("MS-OXCTABL_R119");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R438");
            this.Manager.Checkpoint("MS-OXCTABL_R443");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker209(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,SORTTABLE,True,Fal" +
                    "se,True,True,BOOKMARK_CURRENT,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S96");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S96");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S96");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S96");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S96");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S96");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S96");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S96");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S96");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S96");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77, MS-OXCTABL_R119, MS-OXCTABL_R437, MS-OXCTABL_R438, MS-OXCTABL_R443");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
            this.Manager.Checkpoint("MS-OXCTABL_R119");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R438");
            this.Manager.Checkpoint("MS-OXCTABL_R443");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteCheckRequirementEnabledChecker29(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S81");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker210(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,SORTTABLE,True,Fal" +
                    "se,True,True,BOOKMARK_BEGINNING,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S97");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S97");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S97");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S97");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S97");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S97");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S97");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S97");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(0)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S97");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S97");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R27, MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77, MS-OXCTABL_R119, MS-OXCTABL_R437, MS-OXCTABL_R438");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R27");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
            this.Manager.Checkpoint("MS-OXCTABL_R119");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R438");
        }
        
        private void S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS113() {
            this.Manager.Comment("reaching state \'S113\'");
            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp142;
            this.Manager.Comment("executing step \'call RopSetColumns(2,False,False,False)\'");
            temp142 = this.IMS_OXCTABLAdapterInstance.RopSetColumns(2u, false, false, false);
            this.Manager.Checkpoint("MS-OXCTABL_R831");
            this.Manager.Checkpoint("MS-OXCTABL_R45");
            this.Manager.Comment("reaching state \'S129\'");
            this.Manager.Comment("checking step \'return RopSetColumns/success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp142, "return of RopSetColumns, state S129");
            this.Manager.Comment("reaching state \'S145\'");
            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp143;
            this.Manager.Comment("executing step \'call RopSortTable(2,False,True,False,True,False,True,False)\'");
            temp143 = this.IMS_OXCTABLAdapterInstance.RopSortTable(2u, false, true, false, true, false, true, false);
            this.Manager.Checkpoint("MS-OXCTABL_R447");
            this.Manager.Comment("reaching state \'S161\'");
            this.Manager.Comment("checking step \'return RopSortTable/ecNullObject\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues.ecNullObject, temp143, "return of RopSortTable, state S161");
            this.Manager.Comment("reaching state \'S177\'");
            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp144;
            this.Manager.Comment("executing step \'call RopQueryRows(Advance,True)\'");
            temp144 = this.IMS_OXCTABLAdapterInstance.RopQueryRows(((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), true);
            this.Manager.Checkpoint("MS-OXCTABL_R837");
            this.Manager.Comment("reaching state \'S193\'");
            this.Manager.Comment("checking step \'return RopQueryRows/success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp144, "return of RopQueryRows, state S193");
            this.Manager.Comment("reaching state \'S209\'");
            int temp147 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker211)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker213)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker214)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker215)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker216)));
            if ((temp147 == 0)) {
                S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS225();
                goto label41;
            }
            if ((temp147 == 1)) {
                S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS225();
                goto label41;
            }
            if ((temp147 == 2)) {
                S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS225();
                goto label41;
            }
            if ((temp147 == 3)) {
                S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS225();
                goto label41;
            }
            if ((temp147 == 4)) {
                S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS225();
                goto label41;
            }
            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker211)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker213)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker214)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker215)), new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker216)));
        label41:
;
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker211(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SORTTABLE,True,True," +
                    "False,True,BOOKMARK_CURRENT,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S209");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S209");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S209");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S209");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S209");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S209");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S209");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S209");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S209");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S209");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71," +
                        " MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
        }
        
        private void S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS225() {
            this.Manager.Comment("reaching state \'S225\'");
            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp145;
            this.Manager.Comment("executing step \'call RopSortTable(3,True,True,False,True,True,False,False)\'");
            temp145 = this.IMS_OXCTABLAdapterInstance.RopSortTable(3u, true, true, false, true, true, false, false);
            this.Manager.Checkpoint("MS-OXCTABL_R447");
            this.Manager.Comment("reaching state \'S241\'");
            this.Manager.Comment("checking step \'return RopSortTable/success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp145, "return of RopSortTable, state S241");
            this.Manager.Comment("reaching state \'S257\'");
            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp146;
            this.Manager.Comment("executing step \'call RopQueryRows(Advance,True)\'");
            temp146 = this.IMS_OXCTABLAdapterInstance.RopQueryRows(((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), true);
            this.Manager.Checkpoint("MS-OXCTABL_R837");
            this.Manager.Comment("reaching state \'S273\'");
            this.Manager.Comment("checking step \'return RopQueryRows/success\'");
            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp146, "return of RopQueryRows, state S273");
            this.Manager.Comment("reaching state \'S289\'");
            if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker212))) != -1)) {
                this.Manager.Comment("reaching state \'S305\'");
            }
            else {
                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker212)));
            }
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker212(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SORTTABLE,True,True," +
                    "True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S289");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S289");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S289");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S289");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S289");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S289");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S289");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S289");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S289");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S289");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, MS-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77, MS-OXCTABL_R119, MS-OXCTABL_R437, MS-OXCTABL_R438");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
            this.Manager.Checkpoint("MS-OXCTABL_R119");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R438");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker213(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SORTTABLE,True,True," +
                    "False,True,BOOKMARK_CUSTOM,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S209");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S209");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S209");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S209");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S209");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S209");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S209");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S209");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_CUSTOM, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S209");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S209");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71," +
                        " MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker214(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SORTTABLE,True,True," +
                    "False,True,BOOKMARK_END,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S209");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S209");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S209");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S209");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S209");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S209");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S209");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S209");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_END, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S209");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S209");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R29, MS-OXCTABL_R725, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66" +
                        ", MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77" +
                        "");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R29");
            this.Manager.Checkpoint("MS-OXCTABL_R725");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker215(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SORTTABLE,True,True," +
                    "False,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S209");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S209");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S209");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S209");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S209");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S209");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S209");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S209");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S209");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S209");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66" +
                        ", MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77" +
                        "");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker216(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SORTTABLE,True,True," +
                    "False,True,BOOKMARK_BEGINNING,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S209");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S209");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S209");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S209");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S209");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S209");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S209");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S209");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(0)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S209");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S209");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71," +
                        " MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker217(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,SORTTABLE,True,Fal" +
                    "se,True,True,BOOKMARK_BEGINNING,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S97");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S97");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S97");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S97");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S97");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S97");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S97");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S97");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(0)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S97");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S97");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R27, MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77, MS-OXCTABL_R119, MS-OXCTABL_R437, MS-OXCTABL_R438");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R27");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
            this.Manager.Checkpoint("MS-OXCTABL_R119");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R438");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker218(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,SORTTABLE,True,Fal" +
                    "se,True,True,BOOKMARK_END,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S97");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S97");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S97");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S97");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S97");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S97");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S97");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S97");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_END, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S97");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S97");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77, MS-OXCTABL_R119, MS-OXCTABL_R437, MS-OXCTABL_R438");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
            this.Manager.Checkpoint("MS-OXCTABL_R119");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R438");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker219(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,SORTTABLE,True,Fal" +
                    "se,True,True,BOOKMARK_END,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S97");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S97");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S97");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S97");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S97");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S97");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S97");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S97");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_END, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S97");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S97");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77, MS-OXCTABL_R119, MS-OXCTABL_R437, MS-OXCTABL_R438");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
            this.Manager.Checkpoint("MS-OXCTABL_R119");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R438");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker220(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,SORTTABLE,True,Fal" +
                    "se,True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S97");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S97");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S97");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S97");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S97");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S97");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S97");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S97");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S97");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S97");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77, MS-OXCTABL_R119, MS-OXCTABL_R437, MS-OXCTABL_R438");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
            this.Manager.Checkpoint("MS-OXCTABL_R119");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R438");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker221(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,SORTTABLE,True,Fal" +
                    "se,True,True,BOOKMARK_CUSTOM,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S97");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S97");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S97");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S97");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S97");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S97");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S97");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S97");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_CUSTOM, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S97");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S97");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77, MS-OXCTABL_R119, MS-OXCTABL_R437, MS-OXCTABL_R438");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
            this.Manager.Checkpoint("MS-OXCTABL_R119");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R438");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker222(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,SORTTABLE,True,Fal" +
                    "se,True,True,BOOKMARK_CUSTOM,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S97");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S97");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S97");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S97");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S97");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S97");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S97");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S97");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_CUSTOM, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S97");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S97");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77, MS-OXCTABL_R119, MS-OXCTABL_R437, MS-OXCTABL_R438");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
            this.Manager.Checkpoint("MS-OXCTABL_R119");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R438");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteRopQueryRowsResponseChecker223(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,SORTTABLE,True,Fal" +
                    "se,True,True,BOOKMARK_CURRENT,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S97");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S97");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S97");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S97");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S97");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S97");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S97");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S97");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S97");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S97");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77, MS-OXCTABL_R119, MS-OXCTABL_R437, MS-OXCTABL_R438");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
            this.Manager.Checkpoint("MS-OXCTABL_R119");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R438");
        }
        #endregion
        
        #region Test Starting in S2
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite1() {
            this.Manager.BeginTest("MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite1");
            this.Manager.Comment("reaching state \'S2\'");
            bool temp154;
            this.Manager.Comment("executing step \'call CheckMAPIHTTPTransportSupported(out _)\'");
            this.IMS_OXCTABLAdapterInstance.CheckMAPIHTTPTransportSupported(out temp154);
            this.Manager.AddReturn(CheckMAPIHTTPTransportSupportedInfo, null, temp154);
            this.Manager.Comment("reaching state \'S3\'");
            int temp157 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite1CheckMAPIHTTPTransportSupportedChecker)), new ExpectedReturn(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite1CheckMAPIHTTPTransportSupportedChecker1)));
            if ((temp157 == 0)) {
                this.Manager.Comment("reaching state \'S10\'");
                this.Manager.Comment("executing step \'call InitializeTable(CONTENT_TABLE)\'");
                this.IMS_OXCTABLAdapterInstance.InitializeTable(((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableType)(0)));
                this.Manager.Comment("reaching state \'S17\'");
                this.Manager.Comment("checking step \'return InitializeTable\'");
                this.Manager.Comment("reaching state \'S21\'");
                Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp155;
                this.Manager.Comment("executing step \'call RopSetColumns(1,False,False,False)\'");
                temp155 = this.IMS_OXCTABLAdapterInstance.RopSetColumns(1u, false, false, false);
                this.Manager.Checkpoint("MS-OXCTABL_R831");
                this.Manager.Checkpoint("MS-OXCTABL_R45");
                this.Manager.Comment("reaching state \'S25\'");
                this.Manager.Comment("checking step \'return RopSetColumns/success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp155, "return of RopSetColumns, state S25");
                this.Manager.Comment("reaching state \'S29\'");
                Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp156;
                this.Manager.Comment("executing step \'call RopSortTable(1,True,False,False,True,False,False,False)\'");
                temp156 = this.IMS_OXCTABLAdapterInstance.RopSortTable(1u, true, false, false, true, false, false, false);
                this.Manager.Checkpoint("MS-OXCTABL_R447");
                this.Manager.Comment("reaching state \'S33\'");
                this.Manager.Comment("checking step \'return RopSortTable/success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp156, "return of RopSortTable, state S33");
                S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS36();
                goto label48;
            }
            if ((temp157 == 1)) {
                this.Manager.Comment("reaching state \'S11\'");
                goto label48;
            }
            throw new InvalidOperationException("never reached");
        label48:
;
            this.Manager.EndTest();
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite1CheckMAPIHTTPTransportSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S3");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite1CheckMAPIHTTPTransportSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S3");
        }
        #endregion
        
        #region Test Starting in S4
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite2() {
            this.Manager.BeginTest("MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite2");
            this.Manager.Comment("reaching state \'S4\'");
            bool temp158;
            this.Manager.Comment("executing step \'call CheckMAPIHTTPTransportSupported(out _)\'");
            this.IMS_OXCTABLAdapterInstance.CheckMAPIHTTPTransportSupported(out temp158);
            this.Manager.AddReturn(CheckMAPIHTTPTransportSupportedInfo, null, temp158);
            this.Manager.Comment("reaching state \'S5\'");
            int temp161 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite2CheckMAPIHTTPTransportSupportedChecker)), new ExpectedReturn(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite2CheckMAPIHTTPTransportSupportedChecker1)));
            if ((temp161 == 0)) {
                this.Manager.Comment("reaching state \'S12\'");
                this.Manager.Comment("executing step \'call InitializeTable(CONTENT_TABLE)\'");
                this.IMS_OXCTABLAdapterInstance.InitializeTable(((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableType)(0)));
                this.Manager.Comment("reaching state \'S18\'");
                this.Manager.Comment("checking step \'return InitializeTable\'");
                this.Manager.Comment("reaching state \'S22\'");
                Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp159;
                this.Manager.Comment("executing step \'call RopSetColumns(1,False,False,False)\'");
                temp159 = this.IMS_OXCTABLAdapterInstance.RopSetColumns(1u, false, false, false);
                this.Manager.Checkpoint("MS-OXCTABL_R831");
                this.Manager.Checkpoint("MS-OXCTABL_R45");
                this.Manager.Comment("reaching state \'S26\'");
                this.Manager.Comment("checking step \'return RopSetColumns/success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp159, "return of RopSetColumns, state S26");
                this.Manager.Comment("reaching state \'S30\'");
                Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp160;
                this.Manager.Comment("executing step \'call RopSortTable(1,True,False,False,False,True,False,False)\'");
                temp160 = this.IMS_OXCTABLAdapterInstance.RopSortTable(1u, true, false, false, false, true, false, false);
                this.Manager.Checkpoint("MS-OXCTABL_R447");
                this.Manager.Comment("reaching state \'S34\'");
                this.Manager.Comment("checking step \'return RopSortTable/success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp160, "return of RopSortTable, state S34");
                S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS36();
                goto label49;
            }
            if ((temp161 == 1)) {
                this.Manager.Comment("reaching state \'S13\'");
                goto label49;
            }
            throw new InvalidOperationException("never reached");
        label49:
;
            this.Manager.EndTest();
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite2CheckMAPIHTTPTransportSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S5");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite2CheckMAPIHTTPTransportSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S5");
        }
        #endregion
        
        #region Test Starting in S6
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite3() {
            this.Manager.BeginTest("MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite3");
            this.Manager.Comment("reaching state \'S6\'");
            bool temp162;
            this.Manager.Comment("executing step \'call CheckMAPIHTTPTransportSupported(out _)\'");
            this.IMS_OXCTABLAdapterInstance.CheckMAPIHTTPTransportSupported(out temp162);
            this.Manager.AddReturn(CheckMAPIHTTPTransportSupportedInfo, null, temp162);
            this.Manager.Comment("reaching state \'S7\'");
            int temp165 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite3CheckMAPIHTTPTransportSupportedChecker)), new ExpectedReturn(S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite3CheckMAPIHTTPTransportSupportedChecker1)));
            if ((temp165 == 0)) {
                this.Manager.Comment("reaching state \'S14\'");
                this.Manager.Comment("executing step \'call InitializeTable(CONTENT_TABLE)\'");
                this.IMS_OXCTABLAdapterInstance.InitializeTable(((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableType)(0)));
                this.Manager.Comment("reaching state \'S19\'");
                this.Manager.Comment("checking step \'return InitializeTable\'");
                this.Manager.Comment("reaching state \'S23\'");
                Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp163;
                this.Manager.Comment("executing step \'call RopSetColumns(1,False,False,False)\'");
                temp163 = this.IMS_OXCTABLAdapterInstance.RopSetColumns(1u, false, false, false);
                this.Manager.Checkpoint("MS-OXCTABL_R831");
                this.Manager.Checkpoint("MS-OXCTABL_R45");
                this.Manager.Comment("reaching state \'S27\'");
                this.Manager.Comment("checking step \'return RopSetColumns/success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp163, "return of RopSetColumns, state S27");
                this.Manager.Comment("reaching state \'S31\'");
                Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp164;
                this.Manager.Comment("executing step \'call RopSortTable(1,True,False,False,False,False,False,False)\'");
                temp164 = this.IMS_OXCTABLAdapterInstance.RopSortTable(1u, true, false, false, false, false, false, false);
                this.Manager.Checkpoint("MS-OXCTABL_R447");
                this.Manager.Comment("reaching state \'S35\'");
                this.Manager.Comment("checking step \'return RopSortTable/success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp164, "return of RopSortTable, state S35");
                S02_RowRops_ParseQueryRowsAfterSortTable_TestSuiteS36();
                goto label50;
            }
            if ((temp165 == 1)) {
                this.Manager.Comment("reaching state \'S15\'");
                goto label50;
            }
            throw new InvalidOperationException("never reached");
        label50:
;
            this.Manager.EndTest();
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite3CheckMAPIHTTPTransportSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S7");
        }
        
        private void MSOXCTABL_S02_RowRops_ParseQueryRowsAfterSortTable_TestSuite3CheckMAPIHTTPTransportSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S7");
        }
        #endregion
    }
}
