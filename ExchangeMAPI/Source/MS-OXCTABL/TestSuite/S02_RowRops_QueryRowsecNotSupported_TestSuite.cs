//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18449
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Microsoft.Protocols.TestSuites.MS_OXCTABL {
    using System;
    using System.Collections.Generic;
    using System.Text;
    using System.Reflection;
    using Microsoft.SpecExplorer.Runtime.Testing;
    using Microsoft.Protocols.TestTools;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Spec Explorer", "3.5.3130.0")]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class S02_RowRops_QueryRowsecNotSupported_TestSuite : PtfTestClassBase {
        
        public S02_RowRops_QueryRowsecNotSupported_TestSuite() {
            this.SetSwitch("ProceedControlTimeout", "100");
            this.SetSwitch("QuiescenceTimeout", "2000000");
        }
        
        #region Expect Delegates
        public delegate void CheckMAPIHTTPTransportSupportedDelegate1(bool isSupported);
        
        public delegate void CheckRequirementEnabledDelegate1(bool enabled);
        #endregion
        
        #region Event Metadata
        static System.Reflection.MethodBase CheckMAPIHTTPTransportSupportedInfo = TestManagerHelpers.GetMethodInfo(typeof(Microsoft.Protocols.TestSuites.MS_OXCTABL.IMS_OXCTABLAdapter), "CheckMAPIHTTPTransportSupported", typeof(bool).MakeByRefType());
        
        static System.Reflection.MethodBase CheckRequirementEnabledInfo = TestManagerHelpers.GetMethodInfo(typeof(Microsoft.Protocols.TestSuites.MS_OXCTABL.IMS_OXCTABLAdapter), "CheckRequirementEnabled", typeof(int), typeof(bool).MakeByRefType());
        #endregion
        
        #region Adapter Instances
        private Microsoft.Protocols.TestSuites.MS_OXCTABL.IMS_OXCTABLAdapter IMS_OXCTABLAdapterInstance;
        #endregion
        
        #region Class Initialization and Cleanup
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void ClassInitialize(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext context) {
            PtfTestClassBase.Initialize(context);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void ClassCleanup() {
            PtfTestClassBase.Cleanup();
        }
        #endregion
        
        #region Test Initialization and Cleanup
        protected override void TestInitialize() {
            this.InitializeTestManager();
            this.IMS_OXCTABLAdapterInstance = ((Microsoft.Protocols.TestSuites.MS_OXCTABL.IMS_OXCTABLAdapter)(this.Manager.GetAdapter(typeof(Microsoft.Protocols.TestSuites.MS_OXCTABL.IMS_OXCTABLAdapter))));
        }
        
        protected override void TestCleanup() {
            base.TestCleanup();
            this.CleanupTestManager();
        }
        #endregion
        
        #region Test Starting in S0
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void MSOXCTABL_S02_RowRops_QueryRowsecNotSupported_TestSuite() {
            this.Manager.BeginTest("MSOXCTABL_S02_RowRops_QueryRowsecNotSupported_TestSuite");
            this.Manager.Comment("reaching state \'S0\'");
            bool temp0;
            this.Manager.Comment("executing step \'call CheckMAPIHTTPTransportSupported(out _)\'");
            this.IMS_OXCTABLAdapterInstance.CheckMAPIHTTPTransportSupported(out temp0);
            this.Manager.AddReturn(CheckMAPIHTTPTransportSupportedInfo, null, temp0);
            this.Manager.Comment("reaching state \'S1\'");
            int temp23 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_QueryRowsecNotSupported_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCTABL_S02_RowRops_QueryRowsecNotSupported_TestSuiteCheckMAPIHTTPTransportSupportedChecker)), new ExpectedReturn(S02_RowRops_QueryRowsecNotSupported_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCTABL_S02_RowRops_QueryRowsecNotSupported_TestSuiteCheckMAPIHTTPTransportSupportedChecker1)));
            if ((temp23 == 0)) {
                this.Manager.Comment("reaching state \'S2\'");
                goto label7;
            }
            if ((temp23 == 1)) {
                this.Manager.Comment("reaching state \'S3\'");
                this.Manager.Comment("executing step \'call InitializeTable(INVALID_TABLE)\'");
                this.IMS_OXCTABLAdapterInstance.InitializeTable(Microsoft.Protocols.TestSuites.MS_OXCTABL.TableType.INVALID_TABLE);
                this.Manager.Comment("reaching state \'S4\'");
                this.Manager.Comment("checking step \'return InitializeTable\'");
                this.Manager.Comment("reaching state \'S5\'");
                bool temp1;
                this.Manager.Comment("executing step \'call CheckRequirementEnabled(768,out _)\'");
                this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(768, out temp1);
                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp1);
                this.Manager.Comment("reaching state \'S6\'");
                int temp22 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_QueryRowsecNotSupported_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_QueryRowsecNotSupported_TestSuiteCheckRequirementEnabledChecker)), new ExpectedReturn(S02_RowRops_QueryRowsecNotSupported_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_QueryRowsecNotSupported_TestSuiteCheckRequirementEnabledChecker7)));
                if ((temp22 == 0)) {
                    this.Manager.Comment("reaching state \'S7\'");
                    bool temp2;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(866,out _)\'");
                    this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(866, out temp2);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp2);
                    this.Manager.Comment("reaching state \'S9\'");
                    int temp11 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_QueryRowsecNotSupported_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_QueryRowsecNotSupported_TestSuiteCheckRequirementEnabledChecker1)), new ExpectedReturn(S02_RowRops_QueryRowsecNotSupported_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_QueryRowsecNotSupported_TestSuiteCheckRequirementEnabledChecker4)));
                    if ((temp11 == 0)) {
                        this.Manager.Comment("reaching state \'S11\'");
                        bool temp3;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(867,out _)\'");
                        this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(867, out temp3);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp3);
                        this.Manager.Comment("reaching state \'S15\'");
                        int temp6 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_QueryRowsecNotSupported_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_QueryRowsecNotSupported_TestSuiteCheckRequirementEnabledChecker2)), new ExpectedReturn(S02_RowRops_QueryRowsecNotSupported_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_QueryRowsecNotSupported_TestSuiteCheckRequirementEnabledChecker3)));
                        if ((temp6 == 0)) {
                            this.Manager.Comment("reaching state \'S19\'");
                            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp4;
                            this.Manager.Comment("executing step \'call RopQueryRows(NoAdvance,True)\'");
                            temp4 = this.IMS_OXCTABLAdapterInstance.RopQueryRows(((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), true);
                            this.Manager.Checkpoint("MS-OXCTABL_R477");
                            this.Manager.Checkpoint("MS-OXCTABL_R614");
                            this.Manager.Comment("reaching state \'S27\'");
                            this.Manager.Comment("checking step \'return RopQueryRows/ecNotSupported\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues.ecNotSupported, temp4, "return of RopQueryRows, state S27");
                            this.Manager.Comment("reaching state \'S35\'");
                            goto label0;
                        }
                        if ((temp6 == 1)) {
                            this.Manager.Comment("reaching state \'S20\'");
                            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp5;
                            this.Manager.Comment("executing step \'call RopQueryRows(NoAdvance,True)\'");
                            temp5 = this.IMS_OXCTABLAdapterInstance.RopQueryRows(((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), true);
                            this.Manager.Checkpoint("MS-OXCTABL_R477");
                            this.Manager.Checkpoint("MS-OXCTABL_R614");
                            this.Manager.Comment("reaching state \'S28\'");
                            this.Manager.Comment("checking step \'return RopQueryRows/ecNotSupported\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues.ecNotSupported, temp5, "return of RopQueryRows, state S28");
                            this.Manager.Comment("reaching state \'S36\'");
                            goto label0;
                        }
                        throw new InvalidOperationException("never reached");
                    label0:
;
                        goto label2;
                    }
                    if ((temp11 == 1)) {
                        this.Manager.Comment("reaching state \'S12\'");
                        bool temp7;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(867,out _)\'");
                        this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(867, out temp7);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp7);
                        this.Manager.Comment("reaching state \'S16\'");
                        int temp10 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_QueryRowsecNotSupported_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_QueryRowsecNotSupported_TestSuiteCheckRequirementEnabledChecker5)), new ExpectedReturn(S02_RowRops_QueryRowsecNotSupported_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_QueryRowsecNotSupported_TestSuiteCheckRequirementEnabledChecker6)));
                        if ((temp10 == 0)) {
                            this.Manager.Comment("reaching state \'S21\'");
                            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp8;
                            this.Manager.Comment("executing step \'call RopQueryRows(NoAdvance,True)\'");
                            temp8 = this.IMS_OXCTABLAdapterInstance.RopQueryRows(((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), true);
                            this.Manager.Checkpoint("MS-OXCTABL_R477");
                            this.Manager.Checkpoint("MS-OXCTABL_R614");
                            this.Manager.Comment("reaching state \'S29\'");
                            this.Manager.Comment("checking step \'return RopQueryRows/ecNotSupported\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues.ecNotSupported, temp8, "return of RopQueryRows, state S29");
                            this.Manager.Comment("reaching state \'S37\'");
                            goto label1;
                        }
                        if ((temp10 == 1)) {
                            this.Manager.Comment("reaching state \'S22\'");
                            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp9;
                            this.Manager.Comment("executing step \'call RopQueryRows(NoAdvance,True)\'");
                            temp9 = this.IMS_OXCTABLAdapterInstance.RopQueryRows(((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), true);
                            this.Manager.Checkpoint("MS-OXCTABL_R477");
                            this.Manager.Checkpoint("MS-OXCTABL_R614");
                            this.Manager.Comment("reaching state \'S30\'");
                            this.Manager.Comment("checking step \'return RopQueryRows/ecNotSupported\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues.ecNotSupported, temp9, "return of RopQueryRows, state S30");
                            this.Manager.Comment("reaching state \'S38\'");
                            goto label1;
                        }
                        throw new InvalidOperationException("never reached");
                    label1:
;
                        goto label2;
                    }
                    throw new InvalidOperationException("never reached");
                label2:
;
                    goto label6;
                }
                if ((temp22 == 1)) {
                    this.Manager.Comment("reaching state \'S8\'");
                    bool temp12;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(866,out _)\'");
                    this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(866, out temp12);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp12);
                    this.Manager.Comment("reaching state \'S10\'");
                    int temp21 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_QueryRowsecNotSupported_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_QueryRowsecNotSupported_TestSuiteCheckRequirementEnabledChecker8)), new ExpectedReturn(S02_RowRops_QueryRowsecNotSupported_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_QueryRowsecNotSupported_TestSuiteCheckRequirementEnabledChecker11)));
                    if ((temp21 == 0)) {
                        this.Manager.Comment("reaching state \'S13\'");
                        bool temp13;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(867,out _)\'");
                        this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(867, out temp13);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp13);
                        this.Manager.Comment("reaching state \'S17\'");
                        int temp16 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_QueryRowsecNotSupported_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_QueryRowsecNotSupported_TestSuiteCheckRequirementEnabledChecker9)), new ExpectedReturn(S02_RowRops_QueryRowsecNotSupported_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_QueryRowsecNotSupported_TestSuiteCheckRequirementEnabledChecker10)));
                        if ((temp16 == 0)) {
                            this.Manager.Comment("reaching state \'S23\'");
                            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp14;
                            this.Manager.Comment("executing step \'call RopQueryRows(NoAdvance,True)\'");
                            temp14 = this.IMS_OXCTABLAdapterInstance.RopQueryRows(((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), true);
                            this.Manager.Checkpoint("MS-OXCTABL_R477");
                            this.Manager.Checkpoint("MS-OXCTABL_R614");
                            this.Manager.Comment("reaching state \'S31\'");
                            this.Manager.Comment("checking step \'return RopQueryRows/ecNotSupported\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues.ecNotSupported, temp14, "return of RopQueryRows, state S31");
                            this.Manager.Comment("reaching state \'S39\'");
                            goto label3;
                        }
                        if ((temp16 == 1)) {
                            this.Manager.Comment("reaching state \'S24\'");
                            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp15;
                            this.Manager.Comment("executing step \'call RopQueryRows(NoAdvance,True)\'");
                            temp15 = this.IMS_OXCTABLAdapterInstance.RopQueryRows(((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), true);
                            this.Manager.Checkpoint("MS-OXCTABL_R477");
                            this.Manager.Checkpoint("MS-OXCTABL_R614");
                            this.Manager.Comment("reaching state \'S32\'");
                            this.Manager.Comment("checking step \'return RopQueryRows/ecNotSupported\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues.ecNotSupported, temp15, "return of RopQueryRows, state S32");
                            this.Manager.Comment("reaching state \'S40\'");
                            goto label3;
                        }
                        throw new InvalidOperationException("never reached");
                    label3:
;
                        goto label5;
                    }
                    if ((temp21 == 1)) {
                        this.Manager.Comment("reaching state \'S14\'");
                        bool temp17;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(867,out _)\'");
                        this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(867, out temp17);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp17);
                        this.Manager.Comment("reaching state \'S18\'");
                        int temp20 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_QueryRowsecNotSupported_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_QueryRowsecNotSupported_TestSuiteCheckRequirementEnabledChecker12)), new ExpectedReturn(S02_RowRops_QueryRowsecNotSupported_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_QueryRowsecNotSupported_TestSuiteCheckRequirementEnabledChecker13)));
                        if ((temp20 == 0)) {
                            this.Manager.Comment("reaching state \'S25\'");
                            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp18;
                            this.Manager.Comment("executing step \'call RopQueryRows(NoAdvance,True)\'");
                            temp18 = this.IMS_OXCTABLAdapterInstance.RopQueryRows(((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), true);
                            this.Manager.Checkpoint("MS-OXCTABL_R477");
                            this.Manager.Checkpoint("MS-OXCTABL_R614");
                            this.Manager.Comment("reaching state \'S33\'");
                            this.Manager.Comment("checking step \'return RopQueryRows/ecNotSupported\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues.ecNotSupported, temp18, "return of RopQueryRows, state S33");
                            this.Manager.Comment("reaching state \'S41\'");
                            goto label4;
                        }
                        if ((temp20 == 1)) {
                            this.Manager.Comment("reaching state \'S26\'");
                            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp19;
                            this.Manager.Comment("executing step \'call RopQueryRows(NoAdvance,True)\'");
                            temp19 = this.IMS_OXCTABLAdapterInstance.RopQueryRows(((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), true);
                            this.Manager.Checkpoint("MS-OXCTABL_R477");
                            this.Manager.Checkpoint("MS-OXCTABL_R614");
                            this.Manager.Comment("reaching state \'S34\'");
                            this.Manager.Comment("checking step \'return RopQueryRows/ecNotSupported\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues.ecNotSupported, temp19, "return of RopQueryRows, state S34");
                            this.Manager.Comment("reaching state \'S42\'");
                            goto label4;
                        }
                        throw new InvalidOperationException("never reached");
                    label4:
;
                        goto label5;
                    }
                    throw new InvalidOperationException("never reached");
                label5:
;
                    goto label6;
                }
                throw new InvalidOperationException("never reached");
            label6:
;
                goto label7;
            }
            throw new InvalidOperationException("never reached");
        label7:
;
            this.Manager.EndTest();
        }
        
        private void MSOXCTABL_S02_RowRops_QueryRowsecNotSupported_TestSuiteCheckMAPIHTTPTransportSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S1");
        }
        
        private void MSOXCTABL_S02_RowRops_QueryRowsecNotSupported_TestSuiteCheckMAPIHTTPTransportSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S1");
        }
        
        private void MSOXCTABL_S02_RowRops_QueryRowsecNotSupported_TestSuiteCheckRequirementEnabledChecker(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S6");
        }
        
        private void MSOXCTABL_S02_RowRops_QueryRowsecNotSupported_TestSuiteCheckRequirementEnabledChecker1(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S9");
        }
        
        private void MSOXCTABL_S02_RowRops_QueryRowsecNotSupported_TestSuiteCheckRequirementEnabledChecker2(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S15");
        }
        
        private void MSOXCTABL_S02_RowRops_QueryRowsecNotSupported_TestSuiteCheckRequirementEnabledChecker3(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S15");
        }
        
        private void MSOXCTABL_S02_RowRops_QueryRowsecNotSupported_TestSuiteCheckRequirementEnabledChecker4(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S9");
        }
        
        private void MSOXCTABL_S02_RowRops_QueryRowsecNotSupported_TestSuiteCheckRequirementEnabledChecker5(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S16");
        }
        
        private void MSOXCTABL_S02_RowRops_QueryRowsecNotSupported_TestSuiteCheckRequirementEnabledChecker6(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S16");
        }
        
        private void MSOXCTABL_S02_RowRops_QueryRowsecNotSupported_TestSuiteCheckRequirementEnabledChecker7(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S6");
        }
        
        private void MSOXCTABL_S02_RowRops_QueryRowsecNotSupported_TestSuiteCheckRequirementEnabledChecker8(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S10");
        }
        
        private void MSOXCTABL_S02_RowRops_QueryRowsecNotSupported_TestSuiteCheckRequirementEnabledChecker9(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S17");
        }
        
        private void MSOXCTABL_S02_RowRops_QueryRowsecNotSupported_TestSuiteCheckRequirementEnabledChecker10(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S17");
        }
        
        private void MSOXCTABL_S02_RowRops_QueryRowsecNotSupported_TestSuiteCheckRequirementEnabledChecker11(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S10");
        }
        
        private void MSOXCTABL_S02_RowRops_QueryRowsecNotSupported_TestSuiteCheckRequirementEnabledChecker12(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S18");
        }
        
        private void MSOXCTABL_S02_RowRops_QueryRowsecNotSupported_TestSuiteCheckRequirementEnabledChecker13(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S18");
        }
        #endregion
    }
}
