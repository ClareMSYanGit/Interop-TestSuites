//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18449
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Microsoft.Protocols.TestSuites.MS_OXCTABL {
    using System;
    using System.Collections.Generic;
    using System.Text;
    using System.Reflection;
    using Microsoft.SpecExplorer.Runtime.Testing;
    using Microsoft.Protocols.TestTools;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Spec Explorer", "3.5.3130.0")]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class S05_ResetSortTableRops_SortTable_TestSuite : PtfTestClassBase {
        
        public S05_ResetSortTableRops_SortTable_TestSuite() {
            this.SetSwitch("ProceedControlTimeout", "100");
            this.SetSwitch("QuiescenceTimeout", "2000000");
        }
        
        #region Expect Delegates
        public delegate void CheckMAPIHTTPTransportSupportedDelegate1(bool isSupported);
        
        public delegate void CheckRequirementEnabledDelegate1(bool enabled);
        
        public delegate void RopQueryRowsResponseDelegate1(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger);
        #endregion
        
        #region Event Metadata
        static System.Reflection.MethodBase CheckMAPIHTTPTransportSupportedInfo = TestManagerHelpers.GetMethodInfo(typeof(Microsoft.Protocols.TestSuites.MS_OXCTABL.IMS_OXCTABLAdapter), "CheckMAPIHTTPTransportSupported", typeof(bool).MakeByRefType());
        
        static System.Reflection.MethodBase CheckRequirementEnabledInfo = TestManagerHelpers.GetMethodInfo(typeof(Microsoft.Protocols.TestSuites.MS_OXCTABL.IMS_OXCTABLAdapter), "CheckRequirementEnabled", typeof(int), typeof(bool).MakeByRefType());
        
        static System.Reflection.EventInfo RopQueryRowsResponseInfo = TestManagerHelpers.GetEventInfo(typeof(Microsoft.Protocols.TestSuites.MS_OXCTABL.IMS_OXCTABLAdapter), "RopQueryRowsResponse");
        #endregion
        
        #region Adapter Instances
        private Microsoft.Protocols.TestSuites.MS_OXCTABL.IMS_OXCTABLAdapter IMS_OXCTABLAdapterInstance;
        #endregion
        
        #region Class Initialization and Cleanup
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void ClassInitialize(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext context) {
            PtfTestClassBase.Initialize(context);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void ClassCleanup() {
            PtfTestClassBase.Cleanup();
        }
        #endregion
        
        #region Test Initialization and Cleanup
        protected override void TestInitialize() {
            this.InitializeTestManager();
            this.IMS_OXCTABLAdapterInstance = ((Microsoft.Protocols.TestSuites.MS_OXCTABL.IMS_OXCTABLAdapter)(this.Manager.GetAdapter(typeof(Microsoft.Protocols.TestSuites.MS_OXCTABL.IMS_OXCTABLAdapter))));
            this.Manager.Subscribe(RopQueryRowsResponseInfo, this.IMS_OXCTABLAdapterInstance);
        }
        
        protected override void TestCleanup() {
            base.TestCleanup();
            this.CleanupTestManager();
        }
        #endregion
        
        #region Test Starting in S0
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuite() {
            this.Manager.BeginTest("MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuite");
            this.Manager.Comment("reaching state \'S0\'");
            bool temp0;
            this.Manager.Comment("executing step \'call CheckMAPIHTTPTransportSupported(out _)\'");
            this.IMS_OXCTABLAdapterInstance.CheckMAPIHTTPTransportSupported(out temp0);
            this.Manager.AddReturn(CheckMAPIHTTPTransportSupportedInfo, null, temp0);
            this.Manager.Comment("reaching state \'S1\'");
            int temp57 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_ResetSortTableRops_SortTable_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteCheckMAPIHTTPTransportSupportedChecker)), new ExpectedReturn(S05_ResetSortTableRops_SortTable_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteCheckMAPIHTTPTransportSupportedChecker1)));
            if ((temp57 == 0)) {
                this.Manager.Comment("reaching state \'S2\'");
                goto label31;
            }
            if ((temp57 == 1)) {
                this.Manager.Comment("reaching state \'S3\'");
                this.Manager.Comment("executing step \'call InitializeTable(CONTENT_TABLE)\'");
                this.IMS_OXCTABLAdapterInstance.InitializeTable(((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableType)(0)));
                this.Manager.Comment("reaching state \'S4\'");
                this.Manager.Comment("checking step \'return InitializeTable\'");
                this.Manager.Comment("reaching state \'S5\'");
                Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp1;
                this.Manager.Comment("executing step \'call RopSetColumns(1,False,False,False)\'");
                temp1 = this.IMS_OXCTABLAdapterInstance.RopSetColumns(1u, false, false, false);
                this.Manager.Checkpoint("MS-OXCTABL_R831");
                this.Manager.Checkpoint("MS-OXCTABL_R45");
                this.Manager.Comment("reaching state \'S6\'");
                this.Manager.Comment("checking step \'return RopSetColumns/success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp1, "return of RopSetColumns, state S6");
                this.Manager.Comment("reaching state \'S7\'");
                Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp2;
                this.Manager.Comment("executing step \'call RopSortTable(1,True,True,True,False,False,False,False)\'");
                temp2 = this.IMS_OXCTABLAdapterInstance.RopSortTable(1u, true, true, true, false, false, false, false);
                this.Manager.Checkpoint("MS-OXCTABL_R447");
                this.Manager.Comment("reaching state \'S8\'");
                this.Manager.Comment("checking step \'return RopSortTable/success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp2, "return of RopSortTable, state S8");
                this.Manager.Comment("reaching state \'S9\'");
                bool temp3;
                this.Manager.Comment("executing step \'call CheckRequirementEnabled(768,out _)\'");
                this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(768, out temp3);
                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp3);
                this.Manager.Comment("reaching state \'S10\'");
                int temp56 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_ResetSortTableRops_SortTable_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteCheckRequirementEnabledChecker)), new ExpectedReturn(S05_ResetSortTableRops_SortTable_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteCheckRequirementEnabledChecker15)));
                if ((temp56 == 0)) {
                    this.Manager.Comment("reaching state \'S11\'");
                    bool temp4;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(866,out _)\'");
                    this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(866, out temp4);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp4);
                    this.Manager.Comment("reaching state \'S13\'");
                    int temp29 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_ResetSortTableRops_SortTable_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteCheckRequirementEnabledChecker1)), new ExpectedReturn(S05_ResetSortTableRops_SortTable_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteCheckRequirementEnabledChecker8)));
                    if ((temp29 == 0)) {
                        this.Manager.Comment("reaching state \'S15\'");
                        bool temp5;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(867,out _)\'");
                        this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(867, out temp5);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp5);
                        this.Manager.Comment("reaching state \'S19\'");
                        int temp16 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_ResetSortTableRops_SortTable_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteCheckRequirementEnabledChecker2)), new ExpectedReturn(S05_ResetSortTableRops_SortTable_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteCheckRequirementEnabledChecker5)));
                        if ((temp16 == 0)) {
                            this.Manager.Comment("reaching state \'S23\'");
                            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp6;
                            this.Manager.Comment("executing step \'call RopQueryRows(NoAdvance,True)\'");
                            temp6 = this.IMS_OXCTABLAdapterInstance.RopQueryRows(((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), true);
                            this.Manager.Checkpoint("MS-OXCTABL_R837");
                            this.Manager.Comment("reaching state \'S31\'");
                            this.Manager.Comment("checking step \'return RopQueryRows/success\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp6, "return of RopQueryRows, state S31");
                            this.Manager.Comment("reaching state \'S39\'");
                            bool temp7;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(443,out _)\'");
                            this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(443, out temp7);
                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp7);
                            this.Manager.Comment("reaching state \'S47\'");
                            int temp10 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_ResetSortTableRops_SortTable_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteCheckRequirementEnabledChecker3)), new ExpectedReturn(S05_ResetSortTableRops_SortTable_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteCheckRequirementEnabledChecker4)));
                            if ((temp10 == 0)) {
                                this.Manager.Comment("reaching state \'S55\'");
                                int temp8 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S05_ResetSortTableRops_SortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteRopQueryRowsResponseChecker)), new ExpectedEvent(S05_ResetSortTableRops_SortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteRopQueryRowsResponseChecker1)), new ExpectedEvent(S05_ResetSortTableRops_SortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteRopQueryRowsResponseChecker2)), new ExpectedEvent(S05_ResetSortTableRops_SortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteRopQueryRowsResponseChecker3)));
                                if ((temp8 == 0)) {
                                    S05_ResetSortTableRops_SortTable_TestSuiteS71();
                                    goto label0;
                                }
                                if ((temp8 == 1)) {
                                    S05_ResetSortTableRops_SortTable_TestSuiteS71();
                                    goto label0;
                                }
                                if ((temp8 == 2)) {
                                    S05_ResetSortTableRops_SortTable_TestSuiteS71();
                                    goto label0;
                                }
                                if ((temp8 == 3)) {
                                    S05_ResetSortTableRops_SortTable_TestSuiteS71();
                                    goto label0;
                                }
                                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S05_ResetSortTableRops_SortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteRopQueryRowsResponseChecker)), new ExpectedEvent(S05_ResetSortTableRops_SortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteRopQueryRowsResponseChecker1)), new ExpectedEvent(S05_ResetSortTableRops_SortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteRopQueryRowsResponseChecker2)), new ExpectedEvent(S05_ResetSortTableRops_SortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteRopQueryRowsResponseChecker3)));
                            label0:
;
                                goto label2;
                            }
                            if ((temp10 == 1)) {
                                this.Manager.Comment("reaching state \'S56\'");
                                int temp9 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S05_ResetSortTableRops_SortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteRopQueryRowsResponseChecker4)), new ExpectedEvent(S05_ResetSortTableRops_SortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteRopQueryRowsResponseChecker5)), new ExpectedEvent(S05_ResetSortTableRops_SortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteRopQueryRowsResponseChecker6)), new ExpectedEvent(S05_ResetSortTableRops_SortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteRopQueryRowsResponseChecker7)));
                                if ((temp9 == 0)) {
                                    S05_ResetSortTableRops_SortTable_TestSuiteS72();
                                    goto label1;
                                }
                                if ((temp9 == 1)) {
                                    S05_ResetSortTableRops_SortTable_TestSuiteS72();
                                    goto label1;
                                }
                                if ((temp9 == 2)) {
                                    S05_ResetSortTableRops_SortTable_TestSuiteS72();
                                    goto label1;
                                }
                                if ((temp9 == 3)) {
                                    S05_ResetSortTableRops_SortTable_TestSuiteS72();
                                    goto label1;
                                }
                                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S05_ResetSortTableRops_SortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteRopQueryRowsResponseChecker4)), new ExpectedEvent(S05_ResetSortTableRops_SortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteRopQueryRowsResponseChecker5)), new ExpectedEvent(S05_ResetSortTableRops_SortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteRopQueryRowsResponseChecker6)), new ExpectedEvent(S05_ResetSortTableRops_SortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteRopQueryRowsResponseChecker7)));
                            label1:
;
                                goto label2;
                            }
                            throw new InvalidOperationException("never reached");
                        label2:
;
                            goto label6;
                        }
                        if ((temp16 == 1)) {
                            this.Manager.Comment("reaching state \'S24\'");
                            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp11;
                            this.Manager.Comment("executing step \'call RopQueryRows(NoAdvance,True)\'");
                            temp11 = this.IMS_OXCTABLAdapterInstance.RopQueryRows(((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), true);
                            this.Manager.Checkpoint("MS-OXCTABL_R837");
                            this.Manager.Comment("reaching state \'S32\'");
                            this.Manager.Comment("checking step \'return RopQueryRows/success\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp11, "return of RopQueryRows, state S32");
                            this.Manager.Comment("reaching state \'S40\'");
                            bool temp12;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(443,out _)\'");
                            this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(443, out temp12);
                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp12);
                            this.Manager.Comment("reaching state \'S48\'");
                            int temp15 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_ResetSortTableRops_SortTable_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteCheckRequirementEnabledChecker6)), new ExpectedReturn(S05_ResetSortTableRops_SortTable_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteCheckRequirementEnabledChecker7)));
                            if ((temp15 == 0)) {
                                this.Manager.Comment("reaching state \'S57\'");
                                int temp13 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S05_ResetSortTableRops_SortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteRopQueryRowsResponseChecker8)), new ExpectedEvent(S05_ResetSortTableRops_SortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteRopQueryRowsResponseChecker9)), new ExpectedEvent(S05_ResetSortTableRops_SortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteRopQueryRowsResponseChecker10)), new ExpectedEvent(S05_ResetSortTableRops_SortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteRopQueryRowsResponseChecker11)));
                                if ((temp13 == 0)) {
                                    S05_ResetSortTableRops_SortTable_TestSuiteS73();
                                    goto label3;
                                }
                                if ((temp13 == 1)) {
                                    S05_ResetSortTableRops_SortTable_TestSuiteS73();
                                    goto label3;
                                }
                                if ((temp13 == 2)) {
                                    S05_ResetSortTableRops_SortTable_TestSuiteS73();
                                    goto label3;
                                }
                                if ((temp13 == 3)) {
                                    S05_ResetSortTableRops_SortTable_TestSuiteS73();
                                    goto label3;
                                }
                                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S05_ResetSortTableRops_SortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteRopQueryRowsResponseChecker8)), new ExpectedEvent(S05_ResetSortTableRops_SortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteRopQueryRowsResponseChecker9)), new ExpectedEvent(S05_ResetSortTableRops_SortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteRopQueryRowsResponseChecker10)), new ExpectedEvent(S05_ResetSortTableRops_SortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteRopQueryRowsResponseChecker11)));
                            label3:
;
                                goto label5;
                            }
                            if ((temp15 == 1)) {
                                this.Manager.Comment("reaching state \'S58\'");
                                int temp14 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S05_ResetSortTableRops_SortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteRopQueryRowsResponseChecker12)), new ExpectedEvent(S05_ResetSortTableRops_SortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteRopQueryRowsResponseChecker13)), new ExpectedEvent(S05_ResetSortTableRops_SortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteRopQueryRowsResponseChecker14)), new ExpectedEvent(S05_ResetSortTableRops_SortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteRopQueryRowsResponseChecker15)));
                                if ((temp14 == 0)) {
                                    S05_ResetSortTableRops_SortTable_TestSuiteS74();
                                    goto label4;
                                }
                                if ((temp14 == 1)) {
                                    S05_ResetSortTableRops_SortTable_TestSuiteS74();
                                    goto label4;
                                }
                                if ((temp14 == 2)) {
                                    S05_ResetSortTableRops_SortTable_TestSuiteS74();
                                    goto label4;
                                }
                                if ((temp14 == 3)) {
                                    S05_ResetSortTableRops_SortTable_TestSuiteS74();
                                    goto label4;
                                }
                                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S05_ResetSortTableRops_SortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteRopQueryRowsResponseChecker12)), new ExpectedEvent(S05_ResetSortTableRops_SortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteRopQueryRowsResponseChecker13)), new ExpectedEvent(S05_ResetSortTableRops_SortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteRopQueryRowsResponseChecker14)), new ExpectedEvent(S05_ResetSortTableRops_SortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteRopQueryRowsResponseChecker15)));
                            label4:
;
                                goto label5;
                            }
                            throw new InvalidOperationException("never reached");
                        label5:
;
                            goto label6;
                        }
                        throw new InvalidOperationException("never reached");
                    label6:
;
                        goto label14;
                    }
                    if ((temp29 == 1)) {
                        this.Manager.Comment("reaching state \'S16\'");
                        bool temp17;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(867,out _)\'");
                        this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(867, out temp17);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp17);
                        this.Manager.Comment("reaching state \'S20\'");
                        int temp28 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_ResetSortTableRops_SortTable_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteCheckRequirementEnabledChecker9)), new ExpectedReturn(S05_ResetSortTableRops_SortTable_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteCheckRequirementEnabledChecker12)));
                        if ((temp28 == 0)) {
                            this.Manager.Comment("reaching state \'S25\'");
                            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp18;
                            this.Manager.Comment("executing step \'call RopQueryRows(NoAdvance,True)\'");
                            temp18 = this.IMS_OXCTABLAdapterInstance.RopQueryRows(((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), true);
                            this.Manager.Checkpoint("MS-OXCTABL_R837");
                            this.Manager.Comment("reaching state \'S33\'");
                            this.Manager.Comment("checking step \'return RopQueryRows/success\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp18, "return of RopQueryRows, state S33");
                            this.Manager.Comment("reaching state \'S41\'");
                            bool temp19;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(443,out _)\'");
                            this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(443, out temp19);
                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp19);
                            this.Manager.Comment("reaching state \'S49\'");
                            int temp22 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_ResetSortTableRops_SortTable_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteCheckRequirementEnabledChecker10)), new ExpectedReturn(S05_ResetSortTableRops_SortTable_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteCheckRequirementEnabledChecker11)));
                            if ((temp22 == 0)) {
                                this.Manager.Comment("reaching state \'S59\'");
                                int temp20 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S05_ResetSortTableRops_SortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteRopQueryRowsResponseChecker16)), new ExpectedEvent(S05_ResetSortTableRops_SortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteRopQueryRowsResponseChecker17)), new ExpectedEvent(S05_ResetSortTableRops_SortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteRopQueryRowsResponseChecker18)), new ExpectedEvent(S05_ResetSortTableRops_SortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteRopQueryRowsResponseChecker19)));
                                if ((temp20 == 0)) {
                                    S05_ResetSortTableRops_SortTable_TestSuiteS75();
                                    goto label7;
                                }
                                if ((temp20 == 1)) {
                                    S05_ResetSortTableRops_SortTable_TestSuiteS75();
                                    goto label7;
                                }
                                if ((temp20 == 2)) {
                                    S05_ResetSortTableRops_SortTable_TestSuiteS75();
                                    goto label7;
                                }
                                if ((temp20 == 3)) {
                                    S05_ResetSortTableRops_SortTable_TestSuiteS75();
                                    goto label7;
                                }
                                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S05_ResetSortTableRops_SortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteRopQueryRowsResponseChecker16)), new ExpectedEvent(S05_ResetSortTableRops_SortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteRopQueryRowsResponseChecker17)), new ExpectedEvent(S05_ResetSortTableRops_SortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteRopQueryRowsResponseChecker18)), new ExpectedEvent(S05_ResetSortTableRops_SortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteRopQueryRowsResponseChecker19)));
                            label7:
;
                                goto label9;
                            }
                            if ((temp22 == 1)) {
                                this.Manager.Comment("reaching state \'S60\'");
                                int temp21 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S05_ResetSortTableRops_SortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteRopQueryRowsResponseChecker20)), new ExpectedEvent(S05_ResetSortTableRops_SortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteRopQueryRowsResponseChecker21)), new ExpectedEvent(S05_ResetSortTableRops_SortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteRopQueryRowsResponseChecker22)), new ExpectedEvent(S05_ResetSortTableRops_SortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteRopQueryRowsResponseChecker23)));
                                if ((temp21 == 0)) {
                                    S05_ResetSortTableRops_SortTable_TestSuiteS76();
                                    goto label8;
                                }
                                if ((temp21 == 1)) {
                                    S05_ResetSortTableRops_SortTable_TestSuiteS76();
                                    goto label8;
                                }
                                if ((temp21 == 2)) {
                                    S05_ResetSortTableRops_SortTable_TestSuiteS76();
                                    goto label8;
                                }
                                if ((temp21 == 3)) {
                                    S05_ResetSortTableRops_SortTable_TestSuiteS76();
                                    goto label8;
                                }
                                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S05_ResetSortTableRops_SortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteRopQueryRowsResponseChecker20)), new ExpectedEvent(S05_ResetSortTableRops_SortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteRopQueryRowsResponseChecker21)), new ExpectedEvent(S05_ResetSortTableRops_SortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteRopQueryRowsResponseChecker22)), new ExpectedEvent(S05_ResetSortTableRops_SortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteRopQueryRowsResponseChecker23)));
                            label8:
;
                                goto label9;
                            }
                            throw new InvalidOperationException("never reached");
                        label9:
;
                            goto label13;
                        }
                        if ((temp28 == 1)) {
                            this.Manager.Comment("reaching state \'S26\'");
                            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp23;
                            this.Manager.Comment("executing step \'call RopQueryRows(NoAdvance,True)\'");
                            temp23 = this.IMS_OXCTABLAdapterInstance.RopQueryRows(((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), true);
                            this.Manager.Checkpoint("MS-OXCTABL_R837");
                            this.Manager.Comment("reaching state \'S34\'");
                            this.Manager.Comment("checking step \'return RopQueryRows/success\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp23, "return of RopQueryRows, state S34");
                            this.Manager.Comment("reaching state \'S42\'");
                            bool temp24;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(443,out _)\'");
                            this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(443, out temp24);
                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp24);
                            this.Manager.Comment("reaching state \'S50\'");
                            int temp27 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_ResetSortTableRops_SortTable_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteCheckRequirementEnabledChecker13)), new ExpectedReturn(S05_ResetSortTableRops_SortTable_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteCheckRequirementEnabledChecker14)));
                            if ((temp27 == 0)) {
                                this.Manager.Comment("reaching state \'S61\'");
                                int temp25 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S05_ResetSortTableRops_SortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteRopQueryRowsResponseChecker24)), new ExpectedEvent(S05_ResetSortTableRops_SortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteRopQueryRowsResponseChecker25)), new ExpectedEvent(S05_ResetSortTableRops_SortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteRopQueryRowsResponseChecker26)), new ExpectedEvent(S05_ResetSortTableRops_SortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteRopQueryRowsResponseChecker27)));
                                if ((temp25 == 0)) {
                                    S05_ResetSortTableRops_SortTable_TestSuiteS77();
                                    goto label10;
                                }
                                if ((temp25 == 1)) {
                                    S05_ResetSortTableRops_SortTable_TestSuiteS77();
                                    goto label10;
                                }
                                if ((temp25 == 2)) {
                                    S05_ResetSortTableRops_SortTable_TestSuiteS77();
                                    goto label10;
                                }
                                if ((temp25 == 3)) {
                                    S05_ResetSortTableRops_SortTable_TestSuiteS77();
                                    goto label10;
                                }
                                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S05_ResetSortTableRops_SortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteRopQueryRowsResponseChecker24)), new ExpectedEvent(S05_ResetSortTableRops_SortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteRopQueryRowsResponseChecker25)), new ExpectedEvent(S05_ResetSortTableRops_SortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteRopQueryRowsResponseChecker26)), new ExpectedEvent(S05_ResetSortTableRops_SortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteRopQueryRowsResponseChecker27)));
                            label10:
;
                                goto label12;
                            }
                            if ((temp27 == 1)) {
                                this.Manager.Comment("reaching state \'S62\'");
                                int temp26 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S05_ResetSortTableRops_SortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteRopQueryRowsResponseChecker28)), new ExpectedEvent(S05_ResetSortTableRops_SortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteRopQueryRowsResponseChecker29)), new ExpectedEvent(S05_ResetSortTableRops_SortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteRopQueryRowsResponseChecker30)), new ExpectedEvent(S05_ResetSortTableRops_SortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteRopQueryRowsResponseChecker31)));
                                if ((temp26 == 0)) {
                                    S05_ResetSortTableRops_SortTable_TestSuiteS78();
                                    goto label11;
                                }
                                if ((temp26 == 1)) {
                                    S05_ResetSortTableRops_SortTable_TestSuiteS78();
                                    goto label11;
                                }
                                if ((temp26 == 2)) {
                                    S05_ResetSortTableRops_SortTable_TestSuiteS78();
                                    goto label11;
                                }
                                if ((temp26 == 3)) {
                                    S05_ResetSortTableRops_SortTable_TestSuiteS78();
                                    goto label11;
                                }
                                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S05_ResetSortTableRops_SortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteRopQueryRowsResponseChecker28)), new ExpectedEvent(S05_ResetSortTableRops_SortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteRopQueryRowsResponseChecker29)), new ExpectedEvent(S05_ResetSortTableRops_SortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteRopQueryRowsResponseChecker30)), new ExpectedEvent(S05_ResetSortTableRops_SortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteRopQueryRowsResponseChecker31)));
                            label11:
;
                                goto label12;
                            }
                            throw new InvalidOperationException("never reached");
                        label12:
;
                            goto label13;
                        }
                        throw new InvalidOperationException("never reached");
                    label13:
;
                        goto label14;
                    }
                    throw new InvalidOperationException("never reached");
                label14:
;
                    goto label30;
                }
                if ((temp56 == 1)) {
                    this.Manager.Comment("reaching state \'S12\'");
                    bool temp30;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(866,out _)\'");
                    this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(866, out temp30);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp30);
                    this.Manager.Comment("reaching state \'S14\'");
                    int temp55 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_ResetSortTableRops_SortTable_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteCheckRequirementEnabledChecker16)), new ExpectedReturn(S05_ResetSortTableRops_SortTable_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteCheckRequirementEnabledChecker23)));
                    if ((temp55 == 0)) {
                        this.Manager.Comment("reaching state \'S17\'");
                        bool temp31;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(867,out _)\'");
                        this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(867, out temp31);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp31);
                        this.Manager.Comment("reaching state \'S21\'");
                        int temp42 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_ResetSortTableRops_SortTable_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteCheckRequirementEnabledChecker17)), new ExpectedReturn(S05_ResetSortTableRops_SortTable_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteCheckRequirementEnabledChecker20)));
                        if ((temp42 == 0)) {
                            this.Manager.Comment("reaching state \'S27\'");
                            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp32;
                            this.Manager.Comment("executing step \'call RopQueryRows(NoAdvance,True)\'");
                            temp32 = this.IMS_OXCTABLAdapterInstance.RopQueryRows(((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), true);
                            this.Manager.Checkpoint("MS-OXCTABL_R837");
                            this.Manager.Comment("reaching state \'S35\'");
                            this.Manager.Comment("checking step \'return RopQueryRows/success\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp32, "return of RopQueryRows, state S35");
                            this.Manager.Comment("reaching state \'S43\'");
                            bool temp33;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(443,out _)\'");
                            this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(443, out temp33);
                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp33);
                            this.Manager.Comment("reaching state \'S51\'");
                            int temp36 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_ResetSortTableRops_SortTable_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteCheckRequirementEnabledChecker18)), new ExpectedReturn(S05_ResetSortTableRops_SortTable_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteCheckRequirementEnabledChecker19)));
                            if ((temp36 == 0)) {
                                this.Manager.Comment("reaching state \'S63\'");
                                int temp34 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S05_ResetSortTableRops_SortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteRopQueryRowsResponseChecker32)), new ExpectedEvent(S05_ResetSortTableRops_SortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteRopQueryRowsResponseChecker33)), new ExpectedEvent(S05_ResetSortTableRops_SortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteRopQueryRowsResponseChecker34)), new ExpectedEvent(S05_ResetSortTableRops_SortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteRopQueryRowsResponseChecker35)));
                                if ((temp34 == 0)) {
                                    S05_ResetSortTableRops_SortTable_TestSuiteS79();
                                    goto label15;
                                }
                                if ((temp34 == 1)) {
                                    S05_ResetSortTableRops_SortTable_TestSuiteS79();
                                    goto label15;
                                }
                                if ((temp34 == 2)) {
                                    S05_ResetSortTableRops_SortTable_TestSuiteS79();
                                    goto label15;
                                }
                                if ((temp34 == 3)) {
                                    S05_ResetSortTableRops_SortTable_TestSuiteS79();
                                    goto label15;
                                }
                                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S05_ResetSortTableRops_SortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteRopQueryRowsResponseChecker32)), new ExpectedEvent(S05_ResetSortTableRops_SortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteRopQueryRowsResponseChecker33)), new ExpectedEvent(S05_ResetSortTableRops_SortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteRopQueryRowsResponseChecker34)), new ExpectedEvent(S05_ResetSortTableRops_SortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteRopQueryRowsResponseChecker35)));
                            label15:
;
                                goto label17;
                            }
                            if ((temp36 == 1)) {
                                this.Manager.Comment("reaching state \'S64\'");
                                int temp35 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S05_ResetSortTableRops_SortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteRopQueryRowsResponseChecker36)), new ExpectedEvent(S05_ResetSortTableRops_SortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteRopQueryRowsResponseChecker37)), new ExpectedEvent(S05_ResetSortTableRops_SortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteRopQueryRowsResponseChecker38)), new ExpectedEvent(S05_ResetSortTableRops_SortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteRopQueryRowsResponseChecker39)));
                                if ((temp35 == 0)) {
                                    S05_ResetSortTableRops_SortTable_TestSuiteS80();
                                    goto label16;
                                }
                                if ((temp35 == 1)) {
                                    S05_ResetSortTableRops_SortTable_TestSuiteS80();
                                    goto label16;
                                }
                                if ((temp35 == 2)) {
                                    S05_ResetSortTableRops_SortTable_TestSuiteS80();
                                    goto label16;
                                }
                                if ((temp35 == 3)) {
                                    S05_ResetSortTableRops_SortTable_TestSuiteS80();
                                    goto label16;
                                }
                                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S05_ResetSortTableRops_SortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteRopQueryRowsResponseChecker36)), new ExpectedEvent(S05_ResetSortTableRops_SortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteRopQueryRowsResponseChecker37)), new ExpectedEvent(S05_ResetSortTableRops_SortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteRopQueryRowsResponseChecker38)), new ExpectedEvent(S05_ResetSortTableRops_SortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteRopQueryRowsResponseChecker39)));
                            label16:
;
                                goto label17;
                            }
                            throw new InvalidOperationException("never reached");
                        label17:
;
                            goto label21;
                        }
                        if ((temp42 == 1)) {
                            this.Manager.Comment("reaching state \'S28\'");
                            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp37;
                            this.Manager.Comment("executing step \'call RopQueryRows(NoAdvance,True)\'");
                            temp37 = this.IMS_OXCTABLAdapterInstance.RopQueryRows(((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), true);
                            this.Manager.Checkpoint("MS-OXCTABL_R837");
                            this.Manager.Comment("reaching state \'S36\'");
                            this.Manager.Comment("checking step \'return RopQueryRows/success\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp37, "return of RopQueryRows, state S36");
                            this.Manager.Comment("reaching state \'S44\'");
                            bool temp38;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(443,out _)\'");
                            this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(443, out temp38);
                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp38);
                            this.Manager.Comment("reaching state \'S52\'");
                            int temp41 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_ResetSortTableRops_SortTable_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteCheckRequirementEnabledChecker21)), new ExpectedReturn(S05_ResetSortTableRops_SortTable_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteCheckRequirementEnabledChecker22)));
                            if ((temp41 == 0)) {
                                this.Manager.Comment("reaching state \'S65\'");
                                int temp39 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S05_ResetSortTableRops_SortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteRopQueryRowsResponseChecker40)), new ExpectedEvent(S05_ResetSortTableRops_SortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteRopQueryRowsResponseChecker41)), new ExpectedEvent(S05_ResetSortTableRops_SortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteRopQueryRowsResponseChecker42)), new ExpectedEvent(S05_ResetSortTableRops_SortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteRopQueryRowsResponseChecker43)));
                                if ((temp39 == 0)) {
                                    S05_ResetSortTableRops_SortTable_TestSuiteS81();
                                    goto label18;
                                }
                                if ((temp39 == 1)) {
                                    S05_ResetSortTableRops_SortTable_TestSuiteS81();
                                    goto label18;
                                }
                                if ((temp39 == 2)) {
                                    S05_ResetSortTableRops_SortTable_TestSuiteS81();
                                    goto label18;
                                }
                                if ((temp39 == 3)) {
                                    S05_ResetSortTableRops_SortTable_TestSuiteS81();
                                    goto label18;
                                }
                                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S05_ResetSortTableRops_SortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteRopQueryRowsResponseChecker40)), new ExpectedEvent(S05_ResetSortTableRops_SortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteRopQueryRowsResponseChecker41)), new ExpectedEvent(S05_ResetSortTableRops_SortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteRopQueryRowsResponseChecker42)), new ExpectedEvent(S05_ResetSortTableRops_SortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteRopQueryRowsResponseChecker43)));
                            label18:
;
                                goto label20;
                            }
                            if ((temp41 == 1)) {
                                this.Manager.Comment("reaching state \'S66\'");
                                int temp40 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S05_ResetSortTableRops_SortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteRopQueryRowsResponseChecker44)), new ExpectedEvent(S05_ResetSortTableRops_SortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteRopQueryRowsResponseChecker45)), new ExpectedEvent(S05_ResetSortTableRops_SortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteRopQueryRowsResponseChecker46)), new ExpectedEvent(S05_ResetSortTableRops_SortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteRopQueryRowsResponseChecker47)));
                                if ((temp40 == 0)) {
                                    S05_ResetSortTableRops_SortTable_TestSuiteS82();
                                    goto label19;
                                }
                                if ((temp40 == 1)) {
                                    S05_ResetSortTableRops_SortTable_TestSuiteS82();
                                    goto label19;
                                }
                                if ((temp40 == 2)) {
                                    S05_ResetSortTableRops_SortTable_TestSuiteS82();
                                    goto label19;
                                }
                                if ((temp40 == 3)) {
                                    S05_ResetSortTableRops_SortTable_TestSuiteS82();
                                    goto label19;
                                }
                                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S05_ResetSortTableRops_SortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteRopQueryRowsResponseChecker44)), new ExpectedEvent(S05_ResetSortTableRops_SortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteRopQueryRowsResponseChecker45)), new ExpectedEvent(S05_ResetSortTableRops_SortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteRopQueryRowsResponseChecker46)), new ExpectedEvent(S05_ResetSortTableRops_SortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteRopQueryRowsResponseChecker47)));
                            label19:
;
                                goto label20;
                            }
                            throw new InvalidOperationException("never reached");
                        label20:
;
                            goto label21;
                        }
                        throw new InvalidOperationException("never reached");
                    label21:
;
                        goto label29;
                    }
                    if ((temp55 == 1)) {
                        this.Manager.Comment("reaching state \'S18\'");
                        bool temp43;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(867,out _)\'");
                        this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(867, out temp43);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp43);
                        this.Manager.Comment("reaching state \'S22\'");
                        int temp54 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_ResetSortTableRops_SortTable_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteCheckRequirementEnabledChecker24)), new ExpectedReturn(S05_ResetSortTableRops_SortTable_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteCheckRequirementEnabledChecker27)));
                        if ((temp54 == 0)) {
                            this.Manager.Comment("reaching state \'S29\'");
                            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp44;
                            this.Manager.Comment("executing step \'call RopQueryRows(NoAdvance,True)\'");
                            temp44 = this.IMS_OXCTABLAdapterInstance.RopQueryRows(((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), true);
                            this.Manager.Checkpoint("MS-OXCTABL_R837");
                            this.Manager.Comment("reaching state \'S37\'");
                            this.Manager.Comment("checking step \'return RopQueryRows/success\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp44, "return of RopQueryRows, state S37");
                            this.Manager.Comment("reaching state \'S45\'");
                            bool temp45;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(443,out _)\'");
                            this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(443, out temp45);
                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp45);
                            this.Manager.Comment("reaching state \'S53\'");
                            int temp48 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_ResetSortTableRops_SortTable_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteCheckRequirementEnabledChecker25)), new ExpectedReturn(S05_ResetSortTableRops_SortTable_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteCheckRequirementEnabledChecker26)));
                            if ((temp48 == 0)) {
                                this.Manager.Comment("reaching state \'S67\'");
                                int temp46 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S05_ResetSortTableRops_SortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteRopQueryRowsResponseChecker48)), new ExpectedEvent(S05_ResetSortTableRops_SortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteRopQueryRowsResponseChecker49)), new ExpectedEvent(S05_ResetSortTableRops_SortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteRopQueryRowsResponseChecker50)), new ExpectedEvent(S05_ResetSortTableRops_SortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteRopQueryRowsResponseChecker51)));
                                if ((temp46 == 0)) {
                                    S05_ResetSortTableRops_SortTable_TestSuiteS83();
                                    goto label22;
                                }
                                if ((temp46 == 1)) {
                                    S05_ResetSortTableRops_SortTable_TestSuiteS83();
                                    goto label22;
                                }
                                if ((temp46 == 2)) {
                                    S05_ResetSortTableRops_SortTable_TestSuiteS83();
                                    goto label22;
                                }
                                if ((temp46 == 3)) {
                                    S05_ResetSortTableRops_SortTable_TestSuiteS83();
                                    goto label22;
                                }
                                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S05_ResetSortTableRops_SortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteRopQueryRowsResponseChecker48)), new ExpectedEvent(S05_ResetSortTableRops_SortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteRopQueryRowsResponseChecker49)), new ExpectedEvent(S05_ResetSortTableRops_SortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteRopQueryRowsResponseChecker50)), new ExpectedEvent(S05_ResetSortTableRops_SortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteRopQueryRowsResponseChecker51)));
                            label22:
;
                                goto label24;
                            }
                            if ((temp48 == 1)) {
                                this.Manager.Comment("reaching state \'S68\'");
                                int temp47 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S05_ResetSortTableRops_SortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteRopQueryRowsResponseChecker52)), new ExpectedEvent(S05_ResetSortTableRops_SortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteRopQueryRowsResponseChecker53)), new ExpectedEvent(S05_ResetSortTableRops_SortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteRopQueryRowsResponseChecker54)), new ExpectedEvent(S05_ResetSortTableRops_SortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteRopQueryRowsResponseChecker55)));
                                if ((temp47 == 0)) {
                                    S05_ResetSortTableRops_SortTable_TestSuiteS84();
                                    goto label23;
                                }
                                if ((temp47 == 1)) {
                                    S05_ResetSortTableRops_SortTable_TestSuiteS84();
                                    goto label23;
                                }
                                if ((temp47 == 2)) {
                                    S05_ResetSortTableRops_SortTable_TestSuiteS84();
                                    goto label23;
                                }
                                if ((temp47 == 3)) {
                                    S05_ResetSortTableRops_SortTable_TestSuiteS84();
                                    goto label23;
                                }
                                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S05_ResetSortTableRops_SortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteRopQueryRowsResponseChecker52)), new ExpectedEvent(S05_ResetSortTableRops_SortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteRopQueryRowsResponseChecker53)), new ExpectedEvent(S05_ResetSortTableRops_SortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteRopQueryRowsResponseChecker54)), new ExpectedEvent(S05_ResetSortTableRops_SortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteRopQueryRowsResponseChecker55)));
                            label23:
;
                                goto label24;
                            }
                            throw new InvalidOperationException("never reached");
                        label24:
;
                            goto label28;
                        }
                        if ((temp54 == 1)) {
                            this.Manager.Comment("reaching state \'S30\'");
                            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp49;
                            this.Manager.Comment("executing step \'call RopQueryRows(NoAdvance,True)\'");
                            temp49 = this.IMS_OXCTABLAdapterInstance.RopQueryRows(((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), true);
                            this.Manager.Checkpoint("MS-OXCTABL_R837");
                            this.Manager.Comment("reaching state \'S38\'");
                            this.Manager.Comment("checking step \'return RopQueryRows/success\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp49, "return of RopQueryRows, state S38");
                            this.Manager.Comment("reaching state \'S46\'");
                            bool temp50;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(443,out _)\'");
                            this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(443, out temp50);
                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp50);
                            this.Manager.Comment("reaching state \'S54\'");
                            int temp53 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S05_ResetSortTableRops_SortTable_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteCheckRequirementEnabledChecker28)), new ExpectedReturn(S05_ResetSortTableRops_SortTable_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteCheckRequirementEnabledChecker29)));
                            if ((temp53 == 0)) {
                                this.Manager.Comment("reaching state \'S69\'");
                                int temp51 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S05_ResetSortTableRops_SortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteRopQueryRowsResponseChecker56)), new ExpectedEvent(S05_ResetSortTableRops_SortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteRopQueryRowsResponseChecker57)), new ExpectedEvent(S05_ResetSortTableRops_SortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteRopQueryRowsResponseChecker58)), new ExpectedEvent(S05_ResetSortTableRops_SortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteRopQueryRowsResponseChecker59)));
                                if ((temp51 == 0)) {
                                    S05_ResetSortTableRops_SortTable_TestSuiteS85();
                                    goto label25;
                                }
                                if ((temp51 == 1)) {
                                    S05_ResetSortTableRops_SortTable_TestSuiteS85();
                                    goto label25;
                                }
                                if ((temp51 == 2)) {
                                    S05_ResetSortTableRops_SortTable_TestSuiteS85();
                                    goto label25;
                                }
                                if ((temp51 == 3)) {
                                    S05_ResetSortTableRops_SortTable_TestSuiteS85();
                                    goto label25;
                                }
                                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S05_ResetSortTableRops_SortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteRopQueryRowsResponseChecker56)), new ExpectedEvent(S05_ResetSortTableRops_SortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteRopQueryRowsResponseChecker57)), new ExpectedEvent(S05_ResetSortTableRops_SortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteRopQueryRowsResponseChecker58)), new ExpectedEvent(S05_ResetSortTableRops_SortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteRopQueryRowsResponseChecker59)));
                            label25:
;
                                goto label27;
                            }
                            if ((temp53 == 1)) {
                                this.Manager.Comment("reaching state \'S70\'");
                                int temp52 = this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S05_ResetSortTableRops_SortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteRopQueryRowsResponseChecker60)), new ExpectedEvent(S05_ResetSortTableRops_SortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteRopQueryRowsResponseChecker61)), new ExpectedEvent(S05_ResetSortTableRops_SortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteRopQueryRowsResponseChecker62)), new ExpectedEvent(S05_ResetSortTableRops_SortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteRopQueryRowsResponseChecker63)));
                                if ((temp52 == 0)) {
                                    S05_ResetSortTableRops_SortTable_TestSuiteS86();
                                    goto label26;
                                }
                                if ((temp52 == 1)) {
                                    S05_ResetSortTableRops_SortTable_TestSuiteS86();
                                    goto label26;
                                }
                                if ((temp52 == 2)) {
                                    S05_ResetSortTableRops_SortTable_TestSuiteS86();
                                    goto label26;
                                }
                                if ((temp52 == 3)) {
                                    S05_ResetSortTableRops_SortTable_TestSuiteS86();
                                    goto label26;
                                }
                                this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S05_ResetSortTableRops_SortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteRopQueryRowsResponseChecker60)), new ExpectedEvent(S05_ResetSortTableRops_SortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteRopQueryRowsResponseChecker61)), new ExpectedEvent(S05_ResetSortTableRops_SortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteRopQueryRowsResponseChecker62)), new ExpectedEvent(S05_ResetSortTableRops_SortTable_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteRopQueryRowsResponseChecker63)));
                            label26:
;
                                goto label27;
                            }
                            throw new InvalidOperationException("never reached");
                        label27:
;
                            goto label28;
                        }
                        throw new InvalidOperationException("never reached");
                    label28:
;
                        goto label29;
                    }
                    throw new InvalidOperationException("never reached");
                label29:
;
                    goto label30;
                }
                throw new InvalidOperationException("never reached");
            label30:
;
                goto label31;
            }
            throw new InvalidOperationException("never reached");
        label31:
;
            this.Manager.EndTest();
        }
        
        private void MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteCheckMAPIHTTPTransportSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S1");
        }
        
        private void MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteCheckMAPIHTTPTransportSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S1");
        }
        
        private void MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteCheckRequirementEnabledChecker(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S10");
        }
        
        private void MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteCheckRequirementEnabledChecker1(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S13");
        }
        
        private void MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteCheckRequirementEnabledChecker2(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S19");
        }
        
        private void MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteCheckRequirementEnabledChecker3(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S47");
        }
        
        private void MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteRopQueryRowsResponseChecker(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,SORTTABLE,True,Fal" +
                    "se,True,True,BOOKMARK_BEGINNING,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S55");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S55");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S55");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S55");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S55");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S55");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S55");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S55");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(0)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S55");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S55");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R27, MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77, MS-OXCTABL_R119, MS-OXCTABL_R437, MS-OXCTABL_R438, MS-OXCTABL_R443");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R27");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
            this.Manager.Checkpoint("MS-OXCTABL_R119");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R438");
            this.Manager.Checkpoint("MS-OXCTABL_R443");
        }
        
        private void S05_ResetSortTableRops_SortTable_TestSuiteS71() {
            this.Manager.Comment("reaching state \'S71\'");
        }
        
        private void MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteRopQueryRowsResponseChecker1(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,SORTTABLE,True,Fal" +
                    "se,True,True,BOOKMARK_END,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S55");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S55");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S55");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S55");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S55");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S55");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S55");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S55");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_END, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S55");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S55");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77, MS-OXCTABL_R119, MS-OXCTABL_R437, MS-OXCTABL_R438, MS-OXCTABL_R443");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
            this.Manager.Checkpoint("MS-OXCTABL_R119");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R438");
            this.Manager.Checkpoint("MS-OXCTABL_R443");
        }
        
        private void MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteRopQueryRowsResponseChecker2(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,SORTTABLE,True,Fal" +
                    "se,True,True,BOOKMARK_CUSTOM,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S55");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S55");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S55");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S55");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S55");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S55");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S55");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S55");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_CUSTOM, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S55");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S55");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77, MS-OXCTABL_R119, MS-OXCTABL_R437, MS-OXCTABL_R438, MS-OXCTABL_R443");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
            this.Manager.Checkpoint("MS-OXCTABL_R119");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R438");
            this.Manager.Checkpoint("MS-OXCTABL_R443");
        }
        
        private void MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteRopQueryRowsResponseChecker3(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,SORTTABLE,True,Fal" +
                    "se,True,True,BOOKMARK_CURRENT,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S55");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S55");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S55");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S55");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S55");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S55");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S55");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S55");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S55");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S55");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77, MS-OXCTABL_R119, MS-OXCTABL_R437, MS-OXCTABL_R438, MS-OXCTABL_R443");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
            this.Manager.Checkpoint("MS-OXCTABL_R119");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R438");
            this.Manager.Checkpoint("MS-OXCTABL_R443");
        }
        
        private void MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteCheckRequirementEnabledChecker4(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S47");
        }
        
        private void MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteRopQueryRowsResponseChecker4(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,SORTTABLE,True,Fal" +
                    "se,True,True,BOOKMARK_BEGINNING,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S56");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S56");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S56");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S56");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S56");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S56");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S56");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S56");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(0)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S56");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S56");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R27, MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77, MS-OXCTABL_R119, MS-OXCTABL_R437, MS-OXCTABL_R438");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R27");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
            this.Manager.Checkpoint("MS-OXCTABL_R119");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R438");
        }
        
        private void S05_ResetSortTableRops_SortTable_TestSuiteS72() {
            this.Manager.Comment("reaching state \'S72\'");
        }
        
        private void MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteRopQueryRowsResponseChecker5(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,SORTTABLE,True,Fal" +
                    "se,True,True,BOOKMARK_END,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S56");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S56");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S56");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S56");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S56");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S56");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S56");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S56");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_END, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S56");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S56");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77, MS-OXCTABL_R119, MS-OXCTABL_R437, MS-OXCTABL_R438");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
            this.Manager.Checkpoint("MS-OXCTABL_R119");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R438");
        }
        
        private void MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteRopQueryRowsResponseChecker6(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,SORTTABLE,True,Fal" +
                    "se,True,True,BOOKMARK_CUSTOM,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S56");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S56");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S56");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S56");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S56");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S56");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S56");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S56");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_CUSTOM, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S56");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S56");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77, MS-OXCTABL_R119, MS-OXCTABL_R437, MS-OXCTABL_R438");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
            this.Manager.Checkpoint("MS-OXCTABL_R119");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R438");
        }
        
        private void MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteRopQueryRowsResponseChecker7(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,SORTTABLE,True,Fal" +
                    "se,True,True,BOOKMARK_CURRENT,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S56");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S56");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S56");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S56");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S56");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S56");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S56");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S56");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S56");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S56");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77, MS-OXCTABL_R119, MS-OXCTABL_R437, MS-OXCTABL_R438");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
            this.Manager.Checkpoint("MS-OXCTABL_R119");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R438");
        }
        
        private void MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteCheckRequirementEnabledChecker5(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S19");
        }
        
        private void MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteCheckRequirementEnabledChecker6(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S48");
        }
        
        private void MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteRopQueryRowsResponseChecker8(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,SORTTABLE,True,Fal" +
                    "se,True,True,BOOKMARK_BEGINNING,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S57");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S57");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S57");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S57");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S57");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S57");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S57");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S57");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(0)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S57");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S57");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R27, MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77, MS-OXCTABL_R119, MS-OXCTABL_R437, MS-OXCTABL_R438, MS-OXCTABL_R443");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R27");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
            this.Manager.Checkpoint("MS-OXCTABL_R119");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R438");
            this.Manager.Checkpoint("MS-OXCTABL_R443");
        }
        
        private void S05_ResetSortTableRops_SortTable_TestSuiteS73() {
            this.Manager.Comment("reaching state \'S73\'");
        }
        
        private void MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteRopQueryRowsResponseChecker9(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,SORTTABLE,True,Fal" +
                    "se,True,True,BOOKMARK_END,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S57");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S57");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S57");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S57");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S57");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S57");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S57");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S57");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_END, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S57");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S57");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77, MS-OXCTABL_R119, MS-OXCTABL_R437, MS-OXCTABL_R438, MS-OXCTABL_R443");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
            this.Manager.Checkpoint("MS-OXCTABL_R119");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R438");
            this.Manager.Checkpoint("MS-OXCTABL_R443");
        }
        
        private void MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteRopQueryRowsResponseChecker10(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,SORTTABLE,True,Fal" +
                    "se,True,True,BOOKMARK_CUSTOM,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S57");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S57");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S57");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S57");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S57");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S57");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S57");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S57");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_CUSTOM, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S57");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S57");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77, MS-OXCTABL_R119, MS-OXCTABL_R437, MS-OXCTABL_R438, MS-OXCTABL_R443");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
            this.Manager.Checkpoint("MS-OXCTABL_R119");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R438");
            this.Manager.Checkpoint("MS-OXCTABL_R443");
        }
        
        private void MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteRopQueryRowsResponseChecker11(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,SORTTABLE,True,Fal" +
                    "se,True,True,BOOKMARK_CURRENT,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S57");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S57");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S57");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S57");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S57");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S57");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S57");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S57");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S57");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S57");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77, MS-OXCTABL_R119, MS-OXCTABL_R437, MS-OXCTABL_R438, MS-OXCTABL_R443");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
            this.Manager.Checkpoint("MS-OXCTABL_R119");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R438");
            this.Manager.Checkpoint("MS-OXCTABL_R443");
        }
        
        private void MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteCheckRequirementEnabledChecker7(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S48");
        }
        
        private void MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteRopQueryRowsResponseChecker12(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,SORTTABLE,True,Fal" +
                    "se,True,True,BOOKMARK_BEGINNING,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S58");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S58");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S58");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S58");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S58");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S58");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S58");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S58");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(0)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S58");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S58");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R27, MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77, MS-OXCTABL_R119, MS-OXCTABL_R437, MS-OXCTABL_R438");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R27");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
            this.Manager.Checkpoint("MS-OXCTABL_R119");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R438");
        }
        
        private void S05_ResetSortTableRops_SortTable_TestSuiteS74() {
            this.Manager.Comment("reaching state \'S74\'");
        }
        
        private void MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteRopQueryRowsResponseChecker13(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,SORTTABLE,True,Fal" +
                    "se,True,True,BOOKMARK_END,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S58");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S58");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S58");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S58");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S58");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S58");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S58");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S58");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_END, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S58");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S58");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77, MS-OXCTABL_R119, MS-OXCTABL_R437, MS-OXCTABL_R438");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
            this.Manager.Checkpoint("MS-OXCTABL_R119");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R438");
        }
        
        private void MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteRopQueryRowsResponseChecker14(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,SORTTABLE,True,Fal" +
                    "se,True,True,BOOKMARK_CUSTOM,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S58");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S58");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S58");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S58");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S58");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S58");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S58");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S58");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_CUSTOM, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S58");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S58");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77, MS-OXCTABL_R119, MS-OXCTABL_R437, MS-OXCTABL_R438");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
            this.Manager.Checkpoint("MS-OXCTABL_R119");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R438");
        }
        
        private void MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteRopQueryRowsResponseChecker15(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,SORTTABLE,True,Fal" +
                    "se,True,True,BOOKMARK_CURRENT,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S58");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S58");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S58");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S58");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S58");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S58");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S58");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S58");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S58");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S58");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77, MS-OXCTABL_R119, MS-OXCTABL_R437, MS-OXCTABL_R438");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
            this.Manager.Checkpoint("MS-OXCTABL_R119");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R438");
        }
        
        private void MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteCheckRequirementEnabledChecker8(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S13");
        }
        
        private void MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteCheckRequirementEnabledChecker9(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S20");
        }
        
        private void MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteCheckRequirementEnabledChecker10(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S49");
        }
        
        private void MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteRopQueryRowsResponseChecker16(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,SORTTABLE,True,Fal" +
                    "se,True,True,BOOKMARK_BEGINNING,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S59");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S59");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S59");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S59");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S59");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S59");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S59");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S59");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(0)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S59");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S59");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R27, MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77, MS-OXCTABL_R119, MS-OXCTABL_R437, MS-OXCTABL_R438, MS-OXCTABL_R443");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R27");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
            this.Manager.Checkpoint("MS-OXCTABL_R119");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R438");
            this.Manager.Checkpoint("MS-OXCTABL_R443");
        }
        
        private void S05_ResetSortTableRops_SortTable_TestSuiteS75() {
            this.Manager.Comment("reaching state \'S75\'");
        }
        
        private void MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteRopQueryRowsResponseChecker17(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,SORTTABLE,True,Fal" +
                    "se,True,True,BOOKMARK_END,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S59");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S59");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S59");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S59");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S59");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S59");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S59");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S59");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_END, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S59");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S59");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77, MS-OXCTABL_R119, MS-OXCTABL_R437, MS-OXCTABL_R438, MS-OXCTABL_R443");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
            this.Manager.Checkpoint("MS-OXCTABL_R119");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R438");
            this.Manager.Checkpoint("MS-OXCTABL_R443");
        }
        
        private void MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteRopQueryRowsResponseChecker18(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,SORTTABLE,True,Fal" +
                    "se,True,True,BOOKMARK_CUSTOM,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S59");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S59");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S59");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S59");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S59");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S59");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S59");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S59");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_CUSTOM, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S59");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S59");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77, MS-OXCTABL_R119, MS-OXCTABL_R437, MS-OXCTABL_R438, MS-OXCTABL_R443");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
            this.Manager.Checkpoint("MS-OXCTABL_R119");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R438");
            this.Manager.Checkpoint("MS-OXCTABL_R443");
        }
        
        private void MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteRopQueryRowsResponseChecker19(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,SORTTABLE,True,Fal" +
                    "se,True,True,BOOKMARK_CURRENT,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S59");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S59");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S59");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S59");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S59");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S59");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S59");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S59");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S59");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S59");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77, MS-OXCTABL_R119, MS-OXCTABL_R437, MS-OXCTABL_R438, MS-OXCTABL_R443");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
            this.Manager.Checkpoint("MS-OXCTABL_R119");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R438");
            this.Manager.Checkpoint("MS-OXCTABL_R443");
        }
        
        private void MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteCheckRequirementEnabledChecker11(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S49");
        }
        
        private void MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteRopQueryRowsResponseChecker20(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,SORTTABLE,True,Fal" +
                    "se,True,True,BOOKMARK_BEGINNING,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S60");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S60");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S60");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S60");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S60");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S60");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S60");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S60");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(0)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S60");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S60");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R27, MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77, MS-OXCTABL_R119, MS-OXCTABL_R437, MS-OXCTABL_R438");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R27");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
            this.Manager.Checkpoint("MS-OXCTABL_R119");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R438");
        }
        
        private void S05_ResetSortTableRops_SortTable_TestSuiteS76() {
            this.Manager.Comment("reaching state \'S76\'");
        }
        
        private void MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteRopQueryRowsResponseChecker21(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,SORTTABLE,True,Fal" +
                    "se,True,True,BOOKMARK_END,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S60");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S60");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S60");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S60");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S60");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S60");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S60");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S60");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_END, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S60");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S60");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77, MS-OXCTABL_R119, MS-OXCTABL_R437, MS-OXCTABL_R438");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
            this.Manager.Checkpoint("MS-OXCTABL_R119");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R438");
        }
        
        private void MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteRopQueryRowsResponseChecker22(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,SORTTABLE,True,Fal" +
                    "se,True,True,BOOKMARK_CUSTOM,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S60");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S60");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S60");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S60");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S60");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S60");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S60");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S60");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_CUSTOM, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S60");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S60");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77, MS-OXCTABL_R119, MS-OXCTABL_R437, MS-OXCTABL_R438");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
            this.Manager.Checkpoint("MS-OXCTABL_R119");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R438");
        }
        
        private void MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteRopQueryRowsResponseChecker23(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,SORTTABLE,True,Fal" +
                    "se,True,True,BOOKMARK_CURRENT,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S60");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S60");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S60");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S60");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S60");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S60");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S60");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S60");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S60");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S60");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77, MS-OXCTABL_R119, MS-OXCTABL_R437, MS-OXCTABL_R438");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
            this.Manager.Checkpoint("MS-OXCTABL_R119");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R438");
        }
        
        private void MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteCheckRequirementEnabledChecker12(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S20");
        }
        
        private void MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteCheckRequirementEnabledChecker13(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S50");
        }
        
        private void MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteRopQueryRowsResponseChecker24(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,SORTTABLE,True,Fal" +
                    "se,True,True,BOOKMARK_BEGINNING,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S61");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S61");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S61");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S61");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S61");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S61");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S61");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S61");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(0)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S61");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S61");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R27, MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77, MS-OXCTABL_R119, MS-OXCTABL_R437, MS-OXCTABL_R438");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R27");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
            this.Manager.Checkpoint("MS-OXCTABL_R119");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R438");
        }
        
        private void S05_ResetSortTableRops_SortTable_TestSuiteS77() {
            this.Manager.Comment("reaching state \'S77\'");
        }
        
        private void MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteRopQueryRowsResponseChecker25(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,SORTTABLE,True,Fal" +
                    "se,True,True,BOOKMARK_END,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S61");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S61");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S61");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S61");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S61");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S61");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S61");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S61");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_END, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S61");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S61");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77, MS-OXCTABL_R119, MS-OXCTABL_R437, MS-OXCTABL_R438");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
            this.Manager.Checkpoint("MS-OXCTABL_R119");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R438");
        }
        
        private void MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteRopQueryRowsResponseChecker26(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,SORTTABLE,True,Fal" +
                    "se,True,True,BOOKMARK_CUSTOM,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S61");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S61");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S61");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S61");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S61");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S61");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S61");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S61");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_CUSTOM, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S61");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S61");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77, MS-OXCTABL_R119, MS-OXCTABL_R437, MS-OXCTABL_R438");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
            this.Manager.Checkpoint("MS-OXCTABL_R119");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R438");
        }
        
        private void MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteRopQueryRowsResponseChecker27(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,SORTTABLE,True,Fal" +
                    "se,True,True,BOOKMARK_CURRENT,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S61");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S61");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S61");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S61");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S61");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S61");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S61");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S61");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S61");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S61");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77, MS-OXCTABL_R119, MS-OXCTABL_R437, MS-OXCTABL_R438");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
            this.Manager.Checkpoint("MS-OXCTABL_R119");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R438");
        }
        
        private void MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteCheckRequirementEnabledChecker14(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S50");
        }
        
        private void MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteRopQueryRowsResponseChecker28(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,SORTTABLE,True,Fal" +
                    "se,True,True,BOOKMARK_BEGINNING,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S62");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S62");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S62");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S62");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S62");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S62");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S62");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S62");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(0)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S62");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S62");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R27, MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77, MS-OXCTABL_R119, MS-OXCTABL_R437, MS-OXCTABL_R438, MS-OXCTABL_R443");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R27");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
            this.Manager.Checkpoint("MS-OXCTABL_R119");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R438");
            this.Manager.Checkpoint("MS-OXCTABL_R443");
        }
        
        private void S05_ResetSortTableRops_SortTable_TestSuiteS78() {
            this.Manager.Comment("reaching state \'S78\'");
        }
        
        private void MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteRopQueryRowsResponseChecker29(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,SORTTABLE,True,Fal" +
                    "se,True,True,BOOKMARK_END,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S62");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S62");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S62");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S62");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S62");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S62");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S62");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S62");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_END, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S62");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S62");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77, MS-OXCTABL_R119, MS-OXCTABL_R437, MS-OXCTABL_R438, MS-OXCTABL_R443");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
            this.Manager.Checkpoint("MS-OXCTABL_R119");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R438");
            this.Manager.Checkpoint("MS-OXCTABL_R443");
        }
        
        private void MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteRopQueryRowsResponseChecker30(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,SORTTABLE,True,Fal" +
                    "se,True,True,BOOKMARK_CUSTOM,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S62");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S62");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S62");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S62");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S62");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S62");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S62");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S62");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_CUSTOM, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S62");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S62");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77, MS-OXCTABL_R119, MS-OXCTABL_R437, MS-OXCTABL_R438, MS-OXCTABL_R443");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
            this.Manager.Checkpoint("MS-OXCTABL_R119");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R438");
            this.Manager.Checkpoint("MS-OXCTABL_R443");
        }
        
        private void MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteRopQueryRowsResponseChecker31(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,SORTTABLE,True,Fal" +
                    "se,True,True,BOOKMARK_CURRENT,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S62");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S62");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S62");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S62");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S62");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S62");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S62");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S62");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S62");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S62");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77, MS-OXCTABL_R119, MS-OXCTABL_R437, MS-OXCTABL_R438, MS-OXCTABL_R443");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
            this.Manager.Checkpoint("MS-OXCTABL_R119");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R438");
            this.Manager.Checkpoint("MS-OXCTABL_R443");
        }
        
        private void MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteCheckRequirementEnabledChecker15(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S10");
        }
        
        private void MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteCheckRequirementEnabledChecker16(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S14");
        }
        
        private void MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteCheckRequirementEnabledChecker17(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S21");
        }
        
        private void MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteCheckRequirementEnabledChecker18(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S51");
        }
        
        private void MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteRopQueryRowsResponseChecker32(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,SORTTABLE,True,Fal" +
                    "se,True,True,BOOKMARK_BEGINNING,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S63");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S63");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S63");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S63");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S63");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S63");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S63");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S63");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(0)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S63");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S63");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R27, MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77, MS-OXCTABL_R119, MS-OXCTABL_R437, MS-OXCTABL_R438, MS-OXCTABL_R443");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R27");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
            this.Manager.Checkpoint("MS-OXCTABL_R119");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R438");
            this.Manager.Checkpoint("MS-OXCTABL_R443");
        }
        
        private void S05_ResetSortTableRops_SortTable_TestSuiteS79() {
            this.Manager.Comment("reaching state \'S79\'");
        }
        
        private void MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteRopQueryRowsResponseChecker33(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,SORTTABLE,True,Fal" +
                    "se,True,True,BOOKMARK_END,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S63");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S63");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S63");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S63");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S63");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S63");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S63");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S63");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_END, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S63");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S63");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77, MS-OXCTABL_R119, MS-OXCTABL_R437, MS-OXCTABL_R438, MS-OXCTABL_R443");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
            this.Manager.Checkpoint("MS-OXCTABL_R119");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R438");
            this.Manager.Checkpoint("MS-OXCTABL_R443");
        }
        
        private void MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteRopQueryRowsResponseChecker34(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,SORTTABLE,True,Fal" +
                    "se,True,True,BOOKMARK_CUSTOM,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S63");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S63");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S63");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S63");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S63");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S63");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S63");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S63");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_CUSTOM, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S63");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S63");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77, MS-OXCTABL_R119, MS-OXCTABL_R437, MS-OXCTABL_R438, MS-OXCTABL_R443");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
            this.Manager.Checkpoint("MS-OXCTABL_R119");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R438");
            this.Manager.Checkpoint("MS-OXCTABL_R443");
        }
        
        private void MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteRopQueryRowsResponseChecker35(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,SORTTABLE,True,Fal" +
                    "se,True,True,BOOKMARK_CURRENT,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S63");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S63");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S63");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S63");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S63");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S63");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S63");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S63");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S63");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S63");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77, MS-OXCTABL_R119, MS-OXCTABL_R437, MS-OXCTABL_R438, MS-OXCTABL_R443");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
            this.Manager.Checkpoint("MS-OXCTABL_R119");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R438");
            this.Manager.Checkpoint("MS-OXCTABL_R443");
        }
        
        private void MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteCheckRequirementEnabledChecker19(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S51");
        }
        
        private void MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteRopQueryRowsResponseChecker36(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,SORTTABLE,True,Fal" +
                    "se,True,True,BOOKMARK_BEGINNING,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S64");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S64");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S64");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S64");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S64");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S64");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S64");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S64");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(0)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S64");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S64");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R27, MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77, MS-OXCTABL_R119, MS-OXCTABL_R437, MS-OXCTABL_R438");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R27");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
            this.Manager.Checkpoint("MS-OXCTABL_R119");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R438");
        }
        
        private void S05_ResetSortTableRops_SortTable_TestSuiteS80() {
            this.Manager.Comment("reaching state \'S80\'");
        }
        
        private void MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteRopQueryRowsResponseChecker37(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,SORTTABLE,True,Fal" +
                    "se,True,True,BOOKMARK_END,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S64");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S64");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S64");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S64");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S64");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S64");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S64");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S64");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_END, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S64");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S64");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77, MS-OXCTABL_R119, MS-OXCTABL_R437, MS-OXCTABL_R438");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
            this.Manager.Checkpoint("MS-OXCTABL_R119");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R438");
        }
        
        private void MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteRopQueryRowsResponseChecker38(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,SORTTABLE,True,Fal" +
                    "se,True,True,BOOKMARK_CUSTOM,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S64");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S64");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S64");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S64");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S64");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S64");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S64");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S64");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_CUSTOM, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S64");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S64");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77, MS-OXCTABL_R119, MS-OXCTABL_R437, MS-OXCTABL_R438");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
            this.Manager.Checkpoint("MS-OXCTABL_R119");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R438");
        }
        
        private void MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteRopQueryRowsResponseChecker39(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,SORTTABLE,True,Fal" +
                    "se,True,True,BOOKMARK_CURRENT,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S64");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S64");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S64");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S64");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S64");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S64");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S64");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S64");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S64");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S64");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77, MS-OXCTABL_R119, MS-OXCTABL_R437, MS-OXCTABL_R438");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
            this.Manager.Checkpoint("MS-OXCTABL_R119");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R438");
        }
        
        private void MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteCheckRequirementEnabledChecker20(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S21");
        }
        
        private void MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteCheckRequirementEnabledChecker21(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S52");
        }
        
        private void MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteRopQueryRowsResponseChecker40(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,SORTTABLE,True,Fal" +
                    "se,True,True,BOOKMARK_BEGINNING,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S65");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S65");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S65");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S65");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S65");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S65");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S65");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S65");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(0)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S65");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S65");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R27, MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77, MS-OXCTABL_R119, MS-OXCTABL_R437, MS-OXCTABL_R438, MS-OXCTABL_R443");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R27");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
            this.Manager.Checkpoint("MS-OXCTABL_R119");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R438");
            this.Manager.Checkpoint("MS-OXCTABL_R443");
        }
        
        private void S05_ResetSortTableRops_SortTable_TestSuiteS81() {
            this.Manager.Comment("reaching state \'S81\'");
        }
        
        private void MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteRopQueryRowsResponseChecker41(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,SORTTABLE,True,Fal" +
                    "se,True,True,BOOKMARK_END,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S65");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S65");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S65");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S65");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S65");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S65");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S65");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S65");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_END, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S65");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S65");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77, MS-OXCTABL_R119, MS-OXCTABL_R437, MS-OXCTABL_R438, MS-OXCTABL_R443");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
            this.Manager.Checkpoint("MS-OXCTABL_R119");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R438");
            this.Manager.Checkpoint("MS-OXCTABL_R443");
        }
        
        private void MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteRopQueryRowsResponseChecker42(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,SORTTABLE,True,Fal" +
                    "se,True,True,BOOKMARK_CUSTOM,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S65");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S65");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S65");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S65");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S65");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S65");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S65");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S65");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_CUSTOM, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S65");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S65");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77, MS-OXCTABL_R119, MS-OXCTABL_R437, MS-OXCTABL_R438, MS-OXCTABL_R443");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
            this.Manager.Checkpoint("MS-OXCTABL_R119");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R438");
            this.Manager.Checkpoint("MS-OXCTABL_R443");
        }
        
        private void MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteRopQueryRowsResponseChecker43(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,SORTTABLE,True,Fal" +
                    "se,True,True,BOOKMARK_CURRENT,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S65");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S65");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S65");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S65");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S65");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S65");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S65");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S65");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S65");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S65");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77, MS-OXCTABL_R119, MS-OXCTABL_R437, MS-OXCTABL_R438, MS-OXCTABL_R443");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
            this.Manager.Checkpoint("MS-OXCTABL_R119");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R438");
            this.Manager.Checkpoint("MS-OXCTABL_R443");
        }
        
        private void MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteCheckRequirementEnabledChecker22(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S52");
        }
        
        private void MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteRopQueryRowsResponseChecker44(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,SORTTABLE,True,Fal" +
                    "se,True,True,BOOKMARK_BEGINNING,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S66");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S66");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S66");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S66");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S66");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S66");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S66");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S66");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(0)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S66");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S66");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R27, MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77, MS-OXCTABL_R119, MS-OXCTABL_R437, MS-OXCTABL_R438");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R27");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
            this.Manager.Checkpoint("MS-OXCTABL_R119");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R438");
        }
        
        private void S05_ResetSortTableRops_SortTable_TestSuiteS82() {
            this.Manager.Comment("reaching state \'S82\'");
        }
        
        private void MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteRopQueryRowsResponseChecker45(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,SORTTABLE,True,Fal" +
                    "se,True,True,BOOKMARK_END,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S66");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S66");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S66");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S66");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S66");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S66");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S66");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S66");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_END, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S66");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S66");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77, MS-OXCTABL_R119, MS-OXCTABL_R437, MS-OXCTABL_R438");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
            this.Manager.Checkpoint("MS-OXCTABL_R119");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R438");
        }
        
        private void MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteRopQueryRowsResponseChecker46(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,SORTTABLE,True,Fal" +
                    "se,True,True,BOOKMARK_CUSTOM,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S66");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S66");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S66");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S66");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S66");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S66");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S66");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S66");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_CUSTOM, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S66");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S66");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77, MS-OXCTABL_R119, MS-OXCTABL_R437, MS-OXCTABL_R438");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
            this.Manager.Checkpoint("MS-OXCTABL_R119");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R438");
        }
        
        private void MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteRopQueryRowsResponseChecker47(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,SORTTABLE,True,Fal" +
                    "se,True,True,BOOKMARK_CURRENT,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S66");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S66");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S66");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S66");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S66");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S66");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S66");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S66");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S66");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S66");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77, MS-OXCTABL_R119, MS-OXCTABL_R437, MS-OXCTABL_R438");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
            this.Manager.Checkpoint("MS-OXCTABL_R119");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R438");
        }
        
        private void MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteCheckRequirementEnabledChecker23(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S14");
        }
        
        private void MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteCheckRequirementEnabledChecker24(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S22");
        }
        
        private void MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteCheckRequirementEnabledChecker25(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S53");
        }
        
        private void MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteRopQueryRowsResponseChecker48(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,SORTTABLE,True,Fal" +
                    "se,True,True,BOOKMARK_BEGINNING,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S67");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S67");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S67");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S67");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S67");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S67");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S67");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S67");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(0)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S67");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S67");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R27, MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77, MS-OXCTABL_R119, MS-OXCTABL_R437, MS-OXCTABL_R438");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R27");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
            this.Manager.Checkpoint("MS-OXCTABL_R119");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R438");
        }
        
        private void S05_ResetSortTableRops_SortTable_TestSuiteS83() {
            this.Manager.Comment("reaching state \'S83\'");
        }
        
        private void MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteRopQueryRowsResponseChecker49(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,SORTTABLE,True,Fal" +
                    "se,True,True,BOOKMARK_END,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S67");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S67");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S67");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S67");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S67");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S67");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S67");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S67");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_END, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S67");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S67");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77, MS-OXCTABL_R119, MS-OXCTABL_R437, MS-OXCTABL_R438");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
            this.Manager.Checkpoint("MS-OXCTABL_R119");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R438");
        }
        
        private void MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteRopQueryRowsResponseChecker50(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,SORTTABLE,True,Fal" +
                    "se,True,True,BOOKMARK_CUSTOM,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S67");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S67");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S67");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S67");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S67");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S67");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S67");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S67");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_CUSTOM, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S67");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S67");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77, MS-OXCTABL_R119, MS-OXCTABL_R437, MS-OXCTABL_R438");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
            this.Manager.Checkpoint("MS-OXCTABL_R119");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R438");
        }
        
        private void MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteRopQueryRowsResponseChecker51(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,SORTTABLE,True,Fal" +
                    "se,True,True,BOOKMARK_CURRENT,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S67");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S67");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S67");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S67");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S67");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S67");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S67");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S67");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S67");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S67");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77, MS-OXCTABL_R119, MS-OXCTABL_R437, MS-OXCTABL_R438");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
            this.Manager.Checkpoint("MS-OXCTABL_R119");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R438");
        }
        
        private void MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteCheckRequirementEnabledChecker26(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S53");
        }
        
        private void MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteRopQueryRowsResponseChecker52(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,SORTTABLE,True,Fal" +
                    "se,True,True,BOOKMARK_BEGINNING,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S68");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S68");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S68");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S68");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S68");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S68");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S68");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S68");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(0)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S68");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S68");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R27, MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77, MS-OXCTABL_R119, MS-OXCTABL_R437, MS-OXCTABL_R438, MS-OXCTABL_R443");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R27");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
            this.Manager.Checkpoint("MS-OXCTABL_R119");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R438");
            this.Manager.Checkpoint("MS-OXCTABL_R443");
        }
        
        private void S05_ResetSortTableRops_SortTable_TestSuiteS84() {
            this.Manager.Comment("reaching state \'S84\'");
        }
        
        private void MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteRopQueryRowsResponseChecker53(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,SORTTABLE,True,Fal" +
                    "se,True,True,BOOKMARK_END,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S68");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S68");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S68");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S68");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S68");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S68");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S68");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S68");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_END, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S68");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S68");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77, MS-OXCTABL_R119, MS-OXCTABL_R437, MS-OXCTABL_R438, MS-OXCTABL_R443");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
            this.Manager.Checkpoint("MS-OXCTABL_R119");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R438");
            this.Manager.Checkpoint("MS-OXCTABL_R443");
        }
        
        private void MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteRopQueryRowsResponseChecker54(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,SORTTABLE,True,Fal" +
                    "se,True,True,BOOKMARK_CUSTOM,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S68");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S68");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S68");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S68");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S68");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S68");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S68");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S68");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_CUSTOM, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S68");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S68");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77, MS-OXCTABL_R119, MS-OXCTABL_R437, MS-OXCTABL_R438, MS-OXCTABL_R443");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
            this.Manager.Checkpoint("MS-OXCTABL_R119");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R438");
            this.Manager.Checkpoint("MS-OXCTABL_R443");
        }
        
        private void MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteRopQueryRowsResponseChecker55(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,SORTTABLE,True,Fal" +
                    "se,True,True,BOOKMARK_CURRENT,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S68");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S68");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S68");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S68");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S68");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S68");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S68");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S68");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S68");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S68");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77, MS-OXCTABL_R119, MS-OXCTABL_R437, MS-OXCTABL_R438, MS-OXCTABL_R443");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
            this.Manager.Checkpoint("MS-OXCTABL_R119");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R438");
            this.Manager.Checkpoint("MS-OXCTABL_R443");
        }
        
        private void MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteCheckRequirementEnabledChecker27(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S22");
        }
        
        private void MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteCheckRequirementEnabledChecker28(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S54");
        }
        
        private void MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteRopQueryRowsResponseChecker56(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,SORTTABLE,True,Fal" +
                    "se,True,True,BOOKMARK_BEGINNING,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S69");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S69");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S69");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S69");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S69");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S69");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S69");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S69");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(0)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S69");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S69");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R27, MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77, MS-OXCTABL_R119, MS-OXCTABL_R437, MS-OXCTABL_R438, MS-OXCTABL_R443");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R27");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
            this.Manager.Checkpoint("MS-OXCTABL_R119");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R438");
            this.Manager.Checkpoint("MS-OXCTABL_R443");
        }
        
        private void S05_ResetSortTableRops_SortTable_TestSuiteS85() {
            this.Manager.Comment("reaching state \'S85\'");
        }
        
        private void MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteRopQueryRowsResponseChecker57(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,SORTTABLE,True,Fal" +
                    "se,True,True,BOOKMARK_END,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S69");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S69");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S69");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S69");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S69");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S69");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S69");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S69");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_END, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S69");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S69");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77, MS-OXCTABL_R119, MS-OXCTABL_R437, MS-OXCTABL_R438, MS-OXCTABL_R443");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
            this.Manager.Checkpoint("MS-OXCTABL_R119");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R438");
            this.Manager.Checkpoint("MS-OXCTABL_R443");
        }
        
        private void MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteRopQueryRowsResponseChecker58(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,SORTTABLE,True,Fal" +
                    "se,True,True,BOOKMARK_CUSTOM,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S69");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S69");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S69");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S69");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S69");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S69");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S69");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S69");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_CUSTOM, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S69");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S69");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77, MS-OXCTABL_R119, MS-OXCTABL_R437, MS-OXCTABL_R438, MS-OXCTABL_R443");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
            this.Manager.Checkpoint("MS-OXCTABL_R119");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R438");
            this.Manager.Checkpoint("MS-OXCTABL_R443");
        }
        
        private void MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteRopQueryRowsResponseChecker59(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,SORTTABLE,True,Fal" +
                    "se,True,True,BOOKMARK_CURRENT,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S69");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S69");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S69");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S69");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S69");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S69");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S69");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S69");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S69");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S69");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77, MS-OXCTABL_R119, MS-OXCTABL_R437, MS-OXCTABL_R438, MS-OXCTABL_R443");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
            this.Manager.Checkpoint("MS-OXCTABL_R119");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R438");
            this.Manager.Checkpoint("MS-OXCTABL_R443");
        }
        
        private void MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteCheckRequirementEnabledChecker29(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S54");
        }
        
        private void MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteRopQueryRowsResponseChecker60(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,SORTTABLE,True,Fal" +
                    "se,True,True,BOOKMARK_BEGINNING,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S70");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S70");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S70");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S70");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S70");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S70");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S70");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S70");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(0)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S70");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S70");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R27, MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77, MS-OXCTABL_R119, MS-OXCTABL_R437, MS-OXCTABL_R438");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R27");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
            this.Manager.Checkpoint("MS-OXCTABL_R119");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R438");
        }
        
        private void S05_ResetSortTableRops_SortTable_TestSuiteS86() {
            this.Manager.Comment("reaching state \'S86\'");
        }
        
        private void MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteRopQueryRowsResponseChecker61(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,SORTTABLE,True,Fal" +
                    "se,True,True,BOOKMARK_END,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S70");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S70");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S70");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S70");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S70");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S70");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S70");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S70");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_END, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S70");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S70");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77, MS-OXCTABL_R119, MS-OXCTABL_R437, MS-OXCTABL_R438");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
            this.Manager.Checkpoint("MS-OXCTABL_R119");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R438");
        }
        
        private void MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteRopQueryRowsResponseChecker62(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,SORTTABLE,True,Fal" +
                    "se,True,True,BOOKMARK_CUSTOM,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S70");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S70");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S70");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S70");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S70");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S70");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S70");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S70");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_CUSTOM, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S70");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S70");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77, MS-OXCTABL_R119, MS-OXCTABL_R437, MS-OXCTABL_R438");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
            this.Manager.Checkpoint("MS-OXCTABL_R119");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R438");
        }
        
        private void MSOXCTABL_S05_ResetSortTableRops_SortTable_TestSuiteRopQueryRowsResponseChecker63(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(NoAdvance,True,False,SORTTABLE,True,Fal" +
                    "se,True,True,BOOKMARK_CURRENT,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(1)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S70");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S70");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S70");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(1)), ropType, "ropType of RopQueryRowsResponse, state S70");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S70");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S70");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S70");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S70");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S70");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S70");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment(@"This step would have covered MS-OXCTABL_R470, MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, MS-OXCTABL_R437, MS-OXCTABL_R116, MS-OXCTABL_R66, MS-OXCTABL_R67, MS-OXCTABL_R71, MS-OXCTABL_R72, MS-OXCTABL_R76, MS-OXCTABL_R77, MS-OXCTABL_R119, MS-OXCTABL_R437, MS-OXCTABL_R438");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R470");
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R66");
            this.Manager.Checkpoint("MS-OXCTABL_R67");
            this.Manager.Checkpoint("MS-OXCTABL_R71");
            this.Manager.Checkpoint("MS-OXCTABL_R72");
            this.Manager.Checkpoint("MS-OXCTABL_R76");
            this.Manager.Checkpoint("MS-OXCTABL_R77");
            this.Manager.Checkpoint("MS-OXCTABL_R119");
            this.Manager.Checkpoint("MS-OXCTABL_R437");
            this.Manager.Checkpoint("MS-OXCTABL_R438");
        }
        #endregion
    }
}
