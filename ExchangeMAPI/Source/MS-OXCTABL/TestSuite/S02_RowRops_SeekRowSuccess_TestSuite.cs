//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18449
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Microsoft.Protocols.TestSuites.MS_OXCTABL {
    using System;
    using System.Collections.Generic;
    using System.Text;
    using System.Reflection;
    using Microsoft.SpecExplorer.Runtime.Testing;
    using Microsoft.Protocols.TestTools;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Spec Explorer", "3.5.3130.0")]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class S02_RowRops_SeekRowSuccess_TestSuite : PtfTestClassBase {
        
        public S02_RowRops_SeekRowSuccess_TestSuite() {
            this.SetSwitch("ProceedControlTimeout", "100");
            this.SetSwitch("QuiescenceTimeout", "2000000");
        }
        
        #region Expect Delegates
        public delegate void CheckMAPIHTTPTransportSupportedDelegate1(bool isSupported);
        
        public delegate void RopSeekRowResponseDelegate1(bool wantRowMovedCountout, bool enoughRow, bool hasSoughtLess, bool isActualRowsCount);
        
        public delegate void CheckRequirementEnabledDelegate1(bool enabled);
        
        public delegate void RopQueryRowsResponseDelegate1(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger);
        #endregion
        
        #region Event Metadata
        static System.Reflection.MethodBase CheckMAPIHTTPTransportSupportedInfo = TestManagerHelpers.GetMethodInfo(typeof(Microsoft.Protocols.TestSuites.MS_OXCTABL.IMS_OXCTABLAdapter), "CheckMAPIHTTPTransportSupported", typeof(bool).MakeByRefType());
        
        static System.Reflection.MethodBase CheckRequirementEnabledInfo = TestManagerHelpers.GetMethodInfo(typeof(Microsoft.Protocols.TestSuites.MS_OXCTABL.IMS_OXCTABLAdapter), "CheckRequirementEnabled", typeof(int), typeof(bool).MakeByRefType());
        
        static System.Reflection.EventInfo RopQueryRowsResponseInfo = TestManagerHelpers.GetEventInfo(typeof(Microsoft.Protocols.TestSuites.MS_OXCTABL.IMS_OXCTABLAdapter), "RopQueryRowsResponse");
        
        static System.Reflection.EventInfo RopSeekRowResponseInfo = TestManagerHelpers.GetEventInfo(typeof(Microsoft.Protocols.TestSuites.MS_OXCTABL.IMS_OXCTABLAdapter), "RopSeekRowResponse");
        #endregion
        
        #region Adapter Instances
        private Microsoft.Protocols.TestSuites.MS_OXCTABL.IMS_OXCTABLAdapter IMS_OXCTABLAdapterInstance;
        #endregion
        
        #region Class Initialization and Cleanup
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void ClassInitialize(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext context) {
            PtfTestClassBase.Initialize(context);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void ClassCleanup() {
            PtfTestClassBase.Cleanup();
        }
        #endregion
        
        #region Test Initialization and Cleanup
        protected override void TestInitialize() {
            this.InitializeTestManager();
            this.IMS_OXCTABLAdapterInstance = ((Microsoft.Protocols.TestSuites.MS_OXCTABL.IMS_OXCTABLAdapter)(this.Manager.GetAdapter(typeof(Microsoft.Protocols.TestSuites.MS_OXCTABL.IMS_OXCTABLAdapter))));
            this.Manager.Subscribe(RopQueryRowsResponseInfo, this.IMS_OXCTABLAdapterInstance);
            this.Manager.Subscribe(RopSeekRowResponseInfo, this.IMS_OXCTABLAdapterInstance);
        }
        
        protected override void TestCleanup() {
            base.TestCleanup();
            this.CleanupTestManager();
        }
        #endregion
        
        #region Test Starting in S0
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite() {
            this.Manager.BeginTest("MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite");
            this.Manager.Comment("reaching state \'S0\'");
            bool temp0;
            this.Manager.Comment("executing step \'call CheckMAPIHTTPTransportSupported(out _)\'");
            this.IMS_OXCTABLAdapterInstance.CheckMAPIHTTPTransportSupported(out temp0);
            this.Manager.AddReturn(CheckMAPIHTTPTransportSupportedInfo, null, temp0);
            this.Manager.Comment("reaching state \'S1\'");
            int temp56 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_SeekRowSuccess_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuiteCheckMAPIHTTPTransportSupportedChecker)), new ExpectedReturn(S02_RowRops_SeekRowSuccess_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuiteCheckMAPIHTTPTransportSupportedChecker1)));
            if ((temp56 == 0)) {
                this.Manager.Comment("reaching state \'S10\'");
                goto label15;
            }
            if ((temp56 == 1)) {
                this.Manager.Comment("reaching state \'S11\'");
                this.Manager.Comment("executing step \'call InitializeTable(CONTENT_TABLE)\'");
                this.IMS_OXCTABLAdapterInstance.InitializeTable(((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableType)(0)));
                this.Manager.Comment("reaching state \'S20\'");
                this.Manager.Comment("checking step \'return InitializeTable\'");
                this.Manager.Comment("reaching state \'S25\'");
                Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp1;
                this.Manager.Comment("executing step \'call RopSetColumns(1,False,False,False)\'");
                temp1 = this.IMS_OXCTABLAdapterInstance.RopSetColumns(1u, false, false, false);
                this.Manager.Checkpoint("MS-OXCTABL_R831");
                this.Manager.Checkpoint("MS-OXCTABL_R45");
                this.Manager.Comment("reaching state \'S30\'");
                this.Manager.Comment("checking step \'return RopSetColumns/success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp1, "return of RopSetColumns, state S30");
                this.Manager.Comment("reaching state \'S35\'");
                bool temp2;
                this.Manager.Comment("executing step \'call CheckRequirementEnabled(768,out _)\'");
                this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(768, out temp2);
                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp2);
                this.Manager.Comment("reaching state \'S40\'");
                int temp55 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_SeekRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuiteCheckRequirementEnabledChecker)), new ExpectedReturn(S02_RowRops_SeekRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuiteCheckRequirementEnabledChecker15)));
                if ((temp55 == 0)) {
                    this.Manager.Comment("reaching state \'S45\'");
                    bool temp3;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(866,out _)\'");
                    this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(866, out temp3);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp3);
                    this.Manager.Comment("reaching state \'S53\'");
                    int temp28 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_SeekRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuiteCheckRequirementEnabledChecker1)), new ExpectedReturn(S02_RowRops_SeekRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuiteCheckRequirementEnabledChecker8)));
                    if ((temp28 == 0)) {
                        this.Manager.Comment("reaching state \'S61\'");
                        bool temp4;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(867,out _)\'");
                        this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(867, out temp4);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp4);
                        this.Manager.Comment("reaching state \'S77\'");
                        int temp15 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_SeekRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuiteCheckRequirementEnabledChecker2)), new ExpectedReturn(S02_RowRops_SeekRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuiteCheckRequirementEnabledChecker5)));
                        if ((temp15 == 0)) {
                            this.Manager.Comment("reaching state \'S93\'");
                            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp5;
                            this.Manager.Comment("executing step \'call RopQueryRows(Advance,True)\'");
                            temp5 = this.IMS_OXCTABLAdapterInstance.RopQueryRows(((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), true);
                            this.Manager.Checkpoint("MS-OXCTABL_R837");
                            this.Manager.Comment("reaching state \'S121\'");
                            this.Manager.Comment("checking step \'return RopQueryRows/success\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp5, "return of RopQueryRows, state S121");
                            this.Manager.Comment("reaching state \'S149\'");
                            bool temp6;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(610,out _)\'");
                            this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(610, out temp6);
                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp6);
                            this.Manager.Comment("reaching state \'S177\'");
                            int temp9 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_SeekRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuiteCheckRequirementEnabledChecker3)), new ExpectedReturn(S02_RowRops_SeekRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuiteCheckRequirementEnabledChecker4)));
                            if ((temp9 == 0)) {
                                this.Manager.Comment("reaching state \'S201\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_SeekRowSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuiteRopQueryRowsResponseChecker))) != -1)) {
                                    this.Manager.Comment("reaching state \'S249\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp7;
                                    this.Manager.Comment("executing step \'call RopSeekRow(BOOKMARK_END,False,True,False)\'");
                                    temp7 = this.IMS_OXCTABLAdapterInstance.RopSeekRow(Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_END, false, true, false);
                                    this.Manager.Checkpoint("MS-OXCTABL_R850");
                                    this.Manager.Comment("reaching state \'S297\'");
                                    this.Manager.Comment("checking step \'return RopSeekRow/success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp7, "return of RopSeekRow, state S297");
                                    this.Manager.Comment("reaching state \'S345\'");
                                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_SeekRowSuccess_TestSuite.RopSeekRowResponseInfo, null, new RopSeekRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuiteRopSeekRowResponseChecker))) != -1)) {
                                        S02_RowRops_SeekRowSuccess_TestSuiteS393();
                                    }
                                    else {
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_SeekRowSuccess_TestSuite.RopSeekRowResponseInfo, null, new RopSeekRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuiteRopSeekRowResponseChecker)));
                                    }
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_SeekRowSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuiteRopQueryRowsResponseChecker)));
                                }
                                goto label0;
                            }
                            if ((temp9 == 1)) {
                                this.Manager.Comment("reaching state \'S202\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_SeekRowSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuiteRopQueryRowsResponseChecker1))) != -1)) {
                                    this.Manager.Comment("reaching state \'S250\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp8;
                                    this.Manager.Comment("executing step \'call RopSeekRow(BOOKMARK_END,False,True,False)\'");
                                    temp8 = this.IMS_OXCTABLAdapterInstance.RopSeekRow(Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_END, false, true, false);
                                    this.Manager.Checkpoint("MS-OXCTABL_R850");
                                    this.Manager.Comment("reaching state \'S298\'");
                                    this.Manager.Comment("checking step \'return RopSeekRow/success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp8, "return of RopSeekRow, state S298");
                                    this.Manager.Comment("reaching state \'S346\'");
                                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_SeekRowSuccess_TestSuite.RopSeekRowResponseInfo, null, new RopSeekRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuiteRopSeekRowResponseChecker1))) != -1)) {
                                        S02_RowRops_SeekRowSuccess_TestSuiteS394();
                                    }
                                    else {
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_SeekRowSuccess_TestSuite.RopSeekRowResponseInfo, null, new RopSeekRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuiteRopSeekRowResponseChecker1)));
                                    }
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_SeekRowSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuiteRopQueryRowsResponseChecker1)));
                                }
                                goto label0;
                            }
                            throw new InvalidOperationException("never reached");
                        label0:
;
                            goto label2;
                        }
                        if ((temp15 == 1)) {
                            this.Manager.Comment("reaching state \'S94\'");
                            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp10;
                            this.Manager.Comment("executing step \'call RopQueryRows(Advance,True)\'");
                            temp10 = this.IMS_OXCTABLAdapterInstance.RopQueryRows(((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), true);
                            this.Manager.Checkpoint("MS-OXCTABL_R837");
                            this.Manager.Comment("reaching state \'S122\'");
                            this.Manager.Comment("checking step \'return RopQueryRows/success\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp10, "return of RopQueryRows, state S122");
                            this.Manager.Comment("reaching state \'S150\'");
                            bool temp11;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(610,out _)\'");
                            this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(610, out temp11);
                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp11);
                            this.Manager.Comment("reaching state \'S178\'");
                            int temp14 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_SeekRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuiteCheckRequirementEnabledChecker6)), new ExpectedReturn(S02_RowRops_SeekRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuiteCheckRequirementEnabledChecker7)));
                            if ((temp14 == 0)) {
                                this.Manager.Comment("reaching state \'S203\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_SeekRowSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuiteRopQueryRowsResponseChecker2))) != -1)) {
                                    this.Manager.Comment("reaching state \'S251\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp12;
                                    this.Manager.Comment("executing step \'call RopSeekRow(BOOKMARK_END,False,True,False)\'");
                                    temp12 = this.IMS_OXCTABLAdapterInstance.RopSeekRow(Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_END, false, true, false);
                                    this.Manager.Checkpoint("MS-OXCTABL_R850");
                                    this.Manager.Comment("reaching state \'S299\'");
                                    this.Manager.Comment("checking step \'return RopSeekRow/success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp12, "return of RopSeekRow, state S299");
                                    this.Manager.Comment("reaching state \'S347\'");
                                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_SeekRowSuccess_TestSuite.RopSeekRowResponseInfo, null, new RopSeekRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuiteRopSeekRowResponseChecker2))) != -1)) {
                                        S02_RowRops_SeekRowSuccess_TestSuiteS395();
                                    }
                                    else {
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_SeekRowSuccess_TestSuite.RopSeekRowResponseInfo, null, new RopSeekRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuiteRopSeekRowResponseChecker2)));
                                    }
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_SeekRowSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuiteRopQueryRowsResponseChecker2)));
                                }
                                goto label1;
                            }
                            if ((temp14 == 1)) {
                                this.Manager.Comment("reaching state \'S204\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_SeekRowSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuiteRopQueryRowsResponseChecker3))) != -1)) {
                                    this.Manager.Comment("reaching state \'S252\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp13;
                                    this.Manager.Comment("executing step \'call RopSeekRow(BOOKMARK_END,False,True,False)\'");
                                    temp13 = this.IMS_OXCTABLAdapterInstance.RopSeekRow(Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_END, false, true, false);
                                    this.Manager.Checkpoint("MS-OXCTABL_R850");
                                    this.Manager.Comment("reaching state \'S300\'");
                                    this.Manager.Comment("checking step \'return RopSeekRow/success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp13, "return of RopSeekRow, state S300");
                                    this.Manager.Comment("reaching state \'S348\'");
                                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_SeekRowSuccess_TestSuite.RopSeekRowResponseInfo, null, new RopSeekRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuiteRopSeekRowResponseChecker3))) != -1)) {
                                        S02_RowRops_SeekRowSuccess_TestSuiteS396();
                                    }
                                    else {
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_SeekRowSuccess_TestSuite.RopSeekRowResponseInfo, null, new RopSeekRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuiteRopSeekRowResponseChecker3)));
                                    }
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_SeekRowSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuiteRopQueryRowsResponseChecker3)));
                                }
                                goto label1;
                            }
                            throw new InvalidOperationException("never reached");
                        label1:
;
                            goto label2;
                        }
                        throw new InvalidOperationException("never reached");
                    label2:
;
                        goto label6;
                    }
                    if ((temp28 == 1)) {
                        this.Manager.Comment("reaching state \'S62\'");
                        bool temp16;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(867,out _)\'");
                        this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(867, out temp16);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp16);
                        this.Manager.Comment("reaching state \'S78\'");
                        int temp27 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_SeekRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuiteCheckRequirementEnabledChecker9)), new ExpectedReturn(S02_RowRops_SeekRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuiteCheckRequirementEnabledChecker12)));
                        if ((temp27 == 0)) {
                            this.Manager.Comment("reaching state \'S95\'");
                            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp17;
                            this.Manager.Comment("executing step \'call RopQueryRows(Advance,True)\'");
                            temp17 = this.IMS_OXCTABLAdapterInstance.RopQueryRows(((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), true);
                            this.Manager.Checkpoint("MS-OXCTABL_R837");
                            this.Manager.Comment("reaching state \'S123\'");
                            this.Manager.Comment("checking step \'return RopQueryRows/success\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp17, "return of RopQueryRows, state S123");
                            this.Manager.Comment("reaching state \'S151\'");
                            bool temp18;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(610,out _)\'");
                            this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(610, out temp18);
                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp18);
                            this.Manager.Comment("reaching state \'S179\'");
                            int temp21 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_SeekRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuiteCheckRequirementEnabledChecker10)), new ExpectedReturn(S02_RowRops_SeekRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuiteCheckRequirementEnabledChecker11)));
                            if ((temp21 == 0)) {
                                this.Manager.Comment("reaching state \'S205\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_SeekRowSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuiteRopQueryRowsResponseChecker4))) != -1)) {
                                    this.Manager.Comment("reaching state \'S253\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp19;
                                    this.Manager.Comment("executing step \'call RopSeekRow(BOOKMARK_END,False,True,False)\'");
                                    temp19 = this.IMS_OXCTABLAdapterInstance.RopSeekRow(Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_END, false, true, false);
                                    this.Manager.Checkpoint("MS-OXCTABL_R850");
                                    this.Manager.Comment("reaching state \'S301\'");
                                    this.Manager.Comment("checking step \'return RopSeekRow/success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp19, "return of RopSeekRow, state S301");
                                    this.Manager.Comment("reaching state \'S349\'");
                                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_SeekRowSuccess_TestSuite.RopSeekRowResponseInfo, null, new RopSeekRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuiteRopSeekRowResponseChecker4))) != -1)) {
                                        S02_RowRops_SeekRowSuccess_TestSuiteS397();
                                    }
                                    else {
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_SeekRowSuccess_TestSuite.RopSeekRowResponseInfo, null, new RopSeekRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuiteRopSeekRowResponseChecker4)));
                                    }
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_SeekRowSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuiteRopQueryRowsResponseChecker4)));
                                }
                                goto label3;
                            }
                            if ((temp21 == 1)) {
                                this.Manager.Comment("reaching state \'S206\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_SeekRowSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuiteRopQueryRowsResponseChecker5))) != -1)) {
                                    this.Manager.Comment("reaching state \'S254\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp20;
                                    this.Manager.Comment("executing step \'call RopSeekRow(BOOKMARK_END,False,True,False)\'");
                                    temp20 = this.IMS_OXCTABLAdapterInstance.RopSeekRow(Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_END, false, true, false);
                                    this.Manager.Checkpoint("MS-OXCTABL_R850");
                                    this.Manager.Comment("reaching state \'S302\'");
                                    this.Manager.Comment("checking step \'return RopSeekRow/success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp20, "return of RopSeekRow, state S302");
                                    this.Manager.Comment("reaching state \'S350\'");
                                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_SeekRowSuccess_TestSuite.RopSeekRowResponseInfo, null, new RopSeekRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuiteRopSeekRowResponseChecker5))) != -1)) {
                                        S02_RowRops_SeekRowSuccess_TestSuiteS398();
                                    }
                                    else {
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_SeekRowSuccess_TestSuite.RopSeekRowResponseInfo, null, new RopSeekRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuiteRopSeekRowResponseChecker5)));
                                    }
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_SeekRowSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuiteRopQueryRowsResponseChecker5)));
                                }
                                goto label3;
                            }
                            throw new InvalidOperationException("never reached");
                        label3:
;
                            goto label5;
                        }
                        if ((temp27 == 1)) {
                            this.Manager.Comment("reaching state \'S96\'");
                            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp22;
                            this.Manager.Comment("executing step \'call RopQueryRows(Advance,True)\'");
                            temp22 = this.IMS_OXCTABLAdapterInstance.RopQueryRows(((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), true);
                            this.Manager.Checkpoint("MS-OXCTABL_R837");
                            this.Manager.Comment("reaching state \'S124\'");
                            this.Manager.Comment("checking step \'return RopQueryRows/success\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp22, "return of RopQueryRows, state S124");
                            this.Manager.Comment("reaching state \'S152\'");
                            bool temp23;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(610,out _)\'");
                            this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(610, out temp23);
                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp23);
                            this.Manager.Comment("reaching state \'S180\'");
                            int temp26 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_SeekRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuiteCheckRequirementEnabledChecker13)), new ExpectedReturn(S02_RowRops_SeekRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuiteCheckRequirementEnabledChecker14)));
                            if ((temp26 == 0)) {
                                this.Manager.Comment("reaching state \'S207\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_SeekRowSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuiteRopQueryRowsResponseChecker6))) != -1)) {
                                    this.Manager.Comment("reaching state \'S255\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp24;
                                    this.Manager.Comment("executing step \'call RopSeekRow(BOOKMARK_END,False,True,False)\'");
                                    temp24 = this.IMS_OXCTABLAdapterInstance.RopSeekRow(Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_END, false, true, false);
                                    this.Manager.Checkpoint("MS-OXCTABL_R850");
                                    this.Manager.Comment("reaching state \'S303\'");
                                    this.Manager.Comment("checking step \'return RopSeekRow/success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp24, "return of RopSeekRow, state S303");
                                    this.Manager.Comment("reaching state \'S351\'");
                                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_SeekRowSuccess_TestSuite.RopSeekRowResponseInfo, null, new RopSeekRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuiteRopSeekRowResponseChecker6))) != -1)) {
                                        S02_RowRops_SeekRowSuccess_TestSuiteS399();
                                    }
                                    else {
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_SeekRowSuccess_TestSuite.RopSeekRowResponseInfo, null, new RopSeekRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuiteRopSeekRowResponseChecker6)));
                                    }
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_SeekRowSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuiteRopQueryRowsResponseChecker6)));
                                }
                                goto label4;
                            }
                            if ((temp26 == 1)) {
                                this.Manager.Comment("reaching state \'S208\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_SeekRowSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuiteRopQueryRowsResponseChecker7))) != -1)) {
                                    this.Manager.Comment("reaching state \'S256\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp25;
                                    this.Manager.Comment("executing step \'call RopSeekRow(BOOKMARK_END,False,True,False)\'");
                                    temp25 = this.IMS_OXCTABLAdapterInstance.RopSeekRow(Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_END, false, true, false);
                                    this.Manager.Checkpoint("MS-OXCTABL_R850");
                                    this.Manager.Comment("reaching state \'S304\'");
                                    this.Manager.Comment("checking step \'return RopSeekRow/success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp25, "return of RopSeekRow, state S304");
                                    this.Manager.Comment("reaching state \'S352\'");
                                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_SeekRowSuccess_TestSuite.RopSeekRowResponseInfo, null, new RopSeekRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuiteRopSeekRowResponseChecker7))) != -1)) {
                                        S02_RowRops_SeekRowSuccess_TestSuiteS400();
                                    }
                                    else {
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_SeekRowSuccess_TestSuite.RopSeekRowResponseInfo, null, new RopSeekRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuiteRopSeekRowResponseChecker7)));
                                    }
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_SeekRowSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuiteRopQueryRowsResponseChecker7)));
                                }
                                goto label4;
                            }
                            throw new InvalidOperationException("never reached");
                        label4:
;
                            goto label5;
                        }
                        throw new InvalidOperationException("never reached");
                    label5:
;
                        goto label6;
                    }
                    throw new InvalidOperationException("never reached");
                label6:
;
                    goto label14;
                }
                if ((temp55 == 1)) {
                    this.Manager.Comment("reaching state \'S46\'");
                    bool temp29;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(866,out _)\'");
                    this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(866, out temp29);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp29);
                    this.Manager.Comment("reaching state \'S54\'");
                    int temp54 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_SeekRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuiteCheckRequirementEnabledChecker16)), new ExpectedReturn(S02_RowRops_SeekRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuiteCheckRequirementEnabledChecker23)));
                    if ((temp54 == 0)) {
                        this.Manager.Comment("reaching state \'S63\'");
                        bool temp30;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(867,out _)\'");
                        this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(867, out temp30);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp30);
                        this.Manager.Comment("reaching state \'S79\'");
                        int temp41 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_SeekRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuiteCheckRequirementEnabledChecker17)), new ExpectedReturn(S02_RowRops_SeekRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuiteCheckRequirementEnabledChecker20)));
                        if ((temp41 == 0)) {
                            this.Manager.Comment("reaching state \'S97\'");
                            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp31;
                            this.Manager.Comment("executing step \'call RopQueryRows(Advance,True)\'");
                            temp31 = this.IMS_OXCTABLAdapterInstance.RopQueryRows(((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), true);
                            this.Manager.Checkpoint("MS-OXCTABL_R837");
                            this.Manager.Comment("reaching state \'S125\'");
                            this.Manager.Comment("checking step \'return RopQueryRows/success\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp31, "return of RopQueryRows, state S125");
                            this.Manager.Comment("reaching state \'S153\'");
                            bool temp32;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(610,out _)\'");
                            this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(610, out temp32);
                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp32);
                            this.Manager.Comment("reaching state \'S181\'");
                            int temp35 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_SeekRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuiteCheckRequirementEnabledChecker18)), new ExpectedReturn(S02_RowRops_SeekRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuiteCheckRequirementEnabledChecker19)));
                            if ((temp35 == 0)) {
                                this.Manager.Comment("reaching state \'S209\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_SeekRowSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuiteRopQueryRowsResponseChecker8))) != -1)) {
                                    this.Manager.Comment("reaching state \'S257\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp33;
                                    this.Manager.Comment("executing step \'call RopSeekRow(BOOKMARK_END,False,True,False)\'");
                                    temp33 = this.IMS_OXCTABLAdapterInstance.RopSeekRow(Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_END, false, true, false);
                                    this.Manager.Checkpoint("MS-OXCTABL_R850");
                                    this.Manager.Comment("reaching state \'S305\'");
                                    this.Manager.Comment("checking step \'return RopSeekRow/success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp33, "return of RopSeekRow, state S305");
                                    this.Manager.Comment("reaching state \'S353\'");
                                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_SeekRowSuccess_TestSuite.RopSeekRowResponseInfo, null, new RopSeekRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuiteRopSeekRowResponseChecker8))) != -1)) {
                                        S02_RowRops_SeekRowSuccess_TestSuiteS401();
                                    }
                                    else {
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_SeekRowSuccess_TestSuite.RopSeekRowResponseInfo, null, new RopSeekRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuiteRopSeekRowResponseChecker8)));
                                    }
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_SeekRowSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuiteRopQueryRowsResponseChecker8)));
                                }
                                goto label7;
                            }
                            if ((temp35 == 1)) {
                                this.Manager.Comment("reaching state \'S210\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_SeekRowSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuiteRopQueryRowsResponseChecker9))) != -1)) {
                                    this.Manager.Comment("reaching state \'S258\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp34;
                                    this.Manager.Comment("executing step \'call RopSeekRow(BOOKMARK_END,False,True,False)\'");
                                    temp34 = this.IMS_OXCTABLAdapterInstance.RopSeekRow(Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_END, false, true, false);
                                    this.Manager.Checkpoint("MS-OXCTABL_R850");
                                    this.Manager.Comment("reaching state \'S306\'");
                                    this.Manager.Comment("checking step \'return RopSeekRow/success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp34, "return of RopSeekRow, state S306");
                                    this.Manager.Comment("reaching state \'S354\'");
                                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_SeekRowSuccess_TestSuite.RopSeekRowResponseInfo, null, new RopSeekRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuiteRopSeekRowResponseChecker9))) != -1)) {
                                        S02_RowRops_SeekRowSuccess_TestSuiteS402();
                                    }
                                    else {
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_SeekRowSuccess_TestSuite.RopSeekRowResponseInfo, null, new RopSeekRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuiteRopSeekRowResponseChecker9)));
                                    }
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_SeekRowSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuiteRopQueryRowsResponseChecker9)));
                                }
                                goto label7;
                            }
                            throw new InvalidOperationException("never reached");
                        label7:
;
                            goto label9;
                        }
                        if ((temp41 == 1)) {
                            this.Manager.Comment("reaching state \'S98\'");
                            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp36;
                            this.Manager.Comment("executing step \'call RopQueryRows(Advance,True)\'");
                            temp36 = this.IMS_OXCTABLAdapterInstance.RopQueryRows(((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), true);
                            this.Manager.Checkpoint("MS-OXCTABL_R837");
                            this.Manager.Comment("reaching state \'S126\'");
                            this.Manager.Comment("checking step \'return RopQueryRows/success\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp36, "return of RopQueryRows, state S126");
                            this.Manager.Comment("reaching state \'S154\'");
                            bool temp37;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(610,out _)\'");
                            this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(610, out temp37);
                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp37);
                            this.Manager.Comment("reaching state \'S182\'");
                            int temp40 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_SeekRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuiteCheckRequirementEnabledChecker21)), new ExpectedReturn(S02_RowRops_SeekRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuiteCheckRequirementEnabledChecker22)));
                            if ((temp40 == 0)) {
                                this.Manager.Comment("reaching state \'S211\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_SeekRowSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuiteRopQueryRowsResponseChecker10))) != -1)) {
                                    this.Manager.Comment("reaching state \'S259\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp38;
                                    this.Manager.Comment("executing step \'call RopSeekRow(BOOKMARK_END,False,True,False)\'");
                                    temp38 = this.IMS_OXCTABLAdapterInstance.RopSeekRow(Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_END, false, true, false);
                                    this.Manager.Checkpoint("MS-OXCTABL_R850");
                                    this.Manager.Comment("reaching state \'S307\'");
                                    this.Manager.Comment("checking step \'return RopSeekRow/success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp38, "return of RopSeekRow, state S307");
                                    this.Manager.Comment("reaching state \'S355\'");
                                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_SeekRowSuccess_TestSuite.RopSeekRowResponseInfo, null, new RopSeekRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuiteRopSeekRowResponseChecker10))) != -1)) {
                                        S02_RowRops_SeekRowSuccess_TestSuiteS403();
                                    }
                                    else {
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_SeekRowSuccess_TestSuite.RopSeekRowResponseInfo, null, new RopSeekRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuiteRopSeekRowResponseChecker10)));
                                    }
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_SeekRowSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuiteRopQueryRowsResponseChecker10)));
                                }
                                goto label8;
                            }
                            if ((temp40 == 1)) {
                                this.Manager.Comment("reaching state \'S212\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_SeekRowSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuiteRopQueryRowsResponseChecker11))) != -1)) {
                                    this.Manager.Comment("reaching state \'S260\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp39;
                                    this.Manager.Comment("executing step \'call RopSeekRow(BOOKMARK_END,False,True,False)\'");
                                    temp39 = this.IMS_OXCTABLAdapterInstance.RopSeekRow(Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_END, false, true, false);
                                    this.Manager.Checkpoint("MS-OXCTABL_R850");
                                    this.Manager.Comment("reaching state \'S308\'");
                                    this.Manager.Comment("checking step \'return RopSeekRow/success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp39, "return of RopSeekRow, state S308");
                                    this.Manager.Comment("reaching state \'S356\'");
                                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_SeekRowSuccess_TestSuite.RopSeekRowResponseInfo, null, new RopSeekRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuiteRopSeekRowResponseChecker11))) != -1)) {
                                        S02_RowRops_SeekRowSuccess_TestSuiteS404();
                                    }
                                    else {
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_SeekRowSuccess_TestSuite.RopSeekRowResponseInfo, null, new RopSeekRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuiteRopSeekRowResponseChecker11)));
                                    }
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_SeekRowSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuiteRopQueryRowsResponseChecker11)));
                                }
                                goto label8;
                            }
                            throw new InvalidOperationException("never reached");
                        label8:
;
                            goto label9;
                        }
                        throw new InvalidOperationException("never reached");
                    label9:
;
                        goto label13;
                    }
                    if ((temp54 == 1)) {
                        this.Manager.Comment("reaching state \'S64\'");
                        bool temp42;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(867,out _)\'");
                        this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(867, out temp42);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp42);
                        this.Manager.Comment("reaching state \'S80\'");
                        int temp53 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_SeekRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuiteCheckRequirementEnabledChecker24)), new ExpectedReturn(S02_RowRops_SeekRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuiteCheckRequirementEnabledChecker27)));
                        if ((temp53 == 0)) {
                            this.Manager.Comment("reaching state \'S100\'");
                            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp43;
                            this.Manager.Comment("executing step \'call RopQueryRows(Advance,True)\'");
                            temp43 = this.IMS_OXCTABLAdapterInstance.RopQueryRows(((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), true);
                            this.Manager.Checkpoint("MS-OXCTABL_R837");
                            this.Manager.Comment("reaching state \'S128\'");
                            this.Manager.Comment("checking step \'return RopQueryRows/success\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp43, "return of RopQueryRows, state S128");
                            this.Manager.Comment("reaching state \'S156\'");
                            bool temp44;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(610,out _)\'");
                            this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(610, out temp44);
                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp44);
                            this.Manager.Comment("reaching state \'S184\'");
                            int temp47 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_SeekRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuiteCheckRequirementEnabledChecker25)), new ExpectedReturn(S02_RowRops_SeekRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuiteCheckRequirementEnabledChecker26)));
                            if ((temp47 == 0)) {
                                this.Manager.Comment("reaching state \'S215\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_SeekRowSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuiteRopQueryRowsResponseChecker12))) != -1)) {
                                    this.Manager.Comment("reaching state \'S263\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp45;
                                    this.Manager.Comment("executing step \'call RopSeekRow(BOOKMARK_END,False,True,False)\'");
                                    temp45 = this.IMS_OXCTABLAdapterInstance.RopSeekRow(Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_END, false, true, false);
                                    this.Manager.Checkpoint("MS-OXCTABL_R850");
                                    this.Manager.Comment("reaching state \'S311\'");
                                    this.Manager.Comment("checking step \'return RopSeekRow/success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp45, "return of RopSeekRow, state S311");
                                    this.Manager.Comment("reaching state \'S359\'");
                                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_SeekRowSuccess_TestSuite.RopSeekRowResponseInfo, null, new RopSeekRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuiteRopSeekRowResponseChecker12))) != -1)) {
                                        S02_RowRops_SeekRowSuccess_TestSuiteS407();
                                    }
                                    else {
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_SeekRowSuccess_TestSuite.RopSeekRowResponseInfo, null, new RopSeekRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuiteRopSeekRowResponseChecker12)));
                                    }
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_SeekRowSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuiteRopQueryRowsResponseChecker12)));
                                }
                                goto label10;
                            }
                            if ((temp47 == 1)) {
                                this.Manager.Comment("reaching state \'S216\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_SeekRowSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuiteRopQueryRowsResponseChecker13))) != -1)) {
                                    this.Manager.Comment("reaching state \'S264\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp46;
                                    this.Manager.Comment("executing step \'call RopSeekRow(BOOKMARK_END,False,True,False)\'");
                                    temp46 = this.IMS_OXCTABLAdapterInstance.RopSeekRow(Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_END, false, true, false);
                                    this.Manager.Checkpoint("MS-OXCTABL_R850");
                                    this.Manager.Comment("reaching state \'S312\'");
                                    this.Manager.Comment("checking step \'return RopSeekRow/success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp46, "return of RopSeekRow, state S312");
                                    this.Manager.Comment("reaching state \'S360\'");
                                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_SeekRowSuccess_TestSuite.RopSeekRowResponseInfo, null, new RopSeekRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuiteRopSeekRowResponseChecker13))) != -1)) {
                                        S02_RowRops_SeekRowSuccess_TestSuiteS408();
                                    }
                                    else {
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_SeekRowSuccess_TestSuite.RopSeekRowResponseInfo, null, new RopSeekRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuiteRopSeekRowResponseChecker13)));
                                    }
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_SeekRowSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuiteRopQueryRowsResponseChecker13)));
                                }
                                goto label10;
                            }
                            throw new InvalidOperationException("never reached");
                        label10:
;
                            goto label12;
                        }
                        if ((temp53 == 1)) {
                            this.Manager.Comment("reaching state \'S99\'");
                            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp48;
                            this.Manager.Comment("executing step \'call RopQueryRows(Advance,True)\'");
                            temp48 = this.IMS_OXCTABLAdapterInstance.RopQueryRows(((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), true);
                            this.Manager.Checkpoint("MS-OXCTABL_R837");
                            this.Manager.Comment("reaching state \'S127\'");
                            this.Manager.Comment("checking step \'return RopQueryRows/success\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp48, "return of RopQueryRows, state S127");
                            this.Manager.Comment("reaching state \'S155\'");
                            bool temp49;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(610,out _)\'");
                            this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(610, out temp49);
                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp49);
                            this.Manager.Comment("reaching state \'S183\'");
                            int temp52 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_SeekRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuiteCheckRequirementEnabledChecker28)), new ExpectedReturn(S02_RowRops_SeekRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuiteCheckRequirementEnabledChecker29)));
                            if ((temp52 == 0)) {
                                this.Manager.Comment("reaching state \'S213\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_SeekRowSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuiteRopQueryRowsResponseChecker14))) != -1)) {
                                    this.Manager.Comment("reaching state \'S261\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp50;
                                    this.Manager.Comment("executing step \'call RopSeekRow(BOOKMARK_END,False,True,False)\'");
                                    temp50 = this.IMS_OXCTABLAdapterInstance.RopSeekRow(Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_END, false, true, false);
                                    this.Manager.Checkpoint("MS-OXCTABL_R850");
                                    this.Manager.Comment("reaching state \'S309\'");
                                    this.Manager.Comment("checking step \'return RopSeekRow/success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp50, "return of RopSeekRow, state S309");
                                    this.Manager.Comment("reaching state \'S357\'");
                                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_SeekRowSuccess_TestSuite.RopSeekRowResponseInfo, null, new RopSeekRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuiteRopSeekRowResponseChecker14))) != -1)) {
                                        S02_RowRops_SeekRowSuccess_TestSuiteS405();
                                    }
                                    else {
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_SeekRowSuccess_TestSuite.RopSeekRowResponseInfo, null, new RopSeekRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuiteRopSeekRowResponseChecker14)));
                                    }
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_SeekRowSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuiteRopQueryRowsResponseChecker14)));
                                }
                                goto label11;
                            }
                            if ((temp52 == 1)) {
                                this.Manager.Comment("reaching state \'S214\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_SeekRowSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuiteRopQueryRowsResponseChecker15))) != -1)) {
                                    this.Manager.Comment("reaching state \'S262\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp51;
                                    this.Manager.Comment("executing step \'call RopSeekRow(BOOKMARK_END,False,True,False)\'");
                                    temp51 = this.IMS_OXCTABLAdapterInstance.RopSeekRow(Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_END, false, true, false);
                                    this.Manager.Checkpoint("MS-OXCTABL_R850");
                                    this.Manager.Comment("reaching state \'S310\'");
                                    this.Manager.Comment("checking step \'return RopSeekRow/success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp51, "return of RopSeekRow, state S310");
                                    this.Manager.Comment("reaching state \'S358\'");
                                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_SeekRowSuccess_TestSuite.RopSeekRowResponseInfo, null, new RopSeekRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuiteRopSeekRowResponseChecker15))) != -1)) {
                                        S02_RowRops_SeekRowSuccess_TestSuiteS406();
                                    }
                                    else {
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_SeekRowSuccess_TestSuite.RopSeekRowResponseInfo, null, new RopSeekRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuiteRopSeekRowResponseChecker15)));
                                    }
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_SeekRowSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuiteRopQueryRowsResponseChecker15)));
                                }
                                goto label11;
                            }
                            throw new InvalidOperationException("never reached");
                        label11:
;
                            goto label12;
                        }
                        throw new InvalidOperationException("never reached");
                    label12:
;
                        goto label13;
                    }
                    throw new InvalidOperationException("never reached");
                label13:
;
                    goto label14;
                }
                throw new InvalidOperationException("never reached");
            label14:
;
                goto label15;
            }
            throw new InvalidOperationException("never reached");
        label15:
;
            this.Manager.EndTest();
        }
        
        private void MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuiteCheckMAPIHTTPTransportSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S1");
        }
        
        private void MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuiteCheckMAPIHTTPTransportSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S1");
        }
        
        private void MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuiteCheckRequirementEnabledChecker(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S40");
        }
        
        private void MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuiteCheckRequirementEnabledChecker1(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S53");
        }
        
        private void MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuiteCheckRequirementEnabledChecker2(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S77");
        }
        
        private void MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuiteCheckRequirementEnabledChecker3(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S177");
        }
        
        private void MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuiteRopQueryRowsResponseChecker(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SETCOLUMNS,True,True" +
                    ",True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S201");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S201");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S201");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S201");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S201");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S201");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S201");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S201");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S201");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S201");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R472, MS-OXCTABL_R427, MS-OXCTABL_R42" +
                        "6, MS-OXCTABL_R116, MS-OXCTABL_R610");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R472");
            this.Manager.Checkpoint("MS-OXCTABL_R427");
            this.Manager.Checkpoint("MS-OXCTABL_R426");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R610");
        }
        
        private void MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuiteRopSeekRowResponseChecker(bool wantRowMovedCountout, bool enoughRow, bool hasSoughtLess, bool isActualRowsCount) {
            this.Manager.Comment("checking step \'event RopSeekRowResponse(True,False,True,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, wantRowMovedCountout, "wantRowMovedCountout of RopSeekRowResponse, state S345");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enoughRow, "enoughRow of RopSeekRowResponse, state S345");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, hasSoughtLess, "hasSoughtLess of RopSeekRowResponse, state S345");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isActualRowsCount, "isActualRowsCount of RopSeekRowResponse, state S345");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R154, MS-OXCTABL_R157, MS-OXCTABL_R163, M" +
                        "S-OXCTABL_R150, MS-OXCTABL_R497, MS-OXCTABL_R152");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R154");
            this.Manager.Checkpoint("MS-OXCTABL_R157");
            this.Manager.Checkpoint("MS-OXCTABL_R163");
            this.Manager.Checkpoint("MS-OXCTABL_R150");
            this.Manager.Checkpoint("MS-OXCTABL_R497");
            this.Manager.Checkpoint("MS-OXCTABL_R152");
        }
        
        private void S02_RowRops_SeekRowSuccess_TestSuiteS393() {
            this.Manager.Comment("reaching state \'S393\'");
        }
        
        private void MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuiteCheckRequirementEnabledChecker4(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S177");
        }
        
        private void MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuiteRopQueryRowsResponseChecker1(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SETCOLUMNS,True,True" +
                    ",True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S202");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S202");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S202");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S202");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S202");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S202");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S202");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S202");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S202");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S202");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R472, MS-OXCTABL_R427, MS-OXCTABL_R42" +
                        "6, MS-OXCTABL_R116");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R472");
            this.Manager.Checkpoint("MS-OXCTABL_R427");
            this.Manager.Checkpoint("MS-OXCTABL_R426");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
        }
        
        private void MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuiteRopSeekRowResponseChecker1(bool wantRowMovedCountout, bool enoughRow, bool hasSoughtLess, bool isActualRowsCount) {
            this.Manager.Comment("checking step \'event RopSeekRowResponse(True,False,True,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, wantRowMovedCountout, "wantRowMovedCountout of RopSeekRowResponse, state S346");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enoughRow, "enoughRow of RopSeekRowResponse, state S346");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, hasSoughtLess, "hasSoughtLess of RopSeekRowResponse, state S346");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isActualRowsCount, "isActualRowsCount of RopSeekRowResponse, state S346");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R154, MS-OXCTABL_R157, MS-OXCTABL_R163, M" +
                        "S-OXCTABL_R150, MS-OXCTABL_R497, MS-OXCTABL_R152");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R154");
            this.Manager.Checkpoint("MS-OXCTABL_R157");
            this.Manager.Checkpoint("MS-OXCTABL_R163");
            this.Manager.Checkpoint("MS-OXCTABL_R150");
            this.Manager.Checkpoint("MS-OXCTABL_R497");
            this.Manager.Checkpoint("MS-OXCTABL_R152");
        }
        
        private void S02_RowRops_SeekRowSuccess_TestSuiteS394() {
            this.Manager.Comment("reaching state \'S394\'");
        }
        
        private void MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuiteCheckRequirementEnabledChecker5(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S77");
        }
        
        private void MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuiteCheckRequirementEnabledChecker6(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S178");
        }
        
        private void MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuiteRopQueryRowsResponseChecker2(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SETCOLUMNS,True,True" +
                    ",True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S203");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S203");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S203");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S203");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S203");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S203");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S203");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S203");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S203");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S203");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R472, MS-OXCTABL_R427, MS-OXCTABL_R42" +
                        "6, MS-OXCTABL_R116, MS-OXCTABL_R610");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R472");
            this.Manager.Checkpoint("MS-OXCTABL_R427");
            this.Manager.Checkpoint("MS-OXCTABL_R426");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R610");
        }
        
        private void MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuiteRopSeekRowResponseChecker2(bool wantRowMovedCountout, bool enoughRow, bool hasSoughtLess, bool isActualRowsCount) {
            this.Manager.Comment("checking step \'event RopSeekRowResponse(True,False,True,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, wantRowMovedCountout, "wantRowMovedCountout of RopSeekRowResponse, state S347");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enoughRow, "enoughRow of RopSeekRowResponse, state S347");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, hasSoughtLess, "hasSoughtLess of RopSeekRowResponse, state S347");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isActualRowsCount, "isActualRowsCount of RopSeekRowResponse, state S347");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R154, MS-OXCTABL_R157, MS-OXCTABL_R163, M" +
                        "S-OXCTABL_R150, MS-OXCTABL_R497, MS-OXCTABL_R152");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R154");
            this.Manager.Checkpoint("MS-OXCTABL_R157");
            this.Manager.Checkpoint("MS-OXCTABL_R163");
            this.Manager.Checkpoint("MS-OXCTABL_R150");
            this.Manager.Checkpoint("MS-OXCTABL_R497");
            this.Manager.Checkpoint("MS-OXCTABL_R152");
        }
        
        private void S02_RowRops_SeekRowSuccess_TestSuiteS395() {
            this.Manager.Comment("reaching state \'S395\'");
        }
        
        private void MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuiteCheckRequirementEnabledChecker7(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S178");
        }
        
        private void MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuiteRopQueryRowsResponseChecker3(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SETCOLUMNS,True,True" +
                    ",True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S204");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S204");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S204");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S204");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S204");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S204");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S204");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S204");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S204");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S204");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R472, MS-OXCTABL_R427, MS-OXCTABL_R42" +
                        "6, MS-OXCTABL_R116");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R472");
            this.Manager.Checkpoint("MS-OXCTABL_R427");
            this.Manager.Checkpoint("MS-OXCTABL_R426");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
        }
        
        private void MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuiteRopSeekRowResponseChecker3(bool wantRowMovedCountout, bool enoughRow, bool hasSoughtLess, bool isActualRowsCount) {
            this.Manager.Comment("checking step \'event RopSeekRowResponse(True,False,True,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, wantRowMovedCountout, "wantRowMovedCountout of RopSeekRowResponse, state S348");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enoughRow, "enoughRow of RopSeekRowResponse, state S348");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, hasSoughtLess, "hasSoughtLess of RopSeekRowResponse, state S348");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isActualRowsCount, "isActualRowsCount of RopSeekRowResponse, state S348");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R154, MS-OXCTABL_R157, MS-OXCTABL_R163, M" +
                        "S-OXCTABL_R150, MS-OXCTABL_R497, MS-OXCTABL_R152");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R154");
            this.Manager.Checkpoint("MS-OXCTABL_R157");
            this.Manager.Checkpoint("MS-OXCTABL_R163");
            this.Manager.Checkpoint("MS-OXCTABL_R150");
            this.Manager.Checkpoint("MS-OXCTABL_R497");
            this.Manager.Checkpoint("MS-OXCTABL_R152");
        }
        
        private void S02_RowRops_SeekRowSuccess_TestSuiteS396() {
            this.Manager.Comment("reaching state \'S396\'");
        }
        
        private void MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuiteCheckRequirementEnabledChecker8(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S53");
        }
        
        private void MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuiteCheckRequirementEnabledChecker9(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S78");
        }
        
        private void MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuiteCheckRequirementEnabledChecker10(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S179");
        }
        
        private void MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuiteRopQueryRowsResponseChecker4(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SETCOLUMNS,True,True" +
                    ",True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S205");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S205");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S205");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S205");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S205");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S205");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S205");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S205");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S205");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S205");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R472, MS-OXCTABL_R427, MS-OXCTABL_R42" +
                        "6, MS-OXCTABL_R116");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R472");
            this.Manager.Checkpoint("MS-OXCTABL_R427");
            this.Manager.Checkpoint("MS-OXCTABL_R426");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
        }
        
        private void MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuiteRopSeekRowResponseChecker4(bool wantRowMovedCountout, bool enoughRow, bool hasSoughtLess, bool isActualRowsCount) {
            this.Manager.Comment("checking step \'event RopSeekRowResponse(True,False,True,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, wantRowMovedCountout, "wantRowMovedCountout of RopSeekRowResponse, state S349");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enoughRow, "enoughRow of RopSeekRowResponse, state S349");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, hasSoughtLess, "hasSoughtLess of RopSeekRowResponse, state S349");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isActualRowsCount, "isActualRowsCount of RopSeekRowResponse, state S349");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R154, MS-OXCTABL_R157, MS-OXCTABL_R163, M" +
                        "S-OXCTABL_R150, MS-OXCTABL_R497, MS-OXCTABL_R152");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R154");
            this.Manager.Checkpoint("MS-OXCTABL_R157");
            this.Manager.Checkpoint("MS-OXCTABL_R163");
            this.Manager.Checkpoint("MS-OXCTABL_R150");
            this.Manager.Checkpoint("MS-OXCTABL_R497");
            this.Manager.Checkpoint("MS-OXCTABL_R152");
        }
        
        private void S02_RowRops_SeekRowSuccess_TestSuiteS397() {
            this.Manager.Comment("reaching state \'S397\'");
        }
        
        private void MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuiteCheckRequirementEnabledChecker11(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S179");
        }
        
        private void MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuiteRopQueryRowsResponseChecker5(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SETCOLUMNS,True,True" +
                    ",True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S206");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S206");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S206");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S206");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S206");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S206");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S206");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S206");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S206");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S206");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R472, MS-OXCTABL_R427, MS-OXCTABL_R42" +
                        "6, MS-OXCTABL_R116, MS-OXCTABL_R610");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R472");
            this.Manager.Checkpoint("MS-OXCTABL_R427");
            this.Manager.Checkpoint("MS-OXCTABL_R426");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R610");
        }
        
        private void MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuiteRopSeekRowResponseChecker5(bool wantRowMovedCountout, bool enoughRow, bool hasSoughtLess, bool isActualRowsCount) {
            this.Manager.Comment("checking step \'event RopSeekRowResponse(True,False,True,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, wantRowMovedCountout, "wantRowMovedCountout of RopSeekRowResponse, state S350");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enoughRow, "enoughRow of RopSeekRowResponse, state S350");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, hasSoughtLess, "hasSoughtLess of RopSeekRowResponse, state S350");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isActualRowsCount, "isActualRowsCount of RopSeekRowResponse, state S350");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R154, MS-OXCTABL_R157, MS-OXCTABL_R163, M" +
                        "S-OXCTABL_R150, MS-OXCTABL_R497, MS-OXCTABL_R152");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R154");
            this.Manager.Checkpoint("MS-OXCTABL_R157");
            this.Manager.Checkpoint("MS-OXCTABL_R163");
            this.Manager.Checkpoint("MS-OXCTABL_R150");
            this.Manager.Checkpoint("MS-OXCTABL_R497");
            this.Manager.Checkpoint("MS-OXCTABL_R152");
        }
        
        private void S02_RowRops_SeekRowSuccess_TestSuiteS398() {
            this.Manager.Comment("reaching state \'S398\'");
        }
        
        private void MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuiteCheckRequirementEnabledChecker12(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S78");
        }
        
        private void MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuiteCheckRequirementEnabledChecker13(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S180");
        }
        
        private void MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuiteRopQueryRowsResponseChecker6(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SETCOLUMNS,True,True" +
                    ",True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S207");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S207");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S207");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S207");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S207");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S207");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S207");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S207");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S207");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S207");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R472, MS-OXCTABL_R427, MS-OXCTABL_R42" +
                        "6, MS-OXCTABL_R116, MS-OXCTABL_R610");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R472");
            this.Manager.Checkpoint("MS-OXCTABL_R427");
            this.Manager.Checkpoint("MS-OXCTABL_R426");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R610");
        }
        
        private void MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuiteRopSeekRowResponseChecker6(bool wantRowMovedCountout, bool enoughRow, bool hasSoughtLess, bool isActualRowsCount) {
            this.Manager.Comment("checking step \'event RopSeekRowResponse(True,False,True,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, wantRowMovedCountout, "wantRowMovedCountout of RopSeekRowResponse, state S351");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enoughRow, "enoughRow of RopSeekRowResponse, state S351");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, hasSoughtLess, "hasSoughtLess of RopSeekRowResponse, state S351");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isActualRowsCount, "isActualRowsCount of RopSeekRowResponse, state S351");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R154, MS-OXCTABL_R157, MS-OXCTABL_R163, M" +
                        "S-OXCTABL_R150, MS-OXCTABL_R497, MS-OXCTABL_R152");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R154");
            this.Manager.Checkpoint("MS-OXCTABL_R157");
            this.Manager.Checkpoint("MS-OXCTABL_R163");
            this.Manager.Checkpoint("MS-OXCTABL_R150");
            this.Manager.Checkpoint("MS-OXCTABL_R497");
            this.Manager.Checkpoint("MS-OXCTABL_R152");
        }
        
        private void S02_RowRops_SeekRowSuccess_TestSuiteS399() {
            this.Manager.Comment("reaching state \'S399\'");
        }
        
        private void MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuiteCheckRequirementEnabledChecker14(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S180");
        }
        
        private void MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuiteRopQueryRowsResponseChecker7(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SETCOLUMNS,True,True" +
                    ",True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S208");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S208");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S208");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S208");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S208");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S208");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S208");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S208");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S208");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S208");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R472, MS-OXCTABL_R427, MS-OXCTABL_R42" +
                        "6, MS-OXCTABL_R116");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R472");
            this.Manager.Checkpoint("MS-OXCTABL_R427");
            this.Manager.Checkpoint("MS-OXCTABL_R426");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
        }
        
        private void MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuiteRopSeekRowResponseChecker7(bool wantRowMovedCountout, bool enoughRow, bool hasSoughtLess, bool isActualRowsCount) {
            this.Manager.Comment("checking step \'event RopSeekRowResponse(True,False,True,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, wantRowMovedCountout, "wantRowMovedCountout of RopSeekRowResponse, state S352");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enoughRow, "enoughRow of RopSeekRowResponse, state S352");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, hasSoughtLess, "hasSoughtLess of RopSeekRowResponse, state S352");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isActualRowsCount, "isActualRowsCount of RopSeekRowResponse, state S352");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R154, MS-OXCTABL_R157, MS-OXCTABL_R163, M" +
                        "S-OXCTABL_R150, MS-OXCTABL_R497, MS-OXCTABL_R152");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R154");
            this.Manager.Checkpoint("MS-OXCTABL_R157");
            this.Manager.Checkpoint("MS-OXCTABL_R163");
            this.Manager.Checkpoint("MS-OXCTABL_R150");
            this.Manager.Checkpoint("MS-OXCTABL_R497");
            this.Manager.Checkpoint("MS-OXCTABL_R152");
        }
        
        private void S02_RowRops_SeekRowSuccess_TestSuiteS400() {
            this.Manager.Comment("reaching state \'S400\'");
        }
        
        private void MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuiteCheckRequirementEnabledChecker15(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S40");
        }
        
        private void MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuiteCheckRequirementEnabledChecker16(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S54");
        }
        
        private void MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuiteCheckRequirementEnabledChecker17(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S79");
        }
        
        private void MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuiteCheckRequirementEnabledChecker18(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S181");
        }
        
        private void MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuiteRopQueryRowsResponseChecker8(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SETCOLUMNS,True,True" +
                    ",True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S209");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S209");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S209");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S209");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S209");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S209");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S209");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S209");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S209");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S209");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R472, MS-OXCTABL_R427, MS-OXCTABL_R42" +
                        "6, MS-OXCTABL_R116, MS-OXCTABL_R610");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R472");
            this.Manager.Checkpoint("MS-OXCTABL_R427");
            this.Manager.Checkpoint("MS-OXCTABL_R426");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R610");
        }
        
        private void MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuiteRopSeekRowResponseChecker8(bool wantRowMovedCountout, bool enoughRow, bool hasSoughtLess, bool isActualRowsCount) {
            this.Manager.Comment("checking step \'event RopSeekRowResponse(True,False,True,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, wantRowMovedCountout, "wantRowMovedCountout of RopSeekRowResponse, state S353");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enoughRow, "enoughRow of RopSeekRowResponse, state S353");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, hasSoughtLess, "hasSoughtLess of RopSeekRowResponse, state S353");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isActualRowsCount, "isActualRowsCount of RopSeekRowResponse, state S353");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R154, MS-OXCTABL_R157, MS-OXCTABL_R163, M" +
                        "S-OXCTABL_R150, MS-OXCTABL_R497, MS-OXCTABL_R152");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R154");
            this.Manager.Checkpoint("MS-OXCTABL_R157");
            this.Manager.Checkpoint("MS-OXCTABL_R163");
            this.Manager.Checkpoint("MS-OXCTABL_R150");
            this.Manager.Checkpoint("MS-OXCTABL_R497");
            this.Manager.Checkpoint("MS-OXCTABL_R152");
        }
        
        private void S02_RowRops_SeekRowSuccess_TestSuiteS401() {
            this.Manager.Comment("reaching state \'S401\'");
        }
        
        private void MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuiteCheckRequirementEnabledChecker19(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S181");
        }
        
        private void MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuiteRopQueryRowsResponseChecker9(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SETCOLUMNS,True,True" +
                    ",True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S210");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S210");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S210");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S210");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S210");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S210");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S210");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S210");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S210");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S210");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R472, MS-OXCTABL_R427, MS-OXCTABL_R42" +
                        "6, MS-OXCTABL_R116");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R472");
            this.Manager.Checkpoint("MS-OXCTABL_R427");
            this.Manager.Checkpoint("MS-OXCTABL_R426");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
        }
        
        private void MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuiteRopSeekRowResponseChecker9(bool wantRowMovedCountout, bool enoughRow, bool hasSoughtLess, bool isActualRowsCount) {
            this.Manager.Comment("checking step \'event RopSeekRowResponse(True,False,True,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, wantRowMovedCountout, "wantRowMovedCountout of RopSeekRowResponse, state S354");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enoughRow, "enoughRow of RopSeekRowResponse, state S354");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, hasSoughtLess, "hasSoughtLess of RopSeekRowResponse, state S354");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isActualRowsCount, "isActualRowsCount of RopSeekRowResponse, state S354");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R154, MS-OXCTABL_R157, MS-OXCTABL_R163, M" +
                        "S-OXCTABL_R150, MS-OXCTABL_R497, MS-OXCTABL_R152");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R154");
            this.Manager.Checkpoint("MS-OXCTABL_R157");
            this.Manager.Checkpoint("MS-OXCTABL_R163");
            this.Manager.Checkpoint("MS-OXCTABL_R150");
            this.Manager.Checkpoint("MS-OXCTABL_R497");
            this.Manager.Checkpoint("MS-OXCTABL_R152");
        }
        
        private void S02_RowRops_SeekRowSuccess_TestSuiteS402() {
            this.Manager.Comment("reaching state \'S402\'");
        }
        
        private void MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuiteCheckRequirementEnabledChecker20(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S79");
        }
        
        private void MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuiteCheckRequirementEnabledChecker21(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S182");
        }
        
        private void MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuiteRopQueryRowsResponseChecker10(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SETCOLUMNS,True,True" +
                    ",True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S211");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S211");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S211");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S211");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S211");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S211");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S211");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S211");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S211");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S211");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R472, MS-OXCTABL_R427, MS-OXCTABL_R42" +
                        "6, MS-OXCTABL_R116");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R472");
            this.Manager.Checkpoint("MS-OXCTABL_R427");
            this.Manager.Checkpoint("MS-OXCTABL_R426");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
        }
        
        private void MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuiteRopSeekRowResponseChecker10(bool wantRowMovedCountout, bool enoughRow, bool hasSoughtLess, bool isActualRowsCount) {
            this.Manager.Comment("checking step \'event RopSeekRowResponse(True,False,True,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, wantRowMovedCountout, "wantRowMovedCountout of RopSeekRowResponse, state S355");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enoughRow, "enoughRow of RopSeekRowResponse, state S355");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, hasSoughtLess, "hasSoughtLess of RopSeekRowResponse, state S355");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isActualRowsCount, "isActualRowsCount of RopSeekRowResponse, state S355");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R154, MS-OXCTABL_R157, MS-OXCTABL_R163, M" +
                        "S-OXCTABL_R150, MS-OXCTABL_R497, MS-OXCTABL_R152");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R154");
            this.Manager.Checkpoint("MS-OXCTABL_R157");
            this.Manager.Checkpoint("MS-OXCTABL_R163");
            this.Manager.Checkpoint("MS-OXCTABL_R150");
            this.Manager.Checkpoint("MS-OXCTABL_R497");
            this.Manager.Checkpoint("MS-OXCTABL_R152");
        }
        
        private void S02_RowRops_SeekRowSuccess_TestSuiteS403() {
            this.Manager.Comment("reaching state \'S403\'");
        }
        
        private void MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuiteCheckRequirementEnabledChecker22(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S182");
        }
        
        private void MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuiteRopQueryRowsResponseChecker11(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SETCOLUMNS,True,True" +
                    ",True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S212");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S212");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S212");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S212");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S212");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S212");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S212");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S212");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S212");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S212");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R472, MS-OXCTABL_R427, MS-OXCTABL_R42" +
                        "6, MS-OXCTABL_R116, MS-OXCTABL_R610");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R472");
            this.Manager.Checkpoint("MS-OXCTABL_R427");
            this.Manager.Checkpoint("MS-OXCTABL_R426");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R610");
        }
        
        private void MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuiteRopSeekRowResponseChecker11(bool wantRowMovedCountout, bool enoughRow, bool hasSoughtLess, bool isActualRowsCount) {
            this.Manager.Comment("checking step \'event RopSeekRowResponse(True,False,True,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, wantRowMovedCountout, "wantRowMovedCountout of RopSeekRowResponse, state S356");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enoughRow, "enoughRow of RopSeekRowResponse, state S356");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, hasSoughtLess, "hasSoughtLess of RopSeekRowResponse, state S356");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isActualRowsCount, "isActualRowsCount of RopSeekRowResponse, state S356");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R154, MS-OXCTABL_R157, MS-OXCTABL_R163, M" +
                        "S-OXCTABL_R150, MS-OXCTABL_R497, MS-OXCTABL_R152");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R154");
            this.Manager.Checkpoint("MS-OXCTABL_R157");
            this.Manager.Checkpoint("MS-OXCTABL_R163");
            this.Manager.Checkpoint("MS-OXCTABL_R150");
            this.Manager.Checkpoint("MS-OXCTABL_R497");
            this.Manager.Checkpoint("MS-OXCTABL_R152");
        }
        
        private void S02_RowRops_SeekRowSuccess_TestSuiteS404() {
            this.Manager.Comment("reaching state \'S404\'");
        }
        
        private void MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuiteCheckRequirementEnabledChecker23(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S54");
        }
        
        private void MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuiteCheckRequirementEnabledChecker24(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S80");
        }
        
        private void MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuiteCheckRequirementEnabledChecker25(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S184");
        }
        
        private void MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuiteRopQueryRowsResponseChecker12(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SETCOLUMNS,True,True" +
                    ",True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S215");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S215");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S215");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S215");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S215");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S215");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S215");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S215");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S215");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S215");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R472, MS-OXCTABL_R427, MS-OXCTABL_R42" +
                        "6, MS-OXCTABL_R116, MS-OXCTABL_R610");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R472");
            this.Manager.Checkpoint("MS-OXCTABL_R427");
            this.Manager.Checkpoint("MS-OXCTABL_R426");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R610");
        }
        
        private void MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuiteRopSeekRowResponseChecker12(bool wantRowMovedCountout, bool enoughRow, bool hasSoughtLess, bool isActualRowsCount) {
            this.Manager.Comment("checking step \'event RopSeekRowResponse(True,False,True,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, wantRowMovedCountout, "wantRowMovedCountout of RopSeekRowResponse, state S359");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enoughRow, "enoughRow of RopSeekRowResponse, state S359");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, hasSoughtLess, "hasSoughtLess of RopSeekRowResponse, state S359");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isActualRowsCount, "isActualRowsCount of RopSeekRowResponse, state S359");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R154, MS-OXCTABL_R157, MS-OXCTABL_R163, M" +
                        "S-OXCTABL_R150, MS-OXCTABL_R497, MS-OXCTABL_R152");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R154");
            this.Manager.Checkpoint("MS-OXCTABL_R157");
            this.Manager.Checkpoint("MS-OXCTABL_R163");
            this.Manager.Checkpoint("MS-OXCTABL_R150");
            this.Manager.Checkpoint("MS-OXCTABL_R497");
            this.Manager.Checkpoint("MS-OXCTABL_R152");
        }
        
        private void S02_RowRops_SeekRowSuccess_TestSuiteS407() {
            this.Manager.Comment("reaching state \'S407\'");
        }
        
        private void MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuiteCheckRequirementEnabledChecker26(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S184");
        }
        
        private void MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuiteRopQueryRowsResponseChecker13(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SETCOLUMNS,True,True" +
                    ",True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S216");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S216");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S216");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S216");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S216");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S216");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S216");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S216");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S216");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S216");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R472, MS-OXCTABL_R427, MS-OXCTABL_R42" +
                        "6, MS-OXCTABL_R116");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R472");
            this.Manager.Checkpoint("MS-OXCTABL_R427");
            this.Manager.Checkpoint("MS-OXCTABL_R426");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
        }
        
        private void MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuiteRopSeekRowResponseChecker13(bool wantRowMovedCountout, bool enoughRow, bool hasSoughtLess, bool isActualRowsCount) {
            this.Manager.Comment("checking step \'event RopSeekRowResponse(True,False,True,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, wantRowMovedCountout, "wantRowMovedCountout of RopSeekRowResponse, state S360");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enoughRow, "enoughRow of RopSeekRowResponse, state S360");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, hasSoughtLess, "hasSoughtLess of RopSeekRowResponse, state S360");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isActualRowsCount, "isActualRowsCount of RopSeekRowResponse, state S360");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R154, MS-OXCTABL_R157, MS-OXCTABL_R163, M" +
                        "S-OXCTABL_R150, MS-OXCTABL_R497, MS-OXCTABL_R152");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R154");
            this.Manager.Checkpoint("MS-OXCTABL_R157");
            this.Manager.Checkpoint("MS-OXCTABL_R163");
            this.Manager.Checkpoint("MS-OXCTABL_R150");
            this.Manager.Checkpoint("MS-OXCTABL_R497");
            this.Manager.Checkpoint("MS-OXCTABL_R152");
        }
        
        private void S02_RowRops_SeekRowSuccess_TestSuiteS408() {
            this.Manager.Comment("reaching state \'S408\'");
        }
        
        private void MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuiteCheckRequirementEnabledChecker27(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S80");
        }
        
        private void MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuiteCheckRequirementEnabledChecker28(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S183");
        }
        
        private void MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuiteRopQueryRowsResponseChecker14(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SETCOLUMNS,True,True" +
                    ",True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S213");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S213");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S213");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S213");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S213");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S213");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S213");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S213");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S213");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S213");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R472, MS-OXCTABL_R427, MS-OXCTABL_R42" +
                        "6, MS-OXCTABL_R116");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R472");
            this.Manager.Checkpoint("MS-OXCTABL_R427");
            this.Manager.Checkpoint("MS-OXCTABL_R426");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
        }
        
        private void MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuiteRopSeekRowResponseChecker14(bool wantRowMovedCountout, bool enoughRow, bool hasSoughtLess, bool isActualRowsCount) {
            this.Manager.Comment("checking step \'event RopSeekRowResponse(True,False,True,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, wantRowMovedCountout, "wantRowMovedCountout of RopSeekRowResponse, state S357");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enoughRow, "enoughRow of RopSeekRowResponse, state S357");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, hasSoughtLess, "hasSoughtLess of RopSeekRowResponse, state S357");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isActualRowsCount, "isActualRowsCount of RopSeekRowResponse, state S357");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R154, MS-OXCTABL_R157, MS-OXCTABL_R163, M" +
                        "S-OXCTABL_R150, MS-OXCTABL_R497, MS-OXCTABL_R152");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R154");
            this.Manager.Checkpoint("MS-OXCTABL_R157");
            this.Manager.Checkpoint("MS-OXCTABL_R163");
            this.Manager.Checkpoint("MS-OXCTABL_R150");
            this.Manager.Checkpoint("MS-OXCTABL_R497");
            this.Manager.Checkpoint("MS-OXCTABL_R152");
        }
        
        private void S02_RowRops_SeekRowSuccess_TestSuiteS405() {
            this.Manager.Comment("reaching state \'S405\'");
        }
        
        private void MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuiteCheckRequirementEnabledChecker29(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S183");
        }
        
        private void MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuiteRopQueryRowsResponseChecker15(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SETCOLUMNS,True,True" +
                    ",True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S214");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S214");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S214");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S214");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S214");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S214");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S214");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S214");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S214");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S214");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R472, MS-OXCTABL_R427, MS-OXCTABL_R42" +
                        "6, MS-OXCTABL_R116, MS-OXCTABL_R610");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R472");
            this.Manager.Checkpoint("MS-OXCTABL_R427");
            this.Manager.Checkpoint("MS-OXCTABL_R426");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R610");
        }
        
        private void MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuiteRopSeekRowResponseChecker15(bool wantRowMovedCountout, bool enoughRow, bool hasSoughtLess, bool isActualRowsCount) {
            this.Manager.Comment("checking step \'event RopSeekRowResponse(True,False,True,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, wantRowMovedCountout, "wantRowMovedCountout of RopSeekRowResponse, state S358");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enoughRow, "enoughRow of RopSeekRowResponse, state S358");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, hasSoughtLess, "hasSoughtLess of RopSeekRowResponse, state S358");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isActualRowsCount, "isActualRowsCount of RopSeekRowResponse, state S358");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R154, MS-OXCTABL_R157, MS-OXCTABL_R163, M" +
                        "S-OXCTABL_R150, MS-OXCTABL_R497, MS-OXCTABL_R152");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R154");
            this.Manager.Checkpoint("MS-OXCTABL_R157");
            this.Manager.Checkpoint("MS-OXCTABL_R163");
            this.Manager.Checkpoint("MS-OXCTABL_R150");
            this.Manager.Checkpoint("MS-OXCTABL_R497");
            this.Manager.Checkpoint("MS-OXCTABL_R152");
        }
        
        private void S02_RowRops_SeekRowSuccess_TestSuiteS406() {
            this.Manager.Comment("reaching state \'S406\'");
        }
        #endregion
        
        #region Test Starting in S2
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite1() {
            this.Manager.BeginTest("MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite1");
            this.Manager.Comment("reaching state \'S2\'");
            bool temp57;
            this.Manager.Comment("executing step \'call CheckMAPIHTTPTransportSupported(out _)\'");
            this.IMS_OXCTABLAdapterInstance.CheckMAPIHTTPTransportSupported(out temp57);
            this.Manager.AddReturn(CheckMAPIHTTPTransportSupportedInfo, null, temp57);
            this.Manager.Comment("reaching state \'S3\'");
            int temp113 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_SeekRowSuccess_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite1CheckMAPIHTTPTransportSupportedChecker)), new ExpectedReturn(S02_RowRops_SeekRowSuccess_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite1CheckMAPIHTTPTransportSupportedChecker1)));
            if ((temp113 == 0)) {
                this.Manager.Comment("reaching state \'S12\'");
                this.Manager.Comment("executing step \'call InitializeTable(CONTENT_TABLE)\'");
                this.IMS_OXCTABLAdapterInstance.InitializeTable(((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableType)(0)));
                this.Manager.Comment("reaching state \'S21\'");
                this.Manager.Comment("checking step \'return InitializeTable\'");
                this.Manager.Comment("reaching state \'S26\'");
                Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp58;
                this.Manager.Comment("executing step \'call RopSetColumns(1,False,False,False)\'");
                temp58 = this.IMS_OXCTABLAdapterInstance.RopSetColumns(1u, false, false, false);
                this.Manager.Checkpoint("MS-OXCTABL_R831");
                this.Manager.Checkpoint("MS-OXCTABL_R45");
                this.Manager.Comment("reaching state \'S31\'");
                this.Manager.Comment("checking step \'return RopSetColumns/success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp58, "return of RopSetColumns, state S31");
                this.Manager.Comment("reaching state \'S36\'");
                bool temp59;
                this.Manager.Comment("executing step \'call CheckRequirementEnabled(768,out _)\'");
                this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(768, out temp59);
                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp59);
                this.Manager.Comment("reaching state \'S41\'");
                int temp112 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_SeekRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite1CheckRequirementEnabledChecker)), new ExpectedReturn(S02_RowRops_SeekRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite1CheckRequirementEnabledChecker15)));
                if ((temp112 == 0)) {
                    this.Manager.Comment("reaching state \'S47\'");
                    bool temp60;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(866,out _)\'");
                    this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(866, out temp60);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp60);
                    this.Manager.Comment("reaching state \'S55\'");
                    int temp85 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_SeekRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite1CheckRequirementEnabledChecker1)), new ExpectedReturn(S02_RowRops_SeekRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite1CheckRequirementEnabledChecker8)));
                    if ((temp85 == 0)) {
                        this.Manager.Comment("reaching state \'S65\'");
                        bool temp61;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(867,out _)\'");
                        this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(867, out temp61);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp61);
                        this.Manager.Comment("reaching state \'S81\'");
                        int temp72 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_SeekRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite1CheckRequirementEnabledChecker2)), new ExpectedReturn(S02_RowRops_SeekRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite1CheckRequirementEnabledChecker5)));
                        if ((temp72 == 0)) {
                            this.Manager.Comment("reaching state \'S101\'");
                            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp62;
                            this.Manager.Comment("executing step \'call RopQueryRows(Advance,True)\'");
                            temp62 = this.IMS_OXCTABLAdapterInstance.RopQueryRows(((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), true);
                            this.Manager.Checkpoint("MS-OXCTABL_R837");
                            this.Manager.Comment("reaching state \'S129\'");
                            this.Manager.Comment("checking step \'return RopQueryRows/success\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp62, "return of RopQueryRows, state S129");
                            this.Manager.Comment("reaching state \'S157\'");
                            bool temp63;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(610,out _)\'");
                            this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(610, out temp63);
                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp63);
                            this.Manager.Comment("reaching state \'S185\'");
                            int temp66 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_SeekRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite1CheckRequirementEnabledChecker3)), new ExpectedReturn(S02_RowRops_SeekRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite1CheckRequirementEnabledChecker4)));
                            if ((temp66 == 0)) {
                                this.Manager.Comment("reaching state \'S217\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_SeekRowSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite1RopQueryRowsResponseChecker))) != -1)) {
                                    this.Manager.Comment("reaching state \'S265\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp64;
                                    this.Manager.Comment("executing step \'call RopSeekRow(BOOKMARK_BEGINNING,True,True,True)\'");
                                    temp64 = this.IMS_OXCTABLAdapterInstance.RopSeekRow(((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(0)), true, true, true);
                                    this.Manager.Checkpoint("MS-OXCTABL_R850");
                                    this.Manager.Comment("reaching state \'S313\'");
                                    this.Manager.Comment("checking step \'return RopSeekRow/success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp64, "return of RopSeekRow, state S313");
                                    this.Manager.Comment("reaching state \'S361\'");
                                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_SeekRowSuccess_TestSuite.RopSeekRowResponseInfo, null, new RopSeekRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite1RopSeekRowResponseChecker))) != -1)) {
                                        S02_RowRops_SeekRowSuccess_TestSuiteS408();
                                    }
                                    else {
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_SeekRowSuccess_TestSuite.RopSeekRowResponseInfo, null, new RopSeekRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite1RopSeekRowResponseChecker)));
                                    }
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_SeekRowSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite1RopQueryRowsResponseChecker)));
                                }
                                goto label16;
                            }
                            if ((temp66 == 1)) {
                                this.Manager.Comment("reaching state \'S218\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_SeekRowSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite1RopQueryRowsResponseChecker1))) != -1)) {
                                    this.Manager.Comment("reaching state \'S266\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp65;
                                    this.Manager.Comment("executing step \'call RopSeekRow(BOOKMARK_BEGINNING,True,True,True)\'");
                                    temp65 = this.IMS_OXCTABLAdapterInstance.RopSeekRow(((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(0)), true, true, true);
                                    this.Manager.Checkpoint("MS-OXCTABL_R850");
                                    this.Manager.Comment("reaching state \'S314\'");
                                    this.Manager.Comment("checking step \'return RopSeekRow/success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp65, "return of RopSeekRow, state S314");
                                    this.Manager.Comment("reaching state \'S362\'");
                                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_SeekRowSuccess_TestSuite.RopSeekRowResponseInfo, null, new RopSeekRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite1RopSeekRowResponseChecker1))) != -1)) {
                                        S02_RowRops_SeekRowSuccess_TestSuiteS407();
                                    }
                                    else {
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_SeekRowSuccess_TestSuite.RopSeekRowResponseInfo, null, new RopSeekRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite1RopSeekRowResponseChecker1)));
                                    }
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_SeekRowSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite1RopQueryRowsResponseChecker1)));
                                }
                                goto label16;
                            }
                            throw new InvalidOperationException("never reached");
                        label16:
;
                            goto label18;
                        }
                        if ((temp72 == 1)) {
                            this.Manager.Comment("reaching state \'S102\'");
                            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp67;
                            this.Manager.Comment("executing step \'call RopQueryRows(Advance,True)\'");
                            temp67 = this.IMS_OXCTABLAdapterInstance.RopQueryRows(((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), true);
                            this.Manager.Checkpoint("MS-OXCTABL_R837");
                            this.Manager.Comment("reaching state \'S130\'");
                            this.Manager.Comment("checking step \'return RopQueryRows/success\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp67, "return of RopQueryRows, state S130");
                            this.Manager.Comment("reaching state \'S158\'");
                            bool temp68;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(610,out _)\'");
                            this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(610, out temp68);
                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp68);
                            this.Manager.Comment("reaching state \'S186\'");
                            int temp71 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_SeekRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite1CheckRequirementEnabledChecker6)), new ExpectedReturn(S02_RowRops_SeekRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite1CheckRequirementEnabledChecker7)));
                            if ((temp71 == 0)) {
                                this.Manager.Comment("reaching state \'S219\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_SeekRowSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite1RopQueryRowsResponseChecker2))) != -1)) {
                                    this.Manager.Comment("reaching state \'S267\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp69;
                                    this.Manager.Comment("executing step \'call RopSeekRow(BOOKMARK_BEGINNING,True,True,True)\'");
                                    temp69 = this.IMS_OXCTABLAdapterInstance.RopSeekRow(((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(0)), true, true, true);
                                    this.Manager.Checkpoint("MS-OXCTABL_R850");
                                    this.Manager.Comment("reaching state \'S315\'");
                                    this.Manager.Comment("checking step \'return RopSeekRow/success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp69, "return of RopSeekRow, state S315");
                                    this.Manager.Comment("reaching state \'S363\'");
                                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_SeekRowSuccess_TestSuite.RopSeekRowResponseInfo, null, new RopSeekRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite1RopSeekRowResponseChecker2))) != -1)) {
                                        S02_RowRops_SeekRowSuccess_TestSuiteS406();
                                    }
                                    else {
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_SeekRowSuccess_TestSuite.RopSeekRowResponseInfo, null, new RopSeekRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite1RopSeekRowResponseChecker2)));
                                    }
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_SeekRowSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite1RopQueryRowsResponseChecker2)));
                                }
                                goto label17;
                            }
                            if ((temp71 == 1)) {
                                this.Manager.Comment("reaching state \'S220\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_SeekRowSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite1RopQueryRowsResponseChecker3))) != -1)) {
                                    this.Manager.Comment("reaching state \'S268\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp70;
                                    this.Manager.Comment("executing step \'call RopSeekRow(BOOKMARK_BEGINNING,True,True,True)\'");
                                    temp70 = this.IMS_OXCTABLAdapterInstance.RopSeekRow(((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(0)), true, true, true);
                                    this.Manager.Checkpoint("MS-OXCTABL_R850");
                                    this.Manager.Comment("reaching state \'S316\'");
                                    this.Manager.Comment("checking step \'return RopSeekRow/success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp70, "return of RopSeekRow, state S316");
                                    this.Manager.Comment("reaching state \'S364\'");
                                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_SeekRowSuccess_TestSuite.RopSeekRowResponseInfo, null, new RopSeekRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite1RopSeekRowResponseChecker3))) != -1)) {
                                        S02_RowRops_SeekRowSuccess_TestSuiteS405();
                                    }
                                    else {
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_SeekRowSuccess_TestSuite.RopSeekRowResponseInfo, null, new RopSeekRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite1RopSeekRowResponseChecker3)));
                                    }
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_SeekRowSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite1RopQueryRowsResponseChecker3)));
                                }
                                goto label17;
                            }
                            throw new InvalidOperationException("never reached");
                        label17:
;
                            goto label18;
                        }
                        throw new InvalidOperationException("never reached");
                    label18:
;
                        goto label22;
                    }
                    if ((temp85 == 1)) {
                        this.Manager.Comment("reaching state \'S66\'");
                        bool temp73;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(867,out _)\'");
                        this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(867, out temp73);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp73);
                        this.Manager.Comment("reaching state \'S82\'");
                        int temp84 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_SeekRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite1CheckRequirementEnabledChecker9)), new ExpectedReturn(S02_RowRops_SeekRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite1CheckRequirementEnabledChecker12)));
                        if ((temp84 == 0)) {
                            this.Manager.Comment("reaching state \'S103\'");
                            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp74;
                            this.Manager.Comment("executing step \'call RopQueryRows(Advance,True)\'");
                            temp74 = this.IMS_OXCTABLAdapterInstance.RopQueryRows(((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), true);
                            this.Manager.Checkpoint("MS-OXCTABL_R837");
                            this.Manager.Comment("reaching state \'S131\'");
                            this.Manager.Comment("checking step \'return RopQueryRows/success\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp74, "return of RopQueryRows, state S131");
                            this.Manager.Comment("reaching state \'S159\'");
                            bool temp75;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(610,out _)\'");
                            this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(610, out temp75);
                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp75);
                            this.Manager.Comment("reaching state \'S187\'");
                            int temp78 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_SeekRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite1CheckRequirementEnabledChecker10)), new ExpectedReturn(S02_RowRops_SeekRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite1CheckRequirementEnabledChecker11)));
                            if ((temp78 == 0)) {
                                this.Manager.Comment("reaching state \'S221\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_SeekRowSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite1RopQueryRowsResponseChecker4))) != -1)) {
                                    this.Manager.Comment("reaching state \'S269\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp76;
                                    this.Manager.Comment("executing step \'call RopSeekRow(BOOKMARK_BEGINNING,True,True,True)\'");
                                    temp76 = this.IMS_OXCTABLAdapterInstance.RopSeekRow(((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(0)), true, true, true);
                                    this.Manager.Checkpoint("MS-OXCTABL_R850");
                                    this.Manager.Comment("reaching state \'S317\'");
                                    this.Manager.Comment("checking step \'return RopSeekRow/success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp76, "return of RopSeekRow, state S317");
                                    this.Manager.Comment("reaching state \'S365\'");
                                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_SeekRowSuccess_TestSuite.RopSeekRowResponseInfo, null, new RopSeekRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite1RopSeekRowResponseChecker4))) != -1)) {
                                        S02_RowRops_SeekRowSuccess_TestSuiteS404();
                                    }
                                    else {
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_SeekRowSuccess_TestSuite.RopSeekRowResponseInfo, null, new RopSeekRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite1RopSeekRowResponseChecker4)));
                                    }
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_SeekRowSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite1RopQueryRowsResponseChecker4)));
                                }
                                goto label19;
                            }
                            if ((temp78 == 1)) {
                                this.Manager.Comment("reaching state \'S222\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_SeekRowSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite1RopQueryRowsResponseChecker5))) != -1)) {
                                    this.Manager.Comment("reaching state \'S270\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp77;
                                    this.Manager.Comment("executing step \'call RopSeekRow(BOOKMARK_BEGINNING,True,True,True)\'");
                                    temp77 = this.IMS_OXCTABLAdapterInstance.RopSeekRow(((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(0)), true, true, true);
                                    this.Manager.Checkpoint("MS-OXCTABL_R850");
                                    this.Manager.Comment("reaching state \'S318\'");
                                    this.Manager.Comment("checking step \'return RopSeekRow/success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp77, "return of RopSeekRow, state S318");
                                    this.Manager.Comment("reaching state \'S366\'");
                                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_SeekRowSuccess_TestSuite.RopSeekRowResponseInfo, null, new RopSeekRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite1RopSeekRowResponseChecker5))) != -1)) {
                                        S02_RowRops_SeekRowSuccess_TestSuiteS403();
                                    }
                                    else {
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_SeekRowSuccess_TestSuite.RopSeekRowResponseInfo, null, new RopSeekRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite1RopSeekRowResponseChecker5)));
                                    }
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_SeekRowSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite1RopQueryRowsResponseChecker5)));
                                }
                                goto label19;
                            }
                            throw new InvalidOperationException("never reached");
                        label19:
;
                            goto label21;
                        }
                        if ((temp84 == 1)) {
                            this.Manager.Comment("reaching state \'S104\'");
                            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp79;
                            this.Manager.Comment("executing step \'call RopQueryRows(Advance,True)\'");
                            temp79 = this.IMS_OXCTABLAdapterInstance.RopQueryRows(((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), true);
                            this.Manager.Checkpoint("MS-OXCTABL_R837");
                            this.Manager.Comment("reaching state \'S132\'");
                            this.Manager.Comment("checking step \'return RopQueryRows/success\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp79, "return of RopQueryRows, state S132");
                            this.Manager.Comment("reaching state \'S160\'");
                            bool temp80;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(610,out _)\'");
                            this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(610, out temp80);
                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp80);
                            this.Manager.Comment("reaching state \'S188\'");
                            int temp83 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_SeekRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite1CheckRequirementEnabledChecker13)), new ExpectedReturn(S02_RowRops_SeekRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite1CheckRequirementEnabledChecker14)));
                            if ((temp83 == 0)) {
                                this.Manager.Comment("reaching state \'S223\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_SeekRowSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite1RopQueryRowsResponseChecker6))) != -1)) {
                                    this.Manager.Comment("reaching state \'S271\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp81;
                                    this.Manager.Comment("executing step \'call RopSeekRow(BOOKMARK_BEGINNING,True,True,True)\'");
                                    temp81 = this.IMS_OXCTABLAdapterInstance.RopSeekRow(((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(0)), true, true, true);
                                    this.Manager.Checkpoint("MS-OXCTABL_R850");
                                    this.Manager.Comment("reaching state \'S319\'");
                                    this.Manager.Comment("checking step \'return RopSeekRow/success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp81, "return of RopSeekRow, state S319");
                                    this.Manager.Comment("reaching state \'S367\'");
                                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_SeekRowSuccess_TestSuite.RopSeekRowResponseInfo, null, new RopSeekRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite1RopSeekRowResponseChecker6))) != -1)) {
                                        S02_RowRops_SeekRowSuccess_TestSuiteS402();
                                    }
                                    else {
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_SeekRowSuccess_TestSuite.RopSeekRowResponseInfo, null, new RopSeekRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite1RopSeekRowResponseChecker6)));
                                    }
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_SeekRowSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite1RopQueryRowsResponseChecker6)));
                                }
                                goto label20;
                            }
                            if ((temp83 == 1)) {
                                this.Manager.Comment("reaching state \'S224\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_SeekRowSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite1RopQueryRowsResponseChecker7))) != -1)) {
                                    this.Manager.Comment("reaching state \'S272\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp82;
                                    this.Manager.Comment("executing step \'call RopSeekRow(BOOKMARK_BEGINNING,True,True,True)\'");
                                    temp82 = this.IMS_OXCTABLAdapterInstance.RopSeekRow(((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(0)), true, true, true);
                                    this.Manager.Checkpoint("MS-OXCTABL_R850");
                                    this.Manager.Comment("reaching state \'S320\'");
                                    this.Manager.Comment("checking step \'return RopSeekRow/success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp82, "return of RopSeekRow, state S320");
                                    this.Manager.Comment("reaching state \'S368\'");
                                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_SeekRowSuccess_TestSuite.RopSeekRowResponseInfo, null, new RopSeekRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite1RopSeekRowResponseChecker7))) != -1)) {
                                        S02_RowRops_SeekRowSuccess_TestSuiteS401();
                                    }
                                    else {
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_SeekRowSuccess_TestSuite.RopSeekRowResponseInfo, null, new RopSeekRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite1RopSeekRowResponseChecker7)));
                                    }
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_SeekRowSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite1RopQueryRowsResponseChecker7)));
                                }
                                goto label20;
                            }
                            throw new InvalidOperationException("never reached");
                        label20:
;
                            goto label21;
                        }
                        throw new InvalidOperationException("never reached");
                    label21:
;
                        goto label22;
                    }
                    throw new InvalidOperationException("never reached");
                label22:
;
                    goto label30;
                }
                if ((temp112 == 1)) {
                    this.Manager.Comment("reaching state \'S48\'");
                    bool temp86;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(866,out _)\'");
                    this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(866, out temp86);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp86);
                    this.Manager.Comment("reaching state \'S56\'");
                    int temp111 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_SeekRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite1CheckRequirementEnabledChecker16)), new ExpectedReturn(S02_RowRops_SeekRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite1CheckRequirementEnabledChecker23)));
                    if ((temp111 == 0)) {
                        this.Manager.Comment("reaching state \'S67\'");
                        bool temp87;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(867,out _)\'");
                        this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(867, out temp87);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp87);
                        this.Manager.Comment("reaching state \'S83\'");
                        int temp98 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_SeekRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite1CheckRequirementEnabledChecker17)), new ExpectedReturn(S02_RowRops_SeekRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite1CheckRequirementEnabledChecker20)));
                        if ((temp98 == 0)) {
                            this.Manager.Comment("reaching state \'S105\'");
                            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp88;
                            this.Manager.Comment("executing step \'call RopQueryRows(Advance,True)\'");
                            temp88 = this.IMS_OXCTABLAdapterInstance.RopQueryRows(((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), true);
                            this.Manager.Checkpoint("MS-OXCTABL_R837");
                            this.Manager.Comment("reaching state \'S133\'");
                            this.Manager.Comment("checking step \'return RopQueryRows/success\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp88, "return of RopQueryRows, state S133");
                            this.Manager.Comment("reaching state \'S161\'");
                            bool temp89;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(610,out _)\'");
                            this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(610, out temp89);
                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp89);
                            this.Manager.Comment("reaching state \'S189\'");
                            int temp92 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_SeekRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite1CheckRequirementEnabledChecker18)), new ExpectedReturn(S02_RowRops_SeekRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite1CheckRequirementEnabledChecker19)));
                            if ((temp92 == 0)) {
                                this.Manager.Comment("reaching state \'S225\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_SeekRowSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite1RopQueryRowsResponseChecker8))) != -1)) {
                                    this.Manager.Comment("reaching state \'S273\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp90;
                                    this.Manager.Comment("executing step \'call RopSeekRow(BOOKMARK_BEGINNING,True,True,True)\'");
                                    temp90 = this.IMS_OXCTABLAdapterInstance.RopSeekRow(((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(0)), true, true, true);
                                    this.Manager.Checkpoint("MS-OXCTABL_R850");
                                    this.Manager.Comment("reaching state \'S321\'");
                                    this.Manager.Comment("checking step \'return RopSeekRow/success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp90, "return of RopSeekRow, state S321");
                                    this.Manager.Comment("reaching state \'S369\'");
                                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_SeekRowSuccess_TestSuite.RopSeekRowResponseInfo, null, new RopSeekRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite1RopSeekRowResponseChecker8))) != -1)) {
                                        S02_RowRops_SeekRowSuccess_TestSuiteS400();
                                    }
                                    else {
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_SeekRowSuccess_TestSuite.RopSeekRowResponseInfo, null, new RopSeekRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite1RopSeekRowResponseChecker8)));
                                    }
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_SeekRowSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite1RopQueryRowsResponseChecker8)));
                                }
                                goto label23;
                            }
                            if ((temp92 == 1)) {
                                this.Manager.Comment("reaching state \'S226\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_SeekRowSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite1RopQueryRowsResponseChecker9))) != -1)) {
                                    this.Manager.Comment("reaching state \'S274\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp91;
                                    this.Manager.Comment("executing step \'call RopSeekRow(BOOKMARK_BEGINNING,True,True,True)\'");
                                    temp91 = this.IMS_OXCTABLAdapterInstance.RopSeekRow(((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(0)), true, true, true);
                                    this.Manager.Checkpoint("MS-OXCTABL_R850");
                                    this.Manager.Comment("reaching state \'S322\'");
                                    this.Manager.Comment("checking step \'return RopSeekRow/success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp91, "return of RopSeekRow, state S322");
                                    this.Manager.Comment("reaching state \'S370\'");
                                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_SeekRowSuccess_TestSuite.RopSeekRowResponseInfo, null, new RopSeekRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite1RopSeekRowResponseChecker9))) != -1)) {
                                        S02_RowRops_SeekRowSuccess_TestSuiteS399();
                                    }
                                    else {
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_SeekRowSuccess_TestSuite.RopSeekRowResponseInfo, null, new RopSeekRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite1RopSeekRowResponseChecker9)));
                                    }
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_SeekRowSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite1RopQueryRowsResponseChecker9)));
                                }
                                goto label23;
                            }
                            throw new InvalidOperationException("never reached");
                        label23:
;
                            goto label25;
                        }
                        if ((temp98 == 1)) {
                            this.Manager.Comment("reaching state \'S106\'");
                            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp93;
                            this.Manager.Comment("executing step \'call RopQueryRows(Advance,True)\'");
                            temp93 = this.IMS_OXCTABLAdapterInstance.RopQueryRows(((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), true);
                            this.Manager.Checkpoint("MS-OXCTABL_R837");
                            this.Manager.Comment("reaching state \'S134\'");
                            this.Manager.Comment("checking step \'return RopQueryRows/success\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp93, "return of RopQueryRows, state S134");
                            this.Manager.Comment("reaching state \'S162\'");
                            bool temp94;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(610,out _)\'");
                            this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(610, out temp94);
                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp94);
                            this.Manager.Comment("reaching state \'S190\'");
                            int temp97 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_SeekRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite1CheckRequirementEnabledChecker21)), new ExpectedReturn(S02_RowRops_SeekRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite1CheckRequirementEnabledChecker22)));
                            if ((temp97 == 0)) {
                                this.Manager.Comment("reaching state \'S227\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_SeekRowSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite1RopQueryRowsResponseChecker10))) != -1)) {
                                    this.Manager.Comment("reaching state \'S275\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp95;
                                    this.Manager.Comment("executing step \'call RopSeekRow(BOOKMARK_BEGINNING,True,True,True)\'");
                                    temp95 = this.IMS_OXCTABLAdapterInstance.RopSeekRow(((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(0)), true, true, true);
                                    this.Manager.Checkpoint("MS-OXCTABL_R850");
                                    this.Manager.Comment("reaching state \'S323\'");
                                    this.Manager.Comment("checking step \'return RopSeekRow/success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp95, "return of RopSeekRow, state S323");
                                    this.Manager.Comment("reaching state \'S371\'");
                                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_SeekRowSuccess_TestSuite.RopSeekRowResponseInfo, null, new RopSeekRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite1RopSeekRowResponseChecker10))) != -1)) {
                                        S02_RowRops_SeekRowSuccess_TestSuiteS398();
                                    }
                                    else {
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_SeekRowSuccess_TestSuite.RopSeekRowResponseInfo, null, new RopSeekRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite1RopSeekRowResponseChecker10)));
                                    }
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_SeekRowSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite1RopQueryRowsResponseChecker10)));
                                }
                                goto label24;
                            }
                            if ((temp97 == 1)) {
                                this.Manager.Comment("reaching state \'S228\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_SeekRowSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite1RopQueryRowsResponseChecker11))) != -1)) {
                                    this.Manager.Comment("reaching state \'S276\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp96;
                                    this.Manager.Comment("executing step \'call RopSeekRow(BOOKMARK_BEGINNING,True,True,True)\'");
                                    temp96 = this.IMS_OXCTABLAdapterInstance.RopSeekRow(((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(0)), true, true, true);
                                    this.Manager.Checkpoint("MS-OXCTABL_R850");
                                    this.Manager.Comment("reaching state \'S324\'");
                                    this.Manager.Comment("checking step \'return RopSeekRow/success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp96, "return of RopSeekRow, state S324");
                                    this.Manager.Comment("reaching state \'S372\'");
                                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_SeekRowSuccess_TestSuite.RopSeekRowResponseInfo, null, new RopSeekRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite1RopSeekRowResponseChecker11))) != -1)) {
                                        S02_RowRops_SeekRowSuccess_TestSuiteS397();
                                    }
                                    else {
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_SeekRowSuccess_TestSuite.RopSeekRowResponseInfo, null, new RopSeekRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite1RopSeekRowResponseChecker11)));
                                    }
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_SeekRowSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite1RopQueryRowsResponseChecker11)));
                                }
                                goto label24;
                            }
                            throw new InvalidOperationException("never reached");
                        label24:
;
                            goto label25;
                        }
                        throw new InvalidOperationException("never reached");
                    label25:
;
                        goto label29;
                    }
                    if ((temp111 == 1)) {
                        this.Manager.Comment("reaching state \'S68\'");
                        bool temp99;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(867,out _)\'");
                        this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(867, out temp99);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp99);
                        this.Manager.Comment("reaching state \'S84\'");
                        int temp110 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_SeekRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite1CheckRequirementEnabledChecker24)), new ExpectedReturn(S02_RowRops_SeekRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite1CheckRequirementEnabledChecker27)));
                        if ((temp110 == 0)) {
                            this.Manager.Comment("reaching state \'S107\'");
                            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp100;
                            this.Manager.Comment("executing step \'call RopQueryRows(Advance,True)\'");
                            temp100 = this.IMS_OXCTABLAdapterInstance.RopQueryRows(((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), true);
                            this.Manager.Checkpoint("MS-OXCTABL_R837");
                            this.Manager.Comment("reaching state \'S135\'");
                            this.Manager.Comment("checking step \'return RopQueryRows/success\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp100, "return of RopQueryRows, state S135");
                            this.Manager.Comment("reaching state \'S163\'");
                            bool temp101;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(610,out _)\'");
                            this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(610, out temp101);
                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp101);
                            this.Manager.Comment("reaching state \'S191\'");
                            int temp104 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_SeekRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite1CheckRequirementEnabledChecker25)), new ExpectedReturn(S02_RowRops_SeekRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite1CheckRequirementEnabledChecker26)));
                            if ((temp104 == 0)) {
                                this.Manager.Comment("reaching state \'S229\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_SeekRowSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite1RopQueryRowsResponseChecker12))) != -1)) {
                                    this.Manager.Comment("reaching state \'S277\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp102;
                                    this.Manager.Comment("executing step \'call RopSeekRow(BOOKMARK_BEGINNING,True,True,True)\'");
                                    temp102 = this.IMS_OXCTABLAdapterInstance.RopSeekRow(((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(0)), true, true, true);
                                    this.Manager.Checkpoint("MS-OXCTABL_R850");
                                    this.Manager.Comment("reaching state \'S325\'");
                                    this.Manager.Comment("checking step \'return RopSeekRow/success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp102, "return of RopSeekRow, state S325");
                                    this.Manager.Comment("reaching state \'S373\'");
                                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_SeekRowSuccess_TestSuite.RopSeekRowResponseInfo, null, new RopSeekRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite1RopSeekRowResponseChecker12))) != -1)) {
                                        S02_RowRops_SeekRowSuccess_TestSuiteS396();
                                    }
                                    else {
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_SeekRowSuccess_TestSuite.RopSeekRowResponseInfo, null, new RopSeekRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite1RopSeekRowResponseChecker12)));
                                    }
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_SeekRowSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite1RopQueryRowsResponseChecker12)));
                                }
                                goto label26;
                            }
                            if ((temp104 == 1)) {
                                this.Manager.Comment("reaching state \'S230\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_SeekRowSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite1RopQueryRowsResponseChecker13))) != -1)) {
                                    this.Manager.Comment("reaching state \'S278\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp103;
                                    this.Manager.Comment("executing step \'call RopSeekRow(BOOKMARK_BEGINNING,True,True,True)\'");
                                    temp103 = this.IMS_OXCTABLAdapterInstance.RopSeekRow(((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(0)), true, true, true);
                                    this.Manager.Checkpoint("MS-OXCTABL_R850");
                                    this.Manager.Comment("reaching state \'S326\'");
                                    this.Manager.Comment("checking step \'return RopSeekRow/success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp103, "return of RopSeekRow, state S326");
                                    this.Manager.Comment("reaching state \'S374\'");
                                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_SeekRowSuccess_TestSuite.RopSeekRowResponseInfo, null, new RopSeekRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite1RopSeekRowResponseChecker13))) != -1)) {
                                        S02_RowRops_SeekRowSuccess_TestSuiteS395();
                                    }
                                    else {
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_SeekRowSuccess_TestSuite.RopSeekRowResponseInfo, null, new RopSeekRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite1RopSeekRowResponseChecker13)));
                                    }
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_SeekRowSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite1RopQueryRowsResponseChecker13)));
                                }
                                goto label26;
                            }
                            throw new InvalidOperationException("never reached");
                        label26:
;
                            goto label28;
                        }
                        if ((temp110 == 1)) {
                            this.Manager.Comment("reaching state \'S108\'");
                            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp105;
                            this.Manager.Comment("executing step \'call RopQueryRows(Advance,True)\'");
                            temp105 = this.IMS_OXCTABLAdapterInstance.RopQueryRows(((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), true);
                            this.Manager.Checkpoint("MS-OXCTABL_R837");
                            this.Manager.Comment("reaching state \'S136\'");
                            this.Manager.Comment("checking step \'return RopQueryRows/success\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp105, "return of RopQueryRows, state S136");
                            this.Manager.Comment("reaching state \'S164\'");
                            bool temp106;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(610,out _)\'");
                            this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(610, out temp106);
                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp106);
                            this.Manager.Comment("reaching state \'S192\'");
                            int temp109 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_SeekRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite1CheckRequirementEnabledChecker28)), new ExpectedReturn(S02_RowRops_SeekRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite1CheckRequirementEnabledChecker29)));
                            if ((temp109 == 0)) {
                                this.Manager.Comment("reaching state \'S231\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_SeekRowSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite1RopQueryRowsResponseChecker14))) != -1)) {
                                    this.Manager.Comment("reaching state \'S279\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp107;
                                    this.Manager.Comment("executing step \'call RopSeekRow(BOOKMARK_BEGINNING,True,True,True)\'");
                                    temp107 = this.IMS_OXCTABLAdapterInstance.RopSeekRow(((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(0)), true, true, true);
                                    this.Manager.Checkpoint("MS-OXCTABL_R850");
                                    this.Manager.Comment("reaching state \'S327\'");
                                    this.Manager.Comment("checking step \'return RopSeekRow/success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp107, "return of RopSeekRow, state S327");
                                    this.Manager.Comment("reaching state \'S375\'");
                                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_SeekRowSuccess_TestSuite.RopSeekRowResponseInfo, null, new RopSeekRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite1RopSeekRowResponseChecker14))) != -1)) {
                                        S02_RowRops_SeekRowSuccess_TestSuiteS394();
                                    }
                                    else {
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_SeekRowSuccess_TestSuite.RopSeekRowResponseInfo, null, new RopSeekRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite1RopSeekRowResponseChecker14)));
                                    }
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_SeekRowSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite1RopQueryRowsResponseChecker14)));
                                }
                                goto label27;
                            }
                            if ((temp109 == 1)) {
                                this.Manager.Comment("reaching state \'S232\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_SeekRowSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite1RopQueryRowsResponseChecker15))) != -1)) {
                                    this.Manager.Comment("reaching state \'S280\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp108;
                                    this.Manager.Comment("executing step \'call RopSeekRow(BOOKMARK_BEGINNING,True,True,True)\'");
                                    temp108 = this.IMS_OXCTABLAdapterInstance.RopSeekRow(((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(0)), true, true, true);
                                    this.Manager.Checkpoint("MS-OXCTABL_R850");
                                    this.Manager.Comment("reaching state \'S328\'");
                                    this.Manager.Comment("checking step \'return RopSeekRow/success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp108, "return of RopSeekRow, state S328");
                                    this.Manager.Comment("reaching state \'S376\'");
                                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_SeekRowSuccess_TestSuite.RopSeekRowResponseInfo, null, new RopSeekRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite1RopSeekRowResponseChecker15))) != -1)) {
                                        S02_RowRops_SeekRowSuccess_TestSuiteS393();
                                    }
                                    else {
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_SeekRowSuccess_TestSuite.RopSeekRowResponseInfo, null, new RopSeekRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite1RopSeekRowResponseChecker15)));
                                    }
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_SeekRowSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite1RopQueryRowsResponseChecker15)));
                                }
                                goto label27;
                            }
                            throw new InvalidOperationException("never reached");
                        label27:
;
                            goto label28;
                        }
                        throw new InvalidOperationException("never reached");
                    label28:
;
                        goto label29;
                    }
                    throw new InvalidOperationException("never reached");
                label29:
;
                    goto label30;
                }
                throw new InvalidOperationException("never reached");
            label30:
;
                goto label31;
            }
            if ((temp113 == 1)) {
                this.Manager.Comment("reaching state \'S13\'");
                goto label31;
            }
            throw new InvalidOperationException("never reached");
        label31:
;
            this.Manager.EndTest();
        }
        
        private void MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite1CheckMAPIHTTPTransportSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S3");
        }
        
        private void MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite1CheckRequirementEnabledChecker(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S41");
        }
        
        private void MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite1CheckRequirementEnabledChecker1(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S55");
        }
        
        private void MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite1CheckRequirementEnabledChecker2(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S81");
        }
        
        private void MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite1CheckRequirementEnabledChecker3(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S185");
        }
        
        private void MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite1RopQueryRowsResponseChecker(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SETCOLUMNS,True,True" +
                    ",True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S217");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S217");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S217");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S217");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S217");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S217");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S217");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S217");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S217");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S217");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R472, MS-OXCTABL_R427, MS-OXCTABL_R42" +
                        "6, MS-OXCTABL_R116");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R472");
            this.Manager.Checkpoint("MS-OXCTABL_R427");
            this.Manager.Checkpoint("MS-OXCTABL_R426");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
        }
        
        private void MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite1RopSeekRowResponseChecker(bool wantRowMovedCountout, bool enoughRow, bool hasSoughtLess, bool isActualRowsCount) {
            this.Manager.Comment("checking step \'event RopSeekRowResponse(True,True,False,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, wantRowMovedCountout, "wantRowMovedCountout of RopSeekRowResponse, state S361");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enoughRow, "enoughRow of RopSeekRowResponse, state S361");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, hasSoughtLess, "hasSoughtLess of RopSeekRowResponse, state S361");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isActualRowsCount, "isActualRowsCount of RopSeekRowResponse, state S361");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R155, MS-OXCTABL_R496, MS-OXCTABL_R141");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R155");
            this.Manager.Checkpoint("MS-OXCTABL_R496");
            this.Manager.Checkpoint("MS-OXCTABL_R141");
        }
        
        private void MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite1CheckRequirementEnabledChecker4(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S185");
        }
        
        private void MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite1RopQueryRowsResponseChecker1(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SETCOLUMNS,True,True" +
                    ",True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S218");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S218");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S218");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S218");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S218");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S218");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S218");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S218");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S218");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S218");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R472, MS-OXCTABL_R427, MS-OXCTABL_R42" +
                        "6, MS-OXCTABL_R116, MS-OXCTABL_R610");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R472");
            this.Manager.Checkpoint("MS-OXCTABL_R427");
            this.Manager.Checkpoint("MS-OXCTABL_R426");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R610");
        }
        
        private void MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite1RopSeekRowResponseChecker1(bool wantRowMovedCountout, bool enoughRow, bool hasSoughtLess, bool isActualRowsCount) {
            this.Manager.Comment("checking step \'event RopSeekRowResponse(True,True,False,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, wantRowMovedCountout, "wantRowMovedCountout of RopSeekRowResponse, state S362");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enoughRow, "enoughRow of RopSeekRowResponse, state S362");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, hasSoughtLess, "hasSoughtLess of RopSeekRowResponse, state S362");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isActualRowsCount, "isActualRowsCount of RopSeekRowResponse, state S362");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R155, MS-OXCTABL_R496, MS-OXCTABL_R141");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R155");
            this.Manager.Checkpoint("MS-OXCTABL_R496");
            this.Manager.Checkpoint("MS-OXCTABL_R141");
        }
        
        private void MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite1CheckRequirementEnabledChecker5(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S81");
        }
        
        private void MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite1CheckRequirementEnabledChecker6(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S186");
        }
        
        private void MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite1RopQueryRowsResponseChecker2(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SETCOLUMNS,True,True" +
                    ",True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S219");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S219");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S219");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S219");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S219");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S219");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S219");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S219");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S219");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S219");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R472, MS-OXCTABL_R427, MS-OXCTABL_R42" +
                        "6, MS-OXCTABL_R116, MS-OXCTABL_R610");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R472");
            this.Manager.Checkpoint("MS-OXCTABL_R427");
            this.Manager.Checkpoint("MS-OXCTABL_R426");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R610");
        }
        
        private void MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite1RopSeekRowResponseChecker2(bool wantRowMovedCountout, bool enoughRow, bool hasSoughtLess, bool isActualRowsCount) {
            this.Manager.Comment("checking step \'event RopSeekRowResponse(True,True,False,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, wantRowMovedCountout, "wantRowMovedCountout of RopSeekRowResponse, state S363");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enoughRow, "enoughRow of RopSeekRowResponse, state S363");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, hasSoughtLess, "hasSoughtLess of RopSeekRowResponse, state S363");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isActualRowsCount, "isActualRowsCount of RopSeekRowResponse, state S363");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R155, MS-OXCTABL_R496, MS-OXCTABL_R141");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R155");
            this.Manager.Checkpoint("MS-OXCTABL_R496");
            this.Manager.Checkpoint("MS-OXCTABL_R141");
        }
        
        private void MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite1CheckRequirementEnabledChecker7(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S186");
        }
        
        private void MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite1RopQueryRowsResponseChecker3(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SETCOLUMNS,True,True" +
                    ",True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S220");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S220");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S220");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S220");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S220");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S220");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S220");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S220");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S220");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S220");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R472, MS-OXCTABL_R427, MS-OXCTABL_R42" +
                        "6, MS-OXCTABL_R116");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R472");
            this.Manager.Checkpoint("MS-OXCTABL_R427");
            this.Manager.Checkpoint("MS-OXCTABL_R426");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
        }
        
        private void MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite1RopSeekRowResponseChecker3(bool wantRowMovedCountout, bool enoughRow, bool hasSoughtLess, bool isActualRowsCount) {
            this.Manager.Comment("checking step \'event RopSeekRowResponse(True,True,False,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, wantRowMovedCountout, "wantRowMovedCountout of RopSeekRowResponse, state S364");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enoughRow, "enoughRow of RopSeekRowResponse, state S364");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, hasSoughtLess, "hasSoughtLess of RopSeekRowResponse, state S364");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isActualRowsCount, "isActualRowsCount of RopSeekRowResponse, state S364");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R155, MS-OXCTABL_R496, MS-OXCTABL_R141");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R155");
            this.Manager.Checkpoint("MS-OXCTABL_R496");
            this.Manager.Checkpoint("MS-OXCTABL_R141");
        }
        
        private void MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite1CheckRequirementEnabledChecker8(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S55");
        }
        
        private void MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite1CheckRequirementEnabledChecker9(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S82");
        }
        
        private void MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite1CheckRequirementEnabledChecker10(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S187");
        }
        
        private void MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite1RopQueryRowsResponseChecker4(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SETCOLUMNS,True,True" +
                    ",True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S221");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S221");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S221");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S221");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S221");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S221");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S221");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S221");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S221");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S221");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R472, MS-OXCTABL_R427, MS-OXCTABL_R42" +
                        "6, MS-OXCTABL_R116, MS-OXCTABL_R610");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R472");
            this.Manager.Checkpoint("MS-OXCTABL_R427");
            this.Manager.Checkpoint("MS-OXCTABL_R426");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R610");
        }
        
        private void MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite1RopSeekRowResponseChecker4(bool wantRowMovedCountout, bool enoughRow, bool hasSoughtLess, bool isActualRowsCount) {
            this.Manager.Comment("checking step \'event RopSeekRowResponse(True,True,False,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, wantRowMovedCountout, "wantRowMovedCountout of RopSeekRowResponse, state S365");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enoughRow, "enoughRow of RopSeekRowResponse, state S365");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, hasSoughtLess, "hasSoughtLess of RopSeekRowResponse, state S365");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isActualRowsCount, "isActualRowsCount of RopSeekRowResponse, state S365");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R155, MS-OXCTABL_R496, MS-OXCTABL_R141");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R155");
            this.Manager.Checkpoint("MS-OXCTABL_R496");
            this.Manager.Checkpoint("MS-OXCTABL_R141");
        }
        
        private void MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite1CheckRequirementEnabledChecker11(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S187");
        }
        
        private void MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite1RopQueryRowsResponseChecker5(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SETCOLUMNS,True,True" +
                    ",True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S222");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S222");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S222");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S222");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S222");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S222");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S222");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S222");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S222");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S222");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R472, MS-OXCTABL_R427, MS-OXCTABL_R42" +
                        "6, MS-OXCTABL_R116");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R472");
            this.Manager.Checkpoint("MS-OXCTABL_R427");
            this.Manager.Checkpoint("MS-OXCTABL_R426");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
        }
        
        private void MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite1RopSeekRowResponseChecker5(bool wantRowMovedCountout, bool enoughRow, bool hasSoughtLess, bool isActualRowsCount) {
            this.Manager.Comment("checking step \'event RopSeekRowResponse(True,True,False,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, wantRowMovedCountout, "wantRowMovedCountout of RopSeekRowResponse, state S366");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enoughRow, "enoughRow of RopSeekRowResponse, state S366");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, hasSoughtLess, "hasSoughtLess of RopSeekRowResponse, state S366");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isActualRowsCount, "isActualRowsCount of RopSeekRowResponse, state S366");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R155, MS-OXCTABL_R496, MS-OXCTABL_R141");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R155");
            this.Manager.Checkpoint("MS-OXCTABL_R496");
            this.Manager.Checkpoint("MS-OXCTABL_R141");
        }
        
        private void MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite1CheckRequirementEnabledChecker12(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S82");
        }
        
        private void MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite1CheckRequirementEnabledChecker13(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S188");
        }
        
        private void MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite1RopQueryRowsResponseChecker6(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SETCOLUMNS,True,True" +
                    ",True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S223");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S223");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S223");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S223");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S223");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S223");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S223");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S223");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S223");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S223");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R472, MS-OXCTABL_R427, MS-OXCTABL_R42" +
                        "6, MS-OXCTABL_R116");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R472");
            this.Manager.Checkpoint("MS-OXCTABL_R427");
            this.Manager.Checkpoint("MS-OXCTABL_R426");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
        }
        
        private void MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite1RopSeekRowResponseChecker6(bool wantRowMovedCountout, bool enoughRow, bool hasSoughtLess, bool isActualRowsCount) {
            this.Manager.Comment("checking step \'event RopSeekRowResponse(True,True,False,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, wantRowMovedCountout, "wantRowMovedCountout of RopSeekRowResponse, state S367");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enoughRow, "enoughRow of RopSeekRowResponse, state S367");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, hasSoughtLess, "hasSoughtLess of RopSeekRowResponse, state S367");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isActualRowsCount, "isActualRowsCount of RopSeekRowResponse, state S367");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R155, MS-OXCTABL_R496, MS-OXCTABL_R141");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R155");
            this.Manager.Checkpoint("MS-OXCTABL_R496");
            this.Manager.Checkpoint("MS-OXCTABL_R141");
        }
        
        private void MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite1CheckRequirementEnabledChecker14(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S188");
        }
        
        private void MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite1RopQueryRowsResponseChecker7(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SETCOLUMNS,True,True" +
                    ",True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S224");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S224");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S224");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S224");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S224");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S224");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S224");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S224");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S224");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S224");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R472, MS-OXCTABL_R427, MS-OXCTABL_R42" +
                        "6, MS-OXCTABL_R116, MS-OXCTABL_R610");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R472");
            this.Manager.Checkpoint("MS-OXCTABL_R427");
            this.Manager.Checkpoint("MS-OXCTABL_R426");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R610");
        }
        
        private void MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite1RopSeekRowResponseChecker7(bool wantRowMovedCountout, bool enoughRow, bool hasSoughtLess, bool isActualRowsCount) {
            this.Manager.Comment("checking step \'event RopSeekRowResponse(True,True,False,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, wantRowMovedCountout, "wantRowMovedCountout of RopSeekRowResponse, state S368");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enoughRow, "enoughRow of RopSeekRowResponse, state S368");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, hasSoughtLess, "hasSoughtLess of RopSeekRowResponse, state S368");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isActualRowsCount, "isActualRowsCount of RopSeekRowResponse, state S368");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R155, MS-OXCTABL_R496, MS-OXCTABL_R141");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R155");
            this.Manager.Checkpoint("MS-OXCTABL_R496");
            this.Manager.Checkpoint("MS-OXCTABL_R141");
        }
        
        private void MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite1CheckRequirementEnabledChecker15(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S41");
        }
        
        private void MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite1CheckRequirementEnabledChecker16(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S56");
        }
        
        private void MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite1CheckRequirementEnabledChecker17(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S83");
        }
        
        private void MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite1CheckRequirementEnabledChecker18(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S189");
        }
        
        private void MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite1RopQueryRowsResponseChecker8(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SETCOLUMNS,True,True" +
                    ",True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S225");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S225");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S225");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S225");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S225");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S225");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S225");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S225");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S225");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S225");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R472, MS-OXCTABL_R427, MS-OXCTABL_R42" +
                        "6, MS-OXCTABL_R116");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R472");
            this.Manager.Checkpoint("MS-OXCTABL_R427");
            this.Manager.Checkpoint("MS-OXCTABL_R426");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
        }
        
        private void MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite1RopSeekRowResponseChecker8(bool wantRowMovedCountout, bool enoughRow, bool hasSoughtLess, bool isActualRowsCount) {
            this.Manager.Comment("checking step \'event RopSeekRowResponse(True,True,False,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, wantRowMovedCountout, "wantRowMovedCountout of RopSeekRowResponse, state S369");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enoughRow, "enoughRow of RopSeekRowResponse, state S369");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, hasSoughtLess, "hasSoughtLess of RopSeekRowResponse, state S369");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isActualRowsCount, "isActualRowsCount of RopSeekRowResponse, state S369");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R155, MS-OXCTABL_R496, MS-OXCTABL_R141");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R155");
            this.Manager.Checkpoint("MS-OXCTABL_R496");
            this.Manager.Checkpoint("MS-OXCTABL_R141");
        }
        
        private void MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite1CheckRequirementEnabledChecker19(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S189");
        }
        
        private void MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite1RopQueryRowsResponseChecker9(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SETCOLUMNS,True,True" +
                    ",True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S226");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S226");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S226");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S226");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S226");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S226");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S226");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S226");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S226");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S226");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R472, MS-OXCTABL_R427, MS-OXCTABL_R42" +
                        "6, MS-OXCTABL_R116, MS-OXCTABL_R610");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R472");
            this.Manager.Checkpoint("MS-OXCTABL_R427");
            this.Manager.Checkpoint("MS-OXCTABL_R426");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R610");
        }
        
        private void MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite1RopSeekRowResponseChecker9(bool wantRowMovedCountout, bool enoughRow, bool hasSoughtLess, bool isActualRowsCount) {
            this.Manager.Comment("checking step \'event RopSeekRowResponse(True,True,False,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, wantRowMovedCountout, "wantRowMovedCountout of RopSeekRowResponse, state S370");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enoughRow, "enoughRow of RopSeekRowResponse, state S370");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, hasSoughtLess, "hasSoughtLess of RopSeekRowResponse, state S370");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isActualRowsCount, "isActualRowsCount of RopSeekRowResponse, state S370");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R155, MS-OXCTABL_R496, MS-OXCTABL_R141");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R155");
            this.Manager.Checkpoint("MS-OXCTABL_R496");
            this.Manager.Checkpoint("MS-OXCTABL_R141");
        }
        
        private void MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite1CheckRequirementEnabledChecker20(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S83");
        }
        
        private void MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite1CheckRequirementEnabledChecker21(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S190");
        }
        
        private void MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite1RopQueryRowsResponseChecker10(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SETCOLUMNS,True,True" +
                    ",True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S227");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S227");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S227");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S227");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S227");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S227");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S227");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S227");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S227");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S227");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R472, MS-OXCTABL_R427, MS-OXCTABL_R42" +
                        "6, MS-OXCTABL_R116, MS-OXCTABL_R610");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R472");
            this.Manager.Checkpoint("MS-OXCTABL_R427");
            this.Manager.Checkpoint("MS-OXCTABL_R426");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R610");
        }
        
        private void MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite1RopSeekRowResponseChecker10(bool wantRowMovedCountout, bool enoughRow, bool hasSoughtLess, bool isActualRowsCount) {
            this.Manager.Comment("checking step \'event RopSeekRowResponse(True,True,False,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, wantRowMovedCountout, "wantRowMovedCountout of RopSeekRowResponse, state S371");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enoughRow, "enoughRow of RopSeekRowResponse, state S371");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, hasSoughtLess, "hasSoughtLess of RopSeekRowResponse, state S371");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isActualRowsCount, "isActualRowsCount of RopSeekRowResponse, state S371");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R155, MS-OXCTABL_R496, MS-OXCTABL_R141");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R155");
            this.Manager.Checkpoint("MS-OXCTABL_R496");
            this.Manager.Checkpoint("MS-OXCTABL_R141");
        }
        
        private void MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite1CheckRequirementEnabledChecker22(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S190");
        }
        
        private void MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite1RopQueryRowsResponseChecker11(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SETCOLUMNS,True,True" +
                    ",True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S228");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S228");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S228");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S228");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S228");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S228");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S228");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S228");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S228");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S228");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R472, MS-OXCTABL_R427, MS-OXCTABL_R42" +
                        "6, MS-OXCTABL_R116");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R472");
            this.Manager.Checkpoint("MS-OXCTABL_R427");
            this.Manager.Checkpoint("MS-OXCTABL_R426");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
        }
        
        private void MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite1RopSeekRowResponseChecker11(bool wantRowMovedCountout, bool enoughRow, bool hasSoughtLess, bool isActualRowsCount) {
            this.Manager.Comment("checking step \'event RopSeekRowResponse(True,True,False,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, wantRowMovedCountout, "wantRowMovedCountout of RopSeekRowResponse, state S372");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enoughRow, "enoughRow of RopSeekRowResponse, state S372");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, hasSoughtLess, "hasSoughtLess of RopSeekRowResponse, state S372");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isActualRowsCount, "isActualRowsCount of RopSeekRowResponse, state S372");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R155, MS-OXCTABL_R496, MS-OXCTABL_R141");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R155");
            this.Manager.Checkpoint("MS-OXCTABL_R496");
            this.Manager.Checkpoint("MS-OXCTABL_R141");
        }
        
        private void MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite1CheckRequirementEnabledChecker23(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S56");
        }
        
        private void MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite1CheckRequirementEnabledChecker24(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S84");
        }
        
        private void MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite1CheckRequirementEnabledChecker25(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S191");
        }
        
        private void MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite1RopQueryRowsResponseChecker12(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SETCOLUMNS,True,True" +
                    ",True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S229");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S229");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S229");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S229");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S229");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S229");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S229");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S229");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S229");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S229");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R472, MS-OXCTABL_R427, MS-OXCTABL_R42" +
                        "6, MS-OXCTABL_R116");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R472");
            this.Manager.Checkpoint("MS-OXCTABL_R427");
            this.Manager.Checkpoint("MS-OXCTABL_R426");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
        }
        
        private void MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite1RopSeekRowResponseChecker12(bool wantRowMovedCountout, bool enoughRow, bool hasSoughtLess, bool isActualRowsCount) {
            this.Manager.Comment("checking step \'event RopSeekRowResponse(True,True,False,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, wantRowMovedCountout, "wantRowMovedCountout of RopSeekRowResponse, state S373");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enoughRow, "enoughRow of RopSeekRowResponse, state S373");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, hasSoughtLess, "hasSoughtLess of RopSeekRowResponse, state S373");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isActualRowsCount, "isActualRowsCount of RopSeekRowResponse, state S373");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R155, MS-OXCTABL_R496, MS-OXCTABL_R141");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R155");
            this.Manager.Checkpoint("MS-OXCTABL_R496");
            this.Manager.Checkpoint("MS-OXCTABL_R141");
        }
        
        private void MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite1CheckRequirementEnabledChecker26(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S191");
        }
        
        private void MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite1RopQueryRowsResponseChecker13(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SETCOLUMNS,True,True" +
                    ",True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S230");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S230");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S230");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S230");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S230");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S230");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S230");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S230");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S230");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S230");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R472, MS-OXCTABL_R427, MS-OXCTABL_R42" +
                        "6, MS-OXCTABL_R116, MS-OXCTABL_R610");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R472");
            this.Manager.Checkpoint("MS-OXCTABL_R427");
            this.Manager.Checkpoint("MS-OXCTABL_R426");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R610");
        }
        
        private void MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite1RopSeekRowResponseChecker13(bool wantRowMovedCountout, bool enoughRow, bool hasSoughtLess, bool isActualRowsCount) {
            this.Manager.Comment("checking step \'event RopSeekRowResponse(True,True,False,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, wantRowMovedCountout, "wantRowMovedCountout of RopSeekRowResponse, state S374");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enoughRow, "enoughRow of RopSeekRowResponse, state S374");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, hasSoughtLess, "hasSoughtLess of RopSeekRowResponse, state S374");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isActualRowsCount, "isActualRowsCount of RopSeekRowResponse, state S374");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R155, MS-OXCTABL_R496, MS-OXCTABL_R141");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R155");
            this.Manager.Checkpoint("MS-OXCTABL_R496");
            this.Manager.Checkpoint("MS-OXCTABL_R141");
        }
        
        private void MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite1CheckRequirementEnabledChecker27(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S84");
        }
        
        private void MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite1CheckRequirementEnabledChecker28(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S192");
        }
        
        private void MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite1RopQueryRowsResponseChecker14(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SETCOLUMNS,True,True" +
                    ",True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S231");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S231");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S231");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S231");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S231");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S231");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S231");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S231");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S231");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S231");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R472, MS-OXCTABL_R427, MS-OXCTABL_R42" +
                        "6, MS-OXCTABL_R116");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R472");
            this.Manager.Checkpoint("MS-OXCTABL_R427");
            this.Manager.Checkpoint("MS-OXCTABL_R426");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
        }
        
        private void MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite1RopSeekRowResponseChecker14(bool wantRowMovedCountout, bool enoughRow, bool hasSoughtLess, bool isActualRowsCount) {
            this.Manager.Comment("checking step \'event RopSeekRowResponse(True,True,False,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, wantRowMovedCountout, "wantRowMovedCountout of RopSeekRowResponse, state S375");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enoughRow, "enoughRow of RopSeekRowResponse, state S375");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, hasSoughtLess, "hasSoughtLess of RopSeekRowResponse, state S375");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isActualRowsCount, "isActualRowsCount of RopSeekRowResponse, state S375");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R155, MS-OXCTABL_R496, MS-OXCTABL_R141");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R155");
            this.Manager.Checkpoint("MS-OXCTABL_R496");
            this.Manager.Checkpoint("MS-OXCTABL_R141");
        }
        
        private void MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite1CheckRequirementEnabledChecker29(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S192");
        }
        
        private void MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite1RopQueryRowsResponseChecker15(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SETCOLUMNS,True,True" +
                    ",True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S232");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S232");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S232");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S232");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S232");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S232");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S232");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S232");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S232");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S232");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R472, MS-OXCTABL_R427, MS-OXCTABL_R42" +
                        "6, MS-OXCTABL_R116, MS-OXCTABL_R610");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R472");
            this.Manager.Checkpoint("MS-OXCTABL_R427");
            this.Manager.Checkpoint("MS-OXCTABL_R426");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R610");
        }
        
        private void MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite1RopSeekRowResponseChecker15(bool wantRowMovedCountout, bool enoughRow, bool hasSoughtLess, bool isActualRowsCount) {
            this.Manager.Comment("checking step \'event RopSeekRowResponse(True,True,False,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, wantRowMovedCountout, "wantRowMovedCountout of RopSeekRowResponse, state S376");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enoughRow, "enoughRow of RopSeekRowResponse, state S376");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, hasSoughtLess, "hasSoughtLess of RopSeekRowResponse, state S376");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isActualRowsCount, "isActualRowsCount of RopSeekRowResponse, state S376");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R155, MS-OXCTABL_R496, MS-OXCTABL_R141");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R155");
            this.Manager.Checkpoint("MS-OXCTABL_R496");
            this.Manager.Checkpoint("MS-OXCTABL_R141");
        }
        
        private void MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite1CheckMAPIHTTPTransportSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S3");
        }
        #endregion
        
        #region Test Starting in S4
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite2() {
            this.Manager.BeginTest("MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite2");
            this.Manager.Comment("reaching state \'S4\'");
            bool temp114;
            this.Manager.Comment("executing step \'call CheckMAPIHTTPTransportSupported(out _)\'");
            this.IMS_OXCTABLAdapterInstance.CheckMAPIHTTPTransportSupported(out temp114);
            this.Manager.AddReturn(CheckMAPIHTTPTransportSupportedInfo, null, temp114);
            this.Manager.Comment("reaching state \'S5\'");
            int temp170 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_SeekRowSuccess_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite2CheckMAPIHTTPTransportSupportedChecker)), new ExpectedReturn(S02_RowRops_SeekRowSuccess_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite2CheckMAPIHTTPTransportSupportedChecker1)));
            if ((temp170 == 0)) {
                this.Manager.Comment("reaching state \'S14\'");
                this.Manager.Comment("executing step \'call InitializeTable(CONTENT_TABLE)\'");
                this.IMS_OXCTABLAdapterInstance.InitializeTable(((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableType)(0)));
                this.Manager.Comment("reaching state \'S22\'");
                this.Manager.Comment("checking step \'return InitializeTable\'");
                this.Manager.Comment("reaching state \'S27\'");
                Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp115;
                this.Manager.Comment("executing step \'call RopSetColumns(1,False,False,False)\'");
                temp115 = this.IMS_OXCTABLAdapterInstance.RopSetColumns(1u, false, false, false);
                this.Manager.Checkpoint("MS-OXCTABL_R831");
                this.Manager.Checkpoint("MS-OXCTABL_R45");
                this.Manager.Comment("reaching state \'S32\'");
                this.Manager.Comment("checking step \'return RopSetColumns/success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp115, "return of RopSetColumns, state S32");
                this.Manager.Comment("reaching state \'S37\'");
                bool temp116;
                this.Manager.Comment("executing step \'call CheckRequirementEnabled(768,out _)\'");
                this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(768, out temp116);
                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp116);
                this.Manager.Comment("reaching state \'S42\'");
                int temp169 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_SeekRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite2CheckRequirementEnabledChecker)), new ExpectedReturn(S02_RowRops_SeekRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite2CheckRequirementEnabledChecker15)));
                if ((temp169 == 0)) {
                    this.Manager.Comment("reaching state \'S49\'");
                    bool temp117;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(866,out _)\'");
                    this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(866, out temp117);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp117);
                    this.Manager.Comment("reaching state \'S57\'");
                    int temp142 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_SeekRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite2CheckRequirementEnabledChecker1)), new ExpectedReturn(S02_RowRops_SeekRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite2CheckRequirementEnabledChecker8)));
                    if ((temp142 == 0)) {
                        this.Manager.Comment("reaching state \'S69\'");
                        bool temp118;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(867,out _)\'");
                        this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(867, out temp118);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp118);
                        this.Manager.Comment("reaching state \'S85\'");
                        int temp129 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_SeekRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite2CheckRequirementEnabledChecker2)), new ExpectedReturn(S02_RowRops_SeekRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite2CheckRequirementEnabledChecker5)));
                        if ((temp129 == 0)) {
                            this.Manager.Comment("reaching state \'S109\'");
                            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp119;
                            this.Manager.Comment("executing step \'call RopQueryRows(Advance,True)\'");
                            temp119 = this.IMS_OXCTABLAdapterInstance.RopQueryRows(((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), true);
                            this.Manager.Checkpoint("MS-OXCTABL_R837");
                            this.Manager.Comment("reaching state \'S137\'");
                            this.Manager.Comment("checking step \'return RopQueryRows/success\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp119, "return of RopQueryRows, state S137");
                            this.Manager.Comment("reaching state \'S165\'");
                            bool temp120;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(610,out _)\'");
                            this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(610, out temp120);
                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp120);
                            this.Manager.Comment("reaching state \'S193\'");
                            int temp123 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_SeekRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite2CheckRequirementEnabledChecker3)), new ExpectedReturn(S02_RowRops_SeekRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite2CheckRequirementEnabledChecker4)));
                            if ((temp123 == 0)) {
                                this.Manager.Comment("reaching state \'S233\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_SeekRowSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite2RopQueryRowsResponseChecker))) != -1)) {
                                    this.Manager.Comment("reaching state \'S281\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp121;
                                    this.Manager.Comment("executing step \'call RopSeekRow(BOOKMARK_BEGINNING,True,True,False)\'");
                                    temp121 = this.IMS_OXCTABLAdapterInstance.RopSeekRow(((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(0)), true, true, false);
                                    this.Manager.Checkpoint("MS-OXCTABL_R850");
                                    this.Manager.Comment("reaching state \'S329\'");
                                    this.Manager.Comment("checking step \'return RopSeekRow/success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp121, "return of RopSeekRow, state S329");
                                    this.Manager.Comment("reaching state \'S377\'");
                                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_SeekRowSuccess_TestSuite.RopSeekRowResponseInfo, null, new RopSeekRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite2RopSeekRowResponseChecker))) != -1)) {
                                        S02_RowRops_SeekRowSuccess_TestSuiteS408();
                                    }
                                    else {
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_SeekRowSuccess_TestSuite.RopSeekRowResponseInfo, null, new RopSeekRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite2RopSeekRowResponseChecker)));
                                    }
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_SeekRowSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite2RopQueryRowsResponseChecker)));
                                }
                                goto label32;
                            }
                            if ((temp123 == 1)) {
                                this.Manager.Comment("reaching state \'S234\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_SeekRowSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite2RopQueryRowsResponseChecker1))) != -1)) {
                                    this.Manager.Comment("reaching state \'S282\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp122;
                                    this.Manager.Comment("executing step \'call RopSeekRow(BOOKMARK_BEGINNING,True,True,False)\'");
                                    temp122 = this.IMS_OXCTABLAdapterInstance.RopSeekRow(((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(0)), true, true, false);
                                    this.Manager.Checkpoint("MS-OXCTABL_R850");
                                    this.Manager.Comment("reaching state \'S330\'");
                                    this.Manager.Comment("checking step \'return RopSeekRow/success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp122, "return of RopSeekRow, state S330");
                                    this.Manager.Comment("reaching state \'S378\'");
                                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_SeekRowSuccess_TestSuite.RopSeekRowResponseInfo, null, new RopSeekRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite2RopSeekRowResponseChecker1))) != -1)) {
                                        S02_RowRops_SeekRowSuccess_TestSuiteS407();
                                    }
                                    else {
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_SeekRowSuccess_TestSuite.RopSeekRowResponseInfo, null, new RopSeekRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite2RopSeekRowResponseChecker1)));
                                    }
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_SeekRowSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite2RopQueryRowsResponseChecker1)));
                                }
                                goto label32;
                            }
                            throw new InvalidOperationException("never reached");
                        label32:
;
                            goto label34;
                        }
                        if ((temp129 == 1)) {
                            this.Manager.Comment("reaching state \'S110\'");
                            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp124;
                            this.Manager.Comment("executing step \'call RopQueryRows(Advance,True)\'");
                            temp124 = this.IMS_OXCTABLAdapterInstance.RopQueryRows(((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), true);
                            this.Manager.Checkpoint("MS-OXCTABL_R837");
                            this.Manager.Comment("reaching state \'S138\'");
                            this.Manager.Comment("checking step \'return RopQueryRows/success\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp124, "return of RopQueryRows, state S138");
                            this.Manager.Comment("reaching state \'S166\'");
                            bool temp125;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(610,out _)\'");
                            this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(610, out temp125);
                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp125);
                            this.Manager.Comment("reaching state \'S194\'");
                            int temp128 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_SeekRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite2CheckRequirementEnabledChecker6)), new ExpectedReturn(S02_RowRops_SeekRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite2CheckRequirementEnabledChecker7)));
                            if ((temp128 == 0)) {
                                this.Manager.Comment("reaching state \'S235\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_SeekRowSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite2RopQueryRowsResponseChecker2))) != -1)) {
                                    this.Manager.Comment("reaching state \'S283\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp126;
                                    this.Manager.Comment("executing step \'call RopSeekRow(BOOKMARK_BEGINNING,True,True,False)\'");
                                    temp126 = this.IMS_OXCTABLAdapterInstance.RopSeekRow(((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(0)), true, true, false);
                                    this.Manager.Checkpoint("MS-OXCTABL_R850");
                                    this.Manager.Comment("reaching state \'S331\'");
                                    this.Manager.Comment("checking step \'return RopSeekRow/success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp126, "return of RopSeekRow, state S331");
                                    this.Manager.Comment("reaching state \'S379\'");
                                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_SeekRowSuccess_TestSuite.RopSeekRowResponseInfo, null, new RopSeekRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite2RopSeekRowResponseChecker2))) != -1)) {
                                        S02_RowRops_SeekRowSuccess_TestSuiteS406();
                                    }
                                    else {
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_SeekRowSuccess_TestSuite.RopSeekRowResponseInfo, null, new RopSeekRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite2RopSeekRowResponseChecker2)));
                                    }
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_SeekRowSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite2RopQueryRowsResponseChecker2)));
                                }
                                goto label33;
                            }
                            if ((temp128 == 1)) {
                                this.Manager.Comment("reaching state \'S236\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_SeekRowSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite2RopQueryRowsResponseChecker3))) != -1)) {
                                    this.Manager.Comment("reaching state \'S284\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp127;
                                    this.Manager.Comment("executing step \'call RopSeekRow(BOOKMARK_BEGINNING,True,True,False)\'");
                                    temp127 = this.IMS_OXCTABLAdapterInstance.RopSeekRow(((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(0)), true, true, false);
                                    this.Manager.Checkpoint("MS-OXCTABL_R850");
                                    this.Manager.Comment("reaching state \'S332\'");
                                    this.Manager.Comment("checking step \'return RopSeekRow/success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp127, "return of RopSeekRow, state S332");
                                    this.Manager.Comment("reaching state \'S380\'");
                                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_SeekRowSuccess_TestSuite.RopSeekRowResponseInfo, null, new RopSeekRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite2RopSeekRowResponseChecker3))) != -1)) {
                                        S02_RowRops_SeekRowSuccess_TestSuiteS405();
                                    }
                                    else {
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_SeekRowSuccess_TestSuite.RopSeekRowResponseInfo, null, new RopSeekRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite2RopSeekRowResponseChecker3)));
                                    }
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_SeekRowSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite2RopQueryRowsResponseChecker3)));
                                }
                                goto label33;
                            }
                            throw new InvalidOperationException("never reached");
                        label33:
;
                            goto label34;
                        }
                        throw new InvalidOperationException("never reached");
                    label34:
;
                        goto label38;
                    }
                    if ((temp142 == 1)) {
                        this.Manager.Comment("reaching state \'S70\'");
                        bool temp130;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(867,out _)\'");
                        this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(867, out temp130);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp130);
                        this.Manager.Comment("reaching state \'S86\'");
                        int temp141 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_SeekRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite2CheckRequirementEnabledChecker9)), new ExpectedReturn(S02_RowRops_SeekRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite2CheckRequirementEnabledChecker12)));
                        if ((temp141 == 0)) {
                            this.Manager.Comment("reaching state \'S111\'");
                            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp131;
                            this.Manager.Comment("executing step \'call RopQueryRows(Advance,True)\'");
                            temp131 = this.IMS_OXCTABLAdapterInstance.RopQueryRows(((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), true);
                            this.Manager.Checkpoint("MS-OXCTABL_R837");
                            this.Manager.Comment("reaching state \'S139\'");
                            this.Manager.Comment("checking step \'return RopQueryRows/success\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp131, "return of RopQueryRows, state S139");
                            this.Manager.Comment("reaching state \'S167\'");
                            bool temp132;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(610,out _)\'");
                            this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(610, out temp132);
                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp132);
                            this.Manager.Comment("reaching state \'S195\'");
                            int temp135 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_SeekRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite2CheckRequirementEnabledChecker10)), new ExpectedReturn(S02_RowRops_SeekRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite2CheckRequirementEnabledChecker11)));
                            if ((temp135 == 0)) {
                                this.Manager.Comment("reaching state \'S237\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_SeekRowSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite2RopQueryRowsResponseChecker4))) != -1)) {
                                    this.Manager.Comment("reaching state \'S285\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp133;
                                    this.Manager.Comment("executing step \'call RopSeekRow(BOOKMARK_BEGINNING,True,True,False)\'");
                                    temp133 = this.IMS_OXCTABLAdapterInstance.RopSeekRow(((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(0)), true, true, false);
                                    this.Manager.Checkpoint("MS-OXCTABL_R850");
                                    this.Manager.Comment("reaching state \'S333\'");
                                    this.Manager.Comment("checking step \'return RopSeekRow/success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp133, "return of RopSeekRow, state S333");
                                    this.Manager.Comment("reaching state \'S381\'");
                                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_SeekRowSuccess_TestSuite.RopSeekRowResponseInfo, null, new RopSeekRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite2RopSeekRowResponseChecker4))) != -1)) {
                                        S02_RowRops_SeekRowSuccess_TestSuiteS404();
                                    }
                                    else {
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_SeekRowSuccess_TestSuite.RopSeekRowResponseInfo, null, new RopSeekRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite2RopSeekRowResponseChecker4)));
                                    }
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_SeekRowSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite2RopQueryRowsResponseChecker4)));
                                }
                                goto label35;
                            }
                            if ((temp135 == 1)) {
                                this.Manager.Comment("reaching state \'S238\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_SeekRowSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite2RopQueryRowsResponseChecker5))) != -1)) {
                                    this.Manager.Comment("reaching state \'S286\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp134;
                                    this.Manager.Comment("executing step \'call RopSeekRow(BOOKMARK_BEGINNING,True,True,False)\'");
                                    temp134 = this.IMS_OXCTABLAdapterInstance.RopSeekRow(((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(0)), true, true, false);
                                    this.Manager.Checkpoint("MS-OXCTABL_R850");
                                    this.Manager.Comment("reaching state \'S334\'");
                                    this.Manager.Comment("checking step \'return RopSeekRow/success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp134, "return of RopSeekRow, state S334");
                                    this.Manager.Comment("reaching state \'S382\'");
                                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_SeekRowSuccess_TestSuite.RopSeekRowResponseInfo, null, new RopSeekRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite2RopSeekRowResponseChecker5))) != -1)) {
                                        S02_RowRops_SeekRowSuccess_TestSuiteS403();
                                    }
                                    else {
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_SeekRowSuccess_TestSuite.RopSeekRowResponseInfo, null, new RopSeekRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite2RopSeekRowResponseChecker5)));
                                    }
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_SeekRowSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite2RopQueryRowsResponseChecker5)));
                                }
                                goto label35;
                            }
                            throw new InvalidOperationException("never reached");
                        label35:
;
                            goto label37;
                        }
                        if ((temp141 == 1)) {
                            this.Manager.Comment("reaching state \'S112\'");
                            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp136;
                            this.Manager.Comment("executing step \'call RopQueryRows(Advance,True)\'");
                            temp136 = this.IMS_OXCTABLAdapterInstance.RopQueryRows(((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), true);
                            this.Manager.Checkpoint("MS-OXCTABL_R837");
                            this.Manager.Comment("reaching state \'S140\'");
                            this.Manager.Comment("checking step \'return RopQueryRows/success\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp136, "return of RopQueryRows, state S140");
                            this.Manager.Comment("reaching state \'S168\'");
                            bool temp137;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(610,out _)\'");
                            this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(610, out temp137);
                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp137);
                            this.Manager.Comment("reaching state \'S196\'");
                            int temp140 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_SeekRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite2CheckRequirementEnabledChecker13)), new ExpectedReturn(S02_RowRops_SeekRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite2CheckRequirementEnabledChecker14)));
                            if ((temp140 == 0)) {
                                this.Manager.Comment("reaching state \'S239\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_SeekRowSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite2RopQueryRowsResponseChecker6))) != -1)) {
                                    this.Manager.Comment("reaching state \'S287\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp138;
                                    this.Manager.Comment("executing step \'call RopSeekRow(BOOKMARK_BEGINNING,True,True,False)\'");
                                    temp138 = this.IMS_OXCTABLAdapterInstance.RopSeekRow(((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(0)), true, true, false);
                                    this.Manager.Checkpoint("MS-OXCTABL_R850");
                                    this.Manager.Comment("reaching state \'S335\'");
                                    this.Manager.Comment("checking step \'return RopSeekRow/success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp138, "return of RopSeekRow, state S335");
                                    this.Manager.Comment("reaching state \'S383\'");
                                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_SeekRowSuccess_TestSuite.RopSeekRowResponseInfo, null, new RopSeekRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite2RopSeekRowResponseChecker6))) != -1)) {
                                        S02_RowRops_SeekRowSuccess_TestSuiteS402();
                                    }
                                    else {
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_SeekRowSuccess_TestSuite.RopSeekRowResponseInfo, null, new RopSeekRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite2RopSeekRowResponseChecker6)));
                                    }
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_SeekRowSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite2RopQueryRowsResponseChecker6)));
                                }
                                goto label36;
                            }
                            if ((temp140 == 1)) {
                                this.Manager.Comment("reaching state \'S240\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_SeekRowSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite2RopQueryRowsResponseChecker7))) != -1)) {
                                    this.Manager.Comment("reaching state \'S288\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp139;
                                    this.Manager.Comment("executing step \'call RopSeekRow(BOOKMARK_BEGINNING,True,True,False)\'");
                                    temp139 = this.IMS_OXCTABLAdapterInstance.RopSeekRow(((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(0)), true, true, false);
                                    this.Manager.Checkpoint("MS-OXCTABL_R850");
                                    this.Manager.Comment("reaching state \'S336\'");
                                    this.Manager.Comment("checking step \'return RopSeekRow/success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp139, "return of RopSeekRow, state S336");
                                    this.Manager.Comment("reaching state \'S384\'");
                                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_SeekRowSuccess_TestSuite.RopSeekRowResponseInfo, null, new RopSeekRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite2RopSeekRowResponseChecker7))) != -1)) {
                                        S02_RowRops_SeekRowSuccess_TestSuiteS401();
                                    }
                                    else {
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_SeekRowSuccess_TestSuite.RopSeekRowResponseInfo, null, new RopSeekRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite2RopSeekRowResponseChecker7)));
                                    }
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_SeekRowSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite2RopQueryRowsResponseChecker7)));
                                }
                                goto label36;
                            }
                            throw new InvalidOperationException("never reached");
                        label36:
;
                            goto label37;
                        }
                        throw new InvalidOperationException("never reached");
                    label37:
;
                        goto label38;
                    }
                    throw new InvalidOperationException("never reached");
                label38:
;
                    goto label46;
                }
                if ((temp169 == 1)) {
                    this.Manager.Comment("reaching state \'S50\'");
                    bool temp143;
                    this.Manager.Comment("executing step \'call CheckRequirementEnabled(866,out _)\'");
                    this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(866, out temp143);
                    this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp143);
                    this.Manager.Comment("reaching state \'S58\'");
                    int temp168 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_SeekRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite2CheckRequirementEnabledChecker16)), new ExpectedReturn(S02_RowRops_SeekRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite2CheckRequirementEnabledChecker23)));
                    if ((temp168 == 0)) {
                        this.Manager.Comment("reaching state \'S71\'");
                        bool temp144;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(867,out _)\'");
                        this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(867, out temp144);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp144);
                        this.Manager.Comment("reaching state \'S87\'");
                        int temp155 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_SeekRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite2CheckRequirementEnabledChecker17)), new ExpectedReturn(S02_RowRops_SeekRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite2CheckRequirementEnabledChecker20)));
                        if ((temp155 == 0)) {
                            this.Manager.Comment("reaching state \'S113\'");
                            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp145;
                            this.Manager.Comment("executing step \'call RopQueryRows(Advance,True)\'");
                            temp145 = this.IMS_OXCTABLAdapterInstance.RopQueryRows(((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), true);
                            this.Manager.Checkpoint("MS-OXCTABL_R837");
                            this.Manager.Comment("reaching state \'S141\'");
                            this.Manager.Comment("checking step \'return RopQueryRows/success\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp145, "return of RopQueryRows, state S141");
                            this.Manager.Comment("reaching state \'S169\'");
                            bool temp146;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(610,out _)\'");
                            this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(610, out temp146);
                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp146);
                            this.Manager.Comment("reaching state \'S197\'");
                            int temp149 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_SeekRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite2CheckRequirementEnabledChecker18)), new ExpectedReturn(S02_RowRops_SeekRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite2CheckRequirementEnabledChecker19)));
                            if ((temp149 == 0)) {
                                this.Manager.Comment("reaching state \'S241\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_SeekRowSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite2RopQueryRowsResponseChecker8))) != -1)) {
                                    this.Manager.Comment("reaching state \'S289\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp147;
                                    this.Manager.Comment("executing step \'call RopSeekRow(BOOKMARK_BEGINNING,True,True,False)\'");
                                    temp147 = this.IMS_OXCTABLAdapterInstance.RopSeekRow(((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(0)), true, true, false);
                                    this.Manager.Checkpoint("MS-OXCTABL_R850");
                                    this.Manager.Comment("reaching state \'S337\'");
                                    this.Manager.Comment("checking step \'return RopSeekRow/success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp147, "return of RopSeekRow, state S337");
                                    this.Manager.Comment("reaching state \'S385\'");
                                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_SeekRowSuccess_TestSuite.RopSeekRowResponseInfo, null, new RopSeekRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite2RopSeekRowResponseChecker8))) != -1)) {
                                        S02_RowRops_SeekRowSuccess_TestSuiteS400();
                                    }
                                    else {
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_SeekRowSuccess_TestSuite.RopSeekRowResponseInfo, null, new RopSeekRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite2RopSeekRowResponseChecker8)));
                                    }
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_SeekRowSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite2RopQueryRowsResponseChecker8)));
                                }
                                goto label39;
                            }
                            if ((temp149 == 1)) {
                                this.Manager.Comment("reaching state \'S242\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_SeekRowSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite2RopQueryRowsResponseChecker9))) != -1)) {
                                    this.Manager.Comment("reaching state \'S290\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp148;
                                    this.Manager.Comment("executing step \'call RopSeekRow(BOOKMARK_BEGINNING,True,True,False)\'");
                                    temp148 = this.IMS_OXCTABLAdapterInstance.RopSeekRow(((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(0)), true, true, false);
                                    this.Manager.Checkpoint("MS-OXCTABL_R850");
                                    this.Manager.Comment("reaching state \'S338\'");
                                    this.Manager.Comment("checking step \'return RopSeekRow/success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp148, "return of RopSeekRow, state S338");
                                    this.Manager.Comment("reaching state \'S386\'");
                                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_SeekRowSuccess_TestSuite.RopSeekRowResponseInfo, null, new RopSeekRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite2RopSeekRowResponseChecker9))) != -1)) {
                                        S02_RowRops_SeekRowSuccess_TestSuiteS399();
                                    }
                                    else {
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_SeekRowSuccess_TestSuite.RopSeekRowResponseInfo, null, new RopSeekRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite2RopSeekRowResponseChecker9)));
                                    }
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_SeekRowSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite2RopQueryRowsResponseChecker9)));
                                }
                                goto label39;
                            }
                            throw new InvalidOperationException("never reached");
                        label39:
;
                            goto label41;
                        }
                        if ((temp155 == 1)) {
                            this.Manager.Comment("reaching state \'S114\'");
                            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp150;
                            this.Manager.Comment("executing step \'call RopQueryRows(Advance,True)\'");
                            temp150 = this.IMS_OXCTABLAdapterInstance.RopQueryRows(((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), true);
                            this.Manager.Checkpoint("MS-OXCTABL_R837");
                            this.Manager.Comment("reaching state \'S142\'");
                            this.Manager.Comment("checking step \'return RopQueryRows/success\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp150, "return of RopQueryRows, state S142");
                            this.Manager.Comment("reaching state \'S170\'");
                            bool temp151;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(610,out _)\'");
                            this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(610, out temp151);
                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp151);
                            this.Manager.Comment("reaching state \'S198\'");
                            int temp154 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_SeekRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite2CheckRequirementEnabledChecker21)), new ExpectedReturn(S02_RowRops_SeekRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite2CheckRequirementEnabledChecker22)));
                            if ((temp154 == 0)) {
                                this.Manager.Comment("reaching state \'S243\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_SeekRowSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite2RopQueryRowsResponseChecker10))) != -1)) {
                                    this.Manager.Comment("reaching state \'S291\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp152;
                                    this.Manager.Comment("executing step \'call RopSeekRow(BOOKMARK_BEGINNING,True,True,False)\'");
                                    temp152 = this.IMS_OXCTABLAdapterInstance.RopSeekRow(((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(0)), true, true, false);
                                    this.Manager.Checkpoint("MS-OXCTABL_R850");
                                    this.Manager.Comment("reaching state \'S339\'");
                                    this.Manager.Comment("checking step \'return RopSeekRow/success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp152, "return of RopSeekRow, state S339");
                                    this.Manager.Comment("reaching state \'S387\'");
                                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_SeekRowSuccess_TestSuite.RopSeekRowResponseInfo, null, new RopSeekRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite2RopSeekRowResponseChecker10))) != -1)) {
                                        S02_RowRops_SeekRowSuccess_TestSuiteS398();
                                    }
                                    else {
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_SeekRowSuccess_TestSuite.RopSeekRowResponseInfo, null, new RopSeekRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite2RopSeekRowResponseChecker10)));
                                    }
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_SeekRowSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite2RopQueryRowsResponseChecker10)));
                                }
                                goto label40;
                            }
                            if ((temp154 == 1)) {
                                this.Manager.Comment("reaching state \'S244\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_SeekRowSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite2RopQueryRowsResponseChecker11))) != -1)) {
                                    this.Manager.Comment("reaching state \'S292\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp153;
                                    this.Manager.Comment("executing step \'call RopSeekRow(BOOKMARK_BEGINNING,True,True,False)\'");
                                    temp153 = this.IMS_OXCTABLAdapterInstance.RopSeekRow(((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(0)), true, true, false);
                                    this.Manager.Checkpoint("MS-OXCTABL_R850");
                                    this.Manager.Comment("reaching state \'S340\'");
                                    this.Manager.Comment("checking step \'return RopSeekRow/success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp153, "return of RopSeekRow, state S340");
                                    this.Manager.Comment("reaching state \'S388\'");
                                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_SeekRowSuccess_TestSuite.RopSeekRowResponseInfo, null, new RopSeekRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite2RopSeekRowResponseChecker11))) != -1)) {
                                        S02_RowRops_SeekRowSuccess_TestSuiteS397();
                                    }
                                    else {
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_SeekRowSuccess_TestSuite.RopSeekRowResponseInfo, null, new RopSeekRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite2RopSeekRowResponseChecker11)));
                                    }
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_SeekRowSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite2RopQueryRowsResponseChecker11)));
                                }
                                goto label40;
                            }
                            throw new InvalidOperationException("never reached");
                        label40:
;
                            goto label41;
                        }
                        throw new InvalidOperationException("never reached");
                    label41:
;
                        goto label45;
                    }
                    if ((temp168 == 1)) {
                        this.Manager.Comment("reaching state \'S72\'");
                        bool temp156;
                        this.Manager.Comment("executing step \'call CheckRequirementEnabled(867,out _)\'");
                        this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(867, out temp156);
                        this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp156);
                        this.Manager.Comment("reaching state \'S88\'");
                        int temp167 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_SeekRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite2CheckRequirementEnabledChecker24)), new ExpectedReturn(S02_RowRops_SeekRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite2CheckRequirementEnabledChecker27)));
                        if ((temp167 == 0)) {
                            this.Manager.Comment("reaching state \'S115\'");
                            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp157;
                            this.Manager.Comment("executing step \'call RopQueryRows(Advance,True)\'");
                            temp157 = this.IMS_OXCTABLAdapterInstance.RopQueryRows(((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), true);
                            this.Manager.Checkpoint("MS-OXCTABL_R837");
                            this.Manager.Comment("reaching state \'S143\'");
                            this.Manager.Comment("checking step \'return RopQueryRows/success\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp157, "return of RopQueryRows, state S143");
                            this.Manager.Comment("reaching state \'S171\'");
                            bool temp158;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(610,out _)\'");
                            this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(610, out temp158);
                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp158);
                            this.Manager.Comment("reaching state \'S199\'");
                            int temp161 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_SeekRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite2CheckRequirementEnabledChecker25)), new ExpectedReturn(S02_RowRops_SeekRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite2CheckRequirementEnabledChecker26)));
                            if ((temp161 == 0)) {
                                this.Manager.Comment("reaching state \'S245\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_SeekRowSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite2RopQueryRowsResponseChecker12))) != -1)) {
                                    this.Manager.Comment("reaching state \'S293\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp159;
                                    this.Manager.Comment("executing step \'call RopSeekRow(BOOKMARK_BEGINNING,True,True,False)\'");
                                    temp159 = this.IMS_OXCTABLAdapterInstance.RopSeekRow(((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(0)), true, true, false);
                                    this.Manager.Checkpoint("MS-OXCTABL_R850");
                                    this.Manager.Comment("reaching state \'S341\'");
                                    this.Manager.Comment("checking step \'return RopSeekRow/success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp159, "return of RopSeekRow, state S341");
                                    this.Manager.Comment("reaching state \'S389\'");
                                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_SeekRowSuccess_TestSuite.RopSeekRowResponseInfo, null, new RopSeekRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite2RopSeekRowResponseChecker12))) != -1)) {
                                        S02_RowRops_SeekRowSuccess_TestSuiteS396();
                                    }
                                    else {
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_SeekRowSuccess_TestSuite.RopSeekRowResponseInfo, null, new RopSeekRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite2RopSeekRowResponseChecker12)));
                                    }
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_SeekRowSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite2RopQueryRowsResponseChecker12)));
                                }
                                goto label42;
                            }
                            if ((temp161 == 1)) {
                                this.Manager.Comment("reaching state \'S246\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_SeekRowSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite2RopQueryRowsResponseChecker13))) != -1)) {
                                    this.Manager.Comment("reaching state \'S294\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp160;
                                    this.Manager.Comment("executing step \'call RopSeekRow(BOOKMARK_BEGINNING,True,True,False)\'");
                                    temp160 = this.IMS_OXCTABLAdapterInstance.RopSeekRow(((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(0)), true, true, false);
                                    this.Manager.Checkpoint("MS-OXCTABL_R850");
                                    this.Manager.Comment("reaching state \'S342\'");
                                    this.Manager.Comment("checking step \'return RopSeekRow/success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp160, "return of RopSeekRow, state S342");
                                    this.Manager.Comment("reaching state \'S390\'");
                                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_SeekRowSuccess_TestSuite.RopSeekRowResponseInfo, null, new RopSeekRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite2RopSeekRowResponseChecker13))) != -1)) {
                                        S02_RowRops_SeekRowSuccess_TestSuiteS395();
                                    }
                                    else {
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_SeekRowSuccess_TestSuite.RopSeekRowResponseInfo, null, new RopSeekRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite2RopSeekRowResponseChecker13)));
                                    }
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_SeekRowSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite2RopQueryRowsResponseChecker13)));
                                }
                                goto label42;
                            }
                            throw new InvalidOperationException("never reached");
                        label42:
;
                            goto label44;
                        }
                        if ((temp167 == 1)) {
                            this.Manager.Comment("reaching state \'S116\'");
                            Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp162;
                            this.Manager.Comment("executing step \'call RopQueryRows(Advance,True)\'");
                            temp162 = this.IMS_OXCTABLAdapterInstance.RopQueryRows(((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), true);
                            this.Manager.Checkpoint("MS-OXCTABL_R837");
                            this.Manager.Comment("reaching state \'S144\'");
                            this.Manager.Comment("checking step \'return RopQueryRows/success\'");
                            TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp162, "return of RopQueryRows, state S144");
                            this.Manager.Comment("reaching state \'S172\'");
                            bool temp163;
                            this.Manager.Comment("executing step \'call CheckRequirementEnabled(610,out _)\'");
                            this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(610, out temp163);
                            this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp163);
                            this.Manager.Comment("reaching state \'S200\'");
                            int temp166 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_SeekRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite2CheckRequirementEnabledChecker28)), new ExpectedReturn(S02_RowRops_SeekRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite2CheckRequirementEnabledChecker29)));
                            if ((temp166 == 0)) {
                                this.Manager.Comment("reaching state \'S247\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_SeekRowSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite2RopQueryRowsResponseChecker14))) != -1)) {
                                    this.Manager.Comment("reaching state \'S295\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp164;
                                    this.Manager.Comment("executing step \'call RopSeekRow(BOOKMARK_BEGINNING,True,True,False)\'");
                                    temp164 = this.IMS_OXCTABLAdapterInstance.RopSeekRow(((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(0)), true, true, false);
                                    this.Manager.Checkpoint("MS-OXCTABL_R850");
                                    this.Manager.Comment("reaching state \'S343\'");
                                    this.Manager.Comment("checking step \'return RopSeekRow/success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp164, "return of RopSeekRow, state S343");
                                    this.Manager.Comment("reaching state \'S391\'");
                                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_SeekRowSuccess_TestSuite.RopSeekRowResponseInfo, null, new RopSeekRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite2RopSeekRowResponseChecker14))) != -1)) {
                                        S02_RowRops_SeekRowSuccess_TestSuiteS394();
                                    }
                                    else {
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_SeekRowSuccess_TestSuite.RopSeekRowResponseInfo, null, new RopSeekRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite2RopSeekRowResponseChecker14)));
                                    }
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_SeekRowSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite2RopQueryRowsResponseChecker14)));
                                }
                                goto label43;
                            }
                            if ((temp166 == 1)) {
                                this.Manager.Comment("reaching state \'S248\'");
                                if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_SeekRowSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite2RopQueryRowsResponseChecker15))) != -1)) {
                                    this.Manager.Comment("reaching state \'S296\'");
                                    Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp165;
                                    this.Manager.Comment("executing step \'call RopSeekRow(BOOKMARK_BEGINNING,True,True,False)\'");
                                    temp165 = this.IMS_OXCTABLAdapterInstance.RopSeekRow(((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(0)), true, true, false);
                                    this.Manager.Checkpoint("MS-OXCTABL_R850");
                                    this.Manager.Comment("reaching state \'S344\'");
                                    this.Manager.Comment("checking step \'return RopSeekRow/success\'");
                                    TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp165, "return of RopSeekRow, state S344");
                                    this.Manager.Comment("reaching state \'S392\'");
                                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_SeekRowSuccess_TestSuite.RopSeekRowResponseInfo, null, new RopSeekRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite2RopSeekRowResponseChecker15))) != -1)) {
                                        S02_RowRops_SeekRowSuccess_TestSuiteS393();
                                    }
                                    else {
                                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_SeekRowSuccess_TestSuite.RopSeekRowResponseInfo, null, new RopSeekRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite2RopSeekRowResponseChecker15)));
                                    }
                                }
                                else {
                                    this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_SeekRowSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite2RopQueryRowsResponseChecker15)));
                                }
                                goto label43;
                            }
                            throw new InvalidOperationException("never reached");
                        label43:
;
                            goto label44;
                        }
                        throw new InvalidOperationException("never reached");
                    label44:
;
                        goto label45;
                    }
                    throw new InvalidOperationException("never reached");
                label45:
;
                    goto label46;
                }
                throw new InvalidOperationException("never reached");
            label46:
;
                goto label47;
            }
            if ((temp170 == 1)) {
                this.Manager.Comment("reaching state \'S15\'");
                goto label47;
            }
            throw new InvalidOperationException("never reached");
        label47:
;
            this.Manager.EndTest();
        }
        
        private void MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite2CheckMAPIHTTPTransportSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S5");
        }
        
        private void MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite2CheckRequirementEnabledChecker(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S42");
        }
        
        private void MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite2CheckRequirementEnabledChecker1(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S57");
        }
        
        private void MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite2CheckRequirementEnabledChecker2(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S85");
        }
        
        private void MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite2CheckRequirementEnabledChecker3(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S193");
        }
        
        private void MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite2RopQueryRowsResponseChecker(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SETCOLUMNS,True,True" +
                    ",True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S233");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S233");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S233");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S233");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S233");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S233");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S233");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S233");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S233");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S233");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R472, MS-OXCTABL_R427, MS-OXCTABL_R42" +
                        "6, MS-OXCTABL_R116");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R472");
            this.Manager.Checkpoint("MS-OXCTABL_R427");
            this.Manager.Checkpoint("MS-OXCTABL_R426");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
        }
        
        private void MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite2RopSeekRowResponseChecker(bool wantRowMovedCountout, bool enoughRow, bool hasSoughtLess, bool isActualRowsCount) {
            this.Manager.Comment("checking step \'event RopSeekRowResponse(True,False,True,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, wantRowMovedCountout, "wantRowMovedCountout of RopSeekRowResponse, state S377");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enoughRow, "enoughRow of RopSeekRowResponse, state S377");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, hasSoughtLess, "hasSoughtLess of RopSeekRowResponse, state S377");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isActualRowsCount, "isActualRowsCount of RopSeekRowResponse, state S377");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R154, MS-OXCTABL_R157, MS-OXCTABL_R163, M" +
                        "S-OXCTABL_R150, MS-OXCTABL_R497, MS-OXCTABL_R152");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R154");
            this.Manager.Checkpoint("MS-OXCTABL_R157");
            this.Manager.Checkpoint("MS-OXCTABL_R163");
            this.Manager.Checkpoint("MS-OXCTABL_R150");
            this.Manager.Checkpoint("MS-OXCTABL_R497");
            this.Manager.Checkpoint("MS-OXCTABL_R152");
        }
        
        private void MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite2CheckRequirementEnabledChecker4(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S193");
        }
        
        private void MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite2RopQueryRowsResponseChecker1(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SETCOLUMNS,True,True" +
                    ",True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S234");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S234");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S234");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S234");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S234");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S234");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S234");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S234");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S234");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S234");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R472, MS-OXCTABL_R427, MS-OXCTABL_R42" +
                        "6, MS-OXCTABL_R116, MS-OXCTABL_R610");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R472");
            this.Manager.Checkpoint("MS-OXCTABL_R427");
            this.Manager.Checkpoint("MS-OXCTABL_R426");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R610");
        }
        
        private void MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite2RopSeekRowResponseChecker1(bool wantRowMovedCountout, bool enoughRow, bool hasSoughtLess, bool isActualRowsCount) {
            this.Manager.Comment("checking step \'event RopSeekRowResponse(True,False,True,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, wantRowMovedCountout, "wantRowMovedCountout of RopSeekRowResponse, state S378");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enoughRow, "enoughRow of RopSeekRowResponse, state S378");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, hasSoughtLess, "hasSoughtLess of RopSeekRowResponse, state S378");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isActualRowsCount, "isActualRowsCount of RopSeekRowResponse, state S378");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R154, MS-OXCTABL_R157, MS-OXCTABL_R163, M" +
                        "S-OXCTABL_R150, MS-OXCTABL_R497, MS-OXCTABL_R152");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R154");
            this.Manager.Checkpoint("MS-OXCTABL_R157");
            this.Manager.Checkpoint("MS-OXCTABL_R163");
            this.Manager.Checkpoint("MS-OXCTABL_R150");
            this.Manager.Checkpoint("MS-OXCTABL_R497");
            this.Manager.Checkpoint("MS-OXCTABL_R152");
        }
        
        private void MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite2CheckRequirementEnabledChecker5(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S85");
        }
        
        private void MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite2CheckRequirementEnabledChecker6(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S194");
        }
        
        private void MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite2RopQueryRowsResponseChecker2(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SETCOLUMNS,True,True" +
                    ",True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S235");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S235");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S235");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S235");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S235");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S235");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S235");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S235");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S235");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S235");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R472, MS-OXCTABL_R427, MS-OXCTABL_R42" +
                        "6, MS-OXCTABL_R116, MS-OXCTABL_R610");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R472");
            this.Manager.Checkpoint("MS-OXCTABL_R427");
            this.Manager.Checkpoint("MS-OXCTABL_R426");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R610");
        }
        
        private void MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite2RopSeekRowResponseChecker2(bool wantRowMovedCountout, bool enoughRow, bool hasSoughtLess, bool isActualRowsCount) {
            this.Manager.Comment("checking step \'event RopSeekRowResponse(True,False,True,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, wantRowMovedCountout, "wantRowMovedCountout of RopSeekRowResponse, state S379");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enoughRow, "enoughRow of RopSeekRowResponse, state S379");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, hasSoughtLess, "hasSoughtLess of RopSeekRowResponse, state S379");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isActualRowsCount, "isActualRowsCount of RopSeekRowResponse, state S379");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R154, MS-OXCTABL_R157, MS-OXCTABL_R163, M" +
                        "S-OXCTABL_R150, MS-OXCTABL_R497, MS-OXCTABL_R152");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R154");
            this.Manager.Checkpoint("MS-OXCTABL_R157");
            this.Manager.Checkpoint("MS-OXCTABL_R163");
            this.Manager.Checkpoint("MS-OXCTABL_R150");
            this.Manager.Checkpoint("MS-OXCTABL_R497");
            this.Manager.Checkpoint("MS-OXCTABL_R152");
        }
        
        private void MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite2CheckRequirementEnabledChecker7(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S194");
        }
        
        private void MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite2RopQueryRowsResponseChecker3(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SETCOLUMNS,True,True" +
                    ",True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S236");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S236");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S236");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S236");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S236");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S236");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S236");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S236");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S236");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S236");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R472, MS-OXCTABL_R427, MS-OXCTABL_R42" +
                        "6, MS-OXCTABL_R116");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R472");
            this.Manager.Checkpoint("MS-OXCTABL_R427");
            this.Manager.Checkpoint("MS-OXCTABL_R426");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
        }
        
        private void MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite2RopSeekRowResponseChecker3(bool wantRowMovedCountout, bool enoughRow, bool hasSoughtLess, bool isActualRowsCount) {
            this.Manager.Comment("checking step \'event RopSeekRowResponse(True,False,True,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, wantRowMovedCountout, "wantRowMovedCountout of RopSeekRowResponse, state S380");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enoughRow, "enoughRow of RopSeekRowResponse, state S380");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, hasSoughtLess, "hasSoughtLess of RopSeekRowResponse, state S380");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isActualRowsCount, "isActualRowsCount of RopSeekRowResponse, state S380");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R154, MS-OXCTABL_R157, MS-OXCTABL_R163, M" +
                        "S-OXCTABL_R150, MS-OXCTABL_R497, MS-OXCTABL_R152");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R154");
            this.Manager.Checkpoint("MS-OXCTABL_R157");
            this.Manager.Checkpoint("MS-OXCTABL_R163");
            this.Manager.Checkpoint("MS-OXCTABL_R150");
            this.Manager.Checkpoint("MS-OXCTABL_R497");
            this.Manager.Checkpoint("MS-OXCTABL_R152");
        }
        
        private void MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite2CheckRequirementEnabledChecker8(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S57");
        }
        
        private void MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite2CheckRequirementEnabledChecker9(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S86");
        }
        
        private void MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite2CheckRequirementEnabledChecker10(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S195");
        }
        
        private void MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite2RopQueryRowsResponseChecker4(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SETCOLUMNS,True,True" +
                    ",True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S237");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S237");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S237");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S237");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S237");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S237");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S237");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S237");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S237");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S237");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R472, MS-OXCTABL_R427, MS-OXCTABL_R42" +
                        "6, MS-OXCTABL_R116, MS-OXCTABL_R610");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R472");
            this.Manager.Checkpoint("MS-OXCTABL_R427");
            this.Manager.Checkpoint("MS-OXCTABL_R426");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R610");
        }
        
        private void MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite2RopSeekRowResponseChecker4(bool wantRowMovedCountout, bool enoughRow, bool hasSoughtLess, bool isActualRowsCount) {
            this.Manager.Comment("checking step \'event RopSeekRowResponse(True,False,True,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, wantRowMovedCountout, "wantRowMovedCountout of RopSeekRowResponse, state S381");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enoughRow, "enoughRow of RopSeekRowResponse, state S381");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, hasSoughtLess, "hasSoughtLess of RopSeekRowResponse, state S381");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isActualRowsCount, "isActualRowsCount of RopSeekRowResponse, state S381");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R154, MS-OXCTABL_R157, MS-OXCTABL_R163, M" +
                        "S-OXCTABL_R150, MS-OXCTABL_R497, MS-OXCTABL_R152");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R154");
            this.Manager.Checkpoint("MS-OXCTABL_R157");
            this.Manager.Checkpoint("MS-OXCTABL_R163");
            this.Manager.Checkpoint("MS-OXCTABL_R150");
            this.Manager.Checkpoint("MS-OXCTABL_R497");
            this.Manager.Checkpoint("MS-OXCTABL_R152");
        }
        
        private void MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite2CheckRequirementEnabledChecker11(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S195");
        }
        
        private void MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite2RopQueryRowsResponseChecker5(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SETCOLUMNS,True,True" +
                    ",True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S238");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S238");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S238");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S238");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S238");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S238");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S238");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S238");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S238");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S238");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R472, MS-OXCTABL_R427, MS-OXCTABL_R42" +
                        "6, MS-OXCTABL_R116");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R472");
            this.Manager.Checkpoint("MS-OXCTABL_R427");
            this.Manager.Checkpoint("MS-OXCTABL_R426");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
        }
        
        private void MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite2RopSeekRowResponseChecker5(bool wantRowMovedCountout, bool enoughRow, bool hasSoughtLess, bool isActualRowsCount) {
            this.Manager.Comment("checking step \'event RopSeekRowResponse(True,False,True,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, wantRowMovedCountout, "wantRowMovedCountout of RopSeekRowResponse, state S382");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enoughRow, "enoughRow of RopSeekRowResponse, state S382");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, hasSoughtLess, "hasSoughtLess of RopSeekRowResponse, state S382");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isActualRowsCount, "isActualRowsCount of RopSeekRowResponse, state S382");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R154, MS-OXCTABL_R157, MS-OXCTABL_R163, M" +
                        "S-OXCTABL_R150, MS-OXCTABL_R497, MS-OXCTABL_R152");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R154");
            this.Manager.Checkpoint("MS-OXCTABL_R157");
            this.Manager.Checkpoint("MS-OXCTABL_R163");
            this.Manager.Checkpoint("MS-OXCTABL_R150");
            this.Manager.Checkpoint("MS-OXCTABL_R497");
            this.Manager.Checkpoint("MS-OXCTABL_R152");
        }
        
        private void MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite2CheckRequirementEnabledChecker12(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S86");
        }
        
        private void MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite2CheckRequirementEnabledChecker13(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S196");
        }
        
        private void MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite2RopQueryRowsResponseChecker6(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SETCOLUMNS,True,True" +
                    ",True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S239");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S239");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S239");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S239");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S239");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S239");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S239");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S239");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S239");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S239");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R472, MS-OXCTABL_R427, MS-OXCTABL_R42" +
                        "6, MS-OXCTABL_R116");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R472");
            this.Manager.Checkpoint("MS-OXCTABL_R427");
            this.Manager.Checkpoint("MS-OXCTABL_R426");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
        }
        
        private void MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite2RopSeekRowResponseChecker6(bool wantRowMovedCountout, bool enoughRow, bool hasSoughtLess, bool isActualRowsCount) {
            this.Manager.Comment("checking step \'event RopSeekRowResponse(True,False,True,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, wantRowMovedCountout, "wantRowMovedCountout of RopSeekRowResponse, state S383");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enoughRow, "enoughRow of RopSeekRowResponse, state S383");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, hasSoughtLess, "hasSoughtLess of RopSeekRowResponse, state S383");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isActualRowsCount, "isActualRowsCount of RopSeekRowResponse, state S383");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R154, MS-OXCTABL_R157, MS-OXCTABL_R163, M" +
                        "S-OXCTABL_R150, MS-OXCTABL_R497, MS-OXCTABL_R152");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R154");
            this.Manager.Checkpoint("MS-OXCTABL_R157");
            this.Manager.Checkpoint("MS-OXCTABL_R163");
            this.Manager.Checkpoint("MS-OXCTABL_R150");
            this.Manager.Checkpoint("MS-OXCTABL_R497");
            this.Manager.Checkpoint("MS-OXCTABL_R152");
        }
        
        private void MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite2CheckRequirementEnabledChecker14(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S196");
        }
        
        private void MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite2RopQueryRowsResponseChecker7(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SETCOLUMNS,True,True" +
                    ",True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S240");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S240");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S240");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S240");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S240");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S240");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S240");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S240");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S240");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S240");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R472, MS-OXCTABL_R427, MS-OXCTABL_R42" +
                        "6, MS-OXCTABL_R116, MS-OXCTABL_R610");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R472");
            this.Manager.Checkpoint("MS-OXCTABL_R427");
            this.Manager.Checkpoint("MS-OXCTABL_R426");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R610");
        }
        
        private void MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite2RopSeekRowResponseChecker7(bool wantRowMovedCountout, bool enoughRow, bool hasSoughtLess, bool isActualRowsCount) {
            this.Manager.Comment("checking step \'event RopSeekRowResponse(True,False,True,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, wantRowMovedCountout, "wantRowMovedCountout of RopSeekRowResponse, state S384");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enoughRow, "enoughRow of RopSeekRowResponse, state S384");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, hasSoughtLess, "hasSoughtLess of RopSeekRowResponse, state S384");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isActualRowsCount, "isActualRowsCount of RopSeekRowResponse, state S384");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R154, MS-OXCTABL_R157, MS-OXCTABL_R163, M" +
                        "S-OXCTABL_R150, MS-OXCTABL_R497, MS-OXCTABL_R152");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R154");
            this.Manager.Checkpoint("MS-OXCTABL_R157");
            this.Manager.Checkpoint("MS-OXCTABL_R163");
            this.Manager.Checkpoint("MS-OXCTABL_R150");
            this.Manager.Checkpoint("MS-OXCTABL_R497");
            this.Manager.Checkpoint("MS-OXCTABL_R152");
        }
        
        private void MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite2CheckRequirementEnabledChecker15(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S42");
        }
        
        private void MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite2CheckRequirementEnabledChecker16(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S58");
        }
        
        private void MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite2CheckRequirementEnabledChecker17(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S87");
        }
        
        private void MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite2CheckRequirementEnabledChecker18(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S197");
        }
        
        private void MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite2RopQueryRowsResponseChecker8(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SETCOLUMNS,True,True" +
                    ",True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S241");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S241");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S241");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S241");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S241");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S241");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S241");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S241");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S241");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S241");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R472, MS-OXCTABL_R427, MS-OXCTABL_R42" +
                        "6, MS-OXCTABL_R116");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R472");
            this.Manager.Checkpoint("MS-OXCTABL_R427");
            this.Manager.Checkpoint("MS-OXCTABL_R426");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
        }
        
        private void MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite2RopSeekRowResponseChecker8(bool wantRowMovedCountout, bool enoughRow, bool hasSoughtLess, bool isActualRowsCount) {
            this.Manager.Comment("checking step \'event RopSeekRowResponse(True,False,True,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, wantRowMovedCountout, "wantRowMovedCountout of RopSeekRowResponse, state S385");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enoughRow, "enoughRow of RopSeekRowResponse, state S385");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, hasSoughtLess, "hasSoughtLess of RopSeekRowResponse, state S385");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isActualRowsCount, "isActualRowsCount of RopSeekRowResponse, state S385");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R154, MS-OXCTABL_R157, MS-OXCTABL_R163, M" +
                        "S-OXCTABL_R150, MS-OXCTABL_R497, MS-OXCTABL_R152");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R154");
            this.Manager.Checkpoint("MS-OXCTABL_R157");
            this.Manager.Checkpoint("MS-OXCTABL_R163");
            this.Manager.Checkpoint("MS-OXCTABL_R150");
            this.Manager.Checkpoint("MS-OXCTABL_R497");
            this.Manager.Checkpoint("MS-OXCTABL_R152");
        }
        
        private void MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite2CheckRequirementEnabledChecker19(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S197");
        }
        
        private void MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite2RopQueryRowsResponseChecker9(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SETCOLUMNS,True,True" +
                    ",True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S242");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S242");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S242");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S242");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S242");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S242");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S242");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S242");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S242");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S242");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R472, MS-OXCTABL_R427, MS-OXCTABL_R42" +
                        "6, MS-OXCTABL_R116, MS-OXCTABL_R610");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R472");
            this.Manager.Checkpoint("MS-OXCTABL_R427");
            this.Manager.Checkpoint("MS-OXCTABL_R426");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R610");
        }
        
        private void MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite2RopSeekRowResponseChecker9(bool wantRowMovedCountout, bool enoughRow, bool hasSoughtLess, bool isActualRowsCount) {
            this.Manager.Comment("checking step \'event RopSeekRowResponse(True,False,True,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, wantRowMovedCountout, "wantRowMovedCountout of RopSeekRowResponse, state S386");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enoughRow, "enoughRow of RopSeekRowResponse, state S386");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, hasSoughtLess, "hasSoughtLess of RopSeekRowResponse, state S386");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isActualRowsCount, "isActualRowsCount of RopSeekRowResponse, state S386");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R154, MS-OXCTABL_R157, MS-OXCTABL_R163, M" +
                        "S-OXCTABL_R150, MS-OXCTABL_R497, MS-OXCTABL_R152");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R154");
            this.Manager.Checkpoint("MS-OXCTABL_R157");
            this.Manager.Checkpoint("MS-OXCTABL_R163");
            this.Manager.Checkpoint("MS-OXCTABL_R150");
            this.Manager.Checkpoint("MS-OXCTABL_R497");
            this.Manager.Checkpoint("MS-OXCTABL_R152");
        }
        
        private void MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite2CheckRequirementEnabledChecker20(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S87");
        }
        
        private void MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite2CheckRequirementEnabledChecker21(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S198");
        }
        
        private void MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite2RopQueryRowsResponseChecker10(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SETCOLUMNS,True,True" +
                    ",True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S243");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S243");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S243");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S243");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S243");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S243");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S243");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S243");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S243");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S243");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R472, MS-OXCTABL_R427, MS-OXCTABL_R42" +
                        "6, MS-OXCTABL_R116, MS-OXCTABL_R610");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R472");
            this.Manager.Checkpoint("MS-OXCTABL_R427");
            this.Manager.Checkpoint("MS-OXCTABL_R426");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R610");
        }
        
        private void MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite2RopSeekRowResponseChecker10(bool wantRowMovedCountout, bool enoughRow, bool hasSoughtLess, bool isActualRowsCount) {
            this.Manager.Comment("checking step \'event RopSeekRowResponse(True,False,True,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, wantRowMovedCountout, "wantRowMovedCountout of RopSeekRowResponse, state S387");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enoughRow, "enoughRow of RopSeekRowResponse, state S387");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, hasSoughtLess, "hasSoughtLess of RopSeekRowResponse, state S387");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isActualRowsCount, "isActualRowsCount of RopSeekRowResponse, state S387");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R154, MS-OXCTABL_R157, MS-OXCTABL_R163, M" +
                        "S-OXCTABL_R150, MS-OXCTABL_R497, MS-OXCTABL_R152");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R154");
            this.Manager.Checkpoint("MS-OXCTABL_R157");
            this.Manager.Checkpoint("MS-OXCTABL_R163");
            this.Manager.Checkpoint("MS-OXCTABL_R150");
            this.Manager.Checkpoint("MS-OXCTABL_R497");
            this.Manager.Checkpoint("MS-OXCTABL_R152");
        }
        
        private void MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite2CheckRequirementEnabledChecker22(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S198");
        }
        
        private void MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite2RopQueryRowsResponseChecker11(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SETCOLUMNS,True,True" +
                    ",True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S244");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S244");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S244");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S244");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S244");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S244");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S244");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S244");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S244");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S244");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R472, MS-OXCTABL_R427, MS-OXCTABL_R42" +
                        "6, MS-OXCTABL_R116");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R472");
            this.Manager.Checkpoint("MS-OXCTABL_R427");
            this.Manager.Checkpoint("MS-OXCTABL_R426");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
        }
        
        private void MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite2RopSeekRowResponseChecker11(bool wantRowMovedCountout, bool enoughRow, bool hasSoughtLess, bool isActualRowsCount) {
            this.Manager.Comment("checking step \'event RopSeekRowResponse(True,False,True,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, wantRowMovedCountout, "wantRowMovedCountout of RopSeekRowResponse, state S388");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enoughRow, "enoughRow of RopSeekRowResponse, state S388");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, hasSoughtLess, "hasSoughtLess of RopSeekRowResponse, state S388");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isActualRowsCount, "isActualRowsCount of RopSeekRowResponse, state S388");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R154, MS-OXCTABL_R157, MS-OXCTABL_R163, M" +
                        "S-OXCTABL_R150, MS-OXCTABL_R497, MS-OXCTABL_R152");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R154");
            this.Manager.Checkpoint("MS-OXCTABL_R157");
            this.Manager.Checkpoint("MS-OXCTABL_R163");
            this.Manager.Checkpoint("MS-OXCTABL_R150");
            this.Manager.Checkpoint("MS-OXCTABL_R497");
            this.Manager.Checkpoint("MS-OXCTABL_R152");
        }
        
        private void MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite2CheckRequirementEnabledChecker23(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S58");
        }
        
        private void MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite2CheckRequirementEnabledChecker24(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S88");
        }
        
        private void MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite2CheckRequirementEnabledChecker25(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S199");
        }
        
        private void MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite2RopQueryRowsResponseChecker12(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SETCOLUMNS,True,True" +
                    ",True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S245");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S245");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S245");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S245");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S245");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S245");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S245");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S245");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S245");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S245");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R472, MS-OXCTABL_R427, MS-OXCTABL_R42" +
                        "6, MS-OXCTABL_R116");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R472");
            this.Manager.Checkpoint("MS-OXCTABL_R427");
            this.Manager.Checkpoint("MS-OXCTABL_R426");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
        }
        
        private void MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite2RopSeekRowResponseChecker12(bool wantRowMovedCountout, bool enoughRow, bool hasSoughtLess, bool isActualRowsCount) {
            this.Manager.Comment("checking step \'event RopSeekRowResponse(True,False,True,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, wantRowMovedCountout, "wantRowMovedCountout of RopSeekRowResponse, state S389");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enoughRow, "enoughRow of RopSeekRowResponse, state S389");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, hasSoughtLess, "hasSoughtLess of RopSeekRowResponse, state S389");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isActualRowsCount, "isActualRowsCount of RopSeekRowResponse, state S389");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R154, MS-OXCTABL_R157, MS-OXCTABL_R163, M" +
                        "S-OXCTABL_R150, MS-OXCTABL_R497, MS-OXCTABL_R152");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R154");
            this.Manager.Checkpoint("MS-OXCTABL_R157");
            this.Manager.Checkpoint("MS-OXCTABL_R163");
            this.Manager.Checkpoint("MS-OXCTABL_R150");
            this.Manager.Checkpoint("MS-OXCTABL_R497");
            this.Manager.Checkpoint("MS-OXCTABL_R152");
        }
        
        private void MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite2CheckRequirementEnabledChecker26(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S199");
        }
        
        private void MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite2RopQueryRowsResponseChecker13(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SETCOLUMNS,True,True" +
                    ",True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S246");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S246");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S246");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S246");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S246");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S246");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S246");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S246");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S246");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S246");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R472, MS-OXCTABL_R427, MS-OXCTABL_R42" +
                        "6, MS-OXCTABL_R116, MS-OXCTABL_R610");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R472");
            this.Manager.Checkpoint("MS-OXCTABL_R427");
            this.Manager.Checkpoint("MS-OXCTABL_R426");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R610");
        }
        
        private void MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite2RopSeekRowResponseChecker13(bool wantRowMovedCountout, bool enoughRow, bool hasSoughtLess, bool isActualRowsCount) {
            this.Manager.Comment("checking step \'event RopSeekRowResponse(True,False,True,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, wantRowMovedCountout, "wantRowMovedCountout of RopSeekRowResponse, state S390");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enoughRow, "enoughRow of RopSeekRowResponse, state S390");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, hasSoughtLess, "hasSoughtLess of RopSeekRowResponse, state S390");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isActualRowsCount, "isActualRowsCount of RopSeekRowResponse, state S390");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R154, MS-OXCTABL_R157, MS-OXCTABL_R163, M" +
                        "S-OXCTABL_R150, MS-OXCTABL_R497, MS-OXCTABL_R152");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R154");
            this.Manager.Checkpoint("MS-OXCTABL_R157");
            this.Manager.Checkpoint("MS-OXCTABL_R163");
            this.Manager.Checkpoint("MS-OXCTABL_R150");
            this.Manager.Checkpoint("MS-OXCTABL_R497");
            this.Manager.Checkpoint("MS-OXCTABL_R152");
        }
        
        private void MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite2CheckRequirementEnabledChecker27(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S88");
        }
        
        private void MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite2CheckRequirementEnabledChecker28(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S200");
        }
        
        private void MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite2RopQueryRowsResponseChecker14(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SETCOLUMNS,True,True" +
                    ",True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S247");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S247");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S247");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S247");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S247");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S247");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S247");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S247");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S247");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S247");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R472, MS-OXCTABL_R427, MS-OXCTABL_R42" +
                        "6, MS-OXCTABL_R116");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R472");
            this.Manager.Checkpoint("MS-OXCTABL_R427");
            this.Manager.Checkpoint("MS-OXCTABL_R426");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
        }
        
        private void MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite2RopSeekRowResponseChecker14(bool wantRowMovedCountout, bool enoughRow, bool hasSoughtLess, bool isActualRowsCount) {
            this.Manager.Comment("checking step \'event RopSeekRowResponse(True,False,True,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, wantRowMovedCountout, "wantRowMovedCountout of RopSeekRowResponse, state S391");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enoughRow, "enoughRow of RopSeekRowResponse, state S391");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, hasSoughtLess, "hasSoughtLess of RopSeekRowResponse, state S391");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isActualRowsCount, "isActualRowsCount of RopSeekRowResponse, state S391");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R154, MS-OXCTABL_R157, MS-OXCTABL_R163, M" +
                        "S-OXCTABL_R150, MS-OXCTABL_R497, MS-OXCTABL_R152");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R154");
            this.Manager.Checkpoint("MS-OXCTABL_R157");
            this.Manager.Checkpoint("MS-OXCTABL_R163");
            this.Manager.Checkpoint("MS-OXCTABL_R150");
            this.Manager.Checkpoint("MS-OXCTABL_R497");
            this.Manager.Checkpoint("MS-OXCTABL_R152");
        }
        
        private void MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite2CheckRequirementEnabledChecker29(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S200");
        }
        
        private void MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite2RopQueryRowsResponseChecker15(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SETCOLUMNS,True,True" +
                    ",True,True,BOOKMARK_CURRENT,False)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S248");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S248");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S248");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S248");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S248");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S248");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S248");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S248");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(1)), queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S248");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S248");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R28, MS-OXCTABL_R726, MS-OXCTABL_R472, MS-OXCTABL_R427, MS-OXCTABL_R42" +
                        "6, MS-OXCTABL_R116, MS-OXCTABL_R610");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R28");
            this.Manager.Checkpoint("MS-OXCTABL_R726");
            this.Manager.Checkpoint("MS-OXCTABL_R472");
            this.Manager.Checkpoint("MS-OXCTABL_R427");
            this.Manager.Checkpoint("MS-OXCTABL_R426");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R610");
        }
        
        private void MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite2RopSeekRowResponseChecker15(bool wantRowMovedCountout, bool enoughRow, bool hasSoughtLess, bool isActualRowsCount) {
            this.Manager.Comment("checking step \'event RopSeekRowResponse(True,False,True,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, wantRowMovedCountout, "wantRowMovedCountout of RopSeekRowResponse, state S392");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enoughRow, "enoughRow of RopSeekRowResponse, state S392");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, hasSoughtLess, "hasSoughtLess of RopSeekRowResponse, state S392");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isActualRowsCount, "isActualRowsCount of RopSeekRowResponse, state S392");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R154, MS-OXCTABL_R157, MS-OXCTABL_R163, M" +
                        "S-OXCTABL_R150, MS-OXCTABL_R497, MS-OXCTABL_R152");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R154");
            this.Manager.Checkpoint("MS-OXCTABL_R157");
            this.Manager.Checkpoint("MS-OXCTABL_R163");
            this.Manager.Checkpoint("MS-OXCTABL_R150");
            this.Manager.Checkpoint("MS-OXCTABL_R497");
            this.Manager.Checkpoint("MS-OXCTABL_R152");
        }
        
        private void MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite2CheckMAPIHTTPTransportSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S5");
        }
        #endregion
        
        #region Test Starting in S6
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite3() {
            this.Manager.BeginTest("MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite3");
            this.Manager.Comment("reaching state \'S6\'");
            bool temp171;
            this.Manager.Comment("executing step \'call CheckMAPIHTTPTransportSupported(out _)\'");
            this.IMS_OXCTABLAdapterInstance.CheckMAPIHTTPTransportSupported(out temp171);
            this.Manager.AddReturn(CheckMAPIHTTPTransportSupportedInfo, null, temp171);
            this.Manager.Comment("reaching state \'S7\'");
            int temp178 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_SeekRowSuccess_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite3CheckMAPIHTTPTransportSupportedChecker)), new ExpectedReturn(S02_RowRops_SeekRowSuccess_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite3CheckMAPIHTTPTransportSupportedChecker1)));
            if ((temp178 == 0)) {
                this.Manager.Comment("reaching state \'S16\'");
                this.Manager.Comment("executing step \'call InitializeTable(HIERARCHY_TABLE)\'");
                this.IMS_OXCTABLAdapterInstance.InitializeTable(((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableType)(1)));
                this.Manager.Comment("reaching state \'S23\'");
                this.Manager.Comment("checking step \'return InitializeTable\'");
                this.Manager.Comment("reaching state \'S28\'");
                Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp172;
                this.Manager.Comment("executing step \'call RopSetColumns(1,False,False,False)\'");
                temp172 = this.IMS_OXCTABLAdapterInstance.RopSetColumns(1u, false, false, false);
                this.Manager.Checkpoint("MS-OXCTABL_R829");
                this.Manager.Checkpoint("MS-OXCTABL_R45");
                this.Manager.Comment("reaching state \'S33\'");
                this.Manager.Comment("checking step \'return RopSetColumns/success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp172, "return of RopSetColumns, state S33");
                this.Manager.Comment("reaching state \'S38\'");
                Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp173;
                this.Manager.Comment("executing step \'call RopQueryRows(Advance,True)\'");
                temp173 = this.IMS_OXCTABLAdapterInstance.RopQueryRows(((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), true);
                this.Manager.Checkpoint("MS-OXCTABL_R835");
                this.Manager.Comment("reaching state \'S43\'");
                this.Manager.Comment("checking step \'return RopQueryRows/success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp173, "return of RopQueryRows, state S43");
                this.Manager.Comment("reaching state \'S51\'");
                bool temp174;
                this.Manager.Comment("executing step \'call CheckRequirementEnabled(610,out _)\'");
                this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(610, out temp174);
                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp174);
                this.Manager.Comment("reaching state \'S59\'");
                int temp177 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_SeekRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite3CheckRequirementEnabledChecker)), new ExpectedReturn(S02_RowRops_SeekRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite3CheckRequirementEnabledChecker1)));
                if ((temp177 == 0)) {
                    this.Manager.Comment("reaching state \'S73\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_SeekRowSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite3RopQueryRowsResponseChecker))) != -1)) {
                        this.Manager.Comment("reaching state \'S89\'");
                        Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp175;
                        this.Manager.Comment("executing step \'call RopSeekRow(BOOKMARK_BEGINNING,True,True,True)\'");
                        temp175 = this.IMS_OXCTABLAdapterInstance.RopSeekRow(((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(0)), true, true, true);
                        this.Manager.Checkpoint("MS-OXCTABL_R848");
                        this.Manager.Comment("reaching state \'S117\'");
                        this.Manager.Comment("checking step \'return RopSeekRow/success\'");
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp175, "return of RopSeekRow, state S117");
                        this.Manager.Comment("reaching state \'S145\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_SeekRowSuccess_TestSuite.RopSeekRowResponseInfo, null, new RopSeekRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite3RopSeekRowResponseChecker))) != -1)) {
                            this.Manager.Comment("reaching state \'S173\'");
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_SeekRowSuccess_TestSuite.RopSeekRowResponseInfo, null, new RopSeekRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite3RopSeekRowResponseChecker)));
                        }
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_SeekRowSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite3RopQueryRowsResponseChecker)));
                    }
                    goto label48;
                }
                if ((temp177 == 1)) {
                    this.Manager.Comment("reaching state \'S74\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_SeekRowSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite3RopQueryRowsResponseChecker1))) != -1)) {
                        this.Manager.Comment("reaching state \'S90\'");
                        Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp176;
                        this.Manager.Comment("executing step \'call RopSeekRow(BOOKMARK_BEGINNING,True,True,True)\'");
                        temp176 = this.IMS_OXCTABLAdapterInstance.RopSeekRow(((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(0)), true, true, true);
                        this.Manager.Checkpoint("MS-OXCTABL_R848");
                        this.Manager.Comment("reaching state \'S118\'");
                        this.Manager.Comment("checking step \'return RopSeekRow/success\'");
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp176, "return of RopSeekRow, state S118");
                        this.Manager.Comment("reaching state \'S146\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_SeekRowSuccess_TestSuite.RopSeekRowResponseInfo, null, new RopSeekRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite3RopSeekRowResponseChecker1))) != -1)) {
                            this.Manager.Comment("reaching state \'S174\'");
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_SeekRowSuccess_TestSuite.RopSeekRowResponseInfo, null, new RopSeekRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite3RopSeekRowResponseChecker1)));
                        }
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_SeekRowSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite3RopQueryRowsResponseChecker1)));
                    }
                    goto label48;
                }
                throw new InvalidOperationException("never reached");
            label48:
;
                goto label49;
            }
            if ((temp178 == 1)) {
                this.Manager.Comment("reaching state \'S17\'");
                goto label49;
            }
            throw new InvalidOperationException("never reached");
        label49:
;
            this.Manager.EndTest();
        }
        
        private void MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite3CheckMAPIHTTPTransportSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S7");
        }
        
        private void MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite3CheckRequirementEnabledChecker(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S59");
        }
        
        private void MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite3RopQueryRowsResponseChecker(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SETCOLUMNS,True,True" +
                    ",True,True,BOOKMARK_END,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S73");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S73");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S73");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S73");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S73");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S73");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S73");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S73");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_END, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S73");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S73");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R29, MS-OXCTABL_R725, MS-OXCTABL_R472, MS-OXCTABL_R427, MS-OXCTABL_R42" +
                        "6, MS-OXCTABL_R116, MS-OXCTABL_R610");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R29");
            this.Manager.Checkpoint("MS-OXCTABL_R725");
            this.Manager.Checkpoint("MS-OXCTABL_R472");
            this.Manager.Checkpoint("MS-OXCTABL_R427");
            this.Manager.Checkpoint("MS-OXCTABL_R426");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R610");
        }
        
        private void MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite3RopSeekRowResponseChecker(bool wantRowMovedCountout, bool enoughRow, bool hasSoughtLess, bool isActualRowsCount) {
            this.Manager.Comment("checking step \'event RopSeekRowResponse(True,True,False,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, wantRowMovedCountout, "wantRowMovedCountout of RopSeekRowResponse, state S145");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enoughRow, "enoughRow of RopSeekRowResponse, state S145");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, hasSoughtLess, "hasSoughtLess of RopSeekRowResponse, state S145");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isActualRowsCount, "isActualRowsCount of RopSeekRowResponse, state S145");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R155, MS-OXCTABL_R496, MS-OXCTABL_R141");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R155");
            this.Manager.Checkpoint("MS-OXCTABL_R496");
            this.Manager.Checkpoint("MS-OXCTABL_R141");
        }
        
        private void MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite3CheckRequirementEnabledChecker1(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S59");
        }
        
        private void MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite3RopQueryRowsResponseChecker1(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SETCOLUMNS,True,True" +
                    ",True,True,BOOKMARK_END,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S74");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S74");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S74");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S74");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S74");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S74");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S74");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S74");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_END, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S74");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S74");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R29, MS-OXCTABL_R725, MS-OXCTABL_R472, MS-OXCTABL_R427, MS-OXCTABL_R42" +
                        "6, MS-OXCTABL_R116");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R29");
            this.Manager.Checkpoint("MS-OXCTABL_R725");
            this.Manager.Checkpoint("MS-OXCTABL_R472");
            this.Manager.Checkpoint("MS-OXCTABL_R427");
            this.Manager.Checkpoint("MS-OXCTABL_R426");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
        }
        
        private void MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite3RopSeekRowResponseChecker1(bool wantRowMovedCountout, bool enoughRow, bool hasSoughtLess, bool isActualRowsCount) {
            this.Manager.Comment("checking step \'event RopSeekRowResponse(True,True,False,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, wantRowMovedCountout, "wantRowMovedCountout of RopSeekRowResponse, state S146");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enoughRow, "enoughRow of RopSeekRowResponse, state S146");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, hasSoughtLess, "hasSoughtLess of RopSeekRowResponse, state S146");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isActualRowsCount, "isActualRowsCount of RopSeekRowResponse, state S146");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R155, MS-OXCTABL_R496, MS-OXCTABL_R141");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R155");
            this.Manager.Checkpoint("MS-OXCTABL_R496");
            this.Manager.Checkpoint("MS-OXCTABL_R141");
        }
        
        private void MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite3CheckMAPIHTTPTransportSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S7");
        }
        #endregion
        
        #region Test Starting in S8
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        public void MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite4() {
            this.Manager.BeginTest("MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite4");
            this.Manager.Comment("reaching state \'S8\'");
            bool temp179;
            this.Manager.Comment("executing step \'call CheckMAPIHTTPTransportSupported(out _)\'");
            this.IMS_OXCTABLAdapterInstance.CheckMAPIHTTPTransportSupported(out temp179);
            this.Manager.AddReturn(CheckMAPIHTTPTransportSupportedInfo, null, temp179);
            this.Manager.Comment("reaching state \'S9\'");
            int temp186 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_SeekRowSuccess_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite4CheckMAPIHTTPTransportSupportedChecker)), new ExpectedReturn(S02_RowRops_SeekRowSuccess_TestSuite.CheckMAPIHTTPTransportSupportedInfo, null, new CheckMAPIHTTPTransportSupportedDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite4CheckMAPIHTTPTransportSupportedChecker1)));
            if ((temp186 == 0)) {
                this.Manager.Comment("reaching state \'S18\'");
                this.Manager.Comment("executing step \'call InitializeTable(RULES_TABLE)\'");
                this.IMS_OXCTABLAdapterInstance.InitializeTable(Microsoft.Protocols.TestSuites.MS_OXCTABL.TableType.RULES_TABLE);
                this.Manager.Comment("reaching state \'S24\'");
                this.Manager.Comment("checking step \'return InitializeTable\'");
                this.Manager.Comment("reaching state \'S29\'");
                Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp180;
                this.Manager.Comment("executing step \'call RopSetColumns(1,False,False,False)\'");
                temp180 = this.IMS_OXCTABLAdapterInstance.RopSetColumns(1u, false, false, false);
                this.Manager.Checkpoint("MS-OXCTABL_R830");
                this.Manager.Checkpoint("MS-OXCTABL_R45");
                this.Manager.Comment("reaching state \'S34\'");
                this.Manager.Comment("checking step \'return RopSetColumns/success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp180, "return of RopSetColumns, state S34");
                this.Manager.Comment("reaching state \'S39\'");
                Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp181;
                this.Manager.Comment("executing step \'call RopQueryRows(Advance,True)\'");
                temp181 = this.IMS_OXCTABLAdapterInstance.RopQueryRows(((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), true);
                this.Manager.Checkpoint("MS-OXCTABL_R836");
                this.Manager.Comment("reaching state \'S44\'");
                this.Manager.Comment("checking step \'return RopQueryRows/success\'");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp181, "return of RopQueryRows, state S44");
                this.Manager.Comment("reaching state \'S52\'");
                bool temp182;
                this.Manager.Comment("executing step \'call CheckRequirementEnabled(610,out _)\'");
                this.IMS_OXCTABLAdapterInstance.CheckRequirementEnabled(610, out temp182);
                this.Manager.AddReturn(CheckRequirementEnabledInfo, null, temp182);
                this.Manager.Comment("reaching state \'S60\'");
                int temp185 = this.Manager.ExpectReturn(this.QuiescenceTimeout, true, new ExpectedReturn(S02_RowRops_SeekRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite4CheckRequirementEnabledChecker)), new ExpectedReturn(S02_RowRops_SeekRowSuccess_TestSuite.CheckRequirementEnabledInfo, null, new CheckRequirementEnabledDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite4CheckRequirementEnabledChecker1)));
                if ((temp185 == 0)) {
                    this.Manager.Comment("reaching state \'S75\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_SeekRowSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite4RopQueryRowsResponseChecker))) != -1)) {
                        this.Manager.Comment("reaching state \'S91\'");
                        Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp183;
                        this.Manager.Comment("executing step \'call RopSeekRow(BOOKMARK_BEGINNING,True,True,True)\'");
                        temp183 = this.IMS_OXCTABLAdapterInstance.RopSeekRow(((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(0)), true, true, true);
                        this.Manager.Checkpoint("MS-OXCTABL_R849");
                        this.Manager.Comment("reaching state \'S119\'");
                        this.Manager.Comment("checking step \'return RopSeekRow/success\'");
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp183, "return of RopSeekRow, state S119");
                        this.Manager.Comment("reaching state \'S147\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_SeekRowSuccess_TestSuite.RopSeekRowResponseInfo, null, new RopSeekRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite4RopSeekRowResponseChecker))) != -1)) {
                            this.Manager.Comment("reaching state \'S175\'");
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_SeekRowSuccess_TestSuite.RopSeekRowResponseInfo, null, new RopSeekRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite4RopSeekRowResponseChecker)));
                        }
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_SeekRowSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite4RopQueryRowsResponseChecker)));
                    }
                    goto label50;
                }
                if ((temp185 == 1)) {
                    this.Manager.Comment("reaching state \'S76\'");
                    if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_SeekRowSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite4RopQueryRowsResponseChecker1))) != -1)) {
                        this.Manager.Comment("reaching state \'S92\'");
                        Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues temp184;
                        this.Manager.Comment("executing step \'call RopSeekRow(BOOKMARK_BEGINNING,True,True,True)\'");
                        temp184 = this.IMS_OXCTABLAdapterInstance.RopSeekRow(((Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType)(0)), true, true, true);
                        this.Manager.Checkpoint("MS-OXCTABL_R849");
                        this.Manager.Comment("reaching state \'S120\'");
                        this.Manager.Comment("checking step \'return RopSeekRow/success\'");
                        TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopReturnValues)(0)), temp184, "return of RopSeekRow, state S120");
                        this.Manager.Comment("reaching state \'S148\'");
                        if ((this.Manager.ExpectEvent(this.QuiescenceTimeout, true, new ExpectedEvent(S02_RowRops_SeekRowSuccess_TestSuite.RopSeekRowResponseInfo, null, new RopSeekRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite4RopSeekRowResponseChecker1))) != -1)) {
                            this.Manager.Comment("reaching state \'S176\'");
                        }
                        else {
                            this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_SeekRowSuccess_TestSuite.RopSeekRowResponseInfo, null, new RopSeekRowResponseDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite4RopSeekRowResponseChecker1)));
                        }
                    }
                    else {
                        this.Manager.CheckObservationTimeout(false, new ExpectedEvent(S02_RowRops_SeekRowSuccess_TestSuite.RopQueryRowsResponseInfo, null, new RopQueryRowsResponseDelegate1(this.MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite4RopQueryRowsResponseChecker1)));
                    }
                    goto label50;
                }
                throw new InvalidOperationException("never reached");
            label50:
;
                goto label51;
            }
            if ((temp186 == 1)) {
                this.Manager.Comment("reaching state \'S19\'");
                goto label51;
            }
            throw new InvalidOperationException("never reached");
        label51:
;
            this.Manager.EndTest();
        }
        
        private void MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite4CheckMAPIHTTPTransportSupportedChecker(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S9");
        }
        
        private void MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite4CheckRequirementEnabledChecker(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out True]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enabled, "enabled of CheckRequirementEnabled, state S60");
        }
        
        private void MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite4RopQueryRowsResponseChecker(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SETCOLUMNS,True,True" +
                    ",True,True,BOOKMARK_END,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S75");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S75");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S75");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S75");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S75");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S75");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S75");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S75");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_END, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S75");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S75");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R29, MS-OXCTABL_R725, MS-OXCTABL_R472, MS-OXCTABL_R427, MS-OXCTABL_R42" +
                        "6, MS-OXCTABL_R116, MS-OXCTABL_R610");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R29");
            this.Manager.Checkpoint("MS-OXCTABL_R725");
            this.Manager.Checkpoint("MS-OXCTABL_R472");
            this.Manager.Checkpoint("MS-OXCTABL_R427");
            this.Manager.Checkpoint("MS-OXCTABL_R426");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
            this.Manager.Checkpoint("MS-OXCTABL_R610");
        }
        
        private void MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite4RopSeekRowResponseChecker(bool wantRowMovedCountout, bool enoughRow, bool hasSoughtLess, bool isActualRowsCount) {
            this.Manager.Comment("checking step \'event RopSeekRowResponse(True,True,False,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, wantRowMovedCountout, "wantRowMovedCountout of RopSeekRowResponse, state S147");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enoughRow, "enoughRow of RopSeekRowResponse, state S147");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, hasSoughtLess, "hasSoughtLess of RopSeekRowResponse, state S147");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isActualRowsCount, "isActualRowsCount of RopSeekRowResponse, state S147");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R155, MS-OXCTABL_R496, MS-OXCTABL_R141");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R155");
            this.Manager.Checkpoint("MS-OXCTABL_R496");
            this.Manager.Checkpoint("MS-OXCTABL_R141");
        }
        
        private void MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite4CheckRequirementEnabledChecker1(bool enabled) {
            this.Manager.Comment("checking step \'return CheckRequirementEnabled/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, enabled, "enabled of CheckRequirementEnabled, state S60");
        }
        
        private void MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite4RopQueryRowsResponseChecker1(Microsoft.Protocols.TestSuites.Common.QueryRowsFlags queryRowFlags, bool bForwardRead, bool bZeroRow, Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType ropType, bool bIsCorrectRowCount, bool bCursorPositionChanged, bool bIsLatestRopData, bool bIsLastSuccessRopData, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType queryRowOrigin, bool isRequestCountTooLarger) {
            this.Manager.Comment("checking step \'event RopQueryRowsResponse(Advance,True,False,SETCOLUMNS,True,True" +
                    ",True,True,BOOKMARK_END,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.Common.QueryRowsFlags>(this.Manager, ((Microsoft.Protocols.TestSuites.Common.QueryRowsFlags)(0)), queryRowFlags, "queryRowFlags of RopQueryRowsResponse, state S76");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bForwardRead, "bForwardRead of RopQueryRowsResponse, state S76");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, bZeroRow, "bZeroRow of RopQueryRowsResponse, state S76");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType>(this.Manager, ((Microsoft.Protocols.TestSuites.MS_OXCTABL.TableRopType)(0)), ropType, "ropType of RopQueryRowsResponse, state S76");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsCorrectRowCount, "bIsCorrectRowCount of RopQueryRowsResponse, state S76");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bCursorPositionChanged, "bCursorPositionChanged of RopQueryRowsResponse, state S76");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLatestRopData, "bIsLatestRopData of RopQueryRowsResponse, state S76");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, bIsLastSuccessRopData, "bIsLastSuccessRopData of RopQueryRowsResponse, state S76");
                TestManagerHelpers.AssertAreEqual<Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType>(this.Manager, Microsoft.Protocols.TestSuites.MS_OXCTABL.BookmarkType.BOOKMARK_END, queryRowOrigin, "queryRowOrigin of RopQueryRowsResponse, state S76");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isRequestCountTooLarger, "isRequestCountTooLarger of RopQueryRowsResponse, state S76");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R468, MS-OXCTABL_R118, MS-OXCTABL_R462, M" +
                        "S-OXCTABL_R29, MS-OXCTABL_R725, MS-OXCTABL_R472, MS-OXCTABL_R427, MS-OXCTABL_R42" +
                        "6, MS-OXCTABL_R116");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R468");
            this.Manager.Checkpoint("MS-OXCTABL_R118");
            this.Manager.Checkpoint("MS-OXCTABL_R462");
            this.Manager.Checkpoint("MS-OXCTABL_R29");
            this.Manager.Checkpoint("MS-OXCTABL_R725");
            this.Manager.Checkpoint("MS-OXCTABL_R472");
            this.Manager.Checkpoint("MS-OXCTABL_R427");
            this.Manager.Checkpoint("MS-OXCTABL_R426");
            this.Manager.Checkpoint("MS-OXCTABL_R116");
        }
        
        private void MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite4RopSeekRowResponseChecker1(bool wantRowMovedCountout, bool enoughRow, bool hasSoughtLess, bool isActualRowsCount) {
            this.Manager.Comment("checking step \'event RopSeekRowResponse(True,True,False,True)\'");
            try {
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, wantRowMovedCountout, "wantRowMovedCountout of RopSeekRowResponse, state S148");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, enoughRow, "enoughRow of RopSeekRowResponse, state S148");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, hasSoughtLess, "hasSoughtLess of RopSeekRowResponse, state S148");
                TestManagerHelpers.AssertAreEqual<bool>(this.Manager, true, isActualRowsCount, "isActualRowsCount of RopSeekRowResponse, state S148");
            }
            catch (TransactionFailedException ) {
                this.Manager.Comment("This step would have covered MS-OXCTABL_R155, MS-OXCTABL_R496, MS-OXCTABL_R141");
                throw;
            }
            this.Manager.Checkpoint("MS-OXCTABL_R155");
            this.Manager.Checkpoint("MS-OXCTABL_R496");
            this.Manager.Checkpoint("MS-OXCTABL_R141");
        }
        
        private void MSOXCTABL_S02_RowRops_SeekRowSuccess_TestSuite4CheckMAPIHTTPTransportSupportedChecker1(bool isSupported) {
            this.Manager.Comment("checking step \'return CheckMAPIHTTPTransportSupported/[out False]\'");
            TestManagerHelpers.AssertAreEqual<bool>(this.Manager, false, isSupported, "isSupported of CheckMAPIHTTPTransportSupported, state S9");
        }
        #endregion
    }
}
